{"version":3,"file":"admin.js","sources":["../src/common/components/shared/ConfirmModal.tsx","../src/admin/components/shared/GenericManagementPage.tsx","../src/admin/components/sections/GeneralSettingsSection.tsx","../src/common/utils/formValidators.ts","../src/admin/components/forms/AddPlatformForm.tsx","../src/admin/components/shared/GenericPlatformListItem.tsx","../src/admin/components/sections/PlatformManagementSection.tsx","../src/admin/components/items/WithdrawalRequestItem.tsx","../src/admin/components/sections/RequestManagementSection.tsx","../src/admin/components/sections/DepositRecordManagementSection.tsx","../src/admin/components/forms/AddDepositPlatformForm.tsx","../src/admin/components/sections/DepositPlatformManagementSection.tsx","../src/common/types/PlatformStructure.ts","../src/common/utils/PlatformFieldManager.ts","../src/admin/utils/platformOperations.ts","../src/common/types/services.ts","../src/common/services/WithdrawalService.ts","../src/common/services/DepositService.ts","../src/common/services/PlatformService.ts","../src/common/services/SettingsService.ts","../src/admin/components/UnifiedManagementPage.tsx","../src/common/utils/PlatformValidation.ts","../src/common/models/WithdrawalPlatform.ts","../src/common/types/index.ts","../src/common/models/WithdrawalRequest.ts","../src/common/models/DepositPlatform.ts","../src/common/models/DepositRecord.ts","../src/admin/index.ts"],"sourcesContent":["import Modal, { IInternalModalAttrs } from 'flarum/common/components/Modal';\r\nimport Button from 'flarum/common/components/Button';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport app from 'flarum/common/app';\r\n\r\nexport interface ConfirmModalAttrs extends IInternalModalAttrs {\r\n  title: string;\r\n  message: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  onConfirm: () => void;\r\n  onCancel: () => void;\r\n  dangerous?: boolean;\r\n  icon?: string;\r\n}\r\n\r\n/**\r\n * 通用确认模态框组件\r\n * 用于替代重复的删除确认、状态变更确认等模态框\r\n */\r\nexport default class ConfirmModal extends Modal<ConfirmModalAttrs> {\r\n  className() {\r\n    return 'ConfirmModal';\r\n  }\r\n\r\n  title() {\r\n    const { title, dangerous = false, icon: modalIcon = dangerous ? 'fas fa-exclamation-triangle' : 'fas fa-question-circle' } = this.attrs;\r\n    \r\n    return (\r\n      <span>\r\n        {modalIcon && (\r\n          <span className={`ConfirmModal-icon ${dangerous ? 'dangerous' : ''}`}>\r\n            {icon(modalIcon)}\r\n          </span>\r\n        )}\r\n        {title}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  content() {\r\n    const { \r\n      message, \r\n      confirmText = 'Confirm',\r\n      cancelText = 'Cancel',\r\n      onConfirm, \r\n      onCancel, \r\n      dangerous = false\r\n    } = this.attrs;\r\n\r\n    return (\r\n      <div className=\"Modal-body\">\r\n        <div className=\"ConfirmModal-message\">\r\n          {message}\r\n        </div>\r\n        \r\n        <div className=\"Form-group\">\r\n          <div className=\"ButtonGroup\">\r\n            <Button\r\n              className=\"Button\"\r\n              onclick={() => {\r\n                onCancel();\r\n                app.modal.close();\r\n              }}\r\n            >\r\n              {cancelText}\r\n            </Button>\r\n            <Button\r\n              className={`Button Button--${dangerous ? 'danger' : 'primary'}`}\r\n              onclick={() => {\r\n                onConfirm();\r\n                app.modal.close();\r\n              }}\r\n            >\r\n              {confirmText}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\r\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport ConfirmModal from '../../../common/components/shared/ConfirmModal';\r\n\r\n// Generic interfaces for platform management\r\nexport interface GenericPlatform {\r\n  id?: () => string | number;\r\n  name?: () => string;\r\n  isActive?: () => boolean;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface GenericTransaction {\r\n  id?: () => string | number;\r\n  status?: () => string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface PlatformOperations<T extends GenericPlatform> {\r\n  create: (data: any) => Promise<T>;\r\n  toggleStatus: (platform: T) => Promise<void>;\r\n  delete: (platform: T) => Promise<void>;\r\n  load: () => Promise<T[]>;\r\n}\r\n\r\nexport interface TransactionOperations<T extends GenericTransaction> {\r\n  updateStatus: (transaction: T, status: string) => Promise<void>;\r\n  load: () => Promise<T[]>;\r\n}\r\n\r\nexport interface TabConfiguration {\r\n  key: string;\r\n  label: string;\r\n  component: Mithril.ComponentTypes<any>;\r\n  props?: () => any;\r\n}\r\n\r\nexport interface GenericManagementPageConfig<\r\n  TPlatform extends GenericPlatform,\r\n  TTransaction extends GenericTransaction\r\n> {\r\n  pageTitle: string;\r\n  extensionId: string;\r\n  \r\n  // Platform configuration\r\n  platformOperations: PlatformOperations<TPlatform>;\r\n  transactionOperations?: TransactionOperations<TTransaction>;\r\n  \r\n  // Tab configuration\r\n  tabs: TabConfiguration[];\r\n  \r\n  // Optional settings section\r\n  settingsComponent?: Mithril.ComponentTypes<any>;\r\n  \r\n  // Translation prefixes\r\n  translations: {\r\n    platformPrefix: string;\r\n    transactionPrefix?: string;\r\n  };\r\n}\r\n\r\nexport default abstract class GenericManagementPage<\r\n  TPlatform extends GenericPlatform,\r\n  TTransaction extends GenericTransaction\r\n> extends ExtensionPage {\r\n  \r\n  // State management\r\n  protected platforms: TPlatform[] = [];\r\n  protected transactions: TTransaction[] = [];\r\n  loading = true;\r\n  protected submittingPlatform = false;\r\n  protected activeTab: string;\r\n  \r\n  // Abstract configuration - must be implemented by subclasses\r\n  protected abstract getConfig(): GenericManagementPageConfig<TPlatform, TTransaction>;\r\n  \r\n  constructor() {\r\n    super();\r\n    const config = this.getConfig();\r\n    this.activeTab = config.tabs[0]?.key || '';\r\n  }\r\n\r\n  oninit(vnode: Mithril.VnodeDOM) {\r\n    super.oninit(vnode);\r\n    this.loadData();\r\n  }\r\n\r\n  content() {\r\n    if (this.loading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n\r\n    const config = this.getConfig();\r\n\r\n    return (\r\n      <div className={`${config.extensionId}ManagementPage`}>\r\n        <div className=\"container\">\r\n          <h2>{config.pageTitle}</h2>\r\n          \r\n          {config.settingsComponent && (\r\n            <div className=\"SettingsSection\">\r\n              {m(config.settingsComponent, { \r\n                onSettingChange: this.saveSetting.bind(this) \r\n              })}\r\n            </div>\r\n          )}\r\n          \r\n          {config.tabs.length > 1 && (\r\n            <div className=\"AdminTabs\">\r\n              <div className=\"AdminTabs-nav\">\r\n                {config.tabs.map(tab => (\r\n                  <button \r\n                    key={tab.key}\r\n                    className={`AdminTabs-tab ${this.activeTab === tab.key ? 'active' : ''}`}\r\n                    onclick={() => { this.activeTab = tab.key; }}\r\n                  >\r\n                    {tab.label}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n              \r\n              <div className=\"AdminTabs-content\">\r\n                {this.renderActiveTabContent()}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {config.tabs.length === 1 && (\r\n            <div className=\"SingleTabContent\">\r\n              {this.renderActiveTabContent()}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  protected renderActiveTabContent(): Mithril.Children {\r\n    const config = this.getConfig();\r\n    const activeTab = config.tabs.find(tab => tab.key === this.activeTab);\r\n    \r\n    if (!activeTab) return null;\r\n\r\n    const props = {\r\n      // Common platform management props\r\n      platforms: this.platforms,\r\n      transactions: this.transactions,\r\n      submittingPlatform: this.submittingPlatform,\r\n      \r\n      // Platform management callbacks\r\n      onAddPlatform: this.addPlatform.bind(this),\r\n      onTogglePlatformStatus: this.togglePlatformStatus.bind(this),\r\n      onDeletePlatform: this.deletePlatform.bind(this),\r\n      \r\n      // Transaction management callbacks\r\n      ...(config.transactionOperations && {\r\n        onUpdateTransactionStatus: this.updateTransactionStatus.bind(this),\r\n      }),\r\n      \r\n      // Additional props from tab configuration\r\n      ...(activeTab.props ? activeTab.props() : {})\r\n    };\r\n\r\n    return m(activeTab.component, props);\r\n  }\r\n\r\n  // Generic platform management methods\r\n  protected async addPlatform(formData: any): Promise<void> {\r\n    if (this.submittingPlatform) return;\r\n\r\n    this.submittingPlatform = true;\r\n    const config = this.getConfig();\r\n\r\n    try {\r\n      await config.platformOperations.create(formData);\r\n      await this.loadPlatforms();\r\n    } catch (error) {\r\n      console.error('Error adding platform:', error);\r\n      // Error handling is done by the platform operations\r\n    } finally {\r\n      this.submittingPlatform = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  protected async togglePlatformStatus(platform: TPlatform): Promise<void> {\r\n    const config = this.getConfig();\r\n    try {\r\n      await config.platformOperations.toggleStatus(platform);\r\n      await this.loadPlatforms();\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error toggling platform status:', error);\r\n    }\r\n  }\r\n\r\n  protected deletePlatform(platform: TPlatform): void {\r\n    const config = this.getConfig();\r\n    const platformName = (typeof platform.name === 'function' ? platform.name() : platform.name) || 'Unknown Platform';\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_title`),\r\n      message: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_message`, { name: platformName }),\r\n      confirmText: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_button`),\r\n      cancelText: app.translator.trans(`${config.translations.platformPrefix}.delete_cancel_button`),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          await config.platformOperations.delete(platform);\r\n          await this.loadPlatforms();\r\n          m.redraw();\r\n          \r\n          app.alerts.show(\r\n            { type: 'success', dismissible: true },\r\n            app.translator.trans(`${config.translations.platformPrefix}.delete_success`)\r\n          );\r\n        } catch (error) {\r\n          console.error('Error deleting platform:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans(`${config.translations.platformPrefix}.delete_error`)\r\n          );\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Generic transaction management methods\r\n  protected async updateTransactionStatus(transaction: TTransaction, status: string): Promise<void> {\r\n    const config = this.getConfig();\r\n    if (!config.transactionOperations) return;\r\n\r\n    try {\r\n      await config.transactionOperations.updateStatus(transaction, status);\r\n      await this.loadTransactions();\r\n      \r\n      const prefix = config.translations.transactionPrefix || config.translations.platformPrefix;\r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`${prefix}.${status}_success`)\r\n      );\r\n    } catch (error) {\r\n      console.error('Error updating transaction:', error);\r\n      const prefix = config.translations.transactionPrefix || config.translations.platformPrefix;\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans(`${prefix}.update_error`)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Data loading methods\r\n  protected async loadData(): Promise<void> {\r\n    try {\r\n      await this.loadPlatforms();\r\n      if (this.getConfig().transactionOperations) {\r\n        await this.loadTransactions();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n    } finally {\r\n      this.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  protected async loadPlatforms(): Promise<void> {\r\n    const config = this.getConfig();\r\n    try {\r\n      this.platforms = await config.platformOperations.load();\r\n      console.log('Loaded platforms:', this.platforms);\r\n    } catch (error) {\r\n      console.error('Error loading platforms:', error);\r\n      this.platforms = [];\r\n    }\r\n  }\r\n\r\n  protected async loadTransactions(): Promise<void> {\r\n    const config = this.getConfig();\r\n    if (!config.transactionOperations) return;\r\n\r\n    try {\r\n      this.transactions = await config.transactionOperations.load();\r\n      console.log('Loaded transactions:', this.transactions);\r\n    } catch (error) {\r\n      console.error('Error loading transactions:', error);\r\n      this.transactions = [];\r\n    }\r\n  }\r\n\r\n  // Settings management using SettingsService\r\n  protected async saveSetting(key: string, value: string): Promise<void> {\r\n    try {\r\n      // Import SettingsService dynamically to avoid circular dependencies\r\n      const { settingsService } = await import('../../../common/services/SettingsService');\r\n      await settingsService.saveSetting(key, value);\r\n      \r\n    } catch (error) {\r\n      console.error('Error saving setting:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : 'Failed to save setting'\r\n      );\r\n    }\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport withAttr from 'flarum/common/utils/withAttr';\r\nimport type Mithril from 'mithril';\r\n\r\nexport interface GeneralSettingsSectionAttrs {\r\n  onSettingChange: (key: string, value: string) => void;\r\n}\r\n\r\nexport default class GeneralSettingsSection extends Component<GeneralSettingsSectionAttrs> {\r\n  view(): Mithril.Children {\r\n    return (\r\n      <div className=\"WithdrawalManagementPage-section\">\r\n        <h3>General Settings</h3>\r\n        \r\n        <div className=\"Form\">\r\n          <div className=\"Form-group\">\r\n            <label>{app.translator.trans('funds.admin.settings.money_icon_url')}</label>\r\n            <input\r\n              type=\"url\"\r\n              className=\"FormControl\"\r\n              placeholder=\"https://i.mji.rip/2025/08/28/cd18932c68e9bbee9502b1fb6317cba9.png\"\r\n              value={app.forum.attribute('wusong8899-funds.moneyIconUrl') || ''}\r\n              oninput={withAttr('value', (value: string) => \r\n                this.attrs.onSettingChange('wusong8899-funds.moneyIconUrl', value)\r\n              )}\r\n            />\r\n            <small className=\"helpText\">{app.translator.trans('funds.admin.settings.money_icon_url_help')}</small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/common/app';\r\n\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n}\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  firstErrorMessage?: string;\r\n}\r\n\r\n/**\r\n * 通用表单验证工具\r\n * 统一提款和存款平台表单的验证逻辑\r\n */\r\nexport class FormValidator {\r\n  private errors: ValidationError[] = [];\r\n\r\n  /**\r\n   * 验证必填字段\r\n   */\r\n  required(value: any, fieldName: string, displayName?: string): this {\r\n    if (!value || (typeof value === 'string' && value.trim() === '')) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message: `${displayName || fieldName} is required`\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证最小长度\r\n   */\r\n  minLength(value: string, minLength: number, fieldName: string, displayName?: string): this {\r\n    if (value && value.length < minLength) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message: `${displayName || fieldName} must be at least ${minLength} characters`\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证数字范围\r\n   */\r\n  numberRange(value: string | number, min?: number, max?: number, fieldName?: string, displayName?: string): this {\r\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\r\n    \r\n    if (isNaN(numValue)) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be a valid number`\r\n      });\r\n      return this;\r\n    }\r\n\r\n    if (min !== undefined && numValue < min) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be at least ${min}`\r\n      });\r\n    }\r\n\r\n    if (max !== undefined && numValue > max) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be at most ${max}`\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证URL格式\r\n   */\r\n  url(value: string, fieldName: string, displayName?: string): this {\r\n    if (value && value.trim()) {\r\n      try {\r\n        const _url = new URL(value);\r\n        // URL is valid, no action needed\r\n        void _url; // Explicit void to indicate we don't need the result\r\n      } catch {\r\n        this.errors.push({\r\n          field: fieldName,\r\n          message: `${displayName || fieldName} must be a valid URL`\r\n        });\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 自定义验证规则\r\n   */\r\n  custom(condition: boolean, fieldName: string, message: string): this {\r\n    if (!condition) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 获取验证结果\r\n   */\r\n  getResult(): ValidationResult {\r\n    const isValid = this.errors.length === 0;\r\n    return {\r\n      isValid,\r\n      errors: this.errors,\r\n      firstErrorMessage: this.errors.length > 0 ? this.errors[0].message : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重置验证状态\r\n   */\r\n  reset(): this {\r\n    this.errors = [];\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * 提款平台表单验证\r\n */\r\nexport function validateWithdrawalPlatform(data: {\r\n  name: string;\r\n  symbol: string;\r\n  network?: string;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  fee: string;\r\n  iconUrl?: string;\r\n}): ValidationResult {\r\n  const validator = new FormValidator();\r\n\r\n  validator\r\n    .required(data.name, 'name', 'Platform Name')\r\n    .required(data.symbol, 'symbol', 'Currency Symbol')\r\n    .minLength(data.symbol, 1, 'symbol', 'Currency Symbol')\r\n    .numberRange(data.minAmount, 0, undefined, 'minAmount', 'Minimum Amount')\r\n    .numberRange(data.fee, 0, undefined, 'fee', 'Fee');\r\n\r\n  if (data.maxAmount) {\r\n    validator.numberRange(data.maxAmount, parseFloat(data.minAmount) || 0, undefined, 'maxAmount', 'Maximum Amount');\r\n  }\r\n\r\n  if (data.iconUrl) {\r\n    validator.url(data.iconUrl, 'iconUrl', 'Icon URL');\r\n  }\r\n\r\n  return validator.getResult();\r\n}\r\n\r\n/**\r\n * 存款平台表单验证\r\n */\r\nexport function validateDepositPlatform(data: {\r\n  name: string;\r\n  symbol: string;\r\n  network?: string;\r\n  address: string;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  qrCodeImageUrl?: string;\r\n  iconUrl?: string;\r\n}): ValidationResult {\r\n  const validator = new FormValidator();\r\n\r\n  validator\r\n    .required(data.name, 'name', 'Platform Name')\r\n    .required(data.symbol, 'symbol', 'Currency Symbol')\r\n    .required(data.address, 'address', 'Deposit Address')\r\n    .minLength(data.symbol, 1, 'symbol', 'Currency Symbol')\r\n    .minLength(data.address, 10, 'address', 'Deposit Address');\r\n\r\n  if (data.minAmount) {\r\n    validator.numberRange(data.minAmount, 0, undefined, 'minAmount', 'Minimum Amount');\r\n  }\r\n\r\n  if (data.maxAmount) {\r\n    const minAmountNum = parseFloat(data.minAmount) || 0;\r\n    validator.numberRange(data.maxAmount, minAmountNum, undefined, 'maxAmount', 'Maximum Amount');\r\n  }\r\n\r\n  if (data.qrCodeImageUrl) {\r\n    validator.url(data.qrCodeImageUrl, 'qrCodeImageUrl', 'QR Code Image URL');\r\n  }\r\n\r\n  if (data.iconUrl) {\r\n    validator.url(data.iconUrl, 'iconUrl', 'Icon URL');\r\n  }\r\n\r\n  return validator.getResult();\r\n}\r\n\r\n/**\r\n * 显示验证错误警告\r\n */\r\nexport function showValidationErrors(result: ValidationResult): void {\r\n  if (!result.isValid && result.firstErrorMessage) {\r\n    app.alerts.show(\r\n      { type: 'error', dismissible: true },\r\n      result.firstErrorMessage\r\n    );\r\n  }\r\n}\r\n\r\n","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport type Mithril from 'mithril';\r\nimport { PlatformFormData } from '../types/AdminTypes';\r\nimport { FormValidator } from '../../../common/utils/formValidators';\r\nimport m from 'mithril';\r\n\r\nexport interface AddPlatformFormAttrs {\r\n  onSubmit: (formData: PlatformFormData) => Promise<void>;\r\n  submitting: boolean;\r\n}\r\n\r\nexport default class AddPlatformForm extends Component<AddPlatformFormAttrs> {\r\n  private name = Stream('');\r\n  private symbol = Stream('');\r\n  private network = Stream('');\r\n  private minAmount = Stream('');\r\n  private maxAmount = Stream('');\r\n  private fee = Stream('');\r\n  private isActive = Stream(true);\r\n  // Platform icon system\r\n  private platformIconUrl = Stream('');\r\n  private platformIconClass = Stream('');\r\n\r\n  view(): Mithril.Children {\r\n    return (\r\n      <div className=\"WithdrawalManagementPage-addPlatform\">\r\n        <div className=\"Form-group\">\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-col\">\r\n              <label>{app.translator.trans('funds.admin.platforms.name')}</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder={app.translator.trans('funds.admin.platforms.add_placeholder')}\r\n                bidi={this.name}\r\n              />\r\n            </div>\r\n            <div className=\"Form-col\">\r\n              <label>{app.translator.trans('funds.admin.platforms.symbol')}</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"BTC, ETH, USDT...\"\r\n                bidi={this.symbol}\r\n              />\r\n            </div>\r\n            <div className=\"Form-col\">\r\n              <label>{app.translator.trans('funds.admin.platforms.network')}</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"TRC20, ERC20, BSC... (optional)\"\r\n                bidi={this.network}\r\n              />\r\n              <small className=\"helpText\">{app.translator.trans('funds.admin.platforms.network_help')}</small>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-col\">\r\n              <label>{app.translator.trans('funds.admin.platforms.min_amount')}</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                className=\"FormControl\"\r\n                placeholder=\"0.001\"\r\n                bidi={this.minAmount}\r\n              />\r\n            </div>\r\n            <div className=\"Form-col\">\r\n              <label>{app.translator.trans('funds.admin.platforms.max_amount')}</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                className=\"FormControl\"\r\n                placeholder=\"10.0\"\r\n                bidi={this.maxAmount}\r\n              />\r\n            </div>\r\n            <div className=\"Form-col\">\r\n              <label>{app.translator.trans('funds.admin.platforms.fee')}</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                className=\"FormControl\"\r\n                placeholder=\"0.0005\"\r\n                bidi={this.fee}\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-col\">\r\n              <label className=\"checkbox\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={this.isActive()}\r\n                  onchange={(e: Event) => {\r\n                    const target = e.target as HTMLInputElement;\r\n                    this.isActive(target.checked);\r\n                  }}\r\n                />\r\n                {app.translator.trans('funds.admin.platforms.is_active')}\r\n              </label>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Platform icon system */}\r\n          <div className=\"Form-section\">\r\n            <h4>{app.translator.trans('funds.admin.platforms.platform_icon')}</h4>\r\n            <p className=\"helpText\">{app.translator.trans('funds.admin.platforms.platform_icon_help')}</p>\r\n            \r\n            <div className=\"Form-row\">\r\n              <div className=\"Form-col\">\r\n                <label>{app.translator.trans('funds.admin.platforms.platform_icon_url')}</label>\r\n                <input\r\n                  type=\"url\"\r\n                  className=\"FormControl\"\r\n                  placeholder=\"https://example.com/platform-icon.png\"\r\n                  bidi={this.platformIconUrl}\r\n                />\r\n                <small className=\"helpText\">{app.translator.trans('funds.admin.platforms.platform_icon_url_help')}</small>\r\n              </div>\r\n              <div className=\"Form-col\">\r\n                <label>{app.translator.trans('funds.admin.platforms.platform_icon_class')}</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"FormControl\"\r\n                  placeholder=\"fab fa-bitcoin\"\r\n                  bidi={this.platformIconClass}\r\n                />\r\n                <small className=\"helpText\">{app.translator.trans('funds.admin.platforms.platform_icon_class_help')}</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"Form-group\">\r\n            <Button\r\n              className=\"Button Button--primary\"\r\n              loading={this.attrs.submitting}\r\n              disabled={this.attrs.submitting}\r\n              onclick={this.handleSubmit.bind(this)}\r\n            >\r\n              {app.translator.trans('funds.admin.platforms.add_button')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private validateForm(): boolean {\r\n    const validator = new FormValidator();\r\n    \r\n    try {\r\n      // Fixed: Convert NestedStringArray to string for FormValidator\r\n      const nameLabel = app.translator.trans('funds.admin.platforms.name').toString();\r\n      const symbolLabel = app.translator.trans('funds.admin.platforms.symbol').toString();\r\n      const minAmountLabel = app.translator.trans('funds.admin.platforms.min_amount').toString();\r\n      const maxAmountLabel = app.translator.trans('funds.admin.platforms.max_amount').toString();\r\n      const feeLabel = app.translator.trans('funds.admin.platforms.fee').toString();\r\n      \r\n      validator\r\n        .required(this.name(), 'name', nameLabel)\r\n        .required(this.symbol(), 'symbol', symbolLabel)\r\n        .numberRange(this.minAmount(), 0, undefined, 'minAmount', minAmountLabel)\r\n        .numberRange(this.maxAmount(), 0, undefined, 'maxAmount', maxAmountLabel)\r\n        .numberRange(this.fee(), 0, undefined, 'fee', feeLabel);\r\n\r\n      // Custom validation for max >= min\r\n      const minVal = parseFloat(this.minAmount());\r\n      const maxVal = parseFloat(this.maxAmount());\r\n      if (maxVal < minVal) {\r\n        const errorMessage = app.translator.trans('funds.admin.platforms.max_min_error').toString();\r\n        validator.custom(false, 'maxAmount', errorMessage);\r\n      }\r\n\r\n      // Optional URL validation for platform icon\r\n      if (this.platformIconUrl() && this.platformIconUrl().trim()) {\r\n        const platformIconUrlLabel = app.translator.trans('funds.admin.platforms.platform_icon_url').toString();\r\n        validator.url(this.platformIconUrl(), 'platformIconUrl', platformIconUrlLabel);\r\n      }\r\n\r\n      const result = validator.getResult();\r\n      \r\n      if (!result.isValid && result.firstErrorMessage) {\r\n        app.alerts.show({ type: 'error', dismissible: true }, result.firstErrorMessage);\r\n      }\r\n\r\n      return result.isValid;\r\n    } catch (error) {\r\n      console.error('Form validation error:', error);\r\n      app.alerts.show({ type: 'error', dismissible: true }, 'Validation failed');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async handleSubmit(): Promise<void> {\r\n    if (this.attrs.submitting) return;\r\n\r\n    if (!this.validateForm()) return;\r\n\r\n    const formData: PlatformFormData = {\r\n      name: this.name(),\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      isActive: this.isActive(),\r\n      // Platform icon system\r\n      platformIconUrl: this.platformIconUrl(),\r\n      platformIconClass: this.platformIconClass()\r\n    };\r\n\r\n    try {\r\n      await this.attrs.onSubmit(formData);\r\n      this.clearForm();\r\n    } catch {\r\n      // Error handling is done in parent component\r\n    }\r\n  }\r\n\r\n  private clearForm(): void {\r\n    this.name('');\r\n    this.symbol('');\r\n    this.network('');\r\n    this.minAmount('');\r\n    this.maxAmount('');\r\n    this.fee('');\r\n    this.isActive(true);\r\n    // Clear platform icon fields\r\n    this.platformIconUrl('');\r\n    this.platformIconClass('');\r\n    m.redraw();\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Switch from 'flarum/common/components/Switch';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\n\r\n// Generic platform interface that can represent both funds and deposit platforms\r\ninterface GenericPlatform {\r\n  id?: () => string | number;\r\n  name?: () => string;\r\n  symbol?: () => string;\r\n  network?: () => string;\r\n  displayName?: () => string;\r\n  minAmount?: () => number;\r\n  maxAmount?: () => number;\r\n  fee?: () => number;\r\n  address?: () => string;\r\n  iconUrl?: () => string;\r\n  iconClass?: () => string;\r\n  isActive?: () => boolean;\r\n  createdAt?: () => Date;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface GenericPlatformListItemAttrs {\r\n  platform: GenericPlatform;\r\n  type: 'funds' | 'deposit';\r\n  onToggleStatus: (platform?: GenericPlatform) => Promise<void>;\r\n  onDelete: (platform?: GenericPlatform) => Promise<void>;\r\n  style?: 'card' | 'list';\r\n}\r\n\r\nexport default class GenericPlatformListItem extends Component<GenericPlatformListItemAttrs> {\r\n  view(vnode: Mithril.Vnode<GenericPlatformListItemAttrs>): Mithril.Children {\r\n    const { platform, type, onToggleStatus, onDelete, style = 'card' } = vnode.attrs;\r\n\r\n    if (style === 'card') {\r\n      return this.renderCardStyle(platform, type, onToggleStatus, onDelete);\r\n    } else {\r\n      return this.renderListStyle(platform, type, onToggleStatus, onDelete);\r\n    }\r\n  }\r\n\r\n  private renderCardStyle(\r\n    platform: GenericPlatform,\r\n    type: string,\r\n    onToggleStatus: (platform?: GenericPlatform) => Promise<void>,\r\n    onDelete: (platform?: GenericPlatform) => Promise<void>\r\n  ): Mithril.Children {\r\n    const platformData = this.extractPlatformData(platform);\r\n    const translationPrefix = (type === 'funds' || type === 'withdrawal') ? 'funds.admin.platforms' : 'funds.admin.deposit.platforms';\r\n\r\n    return (\r\n      <div key={platformData.id} className={`${type}Platform`}>\r\n        <div className={`${type}Platform-info`}>\r\n          <div className={`${type}Platform-primary`}>\r\n            <span className={`${type}Platform-status ${platformData.isActive ? 'active' : 'inactive'}`}>\r\n              {platformData.isActive ? '🟢' : '🔴'}\r\n            </span>\r\n            <span className={`${type}Platform-name`}>{platformData.displayName}</span>\r\n            <span className=\"platform-id\">#{platformData.id}</span>\r\n            {platformData.network && <span className={`${type}Platform-network`}>({platformData.network})</span>}\r\n          </div>\r\n          <div className={`${type}Platform-details`}>\r\n            <span className={`${type}Platform-amounts`}>\r\n              Min: {platformData.minAmount} | Max: {platformData.maxAmount}\r\n              {` | Fee: ${platformData.fee}`}\r\n              {type === 'deposit' && ` | Address: ${platformData.address ? 'Static' : 'Template'}`}\r\n            </span>\r\n            {platformData.createdDate && (\r\n              <span className={`${type}Platform-date`}>{platformData.dateDisplay}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className={`${type}Platform-actions`}>\r\n          <Button\r\n            className={`Button ${platformData.isActive ? 'Button--secondary' : 'Button--primary'}`}\r\n            onclick={() => onToggleStatus(platform)}\r\n          >\r\n            {app.translator.trans(`${translationPrefix}.${platformData.isActive ? 'disable' : 'enable'}`)}\r\n          </Button>\r\n          <Button\r\n            className=\"Button Button--danger\"\r\n            onclick={() => onDelete(platform)}\r\n          >\r\n            {app.translator.trans(`${translationPrefix}.delete`)}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderListStyle(\r\n    platform: GenericPlatform,\r\n    type: string,\r\n    onToggleStatus: (platform?: GenericPlatform) => Promise<void>,\r\n    onDelete: (platform?: GenericPlatform) => Promise<void>\r\n  ): Mithril.Children {\r\n    const platformData = this.extractPlatformData(platform);\r\n    const translationPrefix = (type === 'funds' || type === 'withdrawal') ? 'funds.admin.platforms' : 'funds.admin.deposit.platforms';\r\n\r\n    return (\r\n      <div className={`${type}PlatformListItem`}>\r\n        <div className={`${type}PlatformListItem-content`}>\r\n          <div className={`${type}PlatformListItem-icon`}>\r\n            {this.renderPlatformIcon(platform)}\r\n          </div>\r\n          \r\n          <div className={`${type}PlatformListItem-info`}>\r\n            <div className={`${type}PlatformListItem-primary`}>\r\n              <strong>{platformData.name}</strong>\r\n              <span className={`${type}PlatformListItem-displayName`}>\r\n                {platformData.symbol}\r\n                {platformData.network && ` (${platformData.network})`}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className={`${type}PlatformListItem-details`}>\r\n              <span className={`${type}PlatformListItem-detail`}>\r\n                Min: {platformData.minAmount} {platformData.symbol}\r\n              </span>\r\n              {platformData.maxAmount && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Max: {platformData.maxAmount} {platformData.symbol}\r\n                </span>\r\n              )}\r\n              {platformData.fee && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Fee: {platformData.fee} {platformData.symbol}\r\n                </span>\r\n              )}\r\n              {type === 'deposit' && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Address: {platformData.address ? 'Static' : 'Template'}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className={`${type}PlatformListItem-actions`}>\r\n            <Switch \r\n              state={platformData.isActive} \r\n              onchange={async () => {\r\n                await onToggleStatus(platform);\r\n                m.redraw();\r\n              }}\r\n            >\r\n              {platformData.isActive \r\n                ? app.translator.trans(`${translationPrefix}.active`)\r\n                : app.translator.trans(`${translationPrefix}.inactive`)\r\n              }\r\n            </Switch>\r\n            \r\n            <Button\r\n              className=\"Button Button--icon Button--flat\"\r\n              icon=\"fas fa-trash\"\r\n              onclick={async () => {\r\n                await onDelete(platform);\r\n                m.redraw();\r\n              }}\r\n              title={app.translator.trans(`${translationPrefix}.delete`)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private extractPlatformData(platform: GenericPlatform) {\r\n    // Handle both Model instances and plain objects\r\n    const id = typeof platform.id === 'function' ? platform.id() : platform.id;\r\n    const name = (typeof platform.name === 'function' ? platform.name() : platform.data?.attributes?.name) || 'Unknown Platform';\r\n    const symbol = (typeof platform.symbol === 'function' ? platform.symbol() : platform.data?.attributes?.symbol) || '';\r\n    const network = (typeof platform.network === 'function' ? platform.network() : platform.data?.attributes?.network) || null;\r\n    const displayName = (typeof platform.displayName === 'function' ? platform.displayName() : platform.data?.attributes?.displayName) || name;\r\n    const minAmount = (typeof platform.minAmount === 'function' ? platform.minAmount() : platform.data?.attributes?.minAmount) || 'N/A';\r\n    const maxAmount = (typeof platform.maxAmount === 'function' ? platform.maxAmount() : platform.data?.attributes?.maxAmount) || 'N/A';\r\n    const fee = (typeof platform.fee === 'function' ? platform.fee() : platform.data?.attributes?.fee) || 'N/A';\r\n    const address = (typeof platform.address === 'function' ? platform.address() : platform.data?.attributes?.address) || null;\r\n    const isActive = (typeof platform.isActive === 'function' ? platform.isActive() : platform.data?.attributes?.isActive) ?? false;\r\n    const createdDate = (typeof platform.createdAt === 'function' ? platform.createdAt() : platform.data?.attributes?.createdAt) || null;\r\n    \r\n    let dateDisplay: Mithril.Children = 'N/A';\r\n    if (createdDate) {\r\n      try {\r\n        dateDisplay = humanTime(createdDate);\r\n      } catch (e) {\r\n        console.error('Error formatting date:', e);\r\n        dateDisplay = 'Invalid Date';\r\n      }\r\n    }\r\n\r\n    return {\r\n      id,\r\n      name,\r\n      symbol,\r\n      network,\r\n      displayName,\r\n      minAmount,\r\n      maxAmount,\r\n      fee,\r\n      address,\r\n      isActive,\r\n      createdDate,\r\n      dateDisplay\r\n    };\r\n  }\r\n\r\n  private renderPlatformIcon(platform: GenericPlatform): Mithril.Children {\r\n    const iconUrl = typeof platform.iconUrl === 'function' ? platform.iconUrl() : platform.attributes?.iconUrl;\r\n    const iconClass = typeof platform.iconClass === 'function' ? platform.iconClass() : platform.attributes?.iconClass;\r\n    const symbol = typeof platform.symbol === 'function' ? platform.symbol() : platform.attributes?.symbol;\r\n\r\n    if (iconUrl) {\r\n      return <img src={iconUrl} alt={symbol} className=\"PlatformListItem-img\" />;\r\n    }\r\n\r\n    if (iconClass) {\r\n      return icon(iconClass);\r\n    }\r\n\r\n    // Fallback to generic icon - use platform-configurable icons only\r\n    return icon('fas fa-coins');\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport type Mithril from 'mithril';\r\nimport { WithdrawalPlatform, PlatformFormData } from '../types/AdminTypes';\r\nimport AddPlatformForm from '../forms/AddPlatformForm';\r\nimport GenericPlatformListItem from '../shared/GenericPlatformListItem';\r\n\r\nexport interface PlatformManagementSectionAttrs {\r\n  platforms: WithdrawalPlatform[];\r\n  submittingPlatform: boolean;\r\n  onAddPlatform: (formData: PlatformFormData) => Promise<void>;\r\n  onTogglePlatformStatus: (platform: WithdrawalPlatform) => Promise<void>;\r\n  onDeletePlatform: (platform: WithdrawalPlatform) => void;\r\n}\r\n\r\nexport default class PlatformManagementSection extends Component<PlatformManagementSectionAttrs> {\r\n  view(): Mithril.Children {\r\n    const { platforms, submittingPlatform, onAddPlatform, onTogglePlatformStatus, onDeletePlatform } = this.attrs;\r\n\r\n    return (\r\n      <div className=\"WithdrawalManagementPage-section\">\r\n        <h3>{app.translator.trans('funds.admin.platforms.title')}</h3>\r\n        \r\n        <AddPlatformForm \r\n          onSubmit={onAddPlatform}\r\n          submitting={submittingPlatform}\r\n        />\r\n\r\n        <div className=\"PlatformList\">\r\n          {platforms.length === 0 ? (\r\n            <p>{app.translator.trans('funds.admin.platforms.empty')}</p>\r\n          ) : (\r\n            platforms\r\n              .filter((platform) => platform !== null && platform !== undefined)\r\n              .map((platform) => (\r\n                <GenericPlatformListItem\r\n                  key={platform.id()}\r\n                  platform={platform}\r\n                  type=\"withdrawal\"\r\n                  style=\"card\"\r\n                  onToggleStatus={onTogglePlatformStatus}\r\n                  onDelete={onDeletePlatform}\r\n                />\r\n              ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalRequest from '../../../common/models/WithdrawalRequest';\r\n\r\nexport interface WithdrawalRequestItemAttrs {\r\n  request: WithdrawalRequest;\r\n  showActions: boolean;\r\n  showDelete?: boolean;\r\n  onUpdateStatus?: (request: WithdrawalRequest, status: string) => Promise<void>;\r\n  onDelete?: (request: WithdrawalRequest) => void;\r\n}\r\n\r\nexport default class WithdrawalRequestItem extends Component<WithdrawalRequestItemAttrs> {\r\n  view(): Mithril.Children {\r\n    const request = this.attrs.request;\r\n    const { showActions, showDelete = false } = this.attrs;\r\n    \r\n    // Use model methods directly\r\n    const requestId = request.id();\r\n    const amount = request.amount();\r\n    const status = request.status();\r\n    const accountDetails = request.accountDetails();\r\n    const createdDate = request.createdAt();\r\n    \r\n    // Get user info\r\n    const userData = request.user();\r\n    const userName = userData ? userData.displayName() : 'Unknown User';\r\n    \r\n    // Get platform info\r\n    const platform = request.platform();\r\n    const platformName = platform ? platform.name() : 'Unknown Platform';\r\n    const platformSymbol = platform ? platform.symbol() : 'N/A';\r\n    \r\n    const statusClass = `status-${status}`;\r\n    \r\n    let dateDisplay: Mithril.Children = 'N/A';\r\n    if (createdDate) {\r\n      try {\r\n        dateDisplay = humanTime(createdDate);\r\n      } catch (e) {\r\n        console.error('Error formatting request date:', e);\r\n        dateDisplay = 'Invalid Date';\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div key={requestId} className={`WithdrawalRequest ${statusClass}`}>\r\n        <div className=\"WithdrawalRequest-info\">\r\n          <div className=\"WithdrawalRequest-user\">\r\n            <strong>{userName}</strong>\r\n            <span className=\"request-id\">#{requestId}</span>\r\n          </div>\r\n          <div className=\"WithdrawalRequest-details\">\r\n            <span className=\"amount\">{amount}</span>\r\n            <span className=\"platform\">{platformName}</span>\r\n            <span className=\"symbol\">{platformSymbol}</span>\r\n            <span className=\"date\">{dateDisplay}</span>\r\n          </div>\r\n          <div className=\"WithdrawalRequest-account\">\r\n            <strong>{app.translator.trans('funds.admin.requests.account_details')}:</strong>\r\n            <span>{accountDetails}</span>\r\n          </div>\r\n          <div className=\"WithdrawalRequest-status\">\r\n            <span className={`Badge Badge--${status}`}>\r\n              {app.translator.trans(`funds.admin.requests.status.${status}`)}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        {(showActions || showDelete) && (\r\n          <div className=\"WithdrawalRequest-actions\">\r\n            {showActions && this.attrs.onUpdateStatus && (\r\n              <>\r\n                <Button\r\n                  className=\"Button Button--primary\"\r\n                  onclick={() => this.attrs.onUpdateStatus!(request, 'approved')}\r\n                >\r\n                  {app.translator.trans('funds.admin.requests.approve')}\r\n                </Button>\r\n                <Button\r\n                  className=\"Button Button--danger\"\r\n                  onclick={() => this.attrs.onUpdateStatus!(request, 'rejected')}\r\n                >\r\n                  {app.translator.trans('funds.admin.requests.reject')}\r\n                </Button>\r\n              </>\r\n            )}\r\n            {this.attrs.onDelete && (\r\n              <Button\r\n                className=\"Button Button--link\"\r\n                onclick={() => this.attrs.onDelete!(request)}\r\n              >\r\n                <i className=\"fas fa-trash\"></i>\r\n                {app.translator.trans('funds.admin.requests.delete')}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalRequest from '../../../common/models/WithdrawalRequest';\r\nimport WithdrawalRequestItem from '../items/WithdrawalRequestItem';\r\n\r\nexport interface RequestManagementSectionAttrs {\r\n  requests: WithdrawalRequest[];\r\n  onUpdateRequestStatus: (request: WithdrawalRequest, status: string) => Promise<void>;\r\n  onDeleteRequest: (request: WithdrawalRequest) => void;\r\n}\r\n\r\nexport default class RequestManagementSection extends Component<RequestManagementSectionAttrs> {\r\n  view(): Mithril.Children {\r\n    const { requests, onUpdateRequestStatus, onDeleteRequest } = this.attrs;\r\n\r\n    const pendingRequests = requests.filter(r => r.status() === 'pending');\r\n    const processedRequests = requests.filter(r => r.status() !== 'pending');\r\n\r\n    return (\r\n      <div className=\"WithdrawalManagementPage-section\">\r\n        <h3>{app.translator.trans('funds.admin.requests.title')}</h3>\r\n        \r\n        <div className=\"WithdrawalManagementPage-pendingRequests\">\r\n          <h4>{app.translator.trans('funds.admin.requests.pending_title')}</h4>\r\n          {pendingRequests.length === 0 ? (\r\n            <p>{app.translator.trans('funds.admin.requests.no_pending')}</p>\r\n          ) : (\r\n            pendingRequests.map((request) => (\r\n              <WithdrawalRequestItem\r\n                key={request.id()}\r\n                request={request}\r\n                showActions={true}\r\n                showDelete={true}\r\n                onUpdateStatus={onUpdateRequestStatus}\r\n                onDelete={onDeleteRequest}\r\n              />\r\n            ))\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"WithdrawalManagementPage-processedRequests\">\r\n          <h4>{app.translator.trans('funds.admin.requests.processed_title')}</h4>\r\n          {processedRequests.length === 0 ? (\r\n            <p>{app.translator.trans('funds.admin.requests.no_processed')}</p>\r\n          ) : (\r\n            processedRequests.map((request) => (\r\n              <WithdrawalRequestItem\r\n                key={request.id()}\r\n                request={request}\r\n                showActions={false}\r\n                showDelete={true}\r\n                onDelete={onDeleteRequest}\r\n              />\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport ConfirmModal from '../../../common/components/shared/ConfirmModal';\r\n\r\ninterface DepositRecord {\r\n  id(): string | number;\r\n  userId(): number;\r\n  platformId(): number;\r\n  platformAccount(): string;\r\n  amount(): number;\r\n  depositTime(): Date;\r\n  screenshotUrl?(): string;\r\n  userMessage?(): string;\r\n  status(): string;\r\n  processedAt?(): Date;\r\n  processedBy?(): number;\r\n  adminNotes?(): string;\r\n  creditedAmount?(): number;\r\n  createdAt(): Date;\r\n  updatedAt(): Date;\r\n  user?(): any; // Flarum User model - keep as any for compatibility\r\n  platform?(): any;\r\n  processedByUser?(): any;\r\n  isPending(): boolean;\r\n  isApproved(): boolean;\r\n  isRejected(): boolean;\r\n}\r\n\r\ninterface DepositRecordManagementSectionAttrs {\r\n  records: DepositRecord[];\r\n  platforms: any[];\r\n  loading?: boolean;\r\n  onApproveRecord: (record: DepositRecord, creditedAmount?: number, notes?: string) => Promise<void>;\r\n  onRejectRecord: (record: DepositRecord, reason: string) => Promise<void>;\r\n  onDeleteRecord: (record: DepositRecord) => Promise<void>;\r\n}\r\n\r\ninterface DepositRecordManagementSectionState {\r\n  processingRecords: Set<string | number>;\r\n}\r\n\r\nexport default class DepositRecordManagementSection extends Component<\r\n  DepositRecordManagementSectionAttrs,\r\n  DepositRecordManagementSectionState\r\n> {\r\n  public state: DepositRecordManagementSectionState = {\r\n    processingRecords: new Set()\r\n  };\r\n\r\n  view(vnode: Mithril.Vnode<DepositRecordManagementSectionAttrs>): Mithril.Children {\r\n    const { records, platforms, loading } = vnode.attrs;\r\n\r\n    if (loading) {\r\n      return (\r\n        <div className=\"DepositRecordManagementSection\">\r\n          <div className=\"ection-header\">\r\n            <h3>{app.translator.trans('funds.admin.deposit.records.title')}</h3>\r\n          </div>\r\n          <LoadingIndicator />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"DepositRecordManagementSection\">\r\n        <div className=\"DepositRecordManagementSection-header\">\r\n          <h3>{app.translator.trans('funds.admin.deposit.records.title')}</h3>\r\n          <div className=\"DepositRecordManagementSection-stats\">\r\n            <span className=\"DepositRecordManagementSection-count\">\r\n              {app.translator.trans('funds.admin.deposit.records.total_count', {\r\n                count: records.length\r\n              })}\r\n            </span>\r\n            <span className=\"DepositRecordManagementSection-pending\">\r\n              {app.translator.trans('funds.admin.deposit.records.pending_count', {\r\n                count: records.filter(r => r.isPending()).length\r\n              })}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"DepositRecordManagementSection-content\">\r\n          {records.length === 0 ? (\r\n            <div className=\"DepositRecordManagementSection-empty\">\r\n              <div className=\"DepositRecordManagementSection-emptyIcon\">\r\n                {icon('fas fa-receipt')}\r\n              </div>\r\n              <h4>{app.translator.trans('funds.admin.deposit.records.empty.title')}</h4>\r\n              <p>{app.translator.trans('funds.admin.deposit.records.empty.description')}</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"DepositRecordManagementSection-list\">\r\n              {records.map(record => this.renderRecord(record, platforms, vnode.attrs))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderRecord(\r\n    record: DepositRecord,\r\n    platforms: any[],\r\n    attrs: DepositRecordManagementSectionAttrs\r\n  ): Mithril.Children {\r\n    const recordId = record.id();\r\n    const isProcessing = this.state.processingRecords.has(recordId);\r\n    const platformId = this.getPlatformId(record);\r\n    const platform = this.findPlatform(platforms, platformId);\r\n    const user = record.user?.();\r\n    const status = this.getRecordStatus(record);\r\n    const depositTime = this.getDepositTime(record);\r\n    const createdAt = this.getCreatedAt(record);\r\n\r\n    return (\r\n      <div key={`record-${recordId}`} className={`DepositRecordItem status-${status}`}>\r\n        <div className=\"DepositRecordItem-header\">\r\n          <div className=\"DepositRecordItem-user\">\r\n            <span className=\"DepositRecordItem-username\">\r\n              {user?.displayName?.() || 'Unknown User'}\r\n            </span>\r\n            <span className=\"DepositRecordItem-userId\">\r\n              ID: {this.getUserId(record)}\r\n            </span>\r\n          </div>\r\n          \r\n          <div className=\"DepositRecordItem-amount\">\r\n            <span className=\"DepositRecordItem-amountValue\">\r\n              {this.getAmount(record)} {platform?.symbol?.() || ''}\r\n            </span>\r\n            <div className={`DepositRecordItem-status status-${this.getStatusColor(status)}`}>\r\n              {this.renderStatusIcon(status)}\r\n              {this.getStatusText(status)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"DepositRecordItem-details\">\r\n          <div className=\"DepositRecordItem-row\">\r\n            <span className=\"DepositRecordItem-label\">Platform:</span>\r\n            <span className=\"DepositRecordItem-value\">\r\n              {platform?.name?.() || 'Unknown Platform'} {platform?.network?.() ? `(${platform.network()})` : ''}\r\n            </span>\r\n          </div>\r\n          \r\n          \r\n          \r\n          <div className=\"DepositRecordItem-row\">\r\n            <span className=\"DepositRecordItem-label\">Deposit Time:</span>\r\n            <span className=\"DepositRecordItem-value\">\r\n              {depositTime.toLocaleDateString()} {depositTime.toLocaleTimeString()}\r\n            </span>\r\n          </div>\r\n          \r\n          <div className=\"DepositRecordItem-row\">\r\n            <span className=\"DepositRecordItem-label\">Submitted:</span>\r\n            <span className=\"DepositRecordItem-value\">\r\n              {humanTime(createdAt)}\r\n            </span>\r\n          </div>\r\n          \r\n          {record.userMessage?.() && (\r\n            <div className=\"DepositRecordItem-row\">\r\n              <span className=\"DepositRecordItem-label\">Message:</span>\r\n              <span className=\"DepositRecordItem-value\">{record.userMessage()}</span>\r\n            </div>\r\n          )}\r\n          \r\n          {record.screenshotUrl?.() && (\r\n            <div className=\"DepositRecordItem-row\">\r\n              <span className=\"DepositRecordItem-label\">Screenshot:</span>\r\n              <a\r\n                href={record.screenshotUrl()}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"DepositRecordItem-link\"\r\n              >\r\n                View Screenshot {icon('fas fa-external-link-alt')}\r\n              </a>\r\n            </div>\r\n          )}\r\n\r\n          {record.processedAt?.() && (\r\n            <div className=\"DepositRecordItem-processed\">\r\n              <div className=\"DepositRecordItem-row\">\r\n                <span className=\"DepositRecordItem-label\">Processed:</span>\r\n                <span className=\"DepositRecordItem-value\">\r\n                  {humanTime(record.processedAt())}\r\n                </span>\r\n              </div>\r\n              \r\n              {record.creditedAmount?.() && record.creditedAmount() !== record.amount() && (\r\n                <div className=\"DepositRecordItem-row\">\r\n                  <span className=\"DepositRecordItem-label\">Credited Amount:</span>\r\n                  <span className=\"DepositRecordItem-value\">\r\n                    {record.creditedAmount()} {platform?.symbol?.() || ''}\r\n                  </span>\r\n                </div>\r\n              )}\r\n              \r\n              {record.adminNotes?.() && (\r\n                <div className=\"DepositRecordItem-row\">\r\n                  <span className=\"DepositRecordItem-label\">Admin Notes:</span>\r\n                  <span className=\"DepositRecordItem-value\">{record.adminNotes()}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {status === 'pending' && (\r\n          <div className=\"DepositRecordItem-actions\">\r\n            <Button\r\n              className=\"Button Button--primary DepositRecordItem-approveButton\"\r\n              onclick={() => this.handleApprove(record, attrs)}\r\n              loading={isProcessing}\r\n              disabled={isProcessing}\r\n            >\r\n              {app.translator.trans('funds.admin.deposit.records.approve')}\r\n            </Button>\r\n            \r\n            <Button\r\n              className=\"Button Button--danger DepositRecordItem-rejectButton\"\r\n              onclick={() => this.handleReject(record, attrs)}\r\n              loading={isProcessing}\r\n              disabled={isProcessing}\r\n            >\r\n              {app.translator.trans('funds.admin.deposit.records.reject')}\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"DepositRecordItem-adminActions\">\r\n          <Button\r\n            className=\"Button Button--link DepositRecordItem-deleteButton\"\r\n            onclick={() => this.handleDelete(record, attrs)}\r\n            disabled={isProcessing}\r\n          >\r\n            {icon('fas fa-trash')}\r\n            {app.translator.trans('funds.admin.deposit.records.delete')}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getPlatformId(record: DepositRecord): number {\r\n    // Try method call first (interface definition)\r\n    if (typeof record.platformId === 'function') {\r\n      try {\r\n        return record.platformId();\r\n      } catch (error) {\r\n        console.warn('Failed to call platformId() method:', error);\r\n      }\r\n    }\r\n    \r\n    // Fall back to attribute access (actual data structure)\r\n    const recordAny = record as any;\r\n    if (recordAny.platformId !== undefined) {\r\n      return parseInt(recordAny.platformId);\r\n    }\r\n    \r\n    // Try accessing from attributes\r\n    if (recordAny.attributes && recordAny.attributes.platformId !== undefined) {\r\n      return parseInt(recordAny.attributes.platformId);\r\n    }\r\n    \r\n    console.error('Could not find platformId in record:', record);\r\n    return 0;\r\n  }\r\n\r\n  private getRecordStatus(record: DepositRecord): string {\r\n    if (typeof record.status === 'function') {\r\n      try {\r\n        return record.status();\r\n      } catch (error) {\r\n        console.warn('Failed to call status() method:', error);\r\n      }\r\n    }\r\n    \r\n    const recordAny = record as any;\r\n    if (recordAny.status) {\r\n      return recordAny.status;\r\n    }\r\n    \r\n    if (recordAny.attributes && recordAny.attributes.status) {\r\n      return recordAny.attributes.status;\r\n    }\r\n    \r\n    return 'pending'; // default status\r\n  }\r\n\r\n  private getDepositTime(record: DepositRecord): Date {\r\n    if (typeof record.depositTime === 'function') {\r\n      try {\r\n        return record.depositTime();\r\n      } catch (error) {\r\n        console.warn('Failed to call depositTime() method:', error);\r\n      }\r\n    }\r\n    \r\n    const recordAny = record as any;\r\n    if (recordAny.depositTime) {\r\n      return new Date(recordAny.depositTime);\r\n    }\r\n    \r\n    if (recordAny.attributes && recordAny.attributes.depositTime) {\r\n      return new Date(recordAny.attributes.depositTime);\r\n    }\r\n    \r\n    if (recordAny.attributes && recordAny.attributes.deposit_time) {\r\n      return new Date(recordAny.attributes.deposit_time);\r\n    }\r\n    \r\n    return new Date(); // fallback to current time\r\n  }\r\n\r\n  private getCreatedAt(record: DepositRecord): Date {\r\n    if (typeof record.createdAt === 'function') {\r\n      try {\r\n        return record.createdAt();\r\n      } catch (error) {\r\n        console.warn('Failed to call createdAt() method:', error);\r\n      }\r\n    }\r\n    \r\n    const recordAny = record as any;\r\n    if (recordAny.createdAt) {\r\n      return new Date(recordAny.createdAt);\r\n    }\r\n    \r\n    if (recordAny.attributes && recordAny.attributes.createdAt) {\r\n      return new Date(recordAny.attributes.createdAt);\r\n    }\r\n    \r\n    if (recordAny.attributes && recordAny.attributes.created_at) {\r\n      return new Date(recordAny.attributes.created_at);\r\n    }\r\n    \r\n    return new Date(); // fallback to current time\r\n  }\r\n\r\n  private getUserId(record: DepositRecord): number {\r\n    if (typeof record.userId === 'function') {\r\n      try {\r\n        return record.userId();\r\n      } catch (error) {\r\n        console.warn('Failed to call userId() method:', error);\r\n      }\r\n    }\r\n    \r\n    const recordAny = record as any;\r\n    if (recordAny.userId !== undefined) {\r\n      return parseInt(recordAny.userId);\r\n    }\r\n    \r\n    if (recordAny.attributes && recordAny.attributes.userId !== undefined) {\r\n      return parseInt(recordAny.attributes.userId);\r\n    }\r\n    \r\n    if (recordAny.attributes && recordAny.attributes.user_id !== undefined) {\r\n      return parseInt(recordAny.attributes.user_id);\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n\r\n  private getAmount(record: DepositRecord): number {\r\n    if (typeof record.amount === 'function') {\r\n      try {\r\n        return record.amount();\r\n      } catch (error) {\r\n        console.warn('Failed to call amount() method:', error);\r\n      }\r\n    }\r\n    \r\n    const recordAny = record as any;\r\n    if (recordAny.amount !== undefined) {\r\n      return parseFloat(recordAny.amount);\r\n    }\r\n    \r\n    if (recordAny.attributes && recordAny.attributes.amount !== undefined) {\r\n      return parseFloat(recordAny.attributes.amount);\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n\r\n\r\n\r\n  private findPlatform(platforms: any[], platformId: number): any | null {\r\n    return platforms.find(p => {\r\n      const id = typeof p.id === 'function' ? p.id() : p.id;\r\n      return parseInt(id) === platformId;\r\n    }) || null;\r\n  }\r\n\r\n  private getStatusColor(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'warning';\r\n      case 'approved':\r\n        return 'success';\r\n      case 'rejected':\r\n        return 'danger';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  private renderStatusIcon(status: string): Mithril.Children {\r\n    switch (status) {\r\n      case 'pending':\r\n        return icon('fas fa-clock');\r\n      case 'approved':\r\n        return icon('fas fa-check-circle');\r\n      case 'rejected':\r\n        return icon('fas fa-times-circle');\r\n      default:\r\n        return icon('fas fa-question-circle');\r\n    }\r\n  }\r\n\r\n  private getStatusText(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return app.translator.trans('funds.admin.deposit.records.status.pending').toString();\r\n      case 'approved':\r\n        return app.translator.trans('funds.admin.deposit.records.status.approved').toString();\r\n      case 'rejected':\r\n        return app.translator.trans('funds.admin.deposit.records.status.rejected').toString();\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  }\r\n\r\n  private async handleApprove(record: DepositRecord, attrs: DepositRecordManagementSectionAttrs): Promise<void> {\r\n    const recordId = record.id();\r\n    const defaultAmount = record.amount();\r\n\r\n    // Basic approval - could be enhanced with a modal for custom amounts/notes\r\n    const creditedAmount = parseFloat(\r\n      prompt(\r\n        app.translator.trans('funds.admin.deposit.records.approve_prompt', {\r\n          amount: defaultAmount\r\n        }).toString(),\r\n        defaultAmount.toString()\r\n      ) || defaultAmount.toString()\r\n    );\r\n\r\n    const notes = prompt(\r\n      app.translator.trans('funds.admin.deposit.records.approve_notes_prompt').toString()\r\n    );\r\n\r\n    if (isNaN(creditedAmount) || creditedAmount <= 0) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.records.invalid_amount')\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.state.processingRecords.add(recordId);\r\n    m.redraw();\r\n\r\n    try {\r\n      await attrs.onApproveRecord(record, creditedAmount, notes || undefined);\r\n      // Success alert handled by parent component\r\n    } catch (error) {\r\n      console.error('Error approving deposit record:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.records.approve_error')\r\n      );\r\n    } finally {\r\n      this.state.processingRecords.delete(recordId);\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private async handleReject(record: DepositRecord, attrs: DepositRecordManagementSectionAttrs): Promise<void> {\r\n    const reason = prompt(\r\n      app.translator.trans('funds.admin.deposit.records.reject_reason_prompt').toString()\r\n    );\r\n\r\n    if (!reason || reason.trim() === '') {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.records.reject_reason_required')\r\n      );\r\n      return;\r\n    }\r\n\r\n    const recordId = record.id();\r\n    this.state.processingRecords.add(recordId);\r\n    m.redraw();\r\n\r\n    try {\r\n      await attrs.onRejectRecord(record, reason);\r\n      // Success alert handled by parent component\r\n    } catch (error) {\r\n      console.error('Error rejecting deposit record:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.records.reject_error')\r\n      );\r\n    } finally {\r\n      this.state.processingRecords.delete(recordId);\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private handleDelete(record: DepositRecord, attrs: DepositRecordManagementSectionAttrs): void {\r\n    const user = record.user?.();\r\n    const amount = record.amount();\r\n\r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans('funds.admin.deposit.records.delete_confirm_title'),\r\n      message: app.translator.trans('funds.admin.deposit.records.delete_confirm_message', {\r\n        user: user,\r\n        amount: amount\r\n      }),\r\n      confirmText: app.translator.trans('funds.admin.deposit.records.delete_confirm_button'),\r\n      cancelText: app.translator.trans('funds.admin.deposit.records.delete_cancel_button'),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        const recordId = record.id();\r\n        this.state.processingRecords.add(recordId);\r\n        \r\n        try {\r\n          await attrs.onDeleteRecord(record);\r\n          // Success alert handled by parent component\r\n        } catch (error) {\r\n          console.error('Error deleting deposit record:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans('funds.admin.deposit.records.delete_error')\r\n          );\r\n        } finally {\r\n          this.state.processingRecords.delete(recordId);\r\n          m.redraw();\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Switch from 'flarum/common/components/Switch';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport type Mithril from 'mithril';\r\nimport { FormValidator } from '../../../common/utils/formValidators';\r\n\r\nexport interface DepositPlatformFormData {\r\n  name: string;\r\n  symbol: string;\r\n  network: string;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  fee: string;\r\n  address: string;\r\n  qrCodeImageUrl: string;\r\n  // Platform icon system\r\n  platformIconUrl: string;\r\n  platformIconClass: string;\r\n  warningText: string;\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface AddDepositPlatformFormAttrs {\r\n  submitting: boolean;\r\n  onSubmit: (formData: DepositPlatformFormData) => Promise<void>;\r\n  onCancel?: () => void; // Optional since form is always visible\r\n}\r\n\r\nexport default class AddDepositPlatformForm extends Component<AddDepositPlatformFormAttrs> {\r\n  private formData = {\r\n    name: Stream(''),\r\n    symbol: Stream(''),\r\n    network: Stream(''),\r\n    minAmount: Stream(''),\r\n    maxAmount: Stream(''),\r\n    fee: Stream(''),\r\n    address: Stream(''),\r\n    qrCodeImageUrl: Stream(''),\r\n    // Platform icon system\r\n    platformIconUrl: Stream(''),\r\n    platformIconClass: Stream(''),\r\n    warningText: Stream(''),\r\n    isActive: Stream(true)\r\n  };\r\n\r\n  oninit(vnode: Mithril.Vnode<AddDepositPlatformFormAttrs>) {\r\n    super.oninit(vnode);\r\n  }\r\n\r\n  view(vnode: Mithril.Vnode<AddDepositPlatformFormAttrs>) {\r\n    const { submitting } = vnode.attrs;\r\n\r\n    return (\r\n      <form \r\n        id=\"deposit-platform-form\" \r\n        className=\"AddDepositPlatformForm\"\r\n        onsubmit={(e: Event) => this.handleSubmit(vnode.attrs, e)}\r\n      >\r\n        <div className=\"Form\">\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('funds.admin.deposit.platforms.name')}\r\n                <span className=\"Form-required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"e.g., Tether\"\r\n                bidi={this.formData.name}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('funds.admin.deposit.platforms.symbol')}\r\n                <span className=\"Form-required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"e.g., USDT\"\r\n                bidi={this.formData.symbol}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('funds.admin.deposit.platforms.network')}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"e.g., TRC20, ERC20, BSC (optional)\"\r\n                bidi={this.formData.network}\r\n                disabled={submitting}\r\n              />\r\n              <div className=\"helpText\">\r\n                Optional. Specify the blockchain network for this platform.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('funds.admin.deposit.platforms.min_amount')}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                min=\"0\"\r\n                className=\"FormControl\"\r\n                placeholder=\"0.0\"\r\n                bidi={this.formData.minAmount}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('funds.admin.deposit.platforms.max_amount')}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                min=\"0\"\r\n                className=\"FormControl\"\r\n                placeholder=\"Leave empty for unlimited\"\r\n                bidi={this.formData.maxAmount}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('funds.admin.deposit.platforms.fee')}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                min=\"0\"\r\n                className=\"FormControl\"\r\n                placeholder=\"0.0\"\r\n                bidi={this.formData.fee}\r\n                disabled={submitting}\r\n              />\r\n              <div className=\"helpText\">\r\n                {app.translator.trans('funds.admin.deposit.platforms.fee_help')}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('funds.admin.deposit.platforms.address')}\r\n              <span className=\"Form-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"FormControl\"\r\n              placeholder=\"Enter deposit address for this platform\"\r\n              bidi={this.formData.address}\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"helpText\">\r\n              {app.translator.trans('funds.admin.deposit.platforms.address_help')}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('funds.admin.deposit.platforms.qr_code_image_url')}\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              className=\"FormControl\"\r\n              placeholder=\"https://example.com/qr-code.png\"\r\n              bidi={this.formData.qrCodeImageUrl}\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"helpText\">\r\n              {app.translator.trans('funds.admin.deposit.platforms.qr_code_image_help')}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Three-tier icon system */}\r\n          <div className=\"Form-section\">\r\n            <h4>{app.translator.trans('funds.admin.platforms.platform_icon')}</h4>\r\n            <p className=\"helpText\">{app.translator.trans('funds.admin.platforms.platform_icon_help')}</p>\r\n            \r\n            <div className=\"Form-row\">\r\n              <div className=\"Form-group\">\r\n                <label>{app.translator.trans('funds.admin.platforms.platform_icon_url')}</label>\r\n                <input\r\n                  type=\"url\"\r\n                  className=\"FormControl\"\r\n                  placeholder=\"https://example.com/platform-icon.png\"\r\n                  bidi={this.formData.platformIconUrl}\r\n                  disabled={submitting}\r\n                />\r\n                <div className=\"helpText\">{app.translator.trans('funds.admin.platforms.platform_icon_url_help')}</div>\r\n              </div>\r\n              <div className=\"Form-group\">\r\n                <label>{app.translator.trans('funds.admin.platforms.platform_icon_class')}</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"FormControl\"\r\n                  placeholder=\"fab fa-bitcoin\"\r\n                  bidi={this.formData.platformIconClass}\r\n                  disabled={submitting}\r\n                />\r\n                <div className=\"helpText\">{app.translator.trans('funds.admin.platforms.platform_icon_class_help')}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('funds.admin.deposit.platforms.warning_text')}\r\n            </label>\r\n            <textarea\r\n              className=\"FormControl\"\r\n              rows={3}\r\n              placeholder=\"Network-specific warning for users\"\r\n              bidi={this.formData.warningText}\r\n              disabled={submitting}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <Switch state={this.formData.isActive()} onchange={this.formData.isActive} disabled={submitting}>\r\n              {app.translator.trans('funds.admin.deposit.platforms.is_active')}\r\n            </Switch>\r\n          </div>\r\n\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\n  private validateForm(): boolean {\r\n    const validator = new FormValidator();\r\n    \r\n    try {\r\n      // Fixed: Convert NestedStringArray to string for FormValidator\r\n      const nameLabel = app.translator.trans('funds.admin.deposit.platforms.name').toString();\r\n      const symbolLabel = app.translator.trans('funds.admin.deposit.platforms.symbol').toString();\r\n      const addressLabel = app.translator.trans('funds.admin.deposit.platforms.address').toString();\r\n      \r\n      validator\r\n        .required(this.formData.name(), 'name', nameLabel)\r\n        .required(this.formData.symbol(), 'symbol', symbolLabel)\r\n        .required(this.formData.address(), 'address', addressLabel);\r\n\r\n      // Optional numeric fields validation\r\n      if (this.formData.minAmount() && this.formData.minAmount().trim()) {\r\n        const minAmountLabel = app.translator.trans('funds.admin.deposit.platforms.min_amount').toString();\r\n        validator.numberRange(this.formData.minAmount(), 0, undefined, 'minAmount', minAmountLabel);\r\n      }\r\n      \r\n      if (this.formData.maxAmount() && this.formData.maxAmount().trim()) {\r\n        const maxAmountLabel = app.translator.trans('funds.admin.deposit.platforms.max_amount').toString();\r\n        validator.numberRange(this.formData.maxAmount(), 0, undefined, 'maxAmount', maxAmountLabel);\r\n      }\r\n\r\n      if (this.formData.fee() && this.formData.fee().trim()) {\r\n        const feeLabel = app.translator.trans('funds.admin.deposit.platforms.fee').toString();\r\n        validator.numberRange(this.formData.fee(), 0, undefined, 'fee', feeLabel);\r\n      }\r\n\r\n      // Custom validation for max >= min if both are provided\r\n      if (this.formData.minAmount() && this.formData.maxAmount()) {\r\n        const minVal = parseFloat(this.formData.minAmount());\r\n        const maxVal = parseFloat(this.formData.maxAmount());\r\n        if (!isNaN(minVal) && !isNaN(maxVal) && maxVal < minVal) {\r\n          const errorMessage = app.translator.trans('funds.admin.platforms.max_min_error').toString();\r\n          validator.custom(false, 'maxAmount', errorMessage);\r\n        }\r\n      }\r\n\r\n      // Optional URL validations for three-tier icon system\r\n      if (this.formData.platformIconUrl() && this.formData.platformIconUrl().trim()) {\r\n        const platformIconUrlLabel = app.translator.trans('funds.admin.platforms.platform_icon_url').toString();\r\n        validator.url(this.formData.platformIconUrl(), 'platformIconUrl', platformIconUrlLabel);\r\n      }\r\n      \r\n      if (this.formData.qrCodeImageUrl() && this.formData.qrCodeImageUrl().trim()) {\r\n        const qrCodeLabel = app.translator.trans('funds.admin.deposit.platforms.qr_code_image_url').toString();\r\n        validator.url(this.formData.qrCodeImageUrl(), 'qrCodeImageUrl', qrCodeLabel);\r\n      }\r\n\r\n      const result = validator.getResult();\r\n      \r\n      if (!result.isValid && result.firstErrorMessage) {\r\n        app.alerts.show({ type: 'error', dismissible: true }, result.firstErrorMessage);\r\n      }\r\n\r\n      return result.isValid;\r\n    } catch (error) {\r\n      console.error('Form validation error:', error);\r\n      app.alerts.show({ type: 'error', dismissible: true }, 'Validation failed');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public clearForm(): void {\r\n    this.formData.name('');\r\n    this.formData.symbol('');\r\n    this.formData.network('');\r\n    this.formData.minAmount('');\r\n    this.formData.maxAmount('');\r\n    this.formData.fee('');\r\n    this.formData.address('');\r\n    this.formData.qrCodeImageUrl('');\r\n    // Clear three-tier icon fields\r\n    this.formData.platformIconUrl('');\r\n    this.formData.platformIconClass('');\r\n    this.formData.warningText('');\r\n    this.formData.isActive(true);\r\n  }\r\n\r\n  private async handleSubmit(attrs: AddDepositPlatformFormAttrs, e: Event): Promise<void> {\r\n    e.preventDefault();\r\n\r\n    if (!this.validateForm()) {\r\n      return;\r\n    }\r\n\r\n    const formData: DepositPlatformFormData = {\r\n      name: this.formData.name(),\r\n      symbol: this.formData.symbol(),\r\n      network: this.formData.network(),\r\n      minAmount: this.formData.minAmount(),\r\n      maxAmount: this.formData.maxAmount(),\r\n      fee: this.formData.fee(),\r\n      address: this.formData.address(),\r\n      qrCodeImageUrl: this.formData.qrCodeImageUrl(),\r\n      // Three-tier icon system\r\n      platformIconUrl: this.formData.platformIconUrl(),\r\n      platformIconClass: this.formData.platformIconClass(),\r\n      warningText: this.formData.warningText(),\r\n      isActive: this.formData.isActive()\r\n    };\r\n\r\n    try {\r\n      await attrs.onSubmit(formData);\r\n      // Clear form after successful submission\r\n      this.clearForm();\r\n    } catch (error) {\r\n      // Error handling is done by parent component\r\n      console.error('Form submission error:', error);\r\n    }\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport type Mithril from 'mithril';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport AddDepositPlatformForm from '../forms/AddDepositPlatformForm';\r\nimport GenericPlatformListItem from '../shared/GenericPlatformListItem';\r\nimport type { GenericPlatform } from '../shared/GenericManagementPage';\r\n\r\ninterface DepositPlatformManagementSectionAttrs {\r\n  platforms: GenericPlatform[];\r\n  submittingPlatform: boolean;\r\n  onAddPlatform: (formData: any) => Promise<void>;\r\n  onTogglePlatformStatus: (platform: GenericPlatform) => Promise<void>;\r\n  onDeletePlatform: (platform: GenericPlatform) => Promise<void>;\r\n}\r\n\r\nexport default class DepositPlatformManagementSection extends Component<DepositPlatformManagementSectionAttrs> {\r\n  view(vnode: Mithril.Vnode<DepositPlatformManagementSectionAttrs>): Mithril.Children {\r\n    const { platforms, submittingPlatform, onAddPlatform, onTogglePlatformStatus, onDeletePlatform } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"DepositPlatformManagementSection\">\r\n        <div className=\"Section-header\">\r\n          <h3>{app.translator.trans('funds.admin.deposit.platforms.title')}</h3>\r\n        </div>\r\n\r\n        <div className=\"DepositPlatformManagementSection-layout\">\r\n          {/* Always visible form */}\r\n          <div className=\"DepositPlatformManagementSection-form\">\r\n            <div className=\"DepositPlatformManagementSection-formHeader\">\r\n              <h4>Add New Platform</h4>\r\n              <Button\r\n                className=\"Button Button--primary DepositPlatformManagementSection-addButton\"\r\n                icon=\"fas fa-plus\"\r\n                type=\"submit\"\r\n                form=\"deposit-platform-form\"\r\n                loading={submittingPlatform}\r\n                disabled={submittingPlatform}\r\n              >\r\n                {app.translator.trans('funds.admin.deposit.platforms.add_button')}\r\n              </Button>\r\n            </div>\r\n            \r\n            <AddDepositPlatformForm\r\n              onSubmit={onAddPlatform}\r\n              onCancel={() => {}} // Not needed since form is always visible\r\n              submitting={submittingPlatform}\r\n            />\r\n          </div>\r\n\r\n          {/* Existing platforms list */}\r\n          <div className=\"DepositPlatformManagementSection-list\">\r\n            <h4>Existing Platforms</h4>\r\n            <div className=\"Section-content\">\r\n              {platforms.length === 0 ? (\r\n                <div className=\"helpText\">\r\n                  {app.translator.trans('funds.admin.deposit.platforms.empty')}\r\n                </div>\r\n              ) : (\r\n                <div className=\"PlatformList\">\r\n                  {platforms\r\n                    .filter((platform) => platform !== null && platform !== undefined)\r\n                    .map((platform) => (\r\n                      <GenericPlatformListItem\r\n                        key={typeof platform.id === 'function' ? platform.id() : platform.id}\r\n                        platform={platform}\r\n                        type=\"deposit\"\r\n                        onToggleStatus={() => onTogglePlatformStatus(platform)}\r\n                        onDelete={() => onDeletePlatform(platform)}\r\n                      />\r\n                    ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","/**\r\n * 统一平台数据结构定义\r\n * \r\n * 定义提现平台和存款平台的统一数据结构，包括字段分类和验证规则\r\n */\r\n\r\n/**\r\n * 平台类型枚举\r\n */\r\nexport type PlatformType = 'withdrawal' | 'deposit';\r\n\r\n/**\r\n * 基础平台字段接口 - 所有平台共有的字段\r\n */\r\nexport interface BasePlatformFields {\r\n  // === 必要字段 (Required Fields) ===\r\n  /** 平台名称 */\r\n  name: string;\r\n  /** 货币符号 (BTC, USDT, ETH等) */\r\n  symbol: string;\r\n  /** 最小金额 */\r\n  minAmount: number;\r\n  /** 手续费 */\r\n  fee: number;\r\n  /** 是否启用 */\r\n  isActive: boolean;\r\n  \r\n  // === 可选字段 (Optional Fields) ===\r\n  /** 网络类型 (TRC20, ERC20, BSC等) - 可为空表示无网络区分 */\r\n  network?: string | null;\r\n  /** 最大金额 */\r\n  maxAmount?: number | null;\r\n  /** 网络类型ID - 关联到NetworkType表 */\r\n  networkTypeId?: number | null;\r\n  /** 自定义货币图标URL */\r\n  currencyIconOverrideUrl?: string | null;\r\n  /** 自定义货币图标CSS类 */\r\n  currencyIconOverrideClass?: string | null;\r\n  /** 自定义网络图标URL */\r\n  networkIconOverrideUrl?: string | null;\r\n  /** 自定义网络图标CSS类 */\r\n  networkIconOverrideClass?: string | null;\r\n  /** 平台特定图标URL */\r\n  platformSpecificIconUrl?: string | null;\r\n  /** 平台特定图标CSS类 */\r\n  platformSpecificIconClass?: string | null;\r\n  \r\n  // === 系统字段 (System Fields) ===\r\n  id?: number;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n}\r\n\r\n/**\r\n * 提现平台特有字段\r\n */\r\nexport interface WithdrawalPlatformSpecificFields {\r\n  // 提现平台目前没有特有字段，所有字段都在基础字段中\r\n}\r\n\r\n/**\r\n * 存款平台特有字段\r\n */\r\nexport interface DepositPlatformSpecificFields {\r\n  // === 必要字段 (Required Fields) ===\r\n  /** 收款地址 - 存款平台必须有地址 */\r\n  address: string;\r\n  \r\n  // === 可选字段 (Optional Fields) ===\r\n  /** 二维码图片URL */\r\n  qrCodeImageUrl?: string | null;\r\n  /** 图标URL (向后兼容字段) */\r\n  iconUrl?: string | null;\r\n  /** 图标CSS类 (向后兼容字段) */\r\n  iconClass?: string | null;\r\n  /** 警告文本 */\r\n  warningText?: string | null;\r\n  /** 网络配置JSON */\r\n  networkConfig?: Record<string, any> | null;\r\n}\r\n\r\n/**\r\n * 完整的提现平台接口\r\n */\r\nexport interface WithdrawalPlatform extends BasePlatformFields, WithdrawalPlatformSpecificFields {\r\n  platformType: 'withdrawal';\r\n}\r\n\r\n/**\r\n * 完整的存款平台接口\r\n */\r\nexport interface DepositPlatform extends BasePlatformFields, DepositPlatformSpecificFields {\r\n  platformType: 'deposit';\r\n  // 重写必要字段以包含存款平台特有的必要字段\r\n  address: string; // 存款平台必须有地址\r\n}\r\n\r\n/**\r\n * 联合平台类型 - 可以是提现或存款平台\r\n */\r\nexport type Platform = WithdrawalPlatform | DepositPlatform;\r\n\r\n/**\r\n * 字段分类定义\r\n */\r\nexport const PLATFORM_FIELD_CATEGORIES = {\r\n  // 必要字段 - 创建平台时必须提供\r\n  REQUIRED: {\r\n    COMMON: ['name', 'symbol', 'minAmount', 'fee', 'isActive'] as const,\r\n    WITHDRAWAL: [] as const, // 提现平台无额外必要字段\r\n    DEPOSIT: ['address'] as const, // 存款平台必须有地址\r\n  },\r\n  \r\n  // 可选字段 - 创建时可以为空\r\n  OPTIONAL: {\r\n    COMMON: [\r\n      'network', 'maxAmount', 'networkTypeId',\r\n      'currencyIconOverrideUrl', 'currencyIconOverrideClass',\r\n      'networkIconOverrideUrl', 'networkIconOverrideClass', \r\n      'platformSpecificIconUrl', 'platformSpecificIconClass'\r\n    ] as const,\r\n    WITHDRAWAL: [] as const,\r\n    DEPOSIT: [\r\n      'qrCodeImageUrl', 'iconUrl', 'iconClass', \r\n      'warningText', 'networkConfig'\r\n    ] as const,\r\n  },\r\n  \r\n  // 系统字段 - 由系统自动管理\r\n  SYSTEM: ['id', 'createdAt', 'updatedAt'] as const,\r\n} as const;\r\n\r\n/**\r\n * 获取指定平台类型的必要字段列表\r\n */\r\nexport function getRequiredFields(platformType: PlatformType): readonly string[] {\r\n  return [\r\n    ...PLATFORM_FIELD_CATEGORIES.REQUIRED.COMMON,\r\n    ...PLATFORM_FIELD_CATEGORIES.REQUIRED[platformType.toUpperCase() as keyof typeof PLATFORM_FIELD_CATEGORIES.REQUIRED]\r\n  ];\r\n}\r\n\r\n/**\r\n * 获取指定平台类型的可选字段列表\r\n */\r\nexport function getOptionalFields(platformType: PlatformType): readonly string[] {\r\n  return [\r\n    ...PLATFORM_FIELD_CATEGORIES.OPTIONAL.COMMON,\r\n    ...PLATFORM_FIELD_CATEGORIES.OPTIONAL[platformType.toUpperCase() as keyof typeof PLATFORM_FIELD_CATEGORIES.OPTIONAL]\r\n  ];\r\n}\r\n\r\n/**\r\n * 获取指定平台类型的所有字段列表（不包括系统字段）\r\n */\r\nexport function getAllFields(platformType: PlatformType): readonly string[] {\r\n  return [\r\n    ...getRequiredFields(platformType),\r\n    ...getOptionalFields(platformType)\r\n  ];\r\n}\r\n\r\n/**\r\n * 验证平台数据是否包含所有必要字段\r\n */\r\nexport function validateRequiredFields(data: Partial<Platform>, platformType: PlatformType): {\r\n  valid: boolean;\r\n  missingFields: string[];\r\n} {\r\n  const requiredFields = getRequiredFields(platformType);\r\n  const missingFields = requiredFields.filter(field => \r\n    !(field in data) || data[field as keyof Platform] === null || data[field as keyof Platform] === undefined\r\n  );\r\n  \r\n  return {\r\n    valid: missingFields.length === 0,\r\n    missingFields\r\n  };\r\n}\r\n\r\n/**\r\n * 创建默认平台数据\r\n */\r\nexport function createDefaultPlatformData(platformType: PlatformType): Partial<Platform> {\r\n  const baseDefaults: Partial<BasePlatformFields> = {\r\n    name: '',\r\n    symbol: '',\r\n    minAmount: 0,\r\n    fee: 0,\r\n    isActive: true,\r\n    network: null,\r\n    maxAmount: null,\r\n    networkTypeId: null,\r\n    currencyIconOverrideUrl: null,\r\n    currencyIconOverrideClass: null,\r\n    networkIconOverrideUrl: null,\r\n    networkIconOverrideClass: null,\r\n    platformSpecificIconUrl: null,\r\n    platformSpecificIconClass: null,\r\n  };\r\n\r\n  if (platformType === 'withdrawal') {\r\n    return {\r\n      ...baseDefaults,\r\n      platformType: 'withdrawal' as const,\r\n    } as Partial<WithdrawalPlatform>;\r\n  } else {\r\n    return {\r\n      ...baseDefaults,\r\n      platformType: 'deposit' as const,\r\n      address: '',\r\n      qrCodeImageUrl: null,\r\n      iconUrl: null,\r\n      iconClass: null,\r\n      warningText: null,\r\n      networkConfig: null,\r\n    } as Partial<DepositPlatform>;\r\n  }\r\n}\r\n\r\n/**\r\n * 字段显示名称映射（用于UI）\r\n */\r\nexport const FIELD_DISPLAY_NAMES = {\r\n  // 基础字段\r\n  name: '平台名称',\r\n  symbol: '货币符号', \r\n  network: '网络类型',\r\n  minAmount: '最小金额',\r\n  maxAmount: '最大金额',\r\n  fee: '手续费',\r\n  isActive: '启用状态',\r\n  networkTypeId: '网络类型',\r\n  \r\n  // 图标字段\r\n  currencyIconOverrideUrl: '货币图标URL',\r\n  currencyIconOverrideClass: '货币图标CSS类',\r\n  networkIconOverrideUrl: '网络图标URL', \r\n  networkIconOverrideClass: '网络图标CSS类',\r\n  platformSpecificIconUrl: '平台图标URL',\r\n  platformSpecificIconClass: '平台图标CSS类',\r\n  \r\n  // 存款平台特有字段\r\n  address: '收款地址',\r\n  qrCodeImageUrl: '二维码图片URL',\r\n  iconUrl: '图标URL',\r\n  iconClass: '图标CSS类',\r\n  warningText: '警告文本',\r\n  networkConfig: '网络配置',\r\n  \r\n  // 系统字段\r\n  id: 'ID',\r\n  createdAt: '创建时间',\r\n  updatedAt: '更新时间',\r\n} as const;\r\n\r\n/**\r\n * 字段验证规则\r\n */\r\nexport const FIELD_VALIDATION_RULES = {\r\n  // === 基础字段 ===\r\n  name: { required: true, minLength: 1, maxLength: 255 },\r\n  symbol: { required: true, minLength: 1, maxLength: 50 },\r\n  network: { required: false, maxLength: 50 },\r\n  minAmount: { required: true, min: 0 },\r\n  maxAmount: { required: false, min: 0, max: 999999999 }, // 添加max限制\r\n  fee: { required: true, min: 0, max: 1000 }, // 添加max限制\r\n  isActive: { required: true },\r\n  networkTypeId: { required: false, min: 1 },\r\n  \r\n  // === 图标字段 ===\r\n  currencyIconOverrideUrl: { required: false, maxLength: 500 },\r\n  currencyIconOverrideClass: { required: false, maxLength: 100 },\r\n  networkIconOverrideUrl: { required: false, maxLength: 500 },\r\n  networkIconOverrideClass: { required: false, maxLength: 100 },\r\n  platformSpecificIconUrl: { required: false, maxLength: 500 },\r\n  platformSpecificIconClass: { required: false, maxLength: 100 },\r\n  \r\n  // === 存款平台特有字段 ===\r\n  address: { required: true, minLength: 10, maxLength: 500 }, // 存款平台必要\r\n  qrCodeImageUrl: { required: false, maxLength: 500 },\r\n  iconUrl: { required: false, maxLength: 500 }, // 向后兼容\r\n  iconClass: { required: false, maxLength: 100 }, // 向后兼容\r\n  warningText: { required: false, maxLength: 1000 },\r\n  networkConfig: { required: false },\r\n  \r\n  // === 系统字段 ===\r\n  id: { required: false, min: 1 },\r\n  createdAt: { required: false },\r\n  updatedAt: { required: false },\r\n} as const;","/**\r\n * 平台字段管理工具\r\n *\r\n * 提供统一的平台字段管理功能，包括验证、格式化、默认值等\r\n */\r\n\r\nimport {\r\n  Platform,\r\n  PlatformType,\r\n  getRequiredFields,\r\n  getOptionalFields,\r\n  validateRequiredFields,\r\n  createDefaultPlatformData,\r\n  FIELD_DISPLAY_NAMES,\r\n  FIELD_VALIDATION_RULES,\r\n} from \"../types/PlatformStructure\";\r\n\r\n/**\r\n * 字段验证结果接口\r\n */\r\nexport interface FieldValidationResult {\r\n  valid: boolean;\r\n  errors: Record<string, string[]>;\r\n  warnings: Record<string, string[]>;\r\n}\r\n\r\n/**\r\n * 字段格式化选项\r\n */\r\nexport interface FormatOptions {\r\n  includeOptional?: boolean;\r\n  excludeSystem?: boolean;\r\n  groupByCategory?: boolean;\r\n}\r\n\r\n/**\r\n * 平台字段管理工具类\r\n */\r\nexport class PlatformFieldManager {\r\n  /**\r\n   * 验证平台数据的所有字段\r\n   */\r\n  static validatePlatformData(\r\n    data: Partial<Platform>,\r\n    platformType: PlatformType\r\n  ): FieldValidationResult {\r\n    const errors: Record<string, string[]> = {};\r\n    const warnings: Record<string, string[]> = {};\r\n\r\n    // 验证必要字段\r\n    const requiredValidation = validateRequiredFields(data, platformType);\r\n    if (!requiredValidation.valid) {\r\n      requiredValidation.missingFields.forEach((field) => {\r\n        errors[field] = [\r\n          `${\r\n            FIELD_DISPLAY_NAMES[field as keyof typeof FIELD_DISPLAY_NAMES]\r\n          } 是必要字段`,\r\n        ];\r\n      });\r\n    }\r\n\r\n    // 验证字段格式和约束\r\n    Object.entries(data).forEach(([fieldName, value]) => {\r\n      const fieldErrors = PlatformFieldManager.validateField(\r\n        fieldName,\r\n        value,\r\n        platformType\r\n      );\r\n      if (fieldErrors.length > 0) {\r\n        errors[fieldName] = fieldErrors;\r\n      }\r\n\r\n      const fieldWarnings = PlatformFieldManager.getFieldWarnings(\r\n        fieldName,\r\n        value,\r\n        platformType\r\n      );\r\n      if (fieldWarnings.length > 0) {\r\n        warnings[fieldName] = fieldWarnings;\r\n      }\r\n    });\r\n\r\n    return {\r\n      valid: Object.keys(errors).length === 0,\r\n      errors,\r\n      warnings,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 验证单个字段\r\n   */\r\n  static validateField(\r\n    fieldName: string,\r\n    value: any,\r\n    _platformType: PlatformType\r\n  ): string[] {\r\n    const errors: string[] = [];\r\n    const rules =\r\n      FIELD_VALIDATION_RULES[fieldName as keyof typeof FIELD_VALIDATION_RULES];\r\n\r\n    if (!rules) return errors;\r\n\r\n    const fieldDisplayName =\r\n      FIELD_DISPLAY_NAMES[fieldName as keyof typeof FIELD_DISPLAY_NAMES] ||\r\n      fieldName;\r\n\r\n    // 必要字段检查\r\n    if (\r\n      rules.required &&\r\n      (value === null || value === undefined || value === \"\")\r\n    ) {\r\n      errors.push(`${fieldDisplayName} 不能为空`);\r\n      return errors; // 如果必要字段为空，不继续其他验证\r\n    }\r\n\r\n    // 跳过空值的其他验证\r\n    if (value === null || value === undefined || value === \"\") {\r\n      return errors;\r\n    }\r\n\r\n    // 特殊字段验证\r\n    switch (fieldName) {\r\n      case \"symbol\":\r\n        if (typeof value === \"string\" && !/^[A-Z0-9]{1,10}$/.test(value)) {\r\n          errors.push(\"货币符号只能包含大写字母和数字，长度1-10位\");\r\n        }\r\n        break;\r\n\r\n      case \"qrCodeImageUrl\":\r\n        if (\r\n          typeof value === \"string\" &&\r\n          value &&\r\n          !PlatformFieldManager.isValidUrl(value)\r\n        ) {\r\n          errors.push(\"请输入有效的URL地址\");\r\n        }\r\n        break;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * 获取字段警告\r\n   */\r\n  static getFieldWarnings(\r\n    fieldName: string,\r\n    value: any,\r\n    platformType: PlatformType\r\n  ): string[] {\r\n    const warnings: string[] = [];\r\n\r\n    // 存款平台特殊警告\r\n    if (platformType === \"deposit\") {\r\n      if (fieldName === \"address\" && typeof value === \"string\" && value) {\r\n        if (value.length > 100) {\r\n          warnings.push(\"地址较长，请确认正确性\");\r\n        }\r\n      }\r\n\r\n      if (fieldName === \"fee\" && typeof value === \"number\" && value > 0) {\r\n        warnings.push(\"存款平台通常不收取手续费\");\r\n      }\r\n    }\r\n\r\n    // 提现平台特殊警告\r\n    if (platformType === \"withdrawal\") {\r\n      if (fieldName === \"maxAmount\" && !value) {\r\n        warnings.push(\"建议设置最大提现金额以控制风险\");\r\n      }\r\n    }\r\n\r\n    return warnings;\r\n  }\r\n\r\n  /**\r\n   * 格式化字段数据用于显示\r\n   */\r\n  static formatFieldsForDisplay(\r\n    data: Partial<Platform>,\r\n    platformType: PlatformType,\r\n    options: FormatOptions = {}\r\n  ): Record<string, any> {\r\n    const formatted: Record<string, any> = {};\r\n    const requiredFields = getRequiredFields(platformType);\r\n    const optionalFields = getOptionalFields(platformType);\r\n\r\n    // 处理必要字段\r\n    requiredFields.forEach((field) => {\r\n      if (field in data) {\r\n        formatted[field] = PlatformFieldManager.formatFieldValue(\r\n          field,\r\n          data[field as keyof Platform]\r\n        );\r\n      }\r\n    });\r\n\r\n    // 处理可选字段\r\n    if (options.includeOptional !== false) {\r\n      optionalFields.forEach((field) => {\r\n        if (\r\n          field in data &&\r\n          data[field as keyof Platform] !== null &&\r\n          data[field as keyof Platform] !== undefined\r\n        ) {\r\n          formatted[field] = PlatformFieldManager.formatFieldValue(\r\n            field,\r\n            data[field as keyof Platform]\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    // 排除系统字段\r\n    if (options.excludeSystem) {\r\n      delete formatted.id;\r\n      delete formatted.createdAt;\r\n      delete formatted.updatedAt;\r\n    }\r\n\r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * 格式化单个字段值\r\n   */\r\n  static formatFieldValue(fieldName: string, value: any): any {\r\n    if (value === null || value === undefined) return null;\r\n\r\n    switch (fieldName) {\r\n      case \"minAmount\":\r\n      case \"maxAmount\":\r\n      case \"fee\":\r\n        return typeof value === \"number\" ? value.toFixed(8) : value;\r\n\r\n      case \"isActive\":\r\n        return value ? \"启用\" : \"禁用\";\r\n\r\n      case \"createdAt\":\r\n      case \"updatedAt\":\r\n        return value instanceof Date ? value.toLocaleString() : value;\r\n\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建字段编辑表单的配置\r\n   */\r\n  static getFieldConfig(platformType: PlatformType): Record<string, any> {\r\n    const config: Record<string, any> = {};\r\n    const requiredFields = getRequiredFields(platformType);\r\n    const optionalFields = getOptionalFields(platformType);\r\n\r\n    [...requiredFields, ...optionalFields].forEach((field) => {\r\n      config[field] = {\r\n        label:\r\n          FIELD_DISPLAY_NAMES[field as keyof typeof FIELD_DISPLAY_NAMES] ||\r\n          field,\r\n        required: requiredFields.includes(field),\r\n        validation:\r\n          FIELD_VALIDATION_RULES[field as keyof typeof FIELD_VALIDATION_RULES],\r\n        ...PlatformFieldManager.getFieldInputConfig(field),\r\n      };\r\n    });\r\n\r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * 获取字段输入配置\r\n   */\r\n  static getFieldInputConfig(fieldName: string): Record<string, any> {\r\n    switch (fieldName) {\r\n      case \"name\":\r\n        return {\r\n          type: \"text\",\r\n          placeholder: \"例如：币安交易所\",\r\n          maxLength: 255,\r\n        };\r\n\r\n      case \"symbol\":\r\n        return {\r\n          type: \"text\",\r\n          placeholder: \"例如：USDT, BTC\",\r\n          maxLength: 50,\r\n          transform: \"uppercase\",\r\n        };\r\n\r\n      case \"network\":\r\n        return {\r\n          type: \"text\",\r\n          placeholder: \"例如：TRC20, ERC20\",\r\n          maxLength: 50,\r\n          transform: \"uppercase\",\r\n        };\r\n\r\n      case \"minAmount\":\r\n      case \"maxAmount\":\r\n      case \"fee\":\r\n        return {\r\n          type: \"number\",\r\n          min: 0,\r\n          step: 0.00000001,\r\n        };\r\n\r\n      case \"address\":\r\n        return {\r\n          type: \"text\",\r\n          placeholder: \"收款地址\",\r\n          maxLength: 500,\r\n        };\r\n\r\n      case \"qrCodeImageUrl\":\r\n        return {\r\n          type: \"url\",\r\n          placeholder: \"https://example.com/qr.png\",\r\n          maxLength: 500,\r\n        };\r\n\r\n      case \"warningText\":\r\n        return {\r\n          type: \"textarea\",\r\n          placeholder: \"重要提示信息\",\r\n          maxLength: 1000,\r\n        };\r\n\r\n      case \"isActive\":\r\n        return {\r\n          type: \"boolean\",\r\n          default: true,\r\n        };\r\n\r\n      default:\r\n        return {\r\n          type: \"text\",\r\n        };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理和标准化平台数据\r\n   */\r\n  static sanitizePlatformData(\r\n    data: Record<string, any>,\r\n    platformType: PlatformType\r\n  ): Partial<Platform> {\r\n    const sanitized: Record<string, any> = {};\r\n    const allFields = [\r\n      ...getRequiredFields(platformType),\r\n      ...getOptionalFields(platformType),\r\n    ];\r\n\r\n    allFields.forEach((field) => {\r\n      if (field in data) {\r\n        sanitized[field] = PlatformFieldManager.sanitizeFieldValue(\r\n          field,\r\n          data[field]\r\n        );\r\n      }\r\n    });\r\n\r\n    return sanitized as Partial<Platform>;\r\n  }\r\n\r\n  /**\r\n   * 清理单个字段值\r\n   */\r\n  static sanitizeFieldValue(fieldName: string, value: any): any {\r\n    if (value === null || value === undefined || value === \"\") return null;\r\n\r\n    switch (fieldName) {\r\n      case \"name\":\r\n      case \"address\":\r\n      case \"warningText\":\r\n        return typeof value === \"string\" ? value.trim() : value;\r\n\r\n      case \"symbol\":\r\n      case \"network\":\r\n        return typeof value === \"string\" ? value.trim().toUpperCase() : value;\r\n\r\n      case \"minAmount\":\r\n      case \"maxAmount\":\r\n      case \"fee\":\r\n        const num = parseFloat(value);\r\n        return isNaN(num) ? null : Math.max(0, num);\r\n\r\n      case \"isActive\":\r\n        return Boolean(value);\r\n\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 比较两个平台数据的差异\r\n   */\r\n  static compareData(\r\n    oldData: Partial<Platform>,\r\n    newData: Partial<Platform>\r\n  ): Record<string, { old: any; new: any }> {\r\n    const changes: Record<string, { old: any; new: any }> = {};\r\n    const allKeys = new Set([...Object.keys(oldData), ...Object.keys(newData)]);\r\n\r\n    allKeys.forEach((key) => {\r\n      const oldValue = oldData[key as keyof Platform];\r\n      const newValue = newData[key as keyof Platform];\r\n\r\n      if (oldValue !== newValue) {\r\n        changes[key] = { old: oldValue, new: newValue };\r\n      }\r\n    });\r\n\r\n    return changes;\r\n  }\r\n\r\n  /**\r\n   * 验证URL格式\r\n   */\r\n  static isValidUrl(string: string): boolean {\r\n    try {\r\n      const url = new URL(string);\r\n      return Boolean(url);\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 便捷函数：创建新的平台数据\r\n */\r\nexport function createNewPlatform(\r\n  platformType: PlatformType,\r\n  initialData: Partial<Platform> = {}\r\n): Partial<Platform> {\r\n  const defaultData = createDefaultPlatformData(platformType);\r\n  return { ...defaultData, ...initialData };\r\n}\r\n\r\n/**\r\n * 便捷函数：验证平台数据\r\n */\r\nexport function validatePlatform(\r\n  data: Partial<Platform>,\r\n  platformType: PlatformType\r\n): FieldValidationResult {\r\n  return PlatformFieldManager.validatePlatformData(data, platformType);\r\n}\r\n\r\n/**\r\n * 便捷函数：获取字段显示名称\r\n */\r\nexport function getFieldDisplayName(fieldName: string): string {\r\n  return (\r\n    FIELD_DISPLAY_NAMES[fieldName as keyof typeof FIELD_DISPLAY_NAMES] ||\r\n    fieldName\r\n  );\r\n}\r\n\r\n/**\r\n * 便捷函数：格式化平台数据用于表单\r\n */\r\nexport function formatForForm(\r\n  data: Partial<Platform>,\r\n  platformType: PlatformType\r\n): Record<string, any> {\r\n  return PlatformFieldManager.formatFieldsForDisplay(data, platformType, {\r\n    includeOptional: true,\r\n    excludeSystem: true,\r\n  });\r\n}\r\n\r\n/**\r\n * 便捷函数：清理表单数据\r\n */\r\nexport function sanitizeFormData(\r\n  formData: Record<string, any>,\r\n  platformType: PlatformType\r\n): Partial<Platform> {\r\n  return PlatformFieldManager.sanitizePlatformData(formData, platformType);\r\n}\r\n","import app from \"flarum/admin/app\";\r\nimport type {\r\n  PlatformOperations,\r\n  TransactionOperations,\r\n} from \"../components/shared/GenericManagementPage\";\r\nimport {\r\n  sanitizeFormData,\r\n  validatePlatform,\r\n} from \"../../common/utils/PlatformFieldManager\";\r\nimport { PlatformType } from \"../../common/types/PlatformStructure\";\r\n\r\n// Withdrawal platform operations - now using service layer\r\nexport const createWithdrawalPlatformOperations =\r\n  (): PlatformOperations<any> => ({\r\n    async create(formData: any) {\r\n      try {\r\n        // 使用统一的平台结构验证和清理数据\r\n        const platformType: PlatformType = \"withdrawal\";\r\n\r\n        // 清理和标准化表单数据\r\n        const sanitizedData = sanitizeFormData(formData, platformType);\r\n\r\n        // 验证数据完整性\r\n        const validation = validatePlatform(sanitizedData, platformType);\r\n        if (!validation.valid) {\r\n          const errorMessages = Object.values(validation.errors).flat();\r\n          throw new Error(errorMessages.join(\", \"));\r\n        }\r\n\r\n        // Import PlatformService dynamically to avoid circular dependencies\r\n        const { platformService } = await import(\r\n          \"../../common/services/PlatformService\"\r\n        );\r\n\r\n        const result = await platformService.create(\r\n          \"withdrawal\",\r\n          sanitizedData\r\n        );\r\n\r\n        app.alerts.show(\r\n          { type: \"success\", dismissible: true },\r\n          app.translator.trans(\"funds.admin.platforms.add_success\").toString()\r\n        );\r\n\r\n        return result;\r\n      } catch (error) {\r\n        app.alerts.show(\r\n          { type: \"error\", dismissible: true },\r\n          error instanceof Error\r\n            ? error.message\r\n            : app.translator.trans(\"funds.admin.platforms.add_error\").toString()\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async toggleStatus(platform: any) {\r\n      try {\r\n        // Import PlatformService dynamically\r\n        const { platformService } = await import(\r\n          \"../../common/services/PlatformService\"\r\n        );\r\n\r\n        const result = await platformService.toggleStatus(platform);\r\n        const newStatus = result.isActive();\r\n\r\n        app.alerts.show(\r\n          { type: \"success\", dismissible: true },\r\n          app.translator.trans(\r\n            `funds.admin.platforms.${newStatus ? \"enable\" : \"disable\"}_success`\r\n          )\r\n        );\r\n\r\n        return result;\r\n      } catch (error) {\r\n        app.alerts.show(\r\n          { type: \"error\", dismissible: true },\r\n          error instanceof Error\r\n            ? error.message\r\n            : \"Failed to toggle platform status\"\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async delete(platform: any) {\r\n      try {\r\n        // Import PlatformService dynamically\r\n        const { platformService } = await import(\r\n          \"../../common/services/PlatformService\"\r\n        );\r\n\r\n        await platformService.delete(platform);\r\n\r\n        app.alerts.show(\r\n          { type: \"success\", dismissible: true },\r\n          app.translator\r\n            .trans(\"funds.admin.platforms.delete_success\")\r\n            .toString()\r\n        );\r\n      } catch (error) {\r\n        app.alerts.show(\r\n          { type: \"error\", dismissible: true },\r\n          error instanceof Error ? error.message : \"Failed to delete platform\"\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async load() {\r\n      try {\r\n        // Import PlatformService dynamically\r\n        const { platformService } = await import(\r\n          \"../../common/services/PlatformService\"\r\n        );\r\n        return await platformService.find(\"withdrawal\");\r\n      } catch (error) {\r\n        app.alerts.show(\r\n          { type: \"error\", dismissible: true },\r\n          app.translator.trans(\"funds.admin.platforms.load_error\").toString()\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n  });\r\n\r\n// Deposit platform operations - now using service layer with unified validation\r\nexport const createDepositPlatformOperations = (): PlatformOperations<any> => ({\r\n  async create(formData: any) {\r\n    try {\r\n      // 使用统一的平台结构验证和清理数据\r\n      const platformType: PlatformType = \"deposit\";\r\n\r\n      // 清理和标准化表单数据\r\n      const sanitizedData = sanitizeFormData(formData, platformType);\r\n\r\n      // 验证数据完整性\r\n      const validation = validatePlatform(sanitizedData, platformType);\r\n      if (!validation.valid) {\r\n        const errorMessages = Object.values(validation.errors).flat();\r\n        throw new Error(errorMessages.join(\", \"));\r\n      }\r\n\r\n      // Import PlatformService dynamically to avoid circular dependencies\r\n      const { platformService } = await import(\r\n        \"../../common/services/PlatformService\"\r\n      );\r\n\r\n      const result = await platformService.create(\"deposit\", sanitizedData);\r\n\r\n      app.alerts.show(\r\n        { type: \"success\", dismissible: true },\r\n        app.translator\r\n          .trans(\"funds.admin.deposit.platforms.add_success\")\r\n          .toString()\r\n      );\r\n\r\n      return result;\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: \"error\", dismissible: true },\r\n        error instanceof Error\r\n          ? error.message\r\n          : app.translator\r\n              .trans(\"funds.admin.deposit.platforms.add_error\")\r\n              .toString()\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async toggleStatus(platform: any) {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import(\r\n        \"../../common/services/PlatformService\"\r\n      );\r\n\r\n      const result = await platformService.toggleStatus(platform);\r\n      const newStatus = result.isActive();\r\n\r\n      app.alerts.show(\r\n        { type: \"success\", dismissible: true },\r\n        app.translator.trans(\r\n          `funds.admin.deposit.platforms.${\r\n            newStatus ? \"enable\" : \"disable\"\r\n          }_success`\r\n        )\r\n      );\r\n\r\n      return result;\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: \"error\", dismissible: true },\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Failed to toggle deposit platform status\"\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async delete(platform: any) {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import(\r\n        \"../../common/services/PlatformService\"\r\n      );\r\n\r\n      await platformService.delete(platform);\r\n\r\n      app.alerts.show(\r\n        { type: \"success\", dismissible: true },\r\n        app.translator\r\n          .trans(\"funds.admin.deposit.platforms.delete_success\")\r\n          .toString()\r\n      );\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: \"error\", dismissible: true },\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Failed to delete deposit platform\"\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async load() {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import(\r\n        \"../../common/services/PlatformService\"\r\n      );\r\n      return await platformService.find(\"deposit\");\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: \"error\", dismissible: true },\r\n        app.translator\r\n          .trans(\"funds.admin.deposit.platforms.load_error\")\r\n          .toString()\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n});\r\n\r\n// Withdrawal request operations - now using service layer\r\nexport const createWithdrawalRequestOperations =\r\n  (): TransactionOperations<any> => ({\r\n    async updateStatus(request: any, status: string): Promise<void> {\r\n      try {\r\n        // Import WithdrawalService dynamically\r\n        const { withdrawalService } = await import(\r\n          \"../../common/services/WithdrawalService\"\r\n        );\r\n\r\n        await withdrawalService.update(request, { status });\r\n\r\n        // Success message is handled by the calling component (GenericManagementPage)\r\n        // to avoid duplicate messages\r\n      } catch (error) {\r\n        app.alerts.show(\r\n          { type: \"error\", dismissible: true },\r\n          error instanceof Error\r\n            ? error.message\r\n            : `Failed to update request status to ${status}`\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async load() {\r\n      try {\r\n        // Import WithdrawalService dynamically\r\n        const { withdrawalService } = await import(\r\n          \"../../common/services/WithdrawalService\"\r\n        );\r\n        return await withdrawalService.find({ include: \"user,platform\" });\r\n      } catch (error) {\r\n        app.alerts.show(\r\n          { type: \"error\", dismissible: true },\r\n          app.translator.trans(\"funds.admin.requests.load_error\").toString()\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n  });\r\n\r\n// Deposit record operations - now using service layer\r\nexport const createDepositRecordOperations =\r\n  (): TransactionOperations<any> => ({\r\n    async updateStatus(record: any, status: string): Promise<void> {\r\n      try {\r\n        // Import DepositService dynamically\r\n        const { depositService } = await import(\r\n          \"../../common/services/DepositService\"\r\n        );\r\n\r\n        await depositService.update(record, { status });\r\n\r\n        // Success message is handled by the calling component\r\n        // to avoid duplicate messages\r\n      } catch (error) {\r\n        app.alerts.show(\r\n          { type: \"error\", dismissible: true },\r\n          error instanceof Error\r\n            ? error.message\r\n            : app.translator\r\n                .trans(\"funds.admin.deposit.records.update_error\")\r\n                .toString()\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    async load() {\r\n      try {\r\n        // Import DepositService dynamically\r\n        const { depositService } = await import(\r\n          \"../../common/services/DepositService\"\r\n        );\r\n        return await depositService.find();\r\n      } catch (error) {\r\n        app.alerts.show(\r\n          { type: \"error\", dismissible: true },\r\n          app.translator\r\n            .trans(\"funds.admin.deposit.records.load_error\")\r\n            .toString()\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n  });\r\n","import Model from 'flarum/common/Model';\r\n\r\n/**\r\n * Standard pagination parameters for Flarum API requests\r\n */\r\nexport interface PaginationOptions {\r\n  limit?: number;\r\n  offset?: number;\r\n  page?: {\r\n    limit?: number;\r\n    offset?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Standard filter options for API requests\r\n */\r\nexport interface FilterOptions {\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Standard sort options for API requests\r\n */\r\nexport interface SortOptions {\r\n  field: string;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n/**\r\n * Standard query options for finding records\r\n */\r\nexport interface QueryOptions {\r\n  include?: string | string[];\r\n  filter?: FilterOptions;\r\n  sort?: string | SortOptions | SortOptions[];\r\n  page?: PaginationOptions;\r\n}\r\n\r\n/**\r\n * Service response wrapper for better error handling\r\n */\r\nexport interface ServiceResponse<T> {\r\n  data: T;\r\n  meta?: {\r\n    total?: number;\r\n    count?: number;\r\n    hasMore?: boolean;\r\n  };\r\n  errors?: Array<{\r\n    detail: string;\r\n    source?: any;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Base service interface that all services should implement\r\n */\r\nexport interface BaseService<TModel extends Model> {\r\n  /**\r\n   * Find multiple records\r\n   */\r\n  find(options?: QueryOptions): Promise<TModel[]>;\r\n\r\n  /**\r\n   * Find a single record by ID\r\n   */\r\n  findById(id: string | number, options?: QueryOptions): Promise<TModel | null>;\r\n\r\n  /**\r\n   * Create a new record\r\n   */\r\n  create(attributes: Record<string, any>): Promise<TModel>;\r\n\r\n  /**\r\n   * Update an existing record\r\n   */\r\n  update(model: TModel, attributes: Record<string, any>): Promise<TModel>;\r\n\r\n  /**\r\n   * Delete a record\r\n   */\r\n  delete(model: TModel): Promise<void>;\r\n\r\n  /**\r\n   * Check if a record can be modified by current user\r\n   */\r\n  canModify(model: TModel): boolean;\r\n\r\n  /**\r\n   * Check if current user can create new records\r\n   */\r\n  canCreate(): boolean;\r\n\r\n  /**\r\n   * Check if current user can delete a record\r\n   */\r\n  canDelete(model: TModel): boolean;\r\n}\r\n\r\n/**\r\n * Withdrawal-specific service interface\r\n */\r\nexport interface WithdrawalServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Submit a funds request\r\n   */\r\n  submitRequest(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    accountDetails: string;\r\n    message?: string;\r\n  }): Promise<any>;\r\n\r\n  /**\r\n   * Get user's funds history\r\n   */\r\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Get pending requests (admin only)\r\n   */\r\n  getPendingRequests(options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Approve a funds request (admin only)\r\n   */\r\n  approve(request: any, message?: string): Promise<any>;\r\n\r\n  /**\r\n   * Reject a funds request (admin only)\r\n   */\r\n  reject(request: any, reason?: string): Promise<any>;\r\n\r\n  /**\r\n   * Cancel a pending request (user only)\r\n   */\r\n  cancel(request: any): Promise<any>;\r\n}\r\n\r\n/**\r\n * Deposit-specific service interface\r\n */\r\nexport interface DepositServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Get user's deposit history\r\n   */\r\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Create deposit record\r\n   */\r\n  createRecord(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    note?: string;\r\n  }): Promise<any>;\r\n\r\n  /**\r\n   * Get pending deposits (admin only)\r\n   */\r\n  getPendingDeposits(options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Confirm a deposit (admin only)\r\n   */\r\n  confirm(deposit: any, confirmedAmount?: number): Promise<any>;\r\n}\r\n\r\n/**\r\n * Platform service interface for both funds and deposit platforms\r\n */\r\nexport interface PlatformServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Get active platforms only\r\n   */\r\n  getActive(type: 'funds' | 'deposit', options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Toggle platform status (admin only)\r\n   */\r\n  toggleStatus(platform: any): Promise<any>;\r\n\r\n  /**\r\n   * Update platform configuration (admin only)\r\n   */\r\n  updateConfig(platform: any, config: Record<string, any>): Promise<any>;\r\n\r\n  /**\r\n   * Get platforms by symbol\r\n   */\r\n  getBySymbol(symbol: string, type: 'funds' | 'deposit'): Promise<any[]>;\r\n}\r\n\r\n/**\r\n * Settings service interface for managing Flarum admin settings\r\n */\r\nexport interface SettingsServiceInterface {\r\n  getSetting(key: string, defaultValue?: any): Promise<any>;\r\n  saveSetting(key: string, value: any): Promise<void>;\r\n  saveSettings(settings: Record<string, any>): Promise<void>;\r\n  deleteSetting(key: string): Promise<void>;\r\n  getSettingsWithPrefix(prefix: string): Promise<Record<string, any>>;\r\n  canManageSettings(): boolean;\r\n  getExtensionSetting(extension: string, key: string, defaultValue?: any): Promise<any>;\r\n  saveExtensionSetting(extension: string, key: string, value: any): Promise<void>;\r\n  getWithdrawalSetting(key: string, defaultValue?: any): Promise<any>;\r\n  saveWithdrawalSetting(key: string, value: any): Promise<void>;\r\n  getAllWithdrawalSettings(): Promise<Record<string, any>>;\r\n}\r\n\r\n\r\n/**\r\n * Cache service for managing local data storage\r\n */\r\nexport interface CacheOptions {\r\n  ttl?: number; // Time to live in milliseconds\r\n  key?: string; // Custom cache key\r\n  refresh?: boolean; // Force refresh from server\r\n}\r\n\r\n/**\r\n * Common service configuration\r\n */\r\nexport interface ServiceConfig {\r\n  apiUrl?: string;\r\n  timeout?: number;\r\n  retries?: number;\r\n  cache?: boolean;\r\n  defaultPageSize?: number;\r\n}\r\n\r\n/**\r\n * Service error types\r\n */\r\nexport enum ServiceErrorType {\r\n  NETWORK_ERROR = 'network_error',\r\n  PERMISSION_DENIED = 'permission_denied',\r\n  VALIDATION_ERROR = 'validation_error',\r\n  NOT_FOUND = 'not_found',\r\n  SERVER_ERROR = 'server_error',\r\n  TIMEOUT = 'timeout'\r\n}\r\n\r\n/**\r\n * Service error class\r\n */\r\nexport class ServiceError extends Error {\r\n  public type: ServiceErrorType;\r\n  public code?: string;\r\n  public details?: any;\r\n\r\n  constructor(\r\n    message: string, \r\n    type: ServiceErrorType = ServiceErrorType.SERVER_ERROR, \r\n    code?: string, \r\n    details?: any\r\n  ) {\r\n    super(message);\r\n    this.name = 'ServiceError';\r\n    this.type = type;\r\n    this.code = code;\r\n    this.details = details;\r\n  }\r\n}","import app from \"flarum/common/app\";\r\nimport WithdrawalRequest from \"../models/WithdrawalRequest\";\r\nimport WithdrawalPlatform from \"../models/WithdrawalPlatform\";\r\nimport {\r\n  WithdrawalServiceInterface,\r\n  QueryOptions,\r\n  ServiceError,\r\n  ServiceErrorType,\r\n} from \"../types/services\";\r\n\r\n/**\r\n * Service for managing funds requests with proper CRUD operations\r\n */\r\nexport default class WithdrawalService implements WithdrawalServiceInterface {\r\n  private readonly modelType = \"withdrawal-requests\";\r\n  private readonly platformModelType = \"withdrawal-platforms\";\r\n\r\n  /**\r\n   * Find multiple funds requests\r\n   */\r\n  async find(options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\r\n    try {\r\n      const queryParams: any = {\r\n        include: options.include || \"user,platform\",\r\n        sort: options.sort || \"-created_at\",\r\n        ...options,\r\n      };\r\n\r\n      // Add pagination if specified\r\n      if (options.page) {\r\n        queryParams.page = options.page;\r\n      }\r\n\r\n      // Add filters if specified\r\n      if (options.filter) {\r\n        queryParams.filter = options.filter;\r\n      }\r\n\r\n      const results = await app.store.find(this.modelType, queryParams);\r\n      return results as unknown as WithdrawalRequest[];\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to fetch funds requests\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find a single funds request by ID\r\n   */\r\n  async findById(\r\n    id: string | number,\r\n    options: QueryOptions = {}\r\n  ): Promise<WithdrawalRequest | null> {\r\n    try {\r\n      const queryParams: any = {\r\n        include: options.include || \"user,platform\",\r\n      };\r\n\r\n      const result = await app.store.find(\r\n        this.modelType,\r\n        String(id),\r\n        queryParams\r\n      );\r\n      return result as unknown as WithdrawalRequest;\r\n    } catch (error) {\r\n      if (this.isNotFoundError(error)) {\r\n        return null;\r\n      }\r\n      throw this.handleError(error, `Failed to fetch funds request ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new funds request\r\n   */\r\n  async create(attributes: Record<string, any>): Promise<WithdrawalRequest> {\r\n    try {\r\n      // Validate required fields\r\n      this.validateCreateAttributes(attributes);\r\n\r\n      const request = app.store.createRecord(\r\n        this.modelType\r\n      ) as WithdrawalRequest;\r\n\r\n      const savedRequest = await request.save(attributes);\r\n      return savedRequest as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to create funds request\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing funds request\r\n   */\r\n  async update(\r\n    model: WithdrawalRequest,\r\n    attributes: Record<string, any>\r\n  ): Promise<WithdrawalRequest> {\r\n    try {\r\n      if (!this.canModify(model)) {\r\n        throw new ServiceError(\r\n          \"You do not have permission to modify this funds request\",\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      const updatedModel = await model.save(attributes);\r\n      return updatedModel as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to update funds request\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a funds request\r\n   */\r\n  async delete(model: WithdrawalRequest): Promise<void> {\r\n    try {\r\n      if (!this.canDelete(model)) {\r\n        throw new ServiceError(\r\n          \"You do not have permission to delete this funds request\",\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      await model.delete();\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to delete funds request\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Submit a new funds request with validation\r\n   */\r\n  async submitRequest(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    accountDetails: string;\r\n    message?: string;\r\n  }): Promise<WithdrawalRequest> {\r\n    try {\r\n      // Validate user balance and platform limits\r\n      await this.validateWithdrawalRequest(data);\r\n\r\n      const attributes = {\r\n        platformId: data.platformId,\r\n        amount: data.amount,\r\n        accountDetails: data.accountDetails,\r\n        message: data.message || \"\",\r\n        status: \"pending\",\r\n      };\r\n\r\n      return await this.create(attributes);\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to submit funds request\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user's funds history\r\n   */\r\n  async getUserHistory(\r\n    userId?: number,\r\n    options: QueryOptions = {}\r\n  ): Promise<WithdrawalRequest[]> {\r\n    const targetUserId = userId || app.session.user?.id();\r\n\r\n    if (!targetUserId) {\r\n      throw new ServiceError(\r\n        \"User not authenticated\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        user: targetUserId,\r\n        ...options.filter,\r\n      },\r\n      include: options.include || \"platform\",\r\n      sort: options.sort || \"-created_at\",\r\n    };\r\n\r\n    return await this.find(queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Get pending requests (admin only)\r\n   */\r\n  async getPendingRequests(\r\n    options: QueryOptions = {}\r\n  ): Promise<WithdrawalRequest[]> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        status: \"pending\",\r\n        ...options.filter,\r\n      },\r\n      include: options.include || \"user,platform\",\r\n      sort: options.sort || \"created_at\",\r\n    };\r\n\r\n    return await this.find(queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Approve a funds request (admin only)\r\n   */\r\n  async approve(\r\n    request: WithdrawalRequest,\r\n    message?: string\r\n  ): Promise<WithdrawalRequest> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    if (!request.isPending()) {\r\n      throw new ServiceError(\r\n        \"Only pending requests can be approved\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: \"approved\",\r\n    };\r\n\r\n    if (message) {\r\n      attributes.adminNote = message;\r\n    }\r\n\r\n    return await this.update(request, attributes);\r\n  }\r\n\r\n  /**\r\n   * Reject a funds request (admin only)\r\n   */\r\n  async reject(\r\n    request: WithdrawalRequest,\r\n    reason?: string\r\n  ): Promise<WithdrawalRequest> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    if (!request.isPending()) {\r\n      throw new ServiceError(\r\n        \"Only pending requests can be rejected\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: \"rejected\",\r\n    };\r\n\r\n    if (reason) {\r\n      attributes.adminNote = reason;\r\n    }\r\n\r\n    return await this.update(request, attributes);\r\n  }\r\n\r\n  /**\r\n   * Cancel a pending request (user only)\r\n   */\r\n  async cancel(request: WithdrawalRequest): Promise<any> {\r\n    if (!request.canBeModified()) {\r\n      throw new ServiceError(\r\n        \"This request cannot be cancelled\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const currentUser = app.session.user;\r\n    if (\r\n      !currentUser ||\r\n      (String(request.userId()) !== currentUser.id() && !currentUser.isAdmin())\r\n    ) {\r\n      throw new ServiceError(\r\n        \"You can only cancel your own requests\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.delete(request);\r\n  }\r\n\r\n  /**\r\n   * Check if current user can modify a funds request\r\n   */\r\n  canModify(model: WithdrawalRequest): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending requests\r\n    return String(model.userId()) === currentUser.id() && model.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can create new funds requests\r\n   */\r\n  canCreate(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!currentUser;\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete a funds request\r\n   */\r\n  canDelete(model: WithdrawalRequest): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending requests\r\n    return String(model.userId()) === currentUser.id() && model.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Get available funds platforms\r\n   */\r\n  async getPlatforms(): Promise<WithdrawalPlatform[]> {\r\n    try {\r\n      const platforms = await app.store.find(this.platformModelType);\r\n\r\n      return platforms as unknown as WithdrawalPlatform[];\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to fetch funds platforms\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate funds request data\r\n   */\r\n  private async validateWithdrawalRequest(data: any): Promise<void> {\r\n    const { platformId, amount } = data;\r\n\r\n    // Get platform details\r\n    const platform = (await app.store.find(\r\n      this.platformModelType,\r\n      String(platformId)\r\n    )) as unknown as WithdrawalPlatform;\r\n    if (!platform) {\r\n      throw new ServiceError(\r\n        \"Invalid platform selected\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Check if platform is active\r\n    if (!platform.isActive?.()) {\r\n      throw new ServiceError(\r\n        \"Selected platform is not available\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Validate amount limits\r\n    const minAmount = platform.minAmount?.() || 0;\r\n    const maxAmount = platform.maxAmount?.();\r\n\r\n    if (amount < minAmount) {\r\n      throw new ServiceError(\r\n        `Minimum funds amount is ${minAmount}`,\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    if (maxAmount && amount > maxAmount) {\r\n      throw new ServiceError(\r\n        `Maximum funds amount is ${maxAmount}`,\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Check user balance\r\n    const currentUser = app.session.user;\r\n    if (currentUser) {\r\n      const userBalance = parseFloat(currentUser.attribute(\"money\") || \"0\");\r\n      const fee = platform.fee?.() || 0;\r\n      const totalRequired = amount + fee;\r\n\r\n      if (userBalance < totalRequired) {\r\n        throw new ServiceError(\r\n          `Insufficient balance. Required: ${totalRequired}, Available: ${userBalance}`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate create attributes\r\n   */\r\n  private validateCreateAttributes(attributes: any): void {\r\n    const required = [\"platformId\", \"amount\", \"accountDetails\"];\r\n\r\n    for (const field of required) {\r\n      if (!attributes[field]) {\r\n        throw new ServiceError(\r\n          `${field} is required`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (typeof attributes.amount !== \"number\" || attributes.amount <= 0) {\r\n      throw new ServiceError(\r\n        \"Amount must be a positive number\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === \"TypeError\" || error.message?.includes(\"fetch\")) {\r\n      return new ServiceError(\r\n        \"Network error occurred\",\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if error is a not found error\r\n   */\r\n  private isNotFoundError(error: any): boolean {\r\n    return (\r\n      error.status === 404 ||\r\n      error.response?.status === 404 ||\r\n      error.message?.includes(\"not found\")\r\n    );\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const withdrawalService = new WithdrawalService();\r\n","import app from \"flarum/common/app\";\r\nimport DepositRecord from \"../models/DepositRecord\";\r\nimport { DepositFormData } from \"../../forum/components/deposit/forms/DepositForm\";\r\nimport { ApiPayloadSingle } from \"flarum/common/Store\";\r\n\r\nexport interface DepositService {\r\n  /**\r\n   * 创建新的存款记录\r\n   */\r\n  create(data: DepositFormData): Promise<DepositRecord>;\r\n\r\n  /**\r\n   * 获取用户的存款历史记录\r\n   */\r\n  getUserHistory(): Promise<DepositRecord[]>;\r\n\r\n  /**\r\n   * 获取所有存款记录（管理员）\r\n   */\r\n  getAll(filters?: DepositFilters): Promise<DepositRecord[]>;\r\n\r\n  /**\r\n   * 查找存款记录\r\n   */\r\n  find(params?: any): Promise<DepositRecord[]>;\r\n\r\n  /**\r\n   * 更新存款记录\r\n   */\r\n  update(\r\n    recordId: number,\r\n    data: Partial<DepositUpdateData>\r\n  ): Promise<DepositRecord>;\r\n\r\n  /**\r\n   * 删除存款记录\r\n   */\r\n  delete(record: DepositRecord): Promise<void>;\r\n\r\n  /**\r\n   * 审核存款记录（管理员）\r\n   */\r\n  approve(recordId: number, adminNotes?: string): Promise<DepositRecord>;\r\n\r\n  /**\r\n   * 拒绝存款记录（管理员）\r\n   */\r\n  reject(recordId: number, adminNotes?: string): Promise<DepositRecord>;\r\n}\r\n\r\nexport interface DepositFilters {\r\n  status?: string;\r\n  user?: number;\r\n  search?: string;\r\n  createdAfter?: string;\r\n  createdBefore?: string;\r\n}\r\n\r\nexport interface DepositUpdateData {\r\n  platformId?: number;\r\n  userMessage?: string;\r\n  status?: string;\r\n  adminNotes?: string;\r\n}\r\n\r\nclass DepositServiceImpl implements DepositService {\r\n  async create(data: DepositFormData): Promise<DepositRecord> {\r\n    // Extract platformId from the selected platform\r\n    if (!data.selectedPlatform) {\r\n      throw new Error('Selected platform is required');\r\n    }\r\n\r\n    const platformId = parseInt(data.selectedPlatform.id() as string);\r\n    if (!platformId) {\r\n      throw new Error('Platform ID is required');\r\n    }\r\n\r\n    if (!data.amount || data.amount <= 0) {\r\n      throw new Error('Amount is required and must be greater than 0');\r\n    }\r\n\r\n    if (!data.depositTime) {\r\n      throw new Error('Deposit time is required');\r\n    }\r\n\r\n    const response = await app.request({\r\n      method: \"POST\",\r\n      url: app.forum.attribute(\"apiUrl\") + \"/deposit-records\",\r\n      body: {\r\n        data: {\r\n          type: \"deposit-records\",\r\n          attributes: {\r\n            platformId: platformId,\r\n            amount: data.amount,\r\n            depositTime: data.depositTime.toISOString(),\r\n            userMessage: data.userMessage,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    const record = app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as DepositRecord;\r\n    return Array.isArray(record) ? record[0] : record;\r\n  }\r\n\r\n  async getUserHistory(): Promise<DepositRecord[]> {\r\n    const response = await app.request({\r\n      method: \"GET\",\r\n      url: app.forum.attribute(\"apiUrl\") + \"/deposit-records\",\r\n      params: {\r\n        include: \"user,processedByUser\",\r\n      },\r\n    });\r\n\r\n    return app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as unknown as DepositRecord[];\r\n  }\r\n\r\n  async getAll(filters: DepositFilters = {}): Promise<DepositRecord[]> {\r\n    const params: any = {\r\n      include: \"user,processedByUser\",\r\n    };\r\n\r\n    // 应用过滤器\r\n    if (Object.keys(filters).length > 0) {\r\n      params.filter = filters;\r\n    }\r\n\r\n    const response = await app.request({\r\n      method: \"GET\",\r\n      url: app.forum.attribute(\"apiUrl\") + \"/deposit-records\",\r\n      params,\r\n    });\r\n\r\n    return app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as unknown as DepositRecord[];\r\n  }\r\n\r\n  async update(\r\n    recordId: number,\r\n    data: Partial<DepositUpdateData>\r\n  ): Promise<DepositRecord> {\r\n    const response = await app.request({\r\n      method: \"PATCH\",\r\n      url: `${app.forum.attribute(\"apiUrl\")}/deposit-records/${recordId}`,\r\n      body: {\r\n        data: {\r\n          type: \"deposit-records\",\r\n          id: recordId,\r\n          attributes: data,\r\n        },\r\n      },\r\n    });\r\n\r\n    const record = app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as DepositRecord;\r\n    return Array.isArray(record) ? record[0] : record;\r\n  }\r\n\r\n  async approve(recordId: number, adminNotes?: string): Promise<DepositRecord> {\r\n    return this.update(recordId, {\r\n      status: \"approved\",\r\n      adminNotes,\r\n    });\r\n  }\r\n\r\n  async reject(recordId: number, adminNotes?: string): Promise<DepositRecord> {\r\n    return this.update(recordId, {\r\n      status: \"rejected\",\r\n      adminNotes,\r\n    });\r\n  }\r\n\r\n  async find(params: any = {}): Promise<DepositRecord[]> {\r\n    // Ensure we only include valid relationships for DepositRecord\r\n    const validParams = { ...params };\r\n    if (validParams.include) {\r\n      // Filter out 'platform' from include since DepositRecord doesn't have platform relationship\r\n      validParams.include = validParams.include\r\n        .split(',')\r\n        .filter((rel: string) => rel.trim() !== 'platform')\r\n        .join(',');\r\n      \r\n      // If no valid includes remain, remove the include parameter\r\n      if (!validParams.include) {\r\n        delete validParams.include;\r\n      }\r\n    }\r\n\r\n    const response = await app.request({\r\n      method: \"GET\",\r\n      url: app.forum.attribute(\"apiUrl\") + \"/deposit-records\",\r\n      params: validParams,\r\n    });\r\n\r\n    return app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as unknown as DepositRecord[];\r\n  }\r\n\r\n  async delete(record: DepositRecord): Promise<void> {\r\n    await app.request({\r\n      method: \"DELETE\",\r\n      url: `${app.forum.attribute(\"apiUrl\")}/deposit-records/${record.id()}`,\r\n    });\r\n\r\n    app.store.remove(record);\r\n  }\r\n}\r\n\r\n// 导出单例服务实例\r\nexport const depositService: DepositService = new DepositServiceImpl();\r\nexport default depositService;\r\n","import app from \"flarum/common/app\";\r\nimport {\r\n  QueryOptions,\r\n  ServiceError,\r\n  ServiceErrorType,\r\n} from \"../types/services\";\r\nimport WithdrawalRequest from \"../models/WithdrawalRequest\";\r\nimport DepositRecord from \"../models/DepositRecord\";\r\n\r\n/**\r\n * Service for managing both funds and deposit platforms\r\n */\r\nexport default class PlatformService {\r\n  private readonly withdrawalModelType = \"withdrawal-platforms\";\r\n  private readonly depositModelType = \"deposit-platforms\";\r\n\r\n  /**\r\n   * Find multiple platforms of specified type\r\n   */\r\n  async find(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    options: QueryOptions = {}\r\n  ): Promise<any[]> {\r\n    const modelType =\r\n      type === \"withdrawal\" ? this.withdrawalModelType : this.depositModelType;\r\n\r\n    try {\r\n      const queryParams: any = {\r\n        sort: options.sort || \"name\",\r\n        ...options,\r\n      };\r\n\r\n      // Add pagination if specified\r\n      if (options.page) {\r\n        queryParams.page = options.page;\r\n      }\r\n\r\n      // Add filters if specified\r\n      if (options.filter) {\r\n        queryParams.filter = options.filter;\r\n      }\r\n\r\n      // Include relationships if specified\r\n      if (options.include) {\r\n        queryParams.include = options.include;\r\n      }\r\n\r\n      const results = await app.store.find(modelType, queryParams);\r\n      return Array.isArray(results) ? results : [results];\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to fetch ${type} platforms`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find a single platform by ID\r\n   */\r\n  async findById(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    id: string | number,\r\n    options: QueryOptions = {}\r\n  ): Promise<any | null> {\r\n    const modelType =\r\n      type === \"withdrawal\" ? this.withdrawalModelType : this.depositModelType;\r\n\r\n    try {\r\n      const queryParams: any = {};\r\n\r\n      // Include relationships if specified\r\n      if (options.include) {\r\n        queryParams.include = options.include;\r\n      }\r\n\r\n      const result = await app.store.find(modelType, String(id), queryParams);\r\n      return result;\r\n    } catch (error) {\r\n      if (this.isNotFoundError(error)) {\r\n        return null;\r\n      }\r\n      throw this.handleError(error, `Failed to fetch ${type} platform ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new platform\r\n   */\r\n  async create(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    attributes: Record<string, any>\r\n  ): Promise<any> {\r\n    const modelType =\r\n      type === \"withdrawal\" ? this.withdrawalModelType : this.depositModelType;\r\n\r\n    try {\r\n      // Validate required fields based on platform type\r\n      this.validateCreateAttributes(type, attributes);\r\n\r\n      const platform = app.store.createRecord(modelType);\r\n\r\n      const savedPlatform = await platform.save(attributes);\r\n      return savedPlatform;\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to create ${type} platform`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing platform\r\n   */\r\n  async update(platform: any, attributes: Record<string, any>): Promise<any> {\r\n    try {\r\n      if (!this.canModify(platform)) {\r\n        throw new ServiceError(\r\n          \"You do not have permission to modify this platform\",\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      const updatedPlatform = await platform.save(attributes);\r\n      return updatedPlatform;\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to update platform\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a platform\r\n   */\r\n  async delete(platform: any): Promise<void> {\r\n    try {\r\n      if (!this.canDelete(platform)) {\r\n        throw new ServiceError(\r\n          \"You do not have permission to delete this platform\",\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      await platform.delete();\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to delete platform\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active platforms only\r\n   */\r\n  async getActive(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    options: QueryOptions = {}\r\n  ): Promise<any[]> {\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        isActive: true,\r\n        ...options.filter,\r\n      },\r\n    };\r\n\r\n    return await this.find(type, queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status (admin only)\r\n   */\r\n  async toggleStatus(platform: any): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const currentStatus = platform.isActive();\r\n    return await this.update(platform, { isActive: !currentStatus });\r\n  }\r\n\r\n  /**\r\n   * Update platform configuration (admin only)\r\n   */\r\n  async updateConfig(platform: any, config: Record<string, any>): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.update(platform, config);\r\n  }\r\n\r\n  /**\r\n   * Get platforms by symbol\r\n   */\r\n  async getBySymbol(\r\n    symbol: string,\r\n    type: \"withdrawal\" | \"deposit\"\r\n  ): Promise<any[]> {\r\n    return await this.find(type, {\r\n      filter: { symbol: symbol },\r\n      sort: \"name\",\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate platform limits for an amount\r\n   */\r\n  validateAmount(\r\n    platform: any,\r\n    amount: number\r\n  ): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      errors.push(\"Amount must be a positive number\");\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const minAmount = platform.minAmount ? platform.minAmount() : 0;\r\n    const maxAmount = platform.maxAmount ? platform.maxAmount() : null;\r\n\r\n    if (amount < minAmount) {\r\n      errors.push(`Amount must be at least ${minAmount}`);\r\n    }\r\n\r\n    if (maxAmount && amount > maxAmount) {\r\n      errors.push(`Amount cannot exceed ${maxAmount}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Get platform statistics (admin only)\r\n   */\r\n  async getPlatformStats(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    platformId: number\r\n  ): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const requestType =\r\n      type === \"withdrawal\" ? \"withdrawal-requests\" : \"deposit-records\";\r\n\r\n    try {\r\n      // Get all requests/records for this platform\r\n      const includeParams = type === \"withdrawal\" ? \"platform\" : \"user,processedByUser\";\r\n      const records = await app.store.find(requestType, {\r\n        filter: { platform: platformId.toString() },\r\n        include: includeParams,\r\n      });\r\n\r\n      const recordArray = Array.isArray(records) ? records : [records];\r\n\r\n      // Calculate statistics with proper typing\r\n      const stats = {\r\n        total: recordArray.length,\r\n        pending: recordArray.filter((r) => {\r\n          if (type === \"withdrawal\") {\r\n            return (r as WithdrawalRequest).status() === \"pending\";\r\n          } else {\r\n            return (r as DepositRecord).status() === \"pending\";\r\n          }\r\n        }).length,\r\n        approved: recordArray.filter((r) => {\r\n          if (type === \"withdrawal\") {\r\n            return (r as WithdrawalRequest).status() === \"approved\";\r\n          } else {\r\n            const status = (r as DepositRecord).status();\r\n            return status === \"approved\" || status === \"confirmed\";\r\n          }\r\n        }).length,\r\n        rejected: recordArray.filter((r) => {\r\n          if (type === \"withdrawal\") {\r\n            return (r as WithdrawalRequest).status() === \"rejected\";\r\n          } else {\r\n            return (r as DepositRecord).status() === \"rejected\";\r\n          }\r\n        }).length,\r\n        totalAmount: recordArray.reduce((sum, r) => {\r\n          if (type === \"withdrawal\") {\r\n            return sum + ((r as WithdrawalRequest).amount() || 0);\r\n          } else {\r\n            // DepositRecord might not have amount field, return sum as is\r\n            return sum;\r\n          }\r\n        }, 0),\r\n      };\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to fetch platform statistics\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get platforms grouped by symbol\r\n   */\r\n  async getPlatformsBySymbolGrouped(\r\n    type: \"withdrawal\" | \"deposit\"\r\n  ): Promise<Record<string, any[]>> {\r\n    const platforms = await this.getActive(type);\r\n    const grouped: Record<string, any[]> = {};\r\n\r\n    for (const platform of platforms) {\r\n      const symbol = platform.symbol();\r\n      if (!grouped[symbol]) {\r\n        grouped[symbol] = [];\r\n      }\r\n      grouped[symbol].push(platform);\r\n    }\r\n\r\n    return grouped;\r\n  }\r\n\r\n  /**\r\n   * Sort platforms by criteria\r\n   */\r\n  async getSortedPlatforms(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    sortBy: \"name\" | \"symbol\" | \"createdAt\" | \"fee\" = \"name\",\r\n    direction: \"asc\" | \"desc\" = \"asc\"\r\n  ): Promise<any[]> {\r\n    const sortString = direction === \"desc\" ? `-${sortBy}` : sortBy;\r\n\r\n    return await this.getActive(type, {\r\n      sort: sortString,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if current user can modify platforms\r\n   */\r\n  canModify(_platform: any): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can create new platforms\r\n   */\r\n  canCreate(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete platforms\r\n   */\r\n  canDelete(_platform: any): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Validate create attributes based on platform type\r\n   */\r\n  private validateCreateAttributes(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    attributes: any\r\n  ): void {\r\n    const commonRequired = [\"name\", \"symbol\", \"minAmount\"];\r\n\r\n    // Only common fields are required (removed address requirement)\r\n    const required = commonRequired;\r\n\r\n    for (const field of required) {\r\n      if (!attributes[field]) {\r\n        throw new ServiceError(\r\n          `${field} is required for ${type} platforms`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (typeof attributes.minAmount !== \"number\" || attributes.minAmount < 0) {\r\n      throw new ServiceError(\r\n        \"minAmount must be a non-negative number\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    if (attributes.maxAmount !== undefined) {\r\n      if (\r\n        typeof attributes.maxAmount !== \"number\" ||\r\n        attributes.maxAmount < attributes.minAmount\r\n      ) {\r\n        throw new ServiceError(\r\n          \"maxAmount must be a number greater than or equal to minAmount\",\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (attributes.fee !== undefined) {\r\n      if (typeof attributes.fee !== \"number\" || attributes.fee < 0) {\r\n        throw new ServiceError(\r\n          \"fee must be a non-negative number\",\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    // Validate symbol format (basic validation)\r\n    if (typeof attributes.symbol !== \"string\" || !attributes.symbol.trim()) {\r\n      throw new ServiceError(\r\n        \"Symbol is required\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === \"TypeError\" || error.message?.includes(\"fetch\")) {\r\n      return new ServiceError(\r\n        \"Network error occurred\",\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if error is a not found error\r\n   */\r\n  private isNotFoundError(error: any): boolean {\r\n    return (\r\n      error.status === 404 ||\r\n      error.response?.status === 404 ||\r\n      error.message?.includes(\"not found\")\r\n    );\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const platformService = new PlatformService();\r\n","import app from \"flarum/common/app\";\r\nimport {\r\n  ServiceError,\r\n  ServiceErrorType,\r\n  SettingsServiceInterface,\r\n} from \"../types/services\";\r\n\r\n/**\r\n * Service for managing Flarum admin settings\r\n * Provides type-safe settings operations with proper error handling\r\n */\r\nexport default class SettingsService implements SettingsServiceInterface {\r\n  private readonly settingsEndpoint = \"/settings\";\r\n\r\n  /**\r\n   * Get a setting value\r\n   */\r\n  async getSetting(key: string, defaultValue?: any): Promise<any> {\r\n    try {\r\n      // First try to get from forum attributes (cached)\r\n      if (app.forum) {\r\n        const cachedValue = app.forum.attribute(key);\r\n        if (cachedValue !== undefined && cachedValue !== null) {\r\n          return cachedValue;\r\n        }\r\n      }\r\n\r\n      // If not cached or forum not available, return default\r\n      return defaultValue;\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to get setting: ${key}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save a setting value\r\n   */\r\n  async saveSetting(key: string, value: any): Promise<void> {\r\n    try {\r\n      // Validate inputs\r\n      if (!key || typeof key !== \"string\") {\r\n        throw new ServiceError(\r\n          \"Setting key must be a non-empty string\",\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      // Prepare the value for storage\r\n      const storageValue = this.prepareValueForStorage(value);\r\n\r\n      // Make the API request using Flarum's store mechanism\r\n      const settings = app.store.createRecord(\"settings\");\r\n      await settings.save({ [key]: storageValue });\r\n\r\n      // Update the forum attribute immediately for UI consistency\r\n      if (app.forum) {\r\n        app.forum.pushAttributes({ [key]: value });\r\n      }\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to save setting: ${key}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save multiple settings at once\r\n   */\r\n  async saveSettings(settings: Record<string, any>): Promise<void> {\r\n    try {\r\n      // Validate inputs\r\n      if (!settings || typeof settings !== \"object\") {\r\n        throw new ServiceError(\r\n          \"Settings must be an object\",\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      // Prepare all values for storage\r\n      const preparedSettings: Record<string, any> = {};\r\n      const forumAttributes: Record<string, any> = {};\r\n\r\n      for (const [key, value] of Object.entries(settings)) {\r\n        if (!key || typeof key !== \"string\") {\r\n          throw new ServiceError(\r\n            `Setting key '${key}' must be a non-empty string`,\r\n            ServiceErrorType.VALIDATION_ERROR\r\n          );\r\n        }\r\n        preparedSettings[key] = this.prepareValueForStorage(value);\r\n        forumAttributes[key] = value;\r\n      }\r\n\r\n      // Make the API request\r\n      const settingsRecord = app.store.createRecord(\"settings\");\r\n      await settingsRecord.save(preparedSettings);\r\n\r\n      // Update forum attributes\r\n      if (app.forum) {\r\n        app.forum.pushAttributes(forumAttributes);\r\n      }\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to save multiple settings\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a setting\r\n   */\r\n  async deleteSetting(key: string): Promise<void> {\r\n    try {\r\n      if (!key || typeof key !== \"string\") {\r\n        throw new ServiceError(\r\n          \"Setting key must be a non-empty string\",\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      // Set to null to delete the setting\r\n      await this.saveSetting(key, null);\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to delete setting: ${key}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all settings with a prefix\r\n   */\r\n  async getSettingsWithPrefix(prefix: string): Promise<Record<string, any>> {\r\n    try {\r\n      if (!prefix || typeof prefix !== \"string\") {\r\n        throw new ServiceError(\r\n          \"Prefix must be a non-empty string\",\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      const settings: Record<string, any> = {};\r\n\r\n      if (app.forum) {\r\n        const attributes = app.forum.data.attributes ?? {};\r\n        for (const [key, value] of Object.entries(attributes)) {\r\n          if (key.startsWith(prefix)) {\r\n            settings[key] = value;\r\n          }\r\n        }\r\n      }\r\n\r\n      return settings;\r\n    } catch (error) {\r\n      throw this.handleError(\r\n        error,\r\n        `Failed to get settings with prefix: ${prefix}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if current user can manage settings\r\n   */\r\n  canManageSettings(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Get extension-specific setting with proper namespace\r\n   */\r\n  async getExtensionSetting(\r\n    extension: string,\r\n    key: string,\r\n    defaultValue?: any\r\n  ): Promise<any> {\r\n    const fullKey = `${extension}.${key}`;\r\n    return await this.getSetting(fullKey, defaultValue);\r\n  }\r\n\r\n  /**\r\n   * Save extension-specific setting with proper namespace\r\n   */\r\n  async saveExtensionSetting(\r\n    extension: string,\r\n    key: string,\r\n    value: any\r\n  ): Promise<void> {\r\n    const fullKey = `${extension}.${key}`;\r\n    return await this.saveSetting(fullKey, value);\r\n  }\r\n\r\n  /**\r\n   * Get funds extension settings\r\n   */\r\n  async getWithdrawalSetting(key: string, defaultValue?: any): Promise<any> {\r\n    return await this.getExtensionSetting(\r\n      \"wusong8899-funds\",\r\n      key,\r\n      defaultValue\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Save funds extension setting\r\n   */\r\n  async saveWithdrawalSetting(key: string, value: any): Promise<void> {\r\n    return await this.saveExtensionSetting(\"wusong8899-funds\", key, value);\r\n  }\r\n\r\n  /**\r\n   * Get all funds extension settings\r\n   */\r\n  async getAllWithdrawalSettings(): Promise<Record<string, any>> {\r\n    return await this.getSettingsWithPrefix(\"wusong8899-funds.\");\r\n  }\r\n\r\n  /**\r\n   * Prepare value for storage (handle objects, arrays, booleans)\r\n   */\r\n  private prepareValueForStorage(value: any): string {\r\n    if (value === null || value === undefined) {\r\n      return \"\";\r\n    }\r\n\r\n    if (typeof value === \"string\") {\r\n      return value;\r\n    }\r\n\r\n    if (typeof value === \"boolean\") {\r\n      return value ? \"1\" : \"0\";\r\n    }\r\n\r\n    if (typeof value === \"number\") {\r\n      return String(value);\r\n    }\r\n\r\n    // Objects and arrays get JSON stringified\r\n    return JSON.stringify(value);\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        \"Admin permissions required to manage settings\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === \"TypeError\" || error.message?.includes(\"fetch\")) {\r\n      return new ServiceError(\r\n        \"Network error occurred while managing settings\",\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const settingsService = new SettingsService();\r\n","import app from 'flarum/admin/app';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport GenericManagementPage, { \r\n  type GenericManagementPageConfig, \r\n  type GenericPlatform, \r\n  type GenericTransaction \r\n} from './shared/GenericManagementPage';\r\nimport GeneralSettingsSection from './sections/GeneralSettingsSection';\r\nimport PlatformManagementSection from './sections/PlatformManagementSection';\r\nimport RequestManagementSection from './sections/RequestManagementSection';\r\nimport DepositRecordManagementSection from './sections/DepositRecordManagementSection';\r\nimport DepositPlatformManagementSection from './sections/DepositPlatformManagementSection';\r\nimport ConfirmModal from '../../common/components/shared/ConfirmModal';\r\nimport { \r\n  createWithdrawalPlatformOperations,\r\n  createWithdrawalRequestOperations\r\n} from '../utils/platformOperations';\r\n\r\n// Import services\r\nimport { depositService, platformService } from '../../common/services';\r\nimport { ServiceError } from '../../common/types/services';\r\nimport Component from 'flarum/common/Component';\r\n\r\n// Placeholder components for custom tabs\r\nclass WithdrawalTabPlaceholder extends Component {\r\n  view() {\r\n    return <div>Withdrawals Content</div>;\r\n  }\r\n}\r\n\r\nclass DepositsTabPlaceholder extends Component {\r\n  view() {\r\n    return <div>Deposits Content</div>;\r\n  }\r\n}\r\n\r\n\r\nexport default class UnifiedManagementPage extends GenericManagementPage<GenericPlatform, GenericTransaction> {\r\n  \r\n  // Additional state for complex scenarios\r\n  private depositPlatforms: GenericPlatform[] = [];\r\n  private depositRecords: GenericTransaction[] = [];\r\n  private users: { [key: number]: any } = {};\r\n\r\n  protected getConfig(): GenericManagementPageConfig<GenericPlatform, GenericTransaction> {\r\n    return {\r\n      pageTitle: app.translator.trans('funds.admin.page.title').toString(),\r\n      extensionId: 'WithdrawalManagement',\r\n      \r\n      // Primary platform operations (funds)\r\n      platformOperations: createWithdrawalPlatformOperations(),\r\n      transactionOperations: createWithdrawalRequestOperations(),\r\n      \r\n      // Settings component\r\n      settingsComponent: GeneralSettingsSection,\r\n      \r\n      // Tab configuration\r\n      tabs: [\r\n        {\r\n          key: 'withdrawals',\r\n          label: app.translator.trans('funds.admin.tabs.withdrawals').toString(),\r\n          component: WithdrawalTabPlaceholder\r\n        },\r\n        {\r\n          key: 'deposits',\r\n          label: app.translator.trans('funds.admin.tabs.deposits').toString(),\r\n          component: DepositsTabPlaceholder\r\n        }\r\n      ],\r\n      \r\n      translations: {\r\n        platformPrefix: 'funds.admin.platforms',\r\n        transactionPrefix: 'funds.admin.requests'\r\n      }\r\n    };\r\n  }\r\n\r\n  // Override renderActiveTabContent to handle the complex withdrawals and deposits tabs  \r\n  protected renderActiveTabContent(): Mithril.Children {\r\n    if (this.activeTab === 'withdrawals') {\r\n      return (\r\n        <div>\r\n          <PlatformManagementSection\r\n            platforms={this.platforms}\r\n            submittingPlatform={this.submittingPlatform}\r\n            onAddPlatform={this.addPlatform.bind(this)}\r\n            onTogglePlatformStatus={this.togglePlatformStatus.bind(this)}\r\n            onDeletePlatform={this.deletePlatform.bind(this)}\r\n          />\r\n          \r\n          <RequestManagementSection\r\n            requests={this.transactions as any}\r\n            onUpdateRequestStatus={this.updateTransactionStatus.bind(this)}\r\n            onDeleteRequest={this.deleteWithdrawalRequest.bind(this)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (this.activeTab === 'deposits') {\r\n      return (\r\n        <div>\r\n          <DepositPlatformManagementSection\r\n            platforms={this.depositPlatforms}\r\n            submittingPlatform={this.submittingPlatform}\r\n            onAddPlatform={this.addDepositPlatform.bind(this)}\r\n            onTogglePlatformStatus={this.toggleDepositPlatformStatus.bind(this)}\r\n            onDeletePlatform={this.deleteDepositPlatform.bind(this)}\r\n          />\r\n          \r\n          <DepositRecordManagementSection\r\n            platforms={this.depositPlatforms}\r\n            records={this.depositRecords}\r\n            loading={this.loading}\r\n            onApproveRecord={this.approveDepositRecord.bind(this)}\r\n            onRejectRecord={this.rejectDepositRecord.bind(this)}\r\n            onDeleteRecord={this.deleteDepositRecord.bind(this)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    // For other tabs, use the parent implementation\r\n    return super.renderActiveTabContent();\r\n  }\r\n\r\n  // Override loadData to handle unified funds and deposit data loading\r\n  protected async loadData(): Promise<void> {\r\n    try {\r\n      // Load funds data (handled by parent)\r\n      await this.loadPlatforms();\r\n      await this.loadTransactions();\r\n      \r\n      // Load additional user data for requests\r\n      await this.loadUserData();\r\n      \r\n      // Load deposit data\r\n      await this.loadDepositPlatforms();\r\n      await this.loadDepositRecords();\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n    } finally {\r\n      this.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  // Deposit platform management methods\r\n  private async addDepositPlatform(formData: any): Promise<void> {\r\n    if (this.submittingPlatform) return;\r\n\r\n    this.submittingPlatform = true;\r\n    m.redraw();\r\n\r\n    try {\r\n      // Convert numeric fields from strings to numbers\r\n      const attributes = {\r\n        ...formData,\r\n        minAmount: parseFloat(formData.minAmount) || 0,\r\n        maxAmount: formData.maxAmount && formData.maxAmount.trim() ? parseFloat(formData.maxAmount) : null,\r\n        fee: formData.fee && formData.fee.trim() ? parseFloat(formData.fee) : 0,\r\n        isActive: formData.isActive !== undefined ? formData.isActive : true\r\n      };\r\n      \r\n      await platformService.create('deposit', attributes);\r\n      await this.loadDepositPlatforms();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.platforms.add_success')\r\n      );\r\n    } catch (error) {\r\n      console.error('Error adding deposit platform:', error);\r\n      \r\n      let errorMessage = app.translator.trans('funds.admin.deposit.platforms.add_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    } finally {\r\n      this.submittingPlatform = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private async toggleDepositPlatformStatus(platform: GenericPlatform): Promise<void> {\r\n    try {\r\n      await platformService.toggleStatus(platform);\r\n      await this.loadDepositPlatforms();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.platforms.status_updated')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error toggling deposit platform status:', error);\r\n      \r\n      let errorMessage = app.translator.trans('funds.admin.deposit.platforms.status_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    }\r\n  }\r\n\r\n  private async deleteDepositPlatform(platform: GenericPlatform): Promise<void> {\r\n    const platformName = (typeof platform.name === 'function' ? platform.name() : platform.name) || 'Unknown Platform';\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans('funds.admin.platforms.delete_confirm_title'),\r\n      message: app.translator.trans('funds.admin.platforms.delete_confirm_message', { name: platformName }),\r\n      confirmText: app.translator.trans('funds.admin.platforms.delete_confirm_button'),\r\n      cancelText: app.translator.trans('funds.admin.platforms.delete_cancel_button'),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          await platformService.delete(platform);\r\n          await this.loadDepositPlatforms();\r\n          \r\n          app.alerts.show(\r\n            { type: 'success', dismissible: true },\r\n            app.translator.trans('funds.admin.deposit.platforms.delete_success')\r\n          );\r\n        } catch (error) {\r\n          console.error('Error deleting deposit platform:', error);\r\n          \r\n          let errorMessage = app.translator.trans('funds.admin.deposit.platforms.delete_error').toString();\r\n          \r\n          if (error instanceof ServiceError) {\r\n            errorMessage = error.message;\r\n          }\r\n          \r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            errorMessage\r\n          );\r\n        }\r\n        m.redraw();\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  private async updateDepositRecordStatus(record: GenericTransaction, status: string): Promise<void> {\r\n    try {\r\n      await depositService.update(record.id(), { status });\r\n      await this.loadDepositRecords();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.records.status_updated')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error updating deposit record:', error);\r\n      \r\n      let errorMessage = app.translator.trans('funds.admin.deposit.records.status_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    }\r\n  }\r\n\r\n  // Deletion method for funds requests  \r\n  private deleteWithdrawalRequest(request: any): void {\r\n    const requestId = typeof request.id === 'function' ? request.id() : request.id;\r\n    const amount = typeof request.amount === 'function' ? request.amount() : (request.attributes?.amount || 0);\r\n    \r\n    // Get user name for display in confirmation\r\n    let userName = 'Unknown User';\r\n    if (typeof request.user === 'function') {\r\n      const userData = request.user();\r\n      if (userData && typeof userData.displayName === 'function') {\r\n        userName = userData.displayName();\r\n      } else if (userData && userData.attributes?.displayName) {\r\n        userName = userData.attributes.displayName;\r\n      }\r\n    }\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans('funds.admin.requests.delete_confirm_title'),\r\n      message: app.translator.trans('funds.admin.requests.delete_confirm_message', { info: `${userName} - ${amount}` }),\r\n      confirmText: app.translator.trans('funds.admin.requests.delete_confirm_button'),\r\n      cancelText: app.translator.trans('funds.admin.requests.delete_cancel_button'),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          const record = app.store.getById('withdrawal-requests', requestId);\r\n          if (record) {\r\n            await record.delete();\r\n            await this.loadTransactions();\r\n            \r\n            app.alerts.show(\r\n              { type: 'success', dismissible: true },\r\n              app.translator.trans('funds.admin.requests.delete_success')\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error('Error deleting request:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans('funds.admin.requests.delete_error')\r\n          );\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Additional data loading methods\r\n  private async loadDepositPlatforms(): Promise<void> {\r\n    try {\r\n      this.depositPlatforms = await platformService.find('deposit', {\r\n        sort: 'name'\r\n      });\r\n      console.log('Loaded deposit platforms:', this.depositPlatforms);\r\n    } catch (error) {\r\n      console.error('Error loading deposit platforms:', error);\r\n      this.depositPlatforms = [];\r\n    }\r\n  }\r\n\r\n\r\n  private async loadUserData(): Promise<void> {\r\n    // Skip if no requests\r\n    if (this.transactions.length === 0) return;\r\n    \r\n    const userIds = [...new Set(this.transactions\r\n      .map(r => {\r\n        // Check both data.relationships and direct relationships structures\r\n        const userRelation = (r as any)?.data?.relationships?.user?.data || (r as any)?.relationships?.user?.data;\r\n        if (userRelation) {\r\n          return userRelation.id;\r\n        }\r\n        return null;\r\n      })\r\n      .filter(id => id !== null && id !== undefined)\r\n    )];\r\n    const usersToLoad = userIds.filter(userId => !this.users[userId]);\r\n    \r\n    if (usersToLoad.length > 0) {\r\n      try {\r\n        const userPromises = usersToLoad.map(userId => \r\n          app.store.find('users', userId).catch(error => {\r\n            console.error(`Error loading user ${userId}:`, error);\r\n            return null;\r\n          })\r\n        );\r\n        \r\n        const loadedUsers = await Promise.all(userPromises);\r\n        \r\n        usersToLoad.forEach((userId, index) => {\r\n          if (loadedUsers[index]) {\r\n            this.users[userId] = loadedUsers[index];\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading users:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Deposit record management methods\r\n  private async loadDepositRecords(): Promise<void> {\r\n    try {\r\n      // For admin, get all deposit records (not just user's own)\r\n      const records = await depositService.find({\r\n        include: 'user,platform',\r\n        sort: '-createdAt'\r\n      });\r\n      \r\n      this.depositRecords = records as GenericTransaction[];\r\n      console.log('Loaded deposit records:', this.depositRecords);\r\n    } catch (error) {\r\n      console.error('Error loading deposit records:', error);\r\n      this.depositRecords = [];\r\n    }\r\n  }\r\n\r\n  private async approveDepositRecord(record: any, creditedAmount?: number, notes?: string): Promise<void> {\r\n    try {\r\n      const attributes: any = {\r\n        status: 'approved'\r\n      };\r\n      \r\n      if (creditedAmount !== undefined) {\r\n        attributes.creditedAmount = creditedAmount;\r\n      }\r\n      \r\n      if (notes) {\r\n        attributes.adminNotes = notes;\r\n      }\r\n      \r\n      await depositService.update(record.id(), attributes);\r\n      await this.loadDepositRecords();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.records.approve_success')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error approving deposit record:', error);\r\n      \r\n      let errorMessage = app.translator.trans('funds.admin.deposit.records.approve_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async rejectDepositRecord(record: any, reason: string): Promise<void> {\r\n    try {\r\n      await depositService.update(record.id(), {\r\n        status: 'rejected',\r\n        adminNotes: reason\r\n      });\r\n      \r\n      await this.loadDepositRecords();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.records.reject_success')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error rejecting deposit record:', error);\r\n      \r\n      let errorMessage = app.translator.trans('funds.admin.deposit.records.reject_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async deleteDepositRecord(record: any): Promise<void> {\r\n    try {\r\n      await depositService.delete(record);\r\n      await this.loadDepositRecords();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('funds.admin.deposit.records.delete_success')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error deleting deposit record:', error);\r\n      \r\n      let errorMessage = app.translator.trans('funds.admin.deposit.records.delete_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n}","import { ServiceError, ServiceErrorType } from '../types/services';\r\n\r\n/**\r\n * Validate common platform fields\r\n */\r\nexport function validateCommonFields(attributes: Record<string, any>): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Name validation\r\n  if (attributes.name !== undefined) {\r\n    if (!attributes.name || typeof attributes.name !== 'string') {\r\n      errors.push('Platform name is required');\r\n    }\r\n  }\r\n\r\n  // Symbol validation\r\n  if (attributes.symbol !== undefined) {\r\n    if (!attributes.symbol || typeof attributes.symbol !== 'string') {\r\n      errors.push('Symbol is required');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Validate amount fields (min/max/fee)\r\n */\r\nexport function validateAmountFields(attributes: Record<string, any>, currentMinAmount?: number): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Min amount validation\r\n  if (attributes.minAmount !== undefined) {\r\n    if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\r\n      errors.push('Minimum amount must be a non-negative number');\r\n    }\r\n  }\r\n\r\n  // Max amount validation\r\n  if (attributes.maxAmount !== undefined && attributes.maxAmount !== null) {\r\n    if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < 0) {\r\n      errors.push('Maximum amount must be a non-negative number');\r\n    }\r\n    \r\n    const minAmount = attributes.minAmount ?? currentMinAmount ?? 0;\r\n    if (attributes.maxAmount < minAmount) {\r\n      errors.push('Maximum amount must be greater than or equal to minimum amount');\r\n    }\r\n  }\r\n\r\n  // Fee validation\r\n  if (attributes.fee !== undefined && attributes.fee !== null) {\r\n    if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\r\n      errors.push('Fee must be a non-negative number');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Validate deposit-specific fields\r\n */\r\nexport function validateDepositFields(attributes: Record<string, any>): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Network validation (for deposit platforms) - only validate if provided\r\n  if (attributes.network !== undefined && attributes.network !== null && attributes.network !== '') {\r\n    if (typeof attributes.network !== 'string') {\r\n      errors.push('Network must be a string');\r\n    }\r\n  }\r\n\r\n  // Address validation (for deposit platforms) - only validate if provided\r\n  if (attributes.address !== undefined && attributes.address !== null && attributes.address !== '') {\r\n    if (typeof attributes.address !== 'string') {\r\n      errors.push('Deposit address must be a string');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Throw validation error if there are any errors\r\n */\r\nexport function throwIfErrors(errors: string[]): void {\r\n  if (errors.length > 0) {\r\n    throw new ServiceError(\r\n      errors.join(', '),\r\n      ServiceErrorType.VALIDATION_ERROR\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Complete validation for funds platforms\r\n */\r\nexport function validateWithdrawalPlatform(attributes: Record<string, any>, currentMinAmount?: number): void {\r\n  const errors = [\r\n    ...validateCommonFields(attributes),\r\n    ...validateAmountFields(attributes, currentMinAmount)\r\n  ];\r\n  \r\n  throwIfErrors(errors);\r\n}\r\n\r\n/**\r\n * Complete validation for deposit platforms\r\n */\r\nexport function validateDepositPlatform(attributes: Record<string, any>, currentMinAmount?: number): void {\r\n  const errors = [\r\n    ...validateCommonFields(attributes),\r\n    ...validateAmountFields(attributes, currentMinAmount),\r\n    ...validateDepositFields(attributes)\r\n  ];\r\n  \r\n  throwIfErrors(errors);\r\n}","import Model from \"flarum/common/Model\";\r\nimport { ServiceError, ServiceErrorType } from \"../types/services\";\r\nimport { validateWithdrawalPlatform } from \"../utils/PlatformValidation\";\r\nimport { IconRepresentation } from \"../utils/IconResolver\";\r\nimport app from \"flarum/common/app\";\r\n\r\n/**\r\n * WithdrawalPlatform model for Flarum\r\n *\r\n * This model represents a funds platform that users can use\r\n * to withdraw their virtual currency with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalPlatform extends Model {\r\n  // Basic attributes\r\n  name = Model.attribute<string>(\"name\");\r\n  symbol = Model.attribute<string>(\"symbol\");\r\n  network = Model.attribute<string | null>(\"network\");\r\n  displayName = Model.attribute<string>(\"displayName\");\r\n  minAmount = Model.attribute<number>(\"minAmount\");\r\n  maxAmount = Model.attribute<number>(\"maxAmount\");\r\n  fee = Model.attribute<number>(\"fee\");\r\n\r\n  // Platform icon system\r\n  platformIconUrl = Model.attribute<string>(\"platformIconUrl\");\r\n  platformIconClass = Model.attribute<string>(\"platformIconClass\");\r\n\r\n  // Status\r\n  isActive = Model.attribute<boolean>(\"isActive\");\r\n\r\n  // Timestamps\r\n  createdAt = Model.attribute(\"createdAt\", Model.transformDate);\r\n  updatedAt = Model.attribute(\"updatedAt\", Model.transformDate);\r\n\r\n  // Icon representation from serializer\r\n  bestIcon = Model.attribute<IconRepresentation>(\"bestIcon\");\r\n\r\n  // Computed properties\r\n  apiEndpoint() {\r\n    const id = this.id();\r\n    return id ? `/withdrawal-platforms/${id}` : \"/withdrawal-platforms\";\r\n  }\r\n\r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n\r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    return amount >= min && amount <= max;\r\n  }\r\n\r\n  getTotalCost(amount: number): number {\r\n    return amount + this.fee();\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<any> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes || {});\r\n      return result;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to delete this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        \"Cannot delete platform that has pending funds requests\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<WithdrawalPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to modify this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): WithdrawalPlatform {\r\n    const cloned = app.store.createRecord(\r\n      \"withdrawal-platforms\"\r\n    ) as WithdrawalPlatform;\r\n\r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + \" (Copy)\",\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      // Copy platform icon fields\r\n      platformIconUrl: this.platformIconUrl(),\r\n      platformIconClass: this.platformIconClass(),\r\n      isActive: false, // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      errors.push(\"Amount must be a positive number\");\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    if (amount < this.minAmount()) {\r\n      errors.push(\r\n        `Amount must be at least ${this.minAmount()} ${this.symbol()}`\r\n      );\r\n    }\r\n\r\n    if (this.maxAmount() && amount > this.maxAmount()) {\r\n      errors.push(`Amount cannot exceed ${this.maxAmount()} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Check if user has sufficient balance for funds\r\n   */\r\n  validateUserBalance(\r\n    amount: number,\r\n    userBalance: number\r\n  ): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n    const totalCost = this.getTotalCost(amount);\r\n\r\n    if (userBalance < totalCost) {\r\n      const feeText =\r\n        this.fee() > 0 ? ` (including ${this.fee()} ${this.symbol()} fee)` : \"\";\r\n      errors.push(\r\n        `Insufficient balance. Required: ${totalCost} ${this.symbol()}${feeText}, Available: ${userBalance} ${this.symbol()}`\r\n      );\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n\r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const id = this.id();\r\n      if (!id) {\r\n        return false;\r\n      }\r\n      const requests = await app.store.find(\"withdrawal-requests\", {\r\n        filter: { platform: id, status: \"pending\" },\r\n      });\r\n\r\n      const requestsArray = Array.isArray(requests) ? requests : [requests];\r\n      return requestsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee();\r\n    if (fee === 0) {\r\n      return \"Free\";\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    validateWithdrawalPlatform(attributes, this.minAmount());\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || \"Failed to save withdrawal platform\",\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to save withdrawal platform\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        \"You do not have permission to delete this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to delete withdrawal platform\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Shared type definitions for the Withdrawal extension\r\n */\r\n\r\n/**\r\n * Withdrawal platform data structure\r\n */\r\nexport interface WithdrawalPlatformData {\r\n  id: string | number;\r\n  name: string;\r\n  symbol: string;\r\n  minAmount: number;\r\n  maxAmount: number;\r\n  fee: number;\r\n  iconUrl?: string | null;\r\n  iconClass?: string | null;\r\n  isActive: boolean;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * Withdrawal request data structure\r\n */\r\nexport interface WithdrawalRequestData {\r\n  id: string | number;\r\n  amount: number;\r\n  accountDetails: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  platformId: number;\r\n  userId: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * User funds data extension\r\n */\r\nexport interface UserWithdrawalData {\r\n  money?: number;\r\n  withdrawalRequests?: WithdrawalRequestData[];\r\n}\r\n\r\n/**\r\n * API response structures\r\n */\r\nexport interface ApiSuccessResponse<T = any> {\r\n  data: T;\r\n}\r\n\r\nexport interface ApiErrorResponse {\r\n  errors: Array<{\r\n    status: string;\r\n    code: string;\r\n    title: string;\r\n    detail?: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Form validation errors\r\n */\r\nexport interface ValidationErrors {\r\n  [field: string]: string[];\r\n}\r\n\r\n/**\r\n * Configuration constants\r\n */\r\nexport const WITHDRAWAL_STATUS = {\r\n  PENDING: 'pending',\r\n  APPROVED: 'approved',\r\n  REJECTED: 'rejected',\r\n} as const;\r\n\r\nexport type WithdrawalStatus = typeof WITHDRAWAL_STATUS[keyof typeof WITHDRAWAL_STATUS];\r\n\r\n/**\r\n * Default values\r\n */\r\nexport const DEFAULT_MIN_AMOUNT = 0.001;\r\nexport const DEFAULT_MAX_AMOUNT = 10;\r\nexport const DEFAULT_FEE = 0.0005;\r\n\r\n/**\r\n * Helper type guards\r\n */\r\nexport function isWithdrawalPlatform(obj: any): obj is WithdrawalPlatformData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'name' in obj &&\r\n    'symbol' in obj &&\r\n    'minAmount' in obj &&\r\n    'maxAmount' in obj;\r\n}\r\n\r\nexport function isWithdrawalRequest(obj: any): obj is WithdrawalRequestData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'amount' in obj &&\r\n    'accountDetails' in obj &&\r\n    'status' in obj &&\r\n    'platformId' in obj &&\r\n    'userId' in obj;\r\n}","import Model from \"flarum/common/Model\";\r\nimport User from \"flarum/common/models/User\";\r\nimport WithdrawalPlatform from \"./WithdrawalPlatform\";\r\nimport { WithdrawalStatus, WITHDRAWAL_STATUS } from \"../types\";\r\nimport { ServiceError, ServiceErrorType } from \"../types/services\";\r\nimport app from \"flarum/common/app\";\r\n\r\n/**\r\n * WithdrawalRequest model for Flarum\r\n *\r\n * This model represents a user's funds request with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalRequest extends Model {\r\n  // Basic attributes\r\n  amount = Model.attribute<number>(\"amount\");\r\n  accountDetails = Model.attribute<string>(\"accountDetails\");\r\n  message = Model.attribute<string>(\"message\");\r\n  status = Model.attribute<WithdrawalStatus>(\"status\");\r\n\r\n  // Foreign keys\r\n  platformId = Model.attribute<number>(\"platformId\");\r\n  userId = Model.attribute<number>(\"userId\");\r\n\r\n  // Timestamps\r\n  createdAt = Model.attribute<Date>(\"createdAt\", (attr: unknown) =>\r\n    Model.transformDate(attr as string)\r\n  );\r\n  updatedAt = Model.attribute<Date>(\"updatedAt\", (attr: unknown) =>\r\n    Model.transformDate(attr as string)\r\n  );\r\n\r\n  // Relationships\r\n  user = Model.hasOne<User>(\"user\");\r\n  platform = Model.hasOne<WithdrawalPlatform>(\"platform\");\r\n\r\n  // Computed properties\r\n  apiEndpoint() {\r\n    const id = this.id();\r\n    return id ? `/withdrawal-requests/${id}` : \"/withdrawal-requests\";\r\n  }\r\n\r\n  // Status helpers\r\n  isPending(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.PENDING;\r\n  }\r\n\r\n  isApproved(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.APPROVED;\r\n  }\r\n\r\n  isRejected(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.REJECTED;\r\n  }\r\n\r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n\r\n  // Display helpers\r\n  statusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`funds.forum.status.${status}`).toString();\r\n  }\r\n\r\n  statusColor(): string {\r\n    const status = this.status();\r\n    switch (status) {\r\n      case WITHDRAWAL_STATUS.APPROVED:\r\n        return \"success\";\r\n      case WITHDRAWAL_STATUS.REJECTED:\r\n        return \"danger\";\r\n      case WITHDRAWAL_STATUS.PENDING:\r\n      default:\r\n        return \"warning\";\r\n    }\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this funds request with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<any> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes || {});\r\n      return result;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this funds request with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to delete this request\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Only check if request can be modified for non-admin users\r\n    const currentUser = app.session.user;\r\n    if (currentUser && !currentUser.isAdmin() && !this.canBeModified()) {\r\n      throw new ServiceError(\r\n        \"This request cannot be deleted as it has already been processed\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this request for resubmission\r\n   */\r\n  clone(): WithdrawalRequest {\r\n    const cloned = app.store.createRecord(\r\n      \"withdrawal-requests\"\r\n    ) as WithdrawalRequest;\r\n\r\n    // Copy relevant attributes but not status/timestamps\r\n    cloned.pushAttributes({\r\n      platformId: this.platformId(),\r\n      amount: this.amount(),\r\n      accountDetails: this.accountDetails(),\r\n      message: this.message(),\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Get total cost including fees\r\n   */\r\n  getTotalCost(): number {\r\n    const platform = this.platform();\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n    return this.amount() + fee;\r\n  }\r\n\r\n  /**\r\n   * Get formatted amount string\r\n   */\r\n  getFormattedAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : \"\";\r\n    return `${this.amount()} ${symbol}`.trim();\r\n  }\r\n\r\n  /**\r\n   * Get formatted total cost string including fees\r\n   */\r\n  getFormattedTotalCost(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : \"\";\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n\r\n    if (fee > 0) {\r\n      return `${this.amount()} + ${fee} (fee) = ${this.getTotalCost()} ${symbol}`.trim();\r\n    }\r\n\r\n    return this.getFormattedAmount();\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this request\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending requests\r\n    return String(this.userId()) === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this request\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending requests\r\n    return String(this.userId()) === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this request's details\r\n   */\r\n  canView(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own requests\r\n    return String(this.userId()) === currentUser.id();\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.amount !== undefined) {\r\n      if (typeof attributes.amount !== \"number\" || attributes.amount <= 0) {\r\n        errors.push(\"Amount must be a positive number\");\r\n      }\r\n    }\r\n\r\n    if (attributes.accountDetails !== undefined) {\r\n      if (\r\n        !attributes.accountDetails ||\r\n        typeof attributes.accountDetails !== \"string\"\r\n      ) {\r\n        errors.push(\"Account details are required\");\r\n      }\r\n    }\r\n\r\n    if (attributes.platformId !== undefined) {\r\n      if (!attributes.platformId || typeof attributes.platformId !== \"number\") {\r\n        errors.push(\"Platform selection is required\");\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(\", \"),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || \"Failed to save funds request\",\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to save funds request\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        \"You do not have permission to delete this request\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to delete funds request\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n","import Model from \"flarum/common/Model\";\r\nimport { ServiceError, ServiceErrorType } from \"../types/services\";\r\nimport { validateDepositPlatform } from \"../utils/PlatformValidation\";\r\nimport { IconRepresentation } from \"../utils/IconResolver\";\r\nimport app from \"flarum/common/app\";\r\n\r\n/**\r\n * DepositPlatform model for Flarum\r\n *\r\n * Uses the unified platform structure defined in PlatformStructure.ts\r\n */\r\nexport default class DepositPlatform extends Model {\r\n  name = Model.attribute<string>(\"name\");\r\n  symbol = Model.attribute<string>(\"symbol\");\r\n  network = Model.attribute<string>(\"network\");\r\n  networkTypeId = Model.attribute<number>(\"networkTypeId\");\r\n  displayName = Model.attribute<string>(\"displayName\");\r\n  minAmount = Model.attribute<number>(\"minAmount\");\r\n  maxAmount = Model.attribute<number>(\"maxAmount\");\r\n  fee = Model.attribute<number>(\"fee\");\r\n  address = Model.attribute<string>(\"address\");\r\n  qrCodeImageUrl = Model.attribute<string>(\"qrCodeImageUrl\");\r\n  // Platform icon system\r\n  platformIconUrl = Model.attribute<string>(\"platformIconUrl\");\r\n  platformIconClass = Model.attribute<string>(\"platformIconClass\");\r\n  warningText = Model.attribute<string>(\"warningText\");\r\n  networkConfig = Model.attribute<any>(\"networkConfig\");\r\n  isActive = Model.attribute<boolean>(\"isActive\");\r\n  createdAt = Model.attribute<Date>(\"createdAt\", (attr: unknown) =>\r\n    Model.transformDate(attr as string)\r\n  );\r\n  updatedAt = Model.attribute<Date>(\"updatedAt\", (attr: unknown) =>\r\n    Model.transformDate(attr as string)\r\n  );\r\n\r\n  // Relationships\r\n  networkType = Model.hasOne(\"networkType\");\r\n\r\n  // Icon representations from serializer\r\n  bestIcon = Model.attribute<IconRepresentation>(\"bestIcon\");\r\n\r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n\r\n  getFullDisplayName(): string {\r\n    const name = this.getDisplayName();\r\n    const network = this.network();\r\n    return network ? `${name} (${network})` : name;\r\n  }\r\n\r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    return amount >= min && (!max || amount <= max);\r\n  }\r\n\r\n  getTotalCost(amount: number): number {\r\n    return amount + (this.fee() || 0);\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<any> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes || {});\r\n      return result;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to delete this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        \"Cannot delete platform that has pending deposit records\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<DepositPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to modify this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): DepositPlatform {\r\n    const cloned = app.store.createRecord(\r\n      \"deposit-platforms\"\r\n    ) as DepositPlatform;\r\n\r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + \" (Copy)\",\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      networkTypeId: this.networkTypeId(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      address: this.address(),\r\n      qrCodeImageUrl: this.qrCodeImageUrl(),\r\n      platformIconUrl: this.platformIconUrl(),\r\n      platformIconClass: this.platformIconClass(),\r\n      warningText: this.warningText(),\r\n      isActive: false, // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      errors.push(\"Amount must be a positive number\");\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const min = this.minAmount() || 0;\r\n    if (amount < min) {\r\n      errors.push(`Amount must be at least ${min} ${this.symbol()}`);\r\n    }\r\n\r\n    const max = this.maxAmount();\r\n    if (max && amount > max) {\r\n      errors.push(`Amount cannot exceed ${max} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n\r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const id = this.id();\r\n      if (!id) {\r\n        return false;\r\n      }\r\n      const records = await app.store.find(\"deposit-records\", {\r\n        filter: { platform: id.toString(), status: \"pending\" },\r\n      });\r\n\r\n      const recordsArray = Array.isArray(records) ? records : [records];\r\n      return recordsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee() || 0;\r\n    if (fee === 0) {\r\n      return \"Free\";\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  /**\r\n   * Generate deposit address for user\r\n   */\r\n  generateDepositAddress(_userId?: number): string {\r\n    const address = this.address();\r\n\r\n    // For now, we return the static address\r\n    // In the future, this could be enhanced to support dynamic address generation\r\n    if (address && typeof address === \"string\") {\r\n      return address;\r\n    }\r\n\r\n    throw new ServiceError(\r\n      \"No deposit address configured for this platform\",\r\n      ServiceErrorType.VALIDATION_ERROR\r\n    );\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    validateDepositPlatform(attributes, this.minAmount() || undefined);\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || \"Failed to save deposit platform\",\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to save deposit platform\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        \"You do not have permission to delete this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to delete deposit platform\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\n\r\nexport default class DepositRecord extends Model {\r\n  // 属性\r\n  userId = Model.attribute<number>('userId');\r\n  platformId = Model.attribute<number>('platformId');\r\n  amount = Model.attribute<number>('amount');\r\n  depositTime = Model.attribute('depositTime', Model.transformDate);\r\n  userMessage = Model.attribute<string>('userMessage');\r\n  status = Model.attribute<string>('status');\r\n  statusText = Model.attribute<string>('statusText');\r\n  processedAt = Model.attribute('processedAt', Model.transformDate);\r\n  processedBy = Model.attribute<number>('processedBy');\r\n  adminNotes = Model.attribute<string>('adminNotes');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n  formattedCreatedAt = Model.attribute<string>('formattedCreatedAt');\r\n  formattedProcessedAt = Model.attribute<string>('formattedProcessedAt');\r\n  isPending = Model.attribute<boolean>('isPending');\r\n  isApproved = Model.attribute<boolean>('isApproved');\r\n  isRejected = Model.attribute<boolean>('isRejected');\r\n\r\n  // 关联\r\n  user = Model.hasOne<User>('user');\r\n  processedByUser = Model.hasOne<User>('processedByUser');\r\n  platform = Model.hasOne('platform');\r\n\r\n  // 辅助方法\r\n  getStatusColor(): string {\r\n    switch (this.status()) {\r\n      case 'pending':\r\n        return 'warning';\r\n      case 'approved':\r\n        return 'success';\r\n      case 'rejected':\r\n        return 'danger';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  getStatusIcon(): string {\r\n    switch (this.status()) {\r\n      case 'pending':\r\n        return 'fas fa-clock';\r\n      case 'approved':\r\n        return 'fas fa-check-circle';\r\n      case 'rejected':\r\n        return 'fas fa-times-circle';\r\n      default:\r\n        return 'fas fa-question-circle';\r\n    }\r\n  }\r\n\r\n  canEdit(currentUser?: User): boolean {\r\n    if (!currentUser) return false;\r\n    \r\n    // 管理员可以编辑任何记录\r\n    if (currentUser.isAdmin()) return true;\r\n    \r\n    // 用户只能编辑自己的待处理记录\r\n    return this.userId().toString() === currentUser.id() && this.isPending();\r\n  }\r\n\r\n  canDelete(currentUser?: User): boolean {\r\n    if (!currentUser) return false;\r\n    \r\n    // 只有管理员可以删除\r\n    return currentUser.isAdmin() || false;\r\n  }\r\n\r\n  getFormattedAmount(): string {\r\n    const amount = this.amount();\r\n    return amount ? amount.toFixed(2) : '0.00';\r\n  }\r\n\r\n  getFormattedDepositTime(): string {\r\n    const time = this.depositTime();\r\n    return time ? time.toLocaleDateString() + ' ' + time.toLocaleTimeString() : '';\r\n  }\r\n}","import app from \"flarum/admin/app\";\r\nimport UnifiedManagementPage from \"./components/UnifiedManagementPage\";\r\nimport WithdrawalPlatform from \"../common/models/WithdrawalPlatform\";\r\nimport WithdrawalRequest from \"../common/models/WithdrawalRequest\";\r\nimport DepositPlatform from \"../common/models/DepositPlatform\";\r\nimport DepositRecord from \"../common/models/DepositRecord\";\r\n\r\napp.initializers.add(\"wusong8899-funds\", () => {\r\n  // Register models in store\r\n  app.store.models[\"withdrawal-platforms\"] = WithdrawalPlatform as any;\r\n  app.store.models[\"withdrawal-requests\"] = WithdrawalRequest as any;\r\n  app.store.models[\"deposit-platforms\"] = DepositPlatform as any;\r\n  app.store.models[\"deposit-records\"] = DepositRecord as any;\r\n\r\n  app.extensionData.for(\"wusong8899-funds\").registerPage(UnifiedManagementPage);\r\n});\r\n"],"names":["ConfirmModal","Modal","title","dangerous","modalIcon","icon","message","confirmText","cancelText","onConfirm","onCancel","Button","app","GenericManagementPage","ExtensionPage","config","vnode","LoadingIndicator","m","tab","activeTab","props","formData","error","platform","platformName","transaction","status","prefix","key","value","settingsService","__vitePreload","SettingsService$1","GeneralSettingsSection","Component","withAttr","FormValidator","fieldName","displayName","minLength","min","max","numValue","_url","condition","AddPlatformForm","Stream","e","target","validator","nameLabel","symbolLabel","minAmountLabel","maxAmountLabel","feeLabel","minVal","errorMessage","platformIconUrlLabel","result","GenericPlatformListItem","type","onToggleStatus","onDelete","style","platformData","translationPrefix","Switch","id","name","symbol","network","minAmount","maxAmount","fee","address","isActive","createdDate","dateDisplay","humanTime","iconUrl","iconClass","PlatformManagementSection","platforms","submittingPlatform","onAddPlatform","onTogglePlatformStatus","onDeletePlatform","WithdrawalRequestItem","request","showActions","showDelete","requestId","amount","accountDetails","userData","userName","platformSymbol","statusClass","RequestManagementSection","requests","onUpdateRequestStatus","onDeleteRequest","pendingRequests","r","processedRequests","DepositRecordManagementSection","records","loading","record","attrs","recordId","isProcessing","platformId","user","depositTime","createdAt","recordAny","p","defaultAmount","creditedAmount","notes","reason","AddDepositPlatformForm","submitting","addressLabel","maxVal","qrCodeLabel","DepositPlatformManagementSection","PLATFORM_FIELD_CATEGORIES","getRequiredFields","platformType","getOptionalFields","validateRequiredFields","data","missingFields","field","FIELD_DISPLAY_NAMES","FIELD_VALIDATION_RULES","PlatformFieldManager","errors","warnings","requiredValidation","fieldErrors","fieldWarnings","_platformType","rules","fieldDisplayName","options","formatted","requiredFields","optionalFields","sanitized","num","oldData","newData","changes","oldValue","newValue","string","validatePlatform","sanitizeFormData","createWithdrawalPlatformOperations","sanitizedData","validation","errorMessages","platformService","PlatformService$1","newStatus","createWithdrawalRequestOperations","withdrawalService","WithdrawalService$1","ServiceErrorType","ServiceError","code","details","WithdrawalService","queryParams","attributes","model","userId","targetUserId","queryOptions","currentUser","userBalance","totalRequired","required","defaultMessage","apiError","DepositServiceImpl","response","filters","params","adminNotes","validParams","rel","depositService","PlatformService","modelType","results","currentStatus","requestType","includeParams","recordArray","sum","grouped","sortBy","direction","sortString","_platform","SettingsService","defaultValue","cachedValue","storageValue","settings","preparedSettings","forumAttributes","extension","fullKey","WithdrawalTabPlaceholder","DepositsTabPlaceholder","UnifiedManagementPage","usersToLoad","userRelation","userPromises","loadedUsers","index","validateCommonFields","validateAmountFields","currentMinAmount","validateDepositFields","throwIfErrors","validateWithdrawalPlatform","validateDepositPlatform","WithdrawalPlatform","Model","cloned","totalCost","feeText","WITHDRAWAL_STATUS","WithdrawalRequest","attr","DepositPlatform","_userId","DepositRecord","time"],"mappings":"kYAoBA,MAAqBA,UAAqBC,CAAyB,CACjE,WAAY,CACV,MAAO,cACT,CAEA,OAAQ,CACN,KAAM,CAAE,MAAAC,EAAO,UAAAC,EAAY,GAAO,KAAMC,EAAYD,EAAY,8BAAgC,wBAAA,EAA6B,KAAK,MAElI,OACE,EAAC,OAAA,KACEC,GACC,EAAC,QAAK,UAAW,qBAAqBD,EAAY,YAAc,EAAE,EAAA,EAC/DE,EAAKD,CAAS,CACjB,EAEDF,CACH,CAEJ,CAEA,SAAU,CACR,KAAM,CACJ,QAAAI,EACA,YAAAC,EAAc,UACd,WAAAC,EAAa,SACb,UAAAC,EACA,SAAAC,EACA,UAAAP,EAAY,EAAA,EACV,KAAK,MAET,SACG,MAAA,CAAI,UAAU,YAAA,EACb,EAAC,OAAI,UAAU,wBACZG,CACH,IAEC,MAAA,CAAI,UAAU,cACb,EAAC,MAAA,CAAI,UAAU,aAAA,EACb,EAACK,EAAA,CACC,UAAU,SACV,QAAS,IAAM,CACbD,EAAA,EACAE,EAAI,MAAM,MAAA,CACZ,CAAA,EAECJ,CAAA,EAEH,EAACG,EAAA,CACC,UAAW,kBAAkBR,EAAY,SAAW,SAAS,GAC7D,QAAS,IAAM,CACbM,EAAA,EACAG,EAAI,MAAM,MAAA,CACZ,CAAA,EAECL,CAAA,CAEL,CACF,CACF,CAEJ,CACF,CCjBA,MAA8BM,UAGpBC,CAAc,CAYtB,aAAc,CACZ,MAAA,EAVF,KAAU,UAAyB,CAAA,EACnC,KAAU,aAA+B,CAAA,EACzC,KAAA,QAAU,GACV,KAAU,mBAAqB,GAQ7B,MAAMC,EAAS,KAAK,UAAA,EACpB,KAAK,UAAYA,EAAO,KAAK,CAAC,GAAG,KAAO,EAC1C,CAEA,OAAOC,EAAyB,CAC9B,MAAM,OAAOA,CAAK,EAClB,KAAK,SAAA,CACP,CAEA,SAAU,CACR,GAAI,KAAK,QACP,SAAQC,EAAA,IAAiB,EAG3B,MAAMF,EAAS,KAAK,UAAA,EAEpB,OACEG,EAAC,MAAA,CAAI,UAAW,GAAGH,EAAO,WAAW,gBAAA,EACnCG,EAAC,MAAA,CAAI,UAAU,WAAA,EACbA,EAAC,UAAIH,EAAO,SAAU,EAErBA,EAAO,mBACNG,EAAC,OAAI,UAAU,iBAAA,EACZA,EAAEH,EAAO,kBAAmB,CAC3B,gBAAiB,KAAK,YAAY,KAAK,IAAI,CAAA,CAC5C,CACH,EAGDA,EAAO,KAAK,OAAS,GACpBG,EAAC,MAAA,CAAI,UAAU,WAAA,IACZ,MAAA,CAAI,UAAU,iBACZH,EAAO,KAAK,IAAII,GACfD,EAAC,SAAA,CACC,IAAKC,EAAI,IACT,UAAW,iBAAiB,KAAK,YAAcA,EAAI,IAAM,SAAW,EAAE,GACtE,QAAS,IAAM,CAAE,KAAK,UAAYA,EAAI,GAAK,CAAA,EAE1CA,EAAI,KAAA,CAER,CACH,EAEAD,EAAC,MAAA,CAAI,UAAU,mBAAA,EACZ,KAAK,wBACR,CACF,EAGDH,EAAO,KAAK,SAAW,GACtBG,EAAC,MAAA,CAAI,UAAU,oBACZ,KAAK,uBAAA,CACR,CAEJ,CACF,CAEJ,CAEU,wBAA2C,CACnD,MAAMH,EAAS,KAAK,UAAA,EACdK,EAAYL,EAAO,KAAK,QAAYI,EAAI,MAAQ,KAAK,SAAS,EAEpE,GAAI,CAACC,EAAW,OAAO,KAEvB,MAAMC,EAAQ,CAEZ,UAAW,KAAK,UAChB,aAAc,KAAK,aACnB,mBAAoB,KAAK,mBAGzB,cAAe,KAAK,YAAY,KAAK,IAAI,EACzC,uBAAwB,KAAK,qBAAqB,KAAK,IAAI,EAC3D,iBAAkB,KAAK,eAAe,KAAK,IAAI,EAG/C,GAAIN,EAAO,uBAAyB,CAClC,0BAA2B,KAAK,wBAAwB,KAAK,IAAI,CAAA,EAInE,GAAIK,EAAU,MAAQA,EAAU,MAAA,EAAU,CAAA,CAAC,EAG7C,OAAOF,EAAEE,EAAU,UAAWC,CAAK,CACrC,CAGA,MAAgB,YAAYC,EAA8B,CACxD,GAAI,KAAK,mBAAoB,OAE7B,KAAK,mBAAqB,GAC1B,MAAMP,EAAS,KAAK,UAAA,EAEpB,GAAI,CACF,MAAMA,EAAO,mBAAmB,OAAOO,CAAQ,EAC/C,MAAM,KAAK,cAAA,CACb,OAASC,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,CAE/C,QAAA,CACE,KAAK,mBAAqB,GAC1BL,EAAE,OAAA,CACJ,CACF,CAEA,MAAgB,qBAAqBM,EAAoC,CACvE,MAAMT,EAAS,KAAK,UAAA,EACpB,GAAI,CACF,MAAMA,EAAO,mBAAmB,aAAaS,CAAQ,EACrD,MAAM,KAAK,cAAA,EACXN,EAAE,OAAA,CACJ,OAASK,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,CACxD,CACF,CAEU,eAAeC,EAA2B,CAClD,MAAMT,EAAS,KAAK,UAAA,EACdU,GAAgB,OAAOD,EAAS,MAAS,WAAaA,EAAS,KAAA,EAASA,EAAS,OAAS,mBAEhGZ,EAAI,MAAM,KAAKZ,EAAc,CAC3B,MAAOY,EAAI,WAAW,MAAM,GAAGG,EAAO,aAAa,cAAc,uBAAuB,EACxF,QAASH,EAAI,WAAW,MAAM,GAAGG,EAAO,aAAa,cAAc,0BAA2B,CAAE,KAAMU,CAAA,CAAc,EACpH,YAAab,EAAI,WAAW,MAAM,GAAGG,EAAO,aAAa,cAAc,wBAAwB,EAC/F,WAAYH,EAAI,WAAW,MAAM,GAAGG,EAAO,aAAa,cAAc,uBAAuB,EAC7F,UAAW,GACX,KAAM,eACN,UAAW,SAAY,CACrB,GAAI,CACF,MAAMA,EAAO,mBAAmB,OAAOS,CAAQ,EAC/C,MAAM,KAAK,cAAA,EACXN,EAAE,OAAA,EAEFN,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,GAAGG,EAAO,aAAa,cAAc,iBAAiB,CAAA,CAE/E,OAASQ,EAAO,CACd,QAAQ,MAAM,2BAA4BA,CAAK,EAC/CX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,GAAGG,EAAO,aAAa,cAAc,eAAe,CAAA,CAE7E,CACF,EACA,SAAU,IAAM,CACdH,EAAI,MAAM,MAAA,CACZ,CAAA,CACD,CACH,CAGA,MAAgB,wBAAwBc,EAA2BC,EAA+B,CAChG,MAAMZ,EAAS,KAAK,UAAA,EACpB,GAAKA,EAAO,sBAEZ,GAAI,CACF,MAAMA,EAAO,sBAAsB,aAAaW,EAAaC,CAAM,EACnE,MAAM,KAAK,iBAAA,EAEX,MAAMC,EAASb,EAAO,aAAa,mBAAqBA,EAAO,aAAa,eAC5EH,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,GAAGgB,CAAM,IAAID,CAAM,UAAU,CAAA,CAEtD,OAASJ,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,EAClD,MAAMK,EAASb,EAAO,aAAa,mBAAqBA,EAAO,aAAa,eAC5EH,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,GAAGgB,CAAM,eAAe,CAAA,CAEjD,CACF,CAGA,MAAgB,UAA0B,CACxC,GAAI,CACF,MAAM,KAAK,cAAA,EACP,KAAK,UAAA,EAAY,uBACnB,MAAM,KAAK,iBAAA,CAEf,OAASL,EAAO,CACd,QAAQ,MAAM,sBAAuBA,CAAK,CAC5C,QAAA,CACE,KAAK,QAAU,GACfL,EAAE,OAAA,CACJ,CACF,CAEA,MAAgB,eAA+B,CAC7C,MAAMH,EAAS,KAAK,UAAA,EACpB,GAAI,CACF,KAAK,UAAY,MAAMA,EAAO,mBAAmB,KAAA,EACjD,QAAQ,IAAI,oBAAqB,KAAK,SAAS,CACjD,OAASQ,EAAO,CACd,QAAQ,MAAM,2BAA4BA,CAAK,EAC/C,KAAK,UAAY,CAAA,CACnB,CACF,CAEA,MAAgB,kBAAkC,CAChD,MAAMR,EAAS,KAAK,UAAA,EACpB,GAAKA,EAAO,sBAEZ,GAAI,CACF,KAAK,aAAe,MAAMA,EAAO,sBAAsB,KAAA,EACvD,QAAQ,IAAI,uBAAwB,KAAK,YAAY,CACvD,OAASQ,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,EAClD,KAAK,aAAe,CAAA,CACtB,CACF,CAGA,MAAgB,YAAYM,EAAaC,EAA8B,CACrE,GAAI,CAEF,KAAM,CAAE,gBAAAC,CAAA,EAAoB,MAAAC,EAAA,SAAA,CAAA,KAAA,CAAA,gBAAAD,CAAA,EAAA,MAAM,QAAA,QAAA,EAAA,KAAA,IAAAE,EAAA,EAAiD,MAAA,CAAA,gBAAAF,CAAA,CAAA,EAAA,MAAA,EACnF,MAAMA,EAAgB,YAAYF,EAAKC,CAAK,CAE9C,OAASP,EAAO,CACd,QAAQ,MAAM,wBAAyBA,CAAK,EAC5CX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BW,aAAiB,MAAQA,EAAM,QAAU,wBAAA,CAE7C,CACF,CACF,CC/SA,MAAqBW,UAA+BC,CAAuC,CACzF,MAAyB,CACvB,OACE,EAAC,OAAI,UAAU,kCAAA,IACZ,KAAA,KAAG,kBAAgB,EAEpB,EAAC,MAAA,CAAI,UAAU,QACb,EAAC,MAAA,CAAI,UAAU,YAAA,EACb,EAAC,QAAA,KAAOvB,EAAI,WAAW,MAAM,qCAAqC,CAAE,EACpE,EAAC,QAAA,CACC,KAAK,MACL,UAAU,cACV,YAAY,oEACZ,MAAOA,EAAI,MAAM,UAAU,+BAA+B,GAAK,GAC/D,QAASwB,EAAS,QAAUN,GAC1B,KAAK,MAAM,gBAAgB,gCAAiCA,CAAK,CAAA,CACnE,CAAA,EAEF,EAAC,QAAA,CAAM,UAAU,UAAA,EAAYlB,EAAI,WAAW,MAAM,0CAA0C,CAAE,CAChG,CACF,CACF,CAEJ,CACF,CChBO,MAAMyB,CAAc,CAApB,aAAA,CACL,KAAQ,OAA4B,CAAA,CAAC,CAKrC,SAASP,EAAYQ,EAAmBC,EAA4B,CAClE,OAAI,CAACT,GAAU,OAAOA,GAAU,UAAYA,EAAM,KAAA,IAAW,KAC3D,KAAK,OAAO,KAAK,CACf,MAAOQ,EACP,QAAS,GAAGC,GAAeD,CAAS,cAAA,CACrC,EAEI,IACT,CAKA,UAAUR,EAAeU,EAAmBF,EAAmBC,EAA4B,CACzF,OAAIT,GAASA,EAAM,OAASU,GAC1B,KAAK,OAAO,KAAK,CACf,MAAOF,EACP,QAAS,GAAGC,GAAeD,CAAS,qBAAqBE,CAAS,aAAA,CACnE,EAEI,IACT,CAKA,YAAYV,EAAwBW,EAAcC,EAAcJ,EAAoBC,EAA4B,CAC9G,MAAMI,EAAW,OAAOb,GAAU,SAAW,WAAWA,CAAK,EAAIA,EAEjE,OAAI,MAAMa,CAAQ,GAChB,KAAK,OAAO,KAAK,CACf,MAAOL,GAAa,SACpB,QAAS,GAAGC,GAAe,OAAO,yBAAA,CACnC,EACM,OAGLE,IAAQ,QAAaE,EAAWF,GAClC,KAAK,OAAO,KAAK,CACf,MAAOH,GAAa,SACpB,QAAS,GAAGC,GAAe,OAAO,qBAAqBE,CAAG,EAAA,CAC3D,EAGCC,IAAQ,QAAaC,EAAWD,GAClC,KAAK,OAAO,KAAK,CACf,MAAOJ,GAAa,SACpB,QAAS,GAAGC,GAAe,OAAO,oBAAoBG,CAAG,EAAA,CAC1D,EAGI,KACT,CAKA,IAAIZ,EAAeQ,EAAmBC,EAA4B,CAChE,GAAIT,GAASA,EAAM,OACjB,GAAI,CACF,MAAMc,EAAO,IAAI,IAAId,CAAK,CAG5B,MAAQ,CACN,KAAK,OAAO,KAAK,CACf,MAAOQ,EACP,QAAS,GAAGC,GAAeD,CAAS,sBAAA,CACrC,CACH,CAEF,OAAO,IACT,CAKA,OAAOO,EAAoBP,EAAmBhC,EAAuB,CACnE,OAAKuC,GACH,KAAK,OAAO,KAAK,CACf,MAAOP,EACP,QAAAhC,CAAA,CACD,EAEI,IACT,CAKA,WAA8B,CAE5B,MAAO,CACL,QAFc,KAAK,OAAO,SAAW,EAGrC,OAAQ,KAAK,OACb,kBAAmB,KAAK,OAAO,OAAS,EAAI,KAAK,OAAO,CAAC,EAAE,QAAU,MAAA,CAEzE,CAKA,OAAc,CACZ,YAAK,OAAS,CAAA,EACP,IACT,CACF,CClHA,MAAqBwC,WAAwBX,CAAgC,CAA7E,aAAA,CAAA,MAAA,GAAA,SAAA,EACE,KAAQ,KAAOY,EAAO,EAAE,EACxB,KAAQ,OAASA,EAAO,EAAE,EAC1B,KAAQ,QAAUA,EAAO,EAAE,EAC3B,KAAQ,UAAYA,EAAO,EAAE,EAC7B,KAAQ,UAAYA,EAAO,EAAE,EAC7B,KAAQ,IAAMA,EAAO,EAAE,EACvB,KAAQ,SAAWA,EAAO,EAAI,EAE9B,KAAQ,gBAAkBA,EAAO,EAAE,EACnC,KAAQ,kBAAoBA,EAAO,EAAE,CAAA,CAErC,MAAyB,CACvB,OACE7B,EAAC,OAAI,UAAU,sCAAA,IACZ,MAAA,CAAI,UAAU,YAAA,EACbA,EAAC,MAAA,CAAI,UAAU,YACbA,EAAC,MAAA,CAAI,UAAU,UAAA,EACbA,EAAC,QAAA,KAAON,EAAI,WAAW,MAAM,4BAA4B,CAAE,EAC3DM,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAaN,EAAI,WAAW,MAAM,uCAAuC,EACzE,KAAM,KAAK,IAAA,CAAA,CAEf,EACAM,EAAC,MAAA,CAAI,UAAU,UAAA,EACbA,EAAC,QAAA,KAAON,EAAI,WAAW,MAAM,8BAA8B,CAAE,EAC7DM,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAY,oBACZ,KAAM,KAAK,MAAA,CAAA,CAEf,EACAA,EAAC,MAAA,CAAI,UAAU,UAAA,EACbA,EAAC,QAAA,KAAON,EAAI,WAAW,MAAM,+BAA+B,CAAE,EAC9DM,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAY,kCACZ,KAAM,KAAK,OAAA,CAAA,EAEbA,EAAC,QAAA,CAAM,UAAU,UAAA,EAAYN,EAAI,WAAW,MAAM,oCAAoC,CAAE,CAC1F,CACF,EAEAM,EAAC,MAAA,CAAI,UAAU,UAAA,EACbA,EAAC,MAAA,CAAI,UAAU,UAAA,EACbA,EAAC,QAAA,KAAON,EAAI,WAAW,MAAM,kCAAkC,CAAE,EACjEM,EAAC,QAAA,CACC,KAAK,SACL,KAAK,aACL,UAAU,cACV,YAAY,QACZ,KAAM,KAAK,SAAA,CAAA,CAEf,EACAA,EAAC,MAAA,CAAI,UAAU,UAAA,EACbA,EAAC,QAAA,KAAON,EAAI,WAAW,MAAM,kCAAkC,CAAE,EACjEM,EAAC,QAAA,CACC,KAAK,SACL,KAAK,aACL,UAAU,cACV,YAAY,OACZ,KAAM,KAAK,SAAA,CAAA,CAEf,EACAA,EAAC,MAAA,CAAI,UAAU,UAAA,EACbA,EAAC,QAAA,KAAON,EAAI,WAAW,MAAM,2BAA2B,CAAE,EAC1DM,EAAC,QAAA,CACC,KAAK,SACL,KAAK,aACL,UAAU,cACV,YAAY,SACZ,KAAM,KAAK,GAAA,CAAA,CAEf,CACF,EAEAA,EAAC,OAAI,UAAU,UAAA,EACbA,EAAC,MAAA,CAAI,UAAU,UAAA,EACbA,EAAC,QAAA,CAAM,UAAU,UAAA,EACfA,EAAC,QAAA,CACC,KAAK,WACL,QAAS,KAAK,SAAA,EACd,SAAW8B,GAAa,CACtB,MAAMC,EAASD,EAAE,OACjB,KAAK,SAASC,EAAO,OAAO,CAC9B,CAAA,CAAA,EAEDrC,EAAI,WAAW,MAAM,iCAAiC,CACzD,CACF,CACF,EAGAM,EAAC,OAAI,UAAU,cAAA,IACZ,KAAA,KAAIN,EAAI,WAAW,MAAM,qCAAqC,CAAE,EACjEM,EAAC,IAAA,CAAE,UAAU,YAAYN,EAAI,WAAW,MAAM,0CAA0C,CAAE,EAE1FM,EAAC,OAAI,UAAU,UAAA,IACZ,MAAA,CAAI,UAAU,YACbA,EAAC,QAAA,KAAON,EAAI,WAAW,MAAM,yCAAyC,CAAE,EACxEM,EAAC,QAAA,CACC,KAAK,MACL,UAAU,cACV,YAAY,wCACZ,KAAM,KAAK,eAAA,CAAA,IAEZ,QAAA,CAAM,UAAU,YAAYN,EAAI,WAAW,MAAM,8CAA8C,CAAE,CACpG,EACAM,EAAC,MAAA,CAAI,UAAU,YACbA,EAAC,QAAA,KAAON,EAAI,WAAW,MAAM,2CAA2C,CAAE,EAC1EM,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAY,iBACZ,KAAM,KAAK,iBAAA,CAAA,EAEbA,EAAC,QAAA,CAAM,UAAU,YAAYN,EAAI,WAAW,MAAM,gDAAgD,CAAE,CACtG,CACF,CACF,EAEAM,EAAC,MAAA,CAAI,UAAU,YAAA,EACbA,EAACP,EAAA,CACC,UAAU,yBACV,QAAS,KAAK,MAAM,WACpB,SAAU,KAAK,MAAM,WACrB,QAAS,KAAK,aAAa,KAAK,IAAI,CAAA,EAEnCC,EAAI,WAAW,MAAM,kCAAkC,CAAA,CAE5D,CACF,CACF,CAEJ,CAEQ,cAAwB,CAC9B,MAAMsC,EAAY,IAAIb,EAEtB,GAAI,CAEF,MAAMc,EAAYvC,EAAI,WAAW,MAAM,4BAA4B,EAAE,SAAA,EAC/DwC,EAAcxC,EAAI,WAAW,MAAM,8BAA8B,EAAE,SAAA,EACnEyC,EAAiBzC,EAAI,WAAW,MAAM,kCAAkC,EAAE,SAAA,EAC1E0C,EAAiB1C,EAAI,WAAW,MAAM,kCAAkC,EAAE,SAAA,EAC1E2C,EAAW3C,EAAI,WAAW,MAAM,2BAA2B,EAAE,SAAA,EAEnEsC,EACG,SAAS,KAAK,KAAA,EAAQ,OAAQC,CAAS,EACvC,SAAS,KAAK,SAAU,SAAUC,CAAW,EAC7C,YAAY,KAAK,YAAa,EAAG,OAAW,YAAaC,CAAc,EACvE,YAAY,KAAK,UAAA,EAAa,EAAG,OAAW,YAAaC,CAAc,EACvE,YAAY,KAAK,IAAA,EAAO,EAAG,OAAW,MAAOC,CAAQ,EAGxD,MAAMC,EAAS,WAAW,KAAK,UAAA,CAAW,EAE1C,GADe,WAAW,KAAK,UAAA,CAAW,EAC7BA,EAAQ,CACnB,MAAMC,EAAe7C,EAAI,WAAW,MAAM,qCAAqC,EAAE,SAAA,EACjFsC,EAAU,OAAO,GAAO,YAAaO,CAAY,CACnD,CAGA,GAAI,KAAK,gBAAA,GAAqB,KAAK,gBAAA,EAAkB,OAAQ,CAC3D,MAAMC,EAAuB9C,EAAI,WAAW,MAAM,yCAAyC,EAAE,SAAA,EAC7FsC,EAAU,IAAI,KAAK,gBAAA,EAAmB,kBAAmBQ,CAAoB,CAC/E,CAEA,MAAMC,EAAST,EAAU,UAAA,EAEzB,MAAI,CAACS,EAAO,SAAWA,EAAO,mBAC5B/C,EAAI,OAAO,KAAK,CAAE,KAAM,QAAS,YAAa,EAAA,EAAQ+C,EAAO,iBAAiB,EAGzEA,EAAO,OAChB,OAASpC,EAAO,CACd,eAAQ,MAAM,yBAA0BA,CAAK,EAC7CX,EAAI,OAAO,KAAK,CAAE,KAAM,QAAS,YAAa,EAAA,EAAQ,mBAAmB,EAClE,EACT,CACF,CAEA,MAAc,cAA8B,CAG1C,GAFI,KAAK,MAAM,YAEX,CAAC,KAAK,eAAgB,OAE1B,MAAMU,EAA6B,CACjC,KAAM,KAAK,KAAA,EACX,OAAQ,KAAK,OAAA,EACb,QAAS,KAAK,QAAA,EACd,UAAW,KAAK,UAAA,EAChB,UAAW,KAAK,UAAA,EAChB,IAAK,KAAK,IAAA,EACV,SAAU,KAAK,SAAA,EAEf,gBAAiB,KAAK,gBAAA,EACtB,kBAAmB,KAAK,kBAAA,CAAkB,EAG5C,GAAI,CACF,MAAM,KAAK,MAAM,SAASA,CAAQ,EAClC,KAAK,UAAA,CACP,MAAQ,CAER,CACF,CAEQ,WAAkB,CACxB,KAAK,KAAK,EAAE,EACZ,KAAK,OAAO,EAAE,EACd,KAAK,QAAQ,EAAE,EACf,KAAK,UAAU,EAAE,EACjB,KAAK,UAAU,EAAE,EACjB,KAAK,IAAI,EAAE,EACX,KAAK,SAAS,EAAI,EAElB,KAAK,gBAAgB,EAAE,EACvB,KAAK,kBAAkB,EAAE,EACzBJ,EAAE,OAAA,CACJ,CACF,CC5MA,MAAqB0C,UAAgCzB,CAAwC,CAC3F,KAAKnB,EAAsE,CACzE,KAAM,CAAE,SAAAQ,EAAU,KAAAqC,EAAM,eAAAC,EAAgB,SAAAC,EAAU,MAAAC,EAAQ,QAAWhD,EAAM,MAE3E,OAAIgD,IAAU,OACL,KAAK,gBAAgBxC,EAAUqC,EAAMC,EAAgBC,CAAQ,EAE7D,KAAK,gBAAgBvC,EAAUqC,EAAMC,EAAgBC,CAAQ,CAExE,CAEQ,gBACNvC,EACAqC,EACAC,EACAC,EACkB,CAClB,MAAME,EAAe,KAAK,oBAAoBzC,CAAQ,EAChD0C,EAAqBL,IAAS,SAAWA,IAAS,aAAgB,wBAA0B,gCAElG,OACE3C,EAAC,MAAA,CAAI,IAAK+C,EAAa,GAAI,UAAW,GAAGJ,CAAI,UAAA,EAC3C3C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,eAAA,EACrB3C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,kBAAA,EACrB3C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,mBAAmBI,EAAa,SAAW,SAAW,UAAU,EAAA,EACrFA,EAAa,SAAW,KAAO,IAClC,EACA/C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,eAAA,EAAkBI,EAAa,WAAY,EACnE/C,EAAC,OAAA,CAAK,UAAU,aAAA,EAAc,IAAE+C,EAAa,EAAG,EAC/CA,EAAa,SAAW/C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,kBAAA,EAAoB,IAAEI,EAAa,QAAQ,GAAC,CAC/F,EACA/C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,oBACrB3C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,kBAAA,EAAoB,QACpCI,EAAa,UAAU,WAASA,EAAa,UAClD,WAAWA,EAAa,GAAG,GAC3BJ,IAAS,WAAa,eAAeI,EAAa,QAAU,SAAW,UAAU,EACpF,EACCA,EAAa,aACZ/C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,eAAA,EAAkBI,EAAa,WAAY,CAEvE,CACF,EACA/C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,kBAAA,EACrB3C,EAACP,EAAA,CACC,UAAW,UAAUsD,EAAa,SAAW,oBAAsB,iBAAiB,GACpF,QAAS,IAAMH,EAAetC,CAAQ,CAAA,EAErCZ,EAAI,WAAW,MAAM,GAAGsD,CAAiB,IAAID,EAAa,SAAW,UAAY,QAAQ,EAAE,CAAA,EAE9F/C,EAACP,EAAA,CACC,UAAU,wBACV,QAAS,IAAMoD,EAASvC,CAAQ,CAAA,EAE/BZ,EAAI,WAAW,MAAM,GAAGsD,CAAiB,SAAS,CAAA,CAEvD,CACF,CAEJ,CAEQ,gBACN1C,EACAqC,EACAC,EACAC,EACkB,CAClB,MAAME,EAAe,KAAK,oBAAoBzC,CAAQ,EAChD0C,EAAqBL,IAAS,SAAWA,IAAS,aAAgB,wBAA0B,gCAElG,OACE3C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,kBAAA,EACrB3C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,0BAAA,EACrB3C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,uBAAA,EACpB,KAAK,mBAAmBrC,CAAQ,CACnC,EAEAN,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,yBACrB3C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,0BAAA,EACrB3C,EAAC,SAAA,KAAQ+C,EAAa,IAAK,EAC3B/C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,8BAAA,EACrBI,EAAa,OACbA,EAAa,SAAW,KAAKA,EAAa,OAAO,GACpD,CACF,EAEA/C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,0BAAA,EACrB3C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,yBAAA,EAA2B,QAC3CI,EAAa,UAAU,IAAEA,EAAa,MAC9C,EACCA,EAAa,WACZ/C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,yBAAA,EAA2B,QAC3CI,EAAa,UAAU,IAAEA,EAAa,MAC9C,EAEDA,EAAa,KACZ/C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,yBAAA,EAA2B,QAC3CI,EAAa,IAAI,IAAEA,EAAa,MACxC,EAEDJ,IAAS,WACR3C,EAAC,OAAA,CAAK,UAAW,GAAG2C,CAAI,yBAAA,EAA2B,YACvCI,EAAa,QAAU,SAAW,UAC9C,CAEJ,CACF,EAEA/C,EAAC,MAAA,CAAI,UAAW,GAAG2C,CAAI,0BAAA,EACrB3C,EAACiD,EAAA,CACC,MAAOF,EAAa,SACpB,SAAU,SAAY,CACpB,MAAMH,EAAetC,CAAQ,EAC7BN,EAAE,OAAA,CACJ,CAAA,EAEC+C,EAAa,SACVrD,EAAI,WAAW,MAAM,GAAGsD,CAAiB,SAAS,EAClDtD,EAAI,WAAW,MAAM,GAAGsD,CAAiB,WAAW,CAAA,EAI1DhD,EAACP,EAAA,CACC,UAAU,mCACV,KAAK,eACL,QAAS,SAAY,CACnB,MAAMoD,EAASvC,CAAQ,EACvBN,EAAE,OAAA,CACJ,EACA,MAAON,EAAI,WAAW,MAAM,GAAGsD,CAAiB,SAAS,CAAA,CAAA,CAE7D,CACF,CACF,CAEJ,CAEQ,oBAAoB1C,EAA2B,CAErD,MAAM4C,EAAK,OAAO5C,EAAS,IAAO,WAAaA,EAAS,KAAOA,EAAS,GAClE6C,GAAQ,OAAO7C,EAAS,MAAS,WAAaA,EAAS,KAAA,EAASA,EAAS,MAAM,YAAY,OAAS,mBACpG8C,GAAU,OAAO9C,EAAS,QAAW,WAAaA,EAAS,OAAA,EAAWA,EAAS,MAAM,YAAY,SAAW,GAC5G+C,GAAW,OAAO/C,EAAS,SAAY,WAAaA,EAAS,QAAA,EAAYA,EAAS,MAAM,YAAY,UAAY,KAChHe,GAAe,OAAOf,EAAS,aAAgB,WAAaA,EAAS,YAAA,EAAgBA,EAAS,MAAM,YAAY,cAAgB6C,EAChIG,GAAa,OAAOhD,EAAS,WAAc,WAAaA,EAAS,UAAA,EAAcA,EAAS,MAAM,YAAY,YAAc,MACxHiD,GAAa,OAAOjD,EAAS,WAAc,WAAaA,EAAS,UAAA,EAAcA,EAAS,MAAM,YAAY,YAAc,MACxHkD,GAAO,OAAOlD,EAAS,KAAQ,WAAaA,EAAS,IAAA,EAAQA,EAAS,MAAM,YAAY,MAAQ,MAChGmD,GAAW,OAAOnD,EAAS,SAAY,WAAaA,EAAS,QAAA,EAAYA,EAAS,MAAM,YAAY,UAAY,KAChHoD,GAAY,OAAOpD,EAAS,UAAa,WAAaA,EAAS,SAAA,EAAaA,EAAS,MAAM,YAAY,WAAa,GACpHqD,GAAe,OAAOrD,EAAS,WAAc,WAAaA,EAAS,UAAA,EAAcA,EAAS,MAAM,YAAY,YAAc,KAEhI,IAAIsD,EAAgC,MACpC,GAAID,EACF,GAAI,CACFC,EAAcC,EAAUF,CAAW,CACrC,OAAS7B,EAAG,CACV,QAAQ,MAAM,yBAA0BA,CAAC,EACzC8B,EAAc,cAChB,CAGF,MAAO,CACL,GAAAV,EACA,KAAAC,EACA,OAAAC,EACA,QAAAC,EACA,YAAAhC,EACA,UAAAiC,EACA,UAAAC,EACA,IAAAC,EACA,QAAAC,EACA,SAAAC,EACA,YAAAC,EACA,YAAAC,CAAA,CAEJ,CAEQ,mBAAmBtD,EAA6C,CACtE,MAAMwD,EAAU,OAAOxD,EAAS,SAAY,WAAaA,EAAS,QAAA,EAAYA,EAAS,YAAY,QAC7FyD,EAAY,OAAOzD,EAAS,WAAc,WAAaA,EAAS,UAAA,EAAcA,EAAS,YAAY,UACnG8C,EAAS,OAAO9C,EAAS,QAAW,WAAaA,EAAS,OAAA,EAAWA,EAAS,YAAY,OAEhG,OAAIwD,IACM,MAAA,CAAI,IAAKA,EAAS,IAAKV,EAAQ,UAAU,uBAAuB,EAIjEjE,EADL4E,GAKQ,cAJW,CAKzB,CACF,CCpNA,MAAqBC,WAAkC/C,CAA0C,CAC/F,MAAyB,CACvB,KAAM,CAAE,UAAAgD,EAAW,mBAAAC,EAAoB,cAAAC,EAAe,uBAAAC,EAAwB,iBAAAC,CAAA,EAAqB,KAAK,MAExG,OACE,EAAC,MAAA,CAAI,UAAU,kCAAA,EACb,EAAC,KAAA,KAAI3E,EAAI,WAAW,MAAM,6BAA6B,CAAE,EAEzD,EAACkC,GAAA,CACC,SAAUuC,EACV,WAAYD,CAAA,CAAA,EAGd,EAAC,MAAA,CAAI,UAAU,cAAA,EACZD,EAAU,SAAW,EACpB,EAAC,IAAA,KAAGvE,EAAI,WAAW,MAAM,6BAA6B,CAAE,EAExDuE,EACG,OAAQ3D,GAAaA,GAAa,IAA8B,EAChE,IAAKA,GACJ,EAACoC,EAAA,CACC,IAAKpC,EAAS,GAAA,EACd,SAAAA,EACA,KAAK,aACL,MAAM,OACN,eAAgB8D,EAChB,SAAUC,CAAA,CAAA,CAEb,CAEP,CACF,CAEJ,CACF,CClCA,MAAqBC,UAA8BrD,CAAsC,CACvF,MAAyB,CACvB,MAAMsD,EAAU,KAAK,MAAM,QACrB,CAAE,YAAAC,EAAa,WAAAC,EAAa,EAAA,EAAU,KAAK,MAG3CC,EAAYH,EAAQ,GAAA,EACpBI,EAASJ,EAAQ,OAAA,EACjB9D,EAAS8D,EAAQ,OAAA,EACjBK,EAAiBL,EAAQ,eAAA,EACzBZ,EAAcY,EAAQ,UAAA,EAGtBM,EAAWN,EAAQ,KAAA,EACnBO,EAAWD,EAAWA,EAAS,YAAA,EAAgB,eAG/CvE,EAAWiE,EAAQ,SAAA,EACnBhE,EAAeD,EAAWA,EAAS,KAAA,EAAS,mBAC5CyE,EAAiBzE,EAAWA,EAAS,OAAA,EAAW,MAEhD0E,EAAc,UAAUvE,CAAM,GAEpC,IAAImD,EAAgC,MACpC,GAAID,EACF,GAAI,CACFC,EAAcC,EAAUF,CAAW,CACrC,OAAS7B,GAAG,CACV,QAAQ,MAAM,iCAAkCA,EAAC,EACjD8B,EAAc,cAChB,CAGF,OACE,EAAC,OAAI,IAAKc,EAAW,UAAW,qBAAqBM,CAAW,EAAA,EAC9D,EAAC,MAAA,CAAI,UAAU,0BACb,EAAC,MAAA,CAAI,UAAU,wBAAA,EACb,EAAC,SAAA,KAAQF,CAAS,EAClB,EAAC,OAAA,CAAK,UAAU,YAAA,EAAa,IAAEJ,CAAU,CAC3C,IACC,MAAA,CAAI,UAAU,6BACb,EAAC,OAAA,CAAK,UAAU,QAAA,EAAUC,CAAO,IAChC,OAAA,CAAK,UAAU,UAAA,EAAYpE,CAAa,EACzC,EAAC,QAAK,UAAU,QAAA,EAAUwE,CAAe,EACzC,EAAC,OAAA,CAAK,UAAU,MAAA,EAAQnB,CAAY,CACtC,EACA,EAAC,OAAI,UAAU,2BAAA,EACb,EAAC,SAAA,KAAQlE,EAAI,WAAW,MAAM,sCAAsC,EAAE,GAAC,EACvE,EAAC,OAAA,KAAMkF,CAAe,CACxB,EACA,EAAC,MAAA,CAAI,UAAU,0BAAA,IACZ,OAAA,CAAK,UAAW,gBAAgBnE,CAAM,EAAA,EACpCf,EAAI,WAAW,MAAM,+BAA+Be,CAAM,EAAE,CAC/D,CACF,CACF,GAEE+D,GAAeC,IACf,EAAC,MAAA,CAAI,UAAU,6BACZD,GAAe,KAAK,MAAM,gBACzB,EAAA,IAAA,KACE,EAAC/E,EAAA,CACC,UAAU,yBACV,QAAS,IAAM,KAAK,MAAM,eAAgB8E,EAAS,UAAU,CAAA,EAE5D7E,EAAI,WAAW,MAAM,8BAA8B,CAAA,EAEtD,EAACD,EAAA,CACC,UAAU,wBACV,QAAS,IAAM,KAAK,MAAM,eAAgB8E,EAAS,UAAU,CAAA,EAE5D7E,EAAI,WAAW,MAAM,6BAA6B,CAAA,CAEvD,EAED,KAAK,MAAM,UACV,EAACD,EAAA,CACC,UAAU,sBACV,QAAS,IAAM,KAAK,MAAM,SAAU8E,CAAO,CAAA,EAE3C,EAAC,IAAA,CAAE,UAAU,cAAA,CAAe,EAC3B7E,EAAI,WAAW,MAAM,6BAA6B,CAAA,CAGzD,CAEJ,CAEJ,CACF,CC5FA,MAAqBuF,WAAiChE,CAAyC,CAC7F,MAAyB,CACvB,KAAM,CAAE,SAAAiE,EAAU,sBAAAC,EAAuB,gBAAAC,CAAA,EAAoB,KAAK,MAE5DC,EAAkBH,EAAS,UAAYI,EAAE,OAAA,IAAa,SAAS,EAC/DC,EAAoBL,EAAS,UAAYI,EAAE,OAAA,IAAa,SAAS,EAEvE,SACG,MAAA,CAAI,UAAU,kCAAA,EACb,EAAC,UAAI5F,EAAI,WAAW,MAAM,4BAA4B,CAAE,EAExD,EAAC,OAAI,UAAU,8CACZ,KAAA,KAAIA,EAAI,WAAW,MAAM,oCAAoC,CAAE,EAC/D2F,EAAgB,SAAW,EAC1B,EAAC,IAAA,KAAG3F,EAAI,WAAW,MAAM,iCAAiC,CAAE,EAE5D2F,EAAgB,IAAKd,GACnB,EAACD,EAAA,CACC,IAAKC,EAAQ,GAAA,EACb,QAAAA,EACA,YAAa,GACb,WAAY,GACZ,eAAgBY,EAChB,SAAUC,CAAA,CAAA,CAEb,CAEL,EAEA,EAAC,MAAA,CAAI,UAAU,4CAAA,EACb,EAAC,KAAA,KAAI1F,EAAI,WAAW,MAAM,sCAAsC,CAAE,EACjE6F,EAAkB,SAAW,EAC5B,EAAC,IAAA,KAAG7F,EAAI,WAAW,MAAM,mCAAmC,CAAE,EAE9D6F,EAAkB,IAAKhB,GACrB,EAACD,EAAA,CACC,IAAKC,EAAQ,GAAA,EACb,QAAAA,EACA,YAAa,GACb,WAAY,GACZ,SAAUa,CAAA,CAAA,CAEb,CAEL,CACF,CAEJ,CACF,CCbA,MAAqBI,WAAuCvE,CAG1D,CAHF,aAAA,CAAA,MAAA,GAAA,SAAA,EAIE,KAAO,MAA6C,CAClD,sBAAuB,GAAI,CAC7B,CAEA,KAAKnB,EAA6E,CAChF,KAAM,CAAE,QAAA2F,EAAS,UAAAxB,EAAW,QAAAyB,CAAA,EAAY5F,EAAM,MAE9C,OAAI4F,IAEC,MAAA,CAAI,UAAU,kCACb1F,EAAC,MAAA,CAAI,UAAU,iBACbA,EAAC,UAAIN,EAAI,WAAW,MAAM,mCAAmC,CAAE,CACjE,EACAM,EAACD,MAAiB,CACpB,EAKFC,EAAC,MAAA,CAAI,UAAU,gCAAA,EACbA,EAAC,MAAA,CAAI,UAAU,uCAAA,EACbA,EAAC,KAAA,KAAIN,EAAI,WAAW,MAAM,mCAAmC,CAAE,EAC/DM,EAAC,MAAA,CAAI,UAAU,sCAAA,EACbA,EAAC,OAAA,CAAK,UAAU,sCAAA,EACbN,EAAI,WAAW,MAAM,0CAA2C,CAC/D,MAAO+F,EAAQ,MAAA,CAChB,CACH,EACAzF,EAAC,OAAA,CAAK,UAAU,wCAAA,EACbN,EAAI,WAAW,MAAM,4CAA6C,CACjE,MAAO+F,EAAQ,UAAYH,EAAE,UAAA,CAAW,EAAE,MAAA,CAC3C,CACH,CACF,CACF,EAEAtF,EAAC,MAAA,CAAI,UAAU,wCAAA,EACZyF,EAAQ,SAAW,EAClBzF,EAAC,OAAI,UAAU,sCAAA,EACbA,EAAC,MAAA,CAAI,UAAU,0CAAA,EACZb,EAAK,gBAAgB,CACxB,EACAa,EAAC,KAAA,KAAIN,EAAI,WAAW,MAAM,yCAAyC,CAAE,EACrEM,EAAC,IAAA,KAAGN,EAAI,WAAW,MAAM,+CAA+C,CAAE,CAC5E,EAEAM,EAAC,MAAA,CAAI,UAAU,qCAAA,EACZyF,EAAQ,IAAIE,GAAU,KAAK,aAAaA,EAAQ1B,EAAWnE,EAAM,KAAK,CAAC,CAC1E,CAEJ,CACF,CAEJ,CAEQ,aACN6F,EACA1B,EACA2B,EACkB,CAClB,MAAMC,EAAWF,EAAO,GAAA,EAClBG,EAAe,KAAK,MAAM,kBAAkB,IAAID,CAAQ,EACxDE,EAAa,KAAK,cAAcJ,CAAM,EACtCrF,EAAW,KAAK,aAAa2D,EAAW8B,CAAU,EAClDC,EAAOL,EAAO,OAAA,EACdlF,EAAS,KAAK,gBAAgBkF,CAAM,EACpCM,EAAc,KAAK,eAAeN,CAAM,EACxCO,EAAY,KAAK,aAAaP,CAAM,EAE1C,SACG,MAAA,CAAI,IAAK,UAAUE,CAAQ,GAAI,UAAW,4BAA4BpF,CAAM,IAC3ET,EAAC,MAAA,CAAI,UAAU,0BAAA,EACbA,EAAC,OAAI,UAAU,wBAAA,IACZ,OAAA,CAAK,UAAU,8BACbgG,GAAM,cAAA,GAAmB,cAC5B,IACC,OAAA,CAAK,UAAU,4BAA2B,OACpC,KAAK,UAAUL,CAAM,CAC5B,CACF,EAEA3F,EAAC,OAAI,UAAU,0BAAA,IACZ,OAAA,CAAK,UAAU,iCACb,KAAK,UAAU2F,CAAM,EAAE,IAAErF,GAAU,SAAA,GAAc,EACpD,EACAN,EAAC,OAAI,UAAW,mCAAmC,KAAK,eAAeS,CAAM,CAAC,EAAA,EAC3E,KAAK,iBAAiBA,CAAM,EAC5B,KAAK,cAAcA,CAAM,CAC5B,CACF,CACF,EAEAT,EAAC,MAAA,CAAI,UAAU,2BAAA,EACbA,EAAC,OAAI,UAAU,2BACZ,OAAA,CAAK,UAAU,2BAA0B,WAAS,IAClD,OAAA,CAAK,UAAU,yBAAA,EACbM,GAAU,UAAY,mBAAmB,IAAEA,GAAU,YAAc,IAAIA,EAAS,SAAS,IAAM,EAClG,CACF,IAIC,MAAA,CAAI,UAAU,yBACbN,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA0B,eAAa,EACvDA,EAAC,OAAA,CAAK,UAAU,yBAAA,EACbiG,EAAY,qBAAqB,IAAEA,EAAY,mBAAA,CAClD,CACF,EAEAjG,EAAC,OAAI,UAAU,uBAAA,IACZ,OAAA,CAAK,UAAU,2BAA0B,YAAU,IACnD,OAAA,CAAK,UAAU,2BACb6D,EAAUqC,CAAS,CACtB,CACF,EAECP,EAAO,mBACL,MAAA,CAAI,UAAU,yBACb3F,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA0B,UAAQ,EAClDA,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA2B2F,EAAO,aAAc,CAClE,EAGDA,EAAO,gBAAA,GACN3F,EAAC,MAAA,CAAI,UAAU,uBAAA,EACbA,EAAC,QAAK,UAAU,2BAA0B,aAAW,EACrDA,EAAC,IAAA,CACC,KAAM2F,EAAO,cAAA,EACb,OAAO,SACP,IAAI,sBACJ,UAAU,wBAAA,EACX,mBACkBxG,EAAK,0BAA0B,CAAA,CAEpD,EAGDwG,EAAO,cAAA,GACN3F,EAAC,MAAA,CAAI,UAAU,+BACbA,EAAC,OAAI,UAAU,uBAAA,IACZ,OAAA,CAAK,UAAU,2BAA0B,YAAU,IACnD,OAAA,CAAK,UAAU,2BACb6D,EAAU8B,EAAO,aAAa,CACjC,CACF,EAECA,EAAO,oBAAsBA,EAAO,mBAAqBA,EAAO,UAC/D3F,EAAC,OAAI,UAAU,2BACZ,OAAA,CAAK,UAAU,2BAA0B,kBAAgB,IACzD,OAAA,CAAK,UAAU,2BACb2F,EAAO,eAAA,EAAiB,IAAErF,GAAU,YAAc,EACrD,CACF,EAGDqF,EAAO,gBACN3F,EAAC,OAAI,UAAU,uBAAA,IACZ,OAAA,CAAK,UAAU,2BAA0B,cAAY,IACrD,OAAA,CAAK,UAAU,2BAA2B2F,EAAO,WAAA,CAAa,CACjE,CAEJ,CAEJ,EAEClF,IAAW,WACVT,EAAC,MAAA,CAAI,UAAU,2BAAA,EACbA,EAACP,EAAA,CACC,UAAU,yDACV,QAAS,IAAM,KAAK,cAAckG,EAAQC,CAAK,EAC/C,QAASE,EACT,SAAUA,CAAA,EAETpG,EAAI,WAAW,MAAM,qCAAqC,CAAA,EAG7DM,EAACP,EAAA,CACC,UAAU,uDACV,QAAS,IAAM,KAAK,aAAakG,EAAQC,CAAK,EAC9C,QAASE,EACT,SAAUA,CAAA,EAETpG,EAAI,WAAW,MAAM,oCAAoC,CAAA,CAE9D,EAGFM,EAAC,MAAA,CAAI,UAAU,gCAAA,EACbA,EAACP,EAAA,CACC,UAAU,qDACV,QAAS,IAAM,KAAK,aAAakG,EAAQC,CAAK,EAC9C,SAAUE,CAAA,EAET3G,EAAK,cAAc,EACnBO,EAAI,WAAW,MAAM,oCAAoC,CAAA,CAE9D,CACF,CAEJ,CAEQ,cAAciG,EAA+B,CAEnD,GAAI,OAAOA,EAAO,YAAe,WAC/B,GAAI,CACF,OAAOA,EAAO,WAAA,CAChB,OAAStF,EAAO,CACd,QAAQ,KAAK,sCAAuCA,CAAK,CAC3D,CAIF,MAAM8F,EAAYR,EAClB,OAAIQ,EAAU,aAAe,OACpB,SAASA,EAAU,UAAU,EAIlCA,EAAU,YAAcA,EAAU,WAAW,aAAe,OACvD,SAASA,EAAU,WAAW,UAAU,GAGjD,QAAQ,MAAM,uCAAwCR,CAAM,EACrD,EACT,CAEQ,gBAAgBA,EAA+B,CACrD,GAAI,OAAOA,EAAO,QAAW,WAC3B,GAAI,CACF,OAAOA,EAAO,OAAA,CAChB,OAAStF,EAAO,CACd,QAAQ,KAAK,kCAAmCA,CAAK,CACvD,CAGF,MAAM8F,EAAYR,EAClB,OAAIQ,EAAU,OACLA,EAAU,OAGfA,EAAU,YAAcA,EAAU,WAAW,OACxCA,EAAU,WAAW,OAGvB,SACT,CAEQ,eAAeR,EAA6B,CAClD,GAAI,OAAOA,EAAO,aAAgB,WAChC,GAAI,CACF,OAAOA,EAAO,YAAA,CAChB,OAAStF,EAAO,CACd,QAAQ,KAAK,uCAAwCA,CAAK,CAC5D,CAGF,MAAM8F,EAAYR,EAClB,OAAIQ,EAAU,YACL,IAAI,KAAKA,EAAU,WAAW,EAGnCA,EAAU,YAAcA,EAAU,WAAW,YACxC,IAAI,KAAKA,EAAU,WAAW,WAAW,EAG9CA,EAAU,YAAcA,EAAU,WAAW,aACxC,IAAI,KAAKA,EAAU,WAAW,YAAY,MAGxC,IACb,CAEQ,aAAaR,EAA6B,CAChD,GAAI,OAAOA,EAAO,WAAc,WAC9B,GAAI,CACF,OAAOA,EAAO,UAAA,CAChB,OAAStF,EAAO,CACd,QAAQ,KAAK,qCAAsCA,CAAK,CAC1D,CAGF,MAAM8F,EAAYR,EAClB,OAAIQ,EAAU,UACL,IAAI,KAAKA,EAAU,SAAS,EAGjCA,EAAU,YAAcA,EAAU,WAAW,UACxC,IAAI,KAAKA,EAAU,WAAW,SAAS,EAG5CA,EAAU,YAAcA,EAAU,WAAW,WACxC,IAAI,KAAKA,EAAU,WAAW,UAAU,MAGtC,IACb,CAEQ,UAAUR,EAA+B,CAC/C,GAAI,OAAOA,EAAO,QAAW,WAC3B,GAAI,CACF,OAAOA,EAAO,OAAA,CAChB,OAAStF,EAAO,CACd,QAAQ,KAAK,kCAAmCA,CAAK,CACvD,CAGF,MAAM8F,EAAYR,EAClB,OAAIQ,EAAU,SAAW,OAChB,SAASA,EAAU,MAAM,EAG9BA,EAAU,YAAcA,EAAU,WAAW,SAAW,OACnD,SAASA,EAAU,WAAW,MAAM,EAGzCA,EAAU,YAAcA,EAAU,WAAW,UAAY,OACpD,SAASA,EAAU,WAAW,OAAO,EAGvC,CACT,CAEQ,UAAUR,EAA+B,CAC/C,GAAI,OAAOA,EAAO,QAAW,WAC3B,GAAI,CACF,OAAOA,EAAO,OAAA,CAChB,OAAStF,EAAO,CACd,QAAQ,KAAK,kCAAmCA,CAAK,CACvD,CAGF,MAAM8F,EAAYR,EAClB,OAAIQ,EAAU,SAAW,OAChB,WAAWA,EAAU,MAAM,EAGhCA,EAAU,YAAcA,EAAU,WAAW,SAAW,OACnD,WAAWA,EAAU,WAAW,MAAM,EAGxC,CACT,CAIQ,aAAalC,EAAkB8B,EAAgC,CACrE,OAAO9B,EAAU,KAAKmC,GAAK,CACzB,MAAMlD,EAAK,OAAOkD,EAAE,IAAO,WAAaA,EAAE,KAAOA,EAAE,GACnD,OAAO,SAASlD,CAAE,IAAM6C,CAC1B,CAAC,GAAK,IACR,CAEQ,eAAetF,EAAwB,CAC7C,OAAQA,EAAA,CACN,IAAK,UACH,MAAO,UACT,IAAK,WACH,MAAO,UACT,IAAK,WACH,MAAO,SACT,QACE,MAAO,WAAA,CAEb,CAEQ,iBAAiBA,EAAkC,CACzD,OAAQA,EAAA,CACN,IAAK,UACH,OAAOtB,EAAK,cAAc,EAC5B,IAAK,WACH,OAAOA,EAAK,qBAAqB,EACnC,IAAK,WACH,OAAOA,EAAK,qBAAqB,EACnC,QACE,OAAOA,EAAK,wBAAwB,CAAA,CAE1C,CAEQ,cAAcsB,EAAwB,CAC5C,OAAQA,EAAA,CACN,IAAK,UACH,OAAOf,EAAI,WAAW,MAAM,4CAA4C,EAAE,SAAA,EAC5E,IAAK,WACH,OAAOA,EAAI,WAAW,MAAM,6CAA6C,EAAE,SAAA,EAC7E,IAAK,WACH,OAAOA,EAAI,WAAW,MAAM,6CAA6C,EAAE,SAAA,EAC7E,QACE,MAAO,SAAA,CAEb,CAEA,MAAc,cAAciG,EAAuBC,EAA2D,CAC5G,MAAMC,EAAWF,EAAO,GAAA,EAClBU,EAAgBV,EAAO,OAAA,EAGvBW,EAAiB,WACrB,OACE5G,EAAI,WAAW,MAAM,6CAA8C,CACjE,OAAQ2G,CAAA,CACT,EAAE,SAAA,EACHA,EAAc,SAAA,CAAS,GACpBA,EAAc,SAAA,CAAS,EAGxBE,EAAQ,OACZ7G,EAAI,WAAW,MAAM,kDAAkD,EAAE,SAAA,CAAS,EAGpF,GAAI,MAAM4G,CAAc,GAAKA,GAAkB,EAAG,CAChD5G,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,4CAA4C,CAAA,EAEnE,MACF,CAEA,KAAK,MAAM,kBAAkB,IAAImG,CAAQ,EACzC7F,EAAE,OAAA,EAEF,GAAI,CACF,MAAM4F,EAAM,gBAAgBD,EAAQW,EAAgBC,GAAS,MAAS,CAExE,OAASlG,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,2CAA2C,CAAA,CAEpE,QAAA,CACE,KAAK,MAAM,kBAAkB,OAAOmG,CAAQ,EAC5C7F,EAAE,OAAA,CACJ,CACF,CAEA,MAAc,aAAa2F,EAAuBC,EAA2D,CAC3G,MAAMY,EAAS,OACb9G,EAAI,WAAW,MAAM,kDAAkD,EAAE,SAAA,CAAS,EAGpF,GAAI,CAAC8G,GAAUA,EAAO,KAAA,IAAW,GAAI,CACnC9G,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,oDAAoD,CAAA,EAE3E,MACF,CAEA,MAAMmG,EAAWF,EAAO,GAAA,EACxB,KAAK,MAAM,kBAAkB,IAAIE,CAAQ,EACzC7F,EAAE,OAAA,EAEF,GAAI,CACF,MAAM4F,EAAM,eAAeD,EAAQa,CAAM,CAE3C,OAASnG,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,0CAA0C,CAAA,CAEnE,QAAA,CACE,KAAK,MAAM,kBAAkB,OAAOmG,CAAQ,EAC5C7F,EAAE,OAAA,CACJ,CACF,CAEQ,aAAa2F,EAAuBC,EAAkD,CAC5F,MAAMI,EAAOL,EAAO,OAAA,EACdhB,EAASgB,EAAO,OAAA,EAEtBjG,EAAI,MAAM,KAAKZ,EAAc,CAC3B,MAAOY,EAAI,WAAW,MAAM,kDAAkD,EAC9E,QAASA,EAAI,WAAW,MAAM,qDAAsD,CAClF,KAAAsG,EACA,OAAArB,CAAA,CACD,EACD,YAAajF,EAAI,WAAW,MAAM,mDAAmD,EACrF,WAAYA,EAAI,WAAW,MAAM,kDAAkD,EACnF,UAAW,GACX,KAAM,eACN,UAAW,SAAY,CACrB,MAAMmG,EAAWF,EAAO,GAAA,EACxB,KAAK,MAAM,kBAAkB,IAAIE,CAAQ,EAEzC,GAAI,CACF,MAAMD,EAAM,eAAeD,CAAM,CAEnC,OAAStF,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EACrDX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,0CAA0C,CAAA,CAEnE,QAAA,CACE,KAAK,MAAM,kBAAkB,OAAOmG,CAAQ,EAC5C7F,EAAE,OAAA,CACJ,CACF,EACA,SAAU,IAAM,CACdN,EAAI,MAAM,MAAA,CACZ,CAAA,CACD,CACH,CACF,CC9gBA,MAAqB+G,WAA+BxF,CAAuC,CAA3F,aAAA,CAAA,MAAA,GAAA,SAAA,EACE,KAAQ,SAAW,CACjB,KAAMY,EAAO,EAAE,EACf,OAAQA,EAAO,EAAE,EACjB,QAASA,EAAO,EAAE,EAClB,UAAWA,EAAO,EAAE,EACpB,UAAWA,EAAO,EAAE,EACpB,IAAKA,EAAO,EAAE,EACd,QAASA,EAAO,EAAE,EAClB,eAAgBA,EAAO,EAAE,EAEzB,gBAAiBA,EAAO,EAAE,EAC1B,kBAAmBA,EAAO,EAAE,EAC5B,YAAaA,EAAO,EAAE,EACtB,SAAUA,EAAO,EAAI,CAAA,CACvB,CAEA,OAAO/B,EAAmD,CACxD,MAAM,OAAOA,CAAK,CACpB,CAEA,KAAKA,EAAmD,CACtD,KAAM,CAAE,WAAA4G,GAAe5G,EAAM,MAE7B,OACE,EAAC,OAAA,CACC,GAAG,wBACH,UAAU,yBACV,SAAWgC,GAAa,KAAK,aAAahC,EAAM,MAAOgC,CAAC,CAAA,EAExD,EAAC,MAAA,CAAI,UAAU,MAAA,EACb,EAAC,OAAI,UAAU,UAAA,EACb,EAAC,MAAA,CAAI,UAAU,YAAA,IACZ,QAAA,KACEpC,EAAI,WAAW,MAAM,oCAAoC,EAC1D,EAAC,OAAA,CAAK,UAAU,eAAA,EAAgB,GAAC,CACnC,EACA,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAY,eACZ,KAAM,KAAK,SAAS,KACpB,SAAUgH,CAAA,CAAA,CAEd,EACA,EAAC,OAAI,UAAU,YAAA,IACZ,QAAA,KACEhH,EAAI,WAAW,MAAM,sCAAsC,EAC5D,EAAC,OAAA,CAAK,UAAU,eAAA,EAAgB,GAAC,CACnC,EACA,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAY,aACZ,KAAM,KAAK,SAAS,OACpB,SAAUgH,CAAA,CAAA,CAEd,CACF,IAEC,MAAA,CAAI,UAAU,YACb,EAAC,MAAA,CAAI,UAAU,gBACZ,QAAA,KACEhH,EAAI,WAAW,MAAM,uCAAuC,CAC/D,EACA,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAY,qCACZ,KAAM,KAAK,SAAS,QACpB,SAAUgH,CAAA,CAAA,EAEZ,EAAC,MAAA,CAAI,UAAU,UAAA,EAAW,6DAE1B,CACF,CACF,EACA,EAAC,MAAA,CAAI,UAAU,YACb,EAAC,MAAA,CAAI,UAAU,YAAA,EACb,EAAC,QAAA,KACEhH,EAAI,WAAW,MAAM,0CAA0C,CAClE,EACA,EAAC,QAAA,CACC,KAAK,SACL,KAAK,aACL,IAAI,IACJ,UAAU,cACV,YAAY,MACZ,KAAM,KAAK,SAAS,UACpB,SAAUgH,CAAA,CAAA,CAEd,EACA,EAAC,MAAA,CAAI,UAAU,YAAA,EACb,EAAC,QAAA,KACEhH,EAAI,WAAW,MAAM,0CAA0C,CAClE,EACA,EAAC,QAAA,CACC,KAAK,SACL,KAAK,aACL,IAAI,IACJ,UAAU,cACV,YAAY,4BACZ,KAAM,KAAK,SAAS,UACpB,SAAUgH,CAAA,CAAA,CAEd,EACA,EAAC,MAAA,CAAI,UAAU,YAAA,EACb,EAAC,QAAA,KACEhH,EAAI,WAAW,MAAM,mCAAmC,CAC3D,EACA,EAAC,QAAA,CACC,KAAK,SACL,KAAK,aACL,IAAI,IACJ,UAAU,cACV,YAAY,MACZ,KAAM,KAAK,SAAS,IACpB,SAAUgH,CAAA,CAAA,EAEZ,EAAC,MAAA,CAAI,UAAU,UAAA,EACZhH,EAAI,WAAW,MAAM,wCAAwC,CAChE,CACF,CACF,EAEA,EAAC,MAAA,CAAI,UAAU,YAAA,EACb,EAAC,QAAA,KACEA,EAAI,WAAW,MAAM,uCAAuC,EAC7D,EAAC,OAAA,CAAK,UAAU,eAAA,EAAgB,GAAC,CACnC,EACA,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAY,0CACZ,KAAM,KAAK,SAAS,QACpB,SAAUgH,CAAA,CAAA,IAEX,MAAA,CAAI,UAAU,YACZhH,EAAI,WAAW,MAAM,4CAA4C,CACpE,CACF,EAEA,EAAC,MAAA,CAAI,UAAU,cACb,EAAC,QAAA,KACEA,EAAI,WAAW,MAAM,iDAAiD,CACzE,EACA,EAAC,QAAA,CACC,KAAK,MACL,UAAU,cACV,YAAY,kCACZ,KAAM,KAAK,SAAS,eACpB,SAAUgH,CAAA,CAAA,IAEX,MAAA,CAAI,UAAU,YACZhH,EAAI,WAAW,MAAM,kDAAkD,CAC1E,CACF,EAGA,EAAC,MAAA,CAAI,UAAU,cAAA,EACb,EAAC,UAAIA,EAAI,WAAW,MAAM,qCAAqC,CAAE,IAChE,IAAA,CAAE,UAAU,YAAYA,EAAI,WAAW,MAAM,0CAA0C,CAAE,EAE1F,EAAC,MAAA,CAAI,UAAU,YACb,EAAC,MAAA,CAAI,UAAU,YAAA,EACb,EAAC,QAAA,KAAOA,EAAI,WAAW,MAAM,yCAAyC,CAAE,EACxE,EAAC,QAAA,CACC,KAAK,MACL,UAAU,cACV,YAAY,wCACZ,KAAM,KAAK,SAAS,gBACpB,SAAUgH,CAAA,CAAA,IAEX,MAAA,CAAI,UAAU,YAAYhH,EAAI,WAAW,MAAM,8CAA8C,CAAE,CAClG,EACA,EAAC,MAAA,CAAI,UAAU,cACb,EAAC,QAAA,KAAOA,EAAI,WAAW,MAAM,2CAA2C,CAAE,EAC1E,EAAC,QAAA,CACC,KAAK,OACL,UAAU,cACV,YAAY,iBACZ,KAAM,KAAK,SAAS,kBACpB,SAAUgH,CAAA,CAAA,EAEZ,EAAC,MAAA,CAAI,UAAU,UAAA,EAAYhH,EAAI,WAAW,MAAM,gDAAgD,CAAE,CACpG,CACF,CACF,EAGA,EAAC,MAAA,CAAI,UAAU,YAAA,EACb,EAAC,QAAA,KACEA,EAAI,WAAW,MAAM,4CAA4C,CACpE,EACA,EAAC,WAAA,CACC,UAAU,cACV,KAAM,EACN,YAAY,qCACZ,KAAM,KAAK,SAAS,YACpB,SAAUgH,CAAA,CAAA,CAEd,EAEA,EAAC,MAAA,CAAI,UAAU,cACb,EAACzD,EAAA,CAAO,MAAO,KAAK,SAAS,WAAY,SAAU,KAAK,SAAS,SAAU,SAAUyD,GAClFhH,EAAI,WAAW,MAAM,yCAAyC,CACjE,CACF,CAEF,CAAA,CAGN,CAGQ,cAAwB,CAC9B,MAAMsC,EAAY,IAAIb,EAEtB,GAAI,CAEF,MAAMc,EAAYvC,EAAI,WAAW,MAAM,oCAAoC,EAAE,SAAA,EACvEwC,EAAcxC,EAAI,WAAW,MAAM,sCAAsC,EAAE,SAAA,EAC3EiH,EAAejH,EAAI,WAAW,MAAM,uCAAuC,EAAE,SAAA,EAQnF,GANAsC,EACG,SAAS,KAAK,SAAS,OAAQ,OAAQC,CAAS,EAChD,SAAS,KAAK,SAAS,SAAU,SAAUC,CAAW,EACtD,SAAS,KAAK,SAAS,QAAA,EAAW,UAAWyE,CAAY,EAGxD,KAAK,SAAS,UAAA,GAAe,KAAK,SAAS,YAAY,OAAQ,CACjE,MAAMxE,EAAiBzC,EAAI,WAAW,MAAM,0CAA0C,EAAE,SAAA,EACxFsC,EAAU,YAAY,KAAK,SAAS,YAAa,EAAG,OAAW,YAAaG,CAAc,CAC5F,CAEA,GAAI,KAAK,SAAS,UAAA,GAAe,KAAK,SAAS,YAAY,OAAQ,CACjE,MAAMC,EAAiB1C,EAAI,WAAW,MAAM,0CAA0C,EAAE,SAAA,EACxFsC,EAAU,YAAY,KAAK,SAAS,YAAa,EAAG,OAAW,YAAaI,CAAc,CAC5F,CAEA,GAAI,KAAK,SAAS,IAAA,GAAS,KAAK,SAAS,MAAM,OAAQ,CACrD,MAAMC,EAAW3C,EAAI,WAAW,MAAM,mCAAmC,EAAE,SAAA,EAC3EsC,EAAU,YAAY,KAAK,SAAS,MAAO,EAAG,OAAW,MAAOK,CAAQ,CAC1E,CAGA,GAAI,KAAK,SAAS,UAAA,GAAe,KAAK,SAAS,YAAa,CAC1D,MAAMC,EAAS,WAAW,KAAK,SAAS,WAAW,EAC7CsE,EAAS,WAAW,KAAK,SAAS,WAAW,EACnD,GAAI,CAAC,MAAMtE,CAAM,GAAK,CAAC,MAAMsE,CAAM,GAAKA,EAAStE,EAAQ,CACvD,MAAMC,EAAe7C,EAAI,WAAW,MAAM,qCAAqC,EAAE,SAAA,EACjFsC,EAAU,OAAO,GAAO,YAAaO,CAAY,CACnD,CACF,CAGA,GAAI,KAAK,SAAS,gBAAA,GAAqB,KAAK,SAAS,kBAAkB,OAAQ,CAC7E,MAAMC,EAAuB9C,EAAI,WAAW,MAAM,yCAAyC,EAAE,SAAA,EAC7FsC,EAAU,IAAI,KAAK,SAAS,gBAAA,EAAmB,kBAAmBQ,CAAoB,CACxF,CAEA,GAAI,KAAK,SAAS,eAAA,GAAoB,KAAK,SAAS,iBAAiB,OAAQ,CAC3E,MAAMqE,EAAcnH,EAAI,WAAW,MAAM,iDAAiD,EAAE,SAAA,EAC5FsC,EAAU,IAAI,KAAK,SAAS,eAAA,EAAkB,iBAAkB6E,CAAW,CAC7E,CAEA,MAAMpE,EAAST,EAAU,UAAA,EAEzB,MAAI,CAACS,EAAO,SAAWA,EAAO,mBAC5B/C,EAAI,OAAO,KAAK,CAAE,KAAM,QAAS,YAAa,EAAA,EAAQ+C,EAAO,iBAAiB,EAGzEA,EAAO,OAChB,OAASpC,EAAO,CACd,eAAQ,MAAM,yBAA0BA,CAAK,EAC7CX,EAAI,OAAO,KAAK,CAAE,KAAM,QAAS,YAAa,EAAA,EAAQ,mBAAmB,EAClE,EACT,CACF,CAEO,WAAkB,CACvB,KAAK,SAAS,KAAK,EAAE,EACrB,KAAK,SAAS,OAAO,EAAE,EACvB,KAAK,SAAS,QAAQ,EAAE,EACxB,KAAK,SAAS,UAAU,EAAE,EAC1B,KAAK,SAAS,UAAU,EAAE,EAC1B,KAAK,SAAS,IAAI,EAAE,EACpB,KAAK,SAAS,QAAQ,EAAE,EACxB,KAAK,SAAS,eAAe,EAAE,EAE/B,KAAK,SAAS,gBAAgB,EAAE,EAChC,KAAK,SAAS,kBAAkB,EAAE,EAClC,KAAK,SAAS,YAAY,EAAE,EAC5B,KAAK,SAAS,SAAS,EAAI,CAC7B,CAEA,MAAc,aAAakG,EAAoC,EAAyB,CAGtF,GAFA,EAAE,eAAA,EAEE,CAAC,KAAK,eACR,OAGF,MAAMxF,EAAoC,CACxC,KAAM,KAAK,SAAS,KAAA,EACpB,OAAQ,KAAK,SAAS,OAAA,EACtB,QAAS,KAAK,SAAS,QAAA,EACvB,UAAW,KAAK,SAAS,UAAA,EACzB,UAAW,KAAK,SAAS,UAAA,EACzB,IAAK,KAAK,SAAS,IAAA,EACnB,QAAS,KAAK,SAAS,QAAA,EACvB,eAAgB,KAAK,SAAS,eAAA,EAE9B,gBAAiB,KAAK,SAAS,gBAAA,EAC/B,kBAAmB,KAAK,SAAS,kBAAA,EACjC,YAAa,KAAK,SAAS,YAAA,EAC3B,SAAU,KAAK,SAAS,SAAA,CAAS,EAGnC,GAAI,CACF,MAAMwF,EAAM,SAASxF,CAAQ,EAE7B,KAAK,UAAA,CACP,OAASC,EAAO,CAEd,QAAQ,MAAM,yBAA0BA,CAAK,CAC/C,CACF,CACF,CCrVA,MAAqByG,WAAyC7F,CAAiD,CAC7G,KAAKnB,EAA+E,CAClF,KAAM,CAAE,UAAAmE,EAAW,mBAAAC,EAAoB,cAAAC,EAAe,uBAAAC,EAAwB,iBAAAC,CAAA,EAAqBvE,EAAM,MAEzG,OACE,EAAC,MAAA,CAAI,UAAU,kCAAA,IACZ,MAAA,CAAI,UAAU,gBAAA,EACb,EAAC,KAAA,KAAIJ,EAAI,WAAW,MAAM,qCAAqC,CAAE,CACnE,EAEA,EAAC,MAAA,CAAI,UAAU,yCAAA,EAEb,EAAC,OAAI,UAAU,uCAAA,EACb,EAAC,MAAA,CAAI,UAAU,6CAAA,EACb,EAAC,KAAA,KAAG,kBAAgB,EACpB,EAACD,EAAA,CACC,UAAU,oEACV,KAAK,cACL,KAAK,SACL,KAAK,wBACL,QAASyE,EACT,SAAUA,CAAA,EAETxE,EAAI,WAAW,MAAM,0CAA0C,CAAA,CAEpE,EAEA,EAAC+G,GAAA,CACC,SAAUtC,EACV,SAAU,IAAM,CAAC,EACjB,WAAYD,CAAA,CAAA,CAEhB,EAGA,EAAC,OAAI,UAAU,uCAAA,IACZ,KAAA,KAAG,oBAAkB,EACtB,EAAC,MAAA,CAAI,UAAU,mBACZD,EAAU,SAAW,EACpB,EAAC,OAAI,UAAU,UAAA,EACZvE,EAAI,WAAW,MAAM,qCAAqC,CAC7D,EAEA,EAAC,MAAA,CAAI,UAAU,cAAA,EACZuE,EACE,OAAQ3D,GAAaA,GAAa,IAA8B,EAChE,IAAKA,GACJ,EAACoC,EAAA,CACC,IAAK,OAAOpC,EAAS,IAAO,WAAaA,EAAS,GAAA,EAAOA,EAAS,GAClE,SAAAA,EACA,KAAK,UACL,eAAgB,IAAM8D,EAAuB9D,CAAQ,EACrD,SAAU,IAAM+D,EAAiB/D,CAAQ,CAAA,CAAA,CAE5C,CACL,CAEJ,CACF,CACF,CACF,CAEJ,CACF,CC0BO,MAAMyG,EAA4B,CAEvC,SAAU,CACR,OAAQ,CAAC,OAAQ,SAAU,YAAa,MAAO,UAAU,EACzD,WAAY,CAAA,EACZ,QAAS,CAAC,SAAS,CAAA,EAIrB,SAAU,CACR,OAAQ,CACN,UAAW,YAAa,gBACxB,0BAA2B,4BAC3B,yBAA0B,2BAC1B,0BAA2B,2BAAA,EAE7B,WAAY,CAAA,EACZ,QAAS,CACP,iBAAkB,UAAW,YAC7B,cAAe,eAAA,CACjB,CAKJ,EAKO,SAASC,EAAkBC,EAA+C,CAC/E,MAAO,CACL,GAAGF,EAA0B,SAAS,OACtC,GAAGA,EAA0B,SAASE,EAAa,aAAgE,CAAA,CAEvH,CAKO,SAASC,EAAkBD,EAA+C,CAC/E,MAAO,CACL,GAAGF,EAA0B,SAAS,OACtC,GAAGA,EAA0B,SAASE,EAAa,aAAgE,CAAA,CAEvH,CAeO,SAASE,GAAuBC,EAAyBH,EAG9D,CAEA,MAAMI,EADiBL,EAAkBC,CAAY,EAChB,OAAOK,GAC1C,EAAEA,KAASF,IAASA,EAAKE,CAAuB,IAAM,MAAQF,EAAKE,CAAuB,IAAM,MAAA,EAGlG,MAAO,CACL,MAAOD,EAAc,SAAW,EAChC,cAAAA,CAAA,CAEJ,CA6CO,MAAME,EAAsB,CAEjC,KAAM,OACN,OAAQ,OACR,QAAS,OACT,UAAW,OACX,UAAW,OACX,IAAK,MACL,SAAU,OACV,cAAe,OAGf,wBAAyB,UACzB,0BAA2B,WAC3B,uBAAwB,UACxB,yBAA0B,WAC1B,wBAAyB,UACzB,0BAA2B,WAG3B,QAAS,OACT,eAAgB,WAChB,QAAS,QACT,UAAW,SACX,YAAa,OACb,cAAe,OAGf,GAAI,KACJ,UAAW,OACX,UAAW,MACb,EAKaC,EAAyB,CAEpC,KAAM,CAAE,SAAU,GAAM,UAAW,EAAG,UAAW,GAAA,EACjD,OAAQ,CAAE,SAAU,GAAM,UAAW,EAAG,UAAW,EAAA,EACnD,QAAS,CAAE,SAAU,GAAO,UAAW,EAAA,EACvC,UAAW,CAAE,SAAU,GAAM,IAAK,CAAA,EAClC,UAAW,CAAE,SAAU,GAAO,IAAK,EAAG,IAAK,SAAA,EAC3C,IAAK,CAAE,SAAU,GAAM,IAAK,EAAG,IAAK,GAAA,EACpC,SAAU,CAAE,SAAU,EAAA,EACtB,cAAe,CAAE,SAAU,GAAO,IAAK,CAAA,EAGvC,wBAAyB,CAAE,SAAU,GAAO,UAAW,GAAA,EACvD,0BAA2B,CAAE,SAAU,GAAO,UAAW,GAAA,EACzD,uBAAwB,CAAE,SAAU,GAAO,UAAW,GAAA,EACtD,yBAA0B,CAAE,SAAU,GAAO,UAAW,GAAA,EACxD,wBAAyB,CAAE,SAAU,GAAO,UAAW,GAAA,EACvD,0BAA2B,CAAE,SAAU,GAAO,UAAW,GAAA,EAGzD,QAAS,CAAE,SAAU,GAAM,UAAW,GAAI,UAAW,GAAA,EACrD,eAAgB,CAAE,SAAU,GAAO,UAAW,GAAA,EAC9C,QAAS,CAAE,SAAU,GAAO,UAAW,GAAA,EACvC,UAAW,CAAE,SAAU,GAAO,UAAW,GAAA,EACzC,YAAa,CAAE,SAAU,GAAO,UAAW,GAAA,EAC3C,cAAe,CAAE,SAAU,EAAA,EAG3B,GAAI,CAAE,SAAU,GAAO,IAAK,CAAA,EAC5B,UAAW,CAAE,SAAU,EAAA,EACvB,UAAW,CAAE,SAAU,EAAA,CACzB,EC5PO,MAAMC,CAAqB,CAIhC,OAAO,qBACLL,EACAH,EACuB,CACvB,MAAMS,EAAmC,CAAA,EACnCC,EAAqC,CAAA,EAGrCC,EAAqBT,GAAuBC,EAAMH,CAAY,EACpE,OAAKW,EAAmB,OACtBA,EAAmB,cAAc,QAASN,GAAU,CAClDI,EAAOJ,CAAK,EAAI,CACd,GACEC,EAAoBD,CAAyC,CAC/D,QAAA,CAEJ,CAAC,EAIH,OAAO,QAAQF,CAAI,EAAE,QAAQ,CAAC,CAAChG,EAAWR,CAAK,IAAM,CACnD,MAAMiH,EAAcJ,EAAqB,cACvCrG,EACAR,EACAqG,CAAA,EAEEY,EAAY,OAAS,IACvBH,EAAOtG,CAAS,EAAIyG,GAGtB,MAAMC,EAAgBL,EAAqB,iBACzCrG,EACAR,EACAqG,CAAA,EAEEa,EAAc,OAAS,IACzBH,EAASvG,CAAS,EAAI0G,EAE1B,CAAC,EAEM,CACL,MAAO,OAAO,KAAKJ,CAAM,EAAE,SAAW,EACtC,OAAAA,EACA,SAAAC,CAAA,CAEJ,CAKA,OAAO,cACLvG,EACAR,EACAmH,EACU,CACV,MAAML,EAAmB,CAAA,EACnBM,EACJR,EAAuBpG,CAAgD,EAEzE,GAAI,CAAC4G,EAAO,OAAON,EAEnB,MAAMO,EACJV,EAAoBnG,CAA6C,GACjEA,EAGF,GACE4G,EAAM,WACLpH,GAAU,MAA+BA,IAAU,IAEpD,OAAA8G,EAAO,KAAK,GAAGO,CAAgB,OAAO,EAC/BP,EAIT,GAAI9G,GAAU,MAA+BA,IAAU,GACrD,OAAO8G,EAIT,OAAQtG,EAAA,CACN,IAAK,SACC,OAAOR,GAAU,UAAY,CAAC,mBAAmB,KAAKA,CAAK,GAC7D8G,EAAO,KAAK,yBAAyB,EAEvC,MAEF,IAAK,iBAED,OAAO9G,GAAU,UACjBA,GACA,CAAC6G,EAAqB,WAAW7G,CAAK,GAEtC8G,EAAO,KAAK,aAAa,EAE3B,KAAA,CAGJ,OAAOA,CACT,CAKA,OAAO,iBACLtG,EACAR,EACAqG,EACU,CACV,MAAMU,EAAqB,CAAA,EAG3B,OAAIV,IAAiB,YACf7F,IAAc,WAAa,OAAOR,GAAU,UAAYA,GACtDA,EAAM,OAAS,KACjB+G,EAAS,KAAK,aAAa,EAI3BvG,IAAc,OAAS,OAAOR,GAAU,UAAYA,EAAQ,GAC9D+G,EAAS,KAAK,cAAc,GAK5BV,IAAiB,cACf7F,IAAc,aAAe,CAACR,GAChC+G,EAAS,KAAK,iBAAiB,EAI5BA,CACT,CAKA,OAAO,uBACLP,EACAH,EACAiB,EAAyB,CAAA,EACJ,CACrB,MAAMC,EAAiC,CAAA,EACjCC,EAAiBpB,EAAkBC,CAAY,EAC/CoB,EAAiBnB,EAAkBD,CAAY,EAGrD,OAAAmB,EAAe,QAASd,GAAU,CAC5BA,KAASF,IACXe,EAAUb,CAAK,EAAIG,EAAqB,iBACtCH,EACAF,EAAKE,CAAuB,CAAA,EAGlC,CAAC,EAGGY,EAAQ,kBAAoB,IAC9BG,EAAe,QAASf,GAAU,CAE9BA,KAASF,GACTA,EAAKE,CAAuB,IAAM,MAClCF,EAAKE,CAAuB,IAAM,SAElCa,EAAUb,CAAK,EAAIG,EAAqB,iBACtCH,EACAF,EAAKE,CAAuB,CAAA,EAGlC,CAAC,EAICY,EAAQ,gBACV,OAAOC,EAAU,GACjB,OAAOA,EAAU,UACjB,OAAOA,EAAU,WAGZA,CACT,CAKA,OAAO,iBAAiB/G,EAAmBR,EAAiB,CAC1D,GAAIA,GAAU,KAA6B,OAAO,KAElD,OAAQQ,EAAA,CACN,IAAK,YACL,IAAK,YACL,IAAK,MACH,OAAO,OAAOR,GAAU,SAAWA,EAAM,QAAQ,CAAC,EAAIA,EAExD,IAAK,WACH,OAAOA,EAAQ,KAAO,KAExB,IAAK,YACL,IAAK,YACH,OAAOA,aAAiB,KAAOA,EAAM,eAAA,EAAmBA,EAE1D,QACE,OAAOA,CAAA,CAEb,CAKA,OAAO,eAAeqG,EAAiD,CACrE,MAAMpH,EAA8B,CAAA,EAC9BuI,EAAiBpB,EAAkBC,CAAY,EAC/CoB,EAAiBnB,EAAkBD,CAAY,EAErD,OAAC,GAAGmB,EAAgB,GAAGC,CAAc,EAAE,QAASf,GAAU,CACxDzH,EAAOyH,CAAK,EAAI,CACd,MACEC,EAAoBD,CAAyC,GAC7DA,EACF,SAAUc,EAAe,SAASd,CAAK,EACvC,WACEE,EAAuBF,CAA4C,EACrE,GAAGG,EAAqB,oBAAoBH,CAAK,CAAA,CAErD,CAAC,EAEMzH,CACT,CAKA,OAAO,oBAAoBuB,EAAwC,CACjE,OAAQA,EAAA,CACN,IAAK,OACH,MAAO,CACL,KAAM,OACN,YAAa,WACb,UAAW,GAAA,EAGf,IAAK,SACH,MAAO,CACL,KAAM,OACN,YAAa,eACb,UAAW,GACX,UAAW,WAAA,EAGf,IAAK,UACH,MAAO,CACL,KAAM,OACN,YAAa,kBACb,UAAW,GACX,UAAW,WAAA,EAGf,IAAK,YACL,IAAK,YACL,IAAK,MACH,MAAO,CACL,KAAM,SACN,IAAK,EACL,KAAM,IAAA,EAGV,IAAK,UACH,MAAO,CACL,KAAM,OACN,YAAa,OACb,UAAW,GAAA,EAGf,IAAK,iBACH,MAAO,CACL,KAAM,MACN,YAAa,6BACb,UAAW,GAAA,EAGf,IAAK,cACH,MAAO,CACL,KAAM,WACN,YAAa,SACb,UAAW,GAAA,EAGf,IAAK,WACH,MAAO,CACL,KAAM,UACN,QAAS,EAAA,EAGb,QACE,MAAO,CACL,KAAM,MAAA,CACR,CAEN,CAKA,OAAO,qBACLgG,EACAH,EACmB,CACnB,MAAMqB,EAAiC,CAAA,EAMvC,MALkB,CAChB,GAAGtB,EAAkBC,CAAY,EACjC,GAAGC,EAAkBD,CAAY,CAAA,EAGzB,QAASK,GAAU,CACvBA,KAASF,IACXkB,EAAUhB,CAAK,EAAIG,EAAqB,mBACtCH,EACAF,EAAKE,CAAK,CAAA,EAGhB,CAAC,EAEMgB,CACT,CAKA,OAAO,mBAAmBlH,EAAmBR,EAAiB,CAC5D,GAAIA,GAAU,MAA+BA,IAAU,GAAI,OAAO,KAElE,OAAQQ,EAAA,CACN,IAAK,OACL,IAAK,UACL,IAAK,cACH,OAAO,OAAOR,GAAU,SAAWA,EAAM,OAASA,EAEpD,IAAK,SACL,IAAK,UACH,OAAO,OAAOA,GAAU,SAAWA,EAAM,KAAA,EAAO,cAAgBA,EAElE,IAAK,YACL,IAAK,YACL,IAAK,MACH,MAAM2H,EAAM,WAAW3H,CAAK,EAC5B,OAAO,MAAM2H,CAAG,EAAI,KAAO,KAAK,IAAI,EAAGA,CAAG,EAE5C,IAAK,WACH,MAAO,EAAQ3H,EAEjB,QACE,OAAOA,CAAA,CAEb,CAKA,OAAO,YACL4H,EACAC,EACwC,CACxC,MAAMC,EAAkD,CAAA,EAGxD,OAFgB,IAAI,IAAI,CAAC,GAAG,OAAO,KAAKF,CAAO,EAAG,GAAG,OAAO,KAAKC,CAAO,CAAC,CAAC,EAElE,QAAS9H,GAAQ,CACvB,MAAMgI,EAAWH,EAAQ7H,CAAqB,EACxCiI,EAAWH,EAAQ9H,CAAqB,EAE1CgI,IAAaC,IACfF,EAAQ/H,CAAG,EAAI,CAAE,IAAKgI,EAAU,IAAKC,CAAA,EAEzC,CAAC,EAEMF,CACT,CAKA,OAAO,WAAWG,EAAyB,CACzC,GAAI,CAEF,MAAO,EADK,IAAI,IAAIA,CAAM,CAE5B,MAAQ,CACN,MAAO,EACT,CACF,CACF,CAgBO,SAASC,GACd1B,EACAH,EACuB,CACvB,OAAOQ,EAAqB,qBAAqBL,EAAMH,CAAY,CACrE,CA4BO,SAAS8B,GACd3I,EACA6G,EACmB,CACnB,OAAOQ,EAAqB,qBAAqBrH,EAAU6G,CAAY,CACzE,CCxdO,MAAM+B,GACX,KAAgC,CAC9B,MAAM,OAAO5I,EAAe,CAC1B,GAAI,CAEF,MAAM6G,EAA6B,aAG7BgC,EAAgBF,GAAiB3I,EAAU6G,CAAY,EAGvDiC,EAAaJ,GAAiBG,EAAehC,CAAY,EAC/D,GAAI,CAACiC,EAAW,MAAO,CACrB,MAAMC,EAAgB,OAAO,OAAOD,EAAW,MAAM,EAAE,KAAA,EACvD,MAAM,IAAI,MAAMC,EAAc,KAAK,IAAI,CAAC,CAC1C,CAGA,KAAM,CAAE,gBAAAC,CAAA,EAAoB,MAAAtI,EAAA,SAAA,CAAA,KAAA,CAAA,gBAAAsI,CAAA,EAAA,MAAM,QAAA,QAAA,EAAA,KAAA,IAAAC,CAAA,EAElC,MAAA,CAAA,gBAAAD,CAAA,CAAA,EAAA,MAAA,EAEM3G,EAAS,MAAM2G,EAAgB,OACnC,aACAH,CAAA,EAGFvJ,OAAAA,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,mCAAmC,EAAE,SAAA,CAAS,EAG9D+C,CACT,OAASpC,EAAO,CACdX,MAAAA,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BW,aAAiB,MACbA,EAAM,QACNX,EAAI,WAAW,MAAM,iCAAiC,EAAE,SAAA,CAAS,EAEjEW,CACR,CACF,EAEA,MAAM,aAAaC,EAAe,CAChC,GAAI,CAEF,KAAM,CAAE,gBAAA8I,CAAA,EAAoB,MAAAtI,EAAA,SAAA,CAAA,KAAA,CAAA,gBAAAsI,CAAA,EAAA,MAAM,QAAA,QAAA,EAAA,KAAA,IAAAC,CAAA,EAElC,MAAA,CAAA,gBAAAD,CAAA,CAAA,EAAA,MAAA,EAEM3G,EAAS,MAAM2G,EAAgB,aAAa9I,CAAQ,EACpDgJ,EAAY7G,EAAO,SAAA,EAEzB/C,OAAAA,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MACb,yBAAyB4J,EAAY,SAAW,SAAS,UAAA,CAC3D,EAGK7G,CACT,OAASpC,EAAO,CACdX,MAAAA,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BW,aAAiB,MACbA,EAAM,QACN,kCAAA,EAEAA,CACR,CACF,EAEA,MAAM,OAAOC,EAAe,CAC1B,GAAI,CAEF,KAAM,CAAE,gBAAA8I,CAAA,EAAoB,MAAAtI,EAAA,SAAA,CAAA,KAAA,CAAA,gBAAAsI,CAAA,EAAA,MAAM,QAAA,QAAA,EAAA,KAAA,IAAAC,CAAA,EAElC,MAAA,CAAA,gBAAAD,CAAA,CAAA,EAAA,MAAA,EAEA,MAAMA,EAAgB,OAAO9I,CAAQ,EAErCZ,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WACD,MAAM,sCAAsC,EAC5C,SAAA,CAAS,CAEhB,OAASW,EAAO,CACdX,MAAAA,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BW,aAAiB,MAAQA,EAAM,QAAU,2BAAA,EAErCA,CACR,CACF,EAEA,MAAM,MAAO,CACX,GAAI,CAEF,KAAM,CAAE,gBAAA+I,CAAA,EAAoB,MAAAtI,EAAA,SAAA,CAAA,KAAA,CAAA,gBAAAsI,CAAA,EAAA,MAAM,QAAA,QAAA,EAAA,KAAA,IAAAC,CAAA,EAElC,MAAA,CAAA,gBAAAD,CAAA,CAAA,EAAA,MAAA,EACA,OAAO,MAAMA,EAAgB,KAAK,YAAY,CAChD,OAAS/I,EAAO,CACdX,MAAAA,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,kCAAkC,EAAE,SAAA,CAAS,EAE9DW,CACR,CACF,CACF,GA4HWkJ,GACX,KAAmC,CACjC,MAAM,aAAahF,EAAc9D,EAA+B,CAC9D,GAAI,CAEF,KAAM,CAAE,kBAAA+I,CAAA,EAAsB,MAAA1I,EAAA,SAAA,CAAA,KAAA,CAAA,kBAAA0I,CAAA,EAAA,MAAM,QAAA,QAAA,EAAA,KAAA,IAAAC,CAAA,EAEpC,MAAA,CAAA,kBAAAD,CAAA,CAAA,EAAA,MAAA,EAEA,MAAMA,EAAkB,OAAOjF,EAAS,CAAE,OAAA9D,EAAQ,CAIpD,OAASJ,EAAO,CACdX,MAAAA,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BW,aAAiB,MACbA,EAAM,QACN,sCAAsCI,CAAM,EAAA,EAE5CJ,CACR,CACF,EAEA,MAAM,MAAO,CACX,GAAI,CAEF,KAAM,CAAE,kBAAAmJ,CAAA,EAAsB,MAAA1I,EAAA,SAAA,CAAA,KAAA,CAAA,kBAAA0I,CAAA,EAAA,MAAM,QAAA,QAAA,EAAA,KAAA,IAAAC,CAAA,EAEpC,MAAA,CAAA,kBAAAD,CAAA,CAAA,EAAA,MAAA,EACA,OAAO,MAAMA,EAAkB,KAAK,CAAE,QAAS,gBAAiB,CAClE,OAASnJ,EAAO,CACdX,MAAAA,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,iCAAiC,EAAE,SAAA,CAAS,EAE7DW,CACR,CACF,CACF,GCpDK,IAAKqJ,GAAAA,IACVA,EAAA,cAAgB,gBAChBA,EAAA,kBAAoB,oBACpBA,EAAA,iBAAmB,mBACnBA,EAAA,UAAY,YACZA,EAAA,aAAe,eACfA,EAAA,QAAU,UANAA,IAAAA,GAAA,CAAA,CAAA,EAYL,MAAMC,UAAqB,KAAM,CAKtC,YACEvK,EACAuD,EAAyB,eACzBiH,EACAC,EACA,CACA,MAAMzK,CAAO,EACb,KAAK,KAAO,eACZ,KAAK,KAAOuD,EACZ,KAAK,KAAOiH,EACZ,KAAK,QAAUC,CACjB,CACF,CC3PA,MAAqBC,EAAwD,CAA7E,aAAA,CACE,KAAiB,UAAY,sBAC7B,KAAiB,kBAAoB,sBAAA,CAKrC,MAAM,KAAK5B,EAAwB,GAAkC,CACnE,GAAI,CACF,MAAM6B,EAAmB,CACvB,QAAS7B,EAAQ,SAAW,gBAC5B,KAAMA,EAAQ,MAAQ,cACtB,GAAGA,CAAA,EAIL,OAAIA,EAAQ,OACV6B,EAAY,KAAO7B,EAAQ,MAIzBA,EAAQ,SACV6B,EAAY,OAAS7B,EAAQ,QAGf,MAAMxI,EAAI,MAAM,KAAK,KAAK,UAAWqK,CAAW,CAElE,OAAS1J,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,SACJ6C,EACAgF,EAAwB,GACW,CACnC,GAAI,CACF,MAAM6B,EAAmB,CACvB,QAAS7B,EAAQ,SAAW,eAAA,EAQ9B,OALe,MAAMxI,EAAI,MAAM,KAC7B,KAAK,UACL,OAAOwD,CAAE,EACT6G,CAAA,CAGJ,OAAS1J,EAAO,CACd,GAAI,KAAK,gBAAgBA,CAAK,EAC5B,OAAO,KAET,MAAM,KAAK,YAAYA,EAAO,iCAAiC6C,CAAE,EAAE,CACrE,CACF,CAKA,MAAM,OAAO8G,EAA6D,CACxE,GAAI,CAEF,YAAK,yBAAyBA,CAAU,EAMnB,MAJLtK,EAAI,MAAM,aACxB,KAAK,SAAA,EAG4B,KAAKsK,CAAU,CAEpD,OAAS3J,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,OACJ4J,EACAD,EAC4B,CAC5B,GAAI,CACF,GAAI,CAAC,KAAK,UAAUC,CAAK,EACvB,MAAM,IAAIN,EACR,0DACAD,EAAiB,iBAAA,EAKrB,OADqB,MAAMO,EAAM,KAAKD,CAAU,CAElD,OAAS3J,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,OAAO4J,EAAyC,CACpD,GAAI,CACF,GAAI,CAAC,KAAK,UAAUA,CAAK,EACvB,MAAM,IAAIN,EACR,0DACAD,EAAiB,iBAAA,EAIrB,MAAMO,EAAM,OAAA,CACd,OAAS5J,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,cAAc+G,EAKW,CAC7B,GAAI,CAEF,MAAM,KAAK,0BAA0BA,CAAI,EAEzC,MAAM4C,EAAa,CACjB,WAAY5C,EAAK,WACjB,OAAQA,EAAK,OACb,eAAgBA,EAAK,eACrB,QAASA,EAAK,SAAW,GACzB,OAAQ,SAAA,EAGV,OAAO,MAAM,KAAK,OAAO4C,CAAU,CACrC,OAAS3J,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,eACJ6J,EACAhC,EAAwB,GACM,CAC9B,MAAMiC,EAAeD,GAAUxK,EAAI,QAAQ,MAAM,GAAA,EAEjD,GAAI,CAACyK,EACH,MAAM,IAAIR,EACR,yBACAD,EAAiB,iBAAA,EAIrB,MAAMU,EAAe,CACnB,GAAGlC,EACH,OAAQ,CACN,KAAMiC,EACN,GAAGjC,EAAQ,MAAA,EAEb,QAASA,EAAQ,SAAW,WAC5B,KAAMA,EAAQ,MAAQ,aAAA,EAGxB,OAAO,MAAM,KAAK,KAAKkC,CAAY,CACrC,CAKA,MAAM,mBACJlC,EAAwB,GACM,CAC9B,GAAI,CAACxI,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIiK,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAMU,EAAe,CACnB,GAAGlC,EACH,OAAQ,CACN,OAAQ,UACR,GAAGA,EAAQ,MAAA,EAEb,QAASA,EAAQ,SAAW,gBAC5B,KAAMA,EAAQ,MAAQ,YAAA,EAGxB,OAAO,MAAM,KAAK,KAAKkC,CAAY,CACrC,CAKA,MAAM,QACJ7F,EACAnF,EAC4B,CAC5B,GAAI,CAACM,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIiK,EACR,6BACAD,EAAiB,iBAAA,EAIrB,GAAI,CAACnF,EAAQ,YACX,MAAM,IAAIoF,EACR,wCACAD,EAAiB,gBAAA,EAIrB,MAAMM,EAAkB,CACtB,OAAQ,UAAA,EAGV,OAAI5K,IACF4K,EAAW,UAAY5K,GAGlB,MAAM,KAAK,OAAOmF,EAASyF,CAAU,CAC9C,CAKA,MAAM,OACJzF,EACAiC,EAC4B,CAC5B,GAAI,CAAC9G,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIiK,EACR,6BACAD,EAAiB,iBAAA,EAIrB,GAAI,CAACnF,EAAQ,YACX,MAAM,IAAIoF,EACR,wCACAD,EAAiB,gBAAA,EAIrB,MAAMM,EAAkB,CACtB,OAAQ,UAAA,EAGV,OAAIxD,IACFwD,EAAW,UAAYxD,GAGlB,MAAM,KAAK,OAAOjC,EAASyF,CAAU,CAC9C,CAKA,MAAM,OAAOzF,EAA0C,CACrD,GAAI,CAACA,EAAQ,gBACX,MAAM,IAAIoF,EACR,mCACAD,EAAiB,gBAAA,EAIrB,MAAMW,EAAc3K,EAAI,QAAQ,KAChC,GACE,CAAC2K,GACA,OAAO9F,EAAQ,OAAA,CAAQ,IAAM8F,EAAY,GAAA,GAAQ,CAACA,EAAY,UAE/D,MAAM,IAAIV,EACR,wCACAD,EAAiB,iBAAA,EAIrB,OAAO,MAAM,KAAK,OAAOnF,CAAO,CAClC,CAKA,UAAU0F,EAAmC,CAC3C,MAAMI,EAAc3K,EAAI,QAAQ,KAChC,OAAK2K,EAGDA,EAAY,QAAA,EAAkB,GAG3B,OAAOJ,EAAM,OAAA,CAAQ,IAAMI,EAAY,GAAA,GAAQJ,EAAM,cAAA,EANnC,EAO3B,CAKA,WAAqB,CAEnB,MAAO,CAAC,CADYvK,EAAI,QAAQ,IAElC,CAKA,UAAUuK,EAAmC,CAC3C,MAAMI,EAAc3K,EAAI,QAAQ,KAChC,OAAK2K,EAGDA,EAAY,QAAA,EAAkB,GAG3B,OAAOJ,EAAM,OAAA,CAAQ,IAAMI,EAAY,GAAA,GAAQJ,EAAM,cAAA,EANnC,EAO3B,CAKA,MAAM,cAA8C,CAClD,GAAI,CAGF,OAFkB,MAAMvK,EAAI,MAAM,KAAK,KAAK,iBAAiB,CAG/D,OAASW,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,iCAAiC,CACjE,CACF,CAKA,MAAc,0BAA0B+G,EAA0B,CAChE,KAAM,CAAE,WAAArB,EAAY,OAAApB,CAAA,EAAWyC,EAGzB9G,EAAY,MAAMZ,EAAI,MAAM,KAChC,KAAK,kBACL,OAAOqG,CAAU,CAAA,EAEnB,GAAI,CAACzF,EACH,MAAM,IAAIqJ,EACR,4BACAD,EAAiB,gBAAA,EAKrB,GAAI,CAACpJ,EAAS,aACZ,MAAM,IAAIqJ,EACR,qCACAD,EAAiB,gBAAA,EAKrB,MAAMpG,EAAYhD,EAAS,YAAA,GAAiB,EACtCiD,EAAYjD,EAAS,YAAA,EAE3B,GAAIqE,EAASrB,EACX,MAAM,IAAIqG,EACR,2BAA2BrG,CAAS,GACpCoG,EAAiB,gBAAA,EAIrB,GAAInG,GAAaoB,EAASpB,EACxB,MAAM,IAAIoG,EACR,2BAA2BpG,CAAS,GACpCmG,EAAiB,gBAAA,EAKrB,MAAMW,EAAc3K,EAAI,QAAQ,KAChC,GAAI2K,EAAa,CACf,MAAMC,EAAc,WAAWD,EAAY,UAAU,OAAO,GAAK,GAAG,EAC9D7G,EAAMlD,EAAS,MAAA,GAAW,EAC1BiK,EAAgB5F,EAASnB,EAE/B,GAAI8G,EAAcC,EAChB,MAAM,IAAIZ,EACR,mCAAmCY,CAAa,gBAAgBD,CAAW,GAC3EZ,EAAiB,gBAAA,CAGvB,CACF,CAKQ,yBAAyBM,EAAuB,CACtD,MAAMQ,EAAW,CAAC,aAAc,SAAU,gBAAgB,EAE1D,UAAWlD,KAASkD,EAClB,GAAI,CAACR,EAAW1C,CAAK,EACnB,MAAM,IAAIqC,EACR,GAAGrC,CAAK,eACRoC,EAAiB,gBAAA,EAKvB,GAAI,OAAOM,EAAW,QAAW,UAAYA,EAAW,QAAU,EAChE,MAAM,IAAIL,EACR,mCACAD,EAAiB,gBAAA,CAGvB,CAKQ,YAAYrJ,EAAYoK,EAAsC,CACpE,GAAIpK,aAAiBsJ,EACnB,OAAOtJ,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAMqK,EAAWrK,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIsJ,EACTe,EAAS,QAAUD,EACnBf,EAAiB,iBACjBgB,EAAS,KACTA,CAAA,CAEJ,CAGA,OAAIrK,EAAM,OAAS,aAAeA,EAAM,SAAS,SAAS,OAAO,EACxD,IAAIsJ,EACT,yBACAD,EAAiB,aAAA,EAKd,IAAIC,EACTtJ,EAAM,SAAWoK,EACjBf,EAAiB,YAAA,CAErB,CAKQ,gBAAgBrJ,EAAqB,CAC3C,OACEA,EAAM,SAAW,KACjBA,EAAM,UAAU,SAAW,KAC3BA,EAAM,SAAS,SAAS,WAAW,CAEvC,CACF,CAGO,MAAMmJ,GAAoB,IAAIM,qHC/ZrC,MAAMa,EAA6C,CACjD,MAAM,OAAOvD,EAA+C,CAE1D,GAAI,CAACA,EAAK,iBACR,MAAM,IAAI,MAAM,+BAA+B,EAGjD,MAAMrB,EAAa,SAASqB,EAAK,iBAAiB,IAAc,EAChE,GAAI,CAACrB,EACH,MAAM,IAAI,MAAM,yBAAyB,EAG3C,GAAI,CAACqB,EAAK,QAAUA,EAAK,QAAU,EACjC,MAAM,IAAI,MAAM,+CAA+C,EAGjE,GAAI,CAACA,EAAK,YACR,MAAM,IAAI,MAAM,0BAA0B,EAG5C,MAAMwD,EAAW,MAAMlL,EAAI,QAAQ,CACjC,OAAQ,OACR,IAAKA,EAAI,MAAM,UAAU,QAAQ,EAAI,mBACrC,KAAM,CACJ,KAAM,CACJ,KAAM,kBACN,WAAY,CACV,WAAAqG,EACA,OAAQqB,EAAK,OACb,YAAaA,EAAK,YAAY,YAAA,EAC9B,YAAaA,EAAK,WAAA,CACpB,CACF,CACF,CACD,EAEKzB,EAASjG,EAAI,MAAM,YACvBkL,CAAA,EAEF,OAAO,MAAM,QAAQjF,CAAM,EAAIA,EAAO,CAAC,EAAIA,CAC7C,CAEA,MAAM,gBAA2C,CAC/C,MAAMiF,EAAW,MAAMlL,EAAI,QAAQ,CACjC,OAAQ,MACR,IAAKA,EAAI,MAAM,UAAU,QAAQ,EAAI,mBACrC,OAAQ,CACN,QAAS,sBAAA,CACX,CACD,EAED,OAAOA,EAAI,MAAM,YACfkL,CAAA,CAEJ,CAEA,MAAM,OAAOC,EAA0B,GAA8B,CACnE,MAAMC,EAAc,CAClB,QAAS,sBAAA,EAIP,OAAO,KAAKD,CAAO,EAAE,OAAS,IAChCC,EAAO,OAASD,GAGlB,MAAMD,EAAW,MAAMlL,EAAI,QAAQ,CACjC,OAAQ,MACR,IAAKA,EAAI,MAAM,UAAU,QAAQ,EAAI,mBACrC,OAAAoL,CAAA,CACD,EAED,OAAOpL,EAAI,MAAM,YACfkL,CAAA,CAEJ,CAEA,MAAM,OACJ/E,EACAuB,EACwB,CACxB,MAAMwD,EAAW,MAAMlL,EAAI,QAAQ,CACjC,OAAQ,QACR,IAAK,GAAGA,EAAI,MAAM,UAAU,QAAQ,CAAC,oBAAoBmG,CAAQ,GACjE,KAAM,CACJ,KAAM,CACJ,KAAM,kBACN,GAAIA,EACJ,WAAYuB,CAAA,CACd,CACF,CACD,EAEKzB,EAASjG,EAAI,MAAM,YACvBkL,CAAA,EAEF,OAAO,MAAM,QAAQjF,CAAM,EAAIA,EAAO,CAAC,EAAIA,CAC7C,CAEA,MAAM,QAAQE,EAAkBkF,EAA6C,CAC3E,OAAO,KAAK,OAAOlF,EAAU,CAC3B,OAAQ,WACR,WAAAkF,CAAA,CACD,CACH,CAEA,MAAM,OAAOlF,EAAkBkF,EAA6C,CAC1E,OAAO,KAAK,OAAOlF,EAAU,CAC3B,OAAQ,WACR,WAAAkF,CAAA,CACD,CACH,CAEA,MAAM,KAAKD,EAAc,GAA8B,CAErD,MAAME,EAAc,CAAE,GAAGF,CAAA,EACrBE,EAAY,UAEdA,EAAY,QAAUA,EAAY,QAC/B,MAAM,GAAG,EACT,OAAQC,GAAgBA,EAAI,KAAA,IAAW,UAAU,EACjD,KAAK,GAAG,EAGND,EAAY,SACf,OAAOA,EAAY,SAIvB,MAAMJ,EAAW,MAAMlL,EAAI,QAAQ,CACjC,OAAQ,MACR,IAAKA,EAAI,MAAM,UAAU,QAAQ,EAAI,mBACrC,OAAQsL,CAAA,CACT,EAED,OAAOtL,EAAI,MAAM,YACfkL,CAAA,CAEJ,CAEA,MAAM,OAAOjF,EAAsC,CACjD,MAAMjG,EAAI,QAAQ,CAChB,OAAQ,SACR,IAAK,GAAGA,EAAI,MAAM,UAAU,QAAQ,CAAC,oBAAoBiG,EAAO,IAAI,EAAA,CACrE,EAEDjG,EAAI,MAAM,OAAOiG,CAAM,CACzB,CACF,CAGO,MAAMuF,EAAiC,IAAIP,GC5MlD,MAAqBQ,EAAgB,CAArC,aAAA,CACE,KAAiB,oBAAsB,uBACvC,KAAiB,iBAAmB,mBAAA,CAKpC,MAAM,KACJxI,EACAuF,EAAwB,GACR,CAChB,MAAMkD,EACJzI,IAAS,aAAe,KAAK,oBAAsB,KAAK,iBAE1D,GAAI,CACF,MAAMoH,EAAmB,CACvB,KAAM7B,EAAQ,MAAQ,OACtB,GAAGA,CAAA,EAIDA,EAAQ,OACV6B,EAAY,KAAO7B,EAAQ,MAIzBA,EAAQ,SACV6B,EAAY,OAAS7B,EAAQ,QAI3BA,EAAQ,UACV6B,EAAY,QAAU7B,EAAQ,SAGhC,MAAMmD,EAAU,MAAM3L,EAAI,MAAM,KAAK0L,EAAWrB,CAAW,EAC3D,OAAO,MAAM,QAAQsB,CAAO,EAAIA,EAAU,CAACA,CAAO,CACpD,OAAShL,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,mBAAmBsC,CAAI,YAAY,CACnE,CACF,CAKA,MAAM,SACJA,EACAO,EACAgF,EAAwB,CAAA,EACH,CACrB,MAAMkD,EACJzI,IAAS,aAAe,KAAK,oBAAsB,KAAK,iBAE1D,GAAI,CACF,MAAMoH,EAAmB,CAAA,EAGzB,OAAI7B,EAAQ,UACV6B,EAAY,QAAU7B,EAAQ,SAGjB,MAAMxI,EAAI,MAAM,KAAK0L,EAAW,OAAOlI,CAAE,EAAG6G,CAAW,CAExE,OAAS1J,EAAO,CACd,GAAI,KAAK,gBAAgBA,CAAK,EAC5B,OAAO,KAET,MAAM,KAAK,YAAYA,EAAO,mBAAmBsC,CAAI,aAAaO,CAAE,EAAE,CACxE,CACF,CAKA,MAAM,OACJP,EACAqH,EACc,CACd,MAAMoB,EACJzI,IAAS,aAAe,KAAK,oBAAsB,KAAK,iBAE1D,GAAI,CAEF,YAAK,yBAAyBA,EAAMqH,CAAU,EAIxB,MAFLtK,EAAI,MAAM,aAAa0L,CAAS,EAEZ,KAAKpB,CAAU,CAEtD,OAAS3J,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,oBAAoBsC,CAAI,WAAW,CACnE,CACF,CAKA,MAAM,OAAOrC,EAAe0J,EAA+C,CACzE,GAAI,CACF,GAAI,CAAC,KAAK,UAAU1J,CAAQ,EAC1B,MAAM,IAAIqJ,EACR,qDACAD,EAAiB,iBAAA,EAKrB,OADwB,MAAMpJ,EAAS,KAAK0J,CAAU,CAExD,OAAS3J,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,2BAA2B,CAC3D,CACF,CAKA,MAAM,OAAOC,EAA8B,CACzC,GAAI,CACF,GAAI,CAAC,KAAK,UAAUA,CAAQ,EAC1B,MAAM,IAAIqJ,EACR,qDACAD,EAAiB,iBAAA,EAIrB,MAAMpJ,EAAS,OAAA,CACjB,OAASD,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,2BAA2B,CAC3D,CACF,CAKA,MAAM,UACJsC,EACAuF,EAAwB,GACR,CAChB,MAAMkC,EAAe,CACnB,GAAGlC,EACH,OAAQ,CACN,SAAU,GACV,GAAGA,EAAQ,MAAA,CACb,EAGF,OAAO,MAAM,KAAK,KAAKvF,EAAMyH,CAAY,CAC3C,CAKA,MAAM,aAAa9J,EAA6B,CAC9C,GAAI,CAACZ,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIiK,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAM4B,EAAgBhL,EAAS,SAAA,EAC/B,OAAO,MAAM,KAAK,OAAOA,EAAU,CAAE,SAAU,CAACgL,EAAe,CACjE,CAKA,MAAM,aAAahL,EAAeT,EAA2C,CAC3E,GAAI,CAACH,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIiK,EACR,6BACAD,EAAiB,iBAAA,EAIrB,OAAO,MAAM,KAAK,OAAOpJ,EAAUT,CAAM,CAC3C,CAKA,MAAM,YACJuD,EACAT,EACgB,CAChB,OAAO,MAAM,KAAK,KAAKA,EAAM,CAC3B,OAAQ,CAAE,OAAAS,CAAA,EACV,KAAM,MAAA,CACP,CACH,CAKA,eACE9C,EACAqE,EACsC,CACtC,MAAM+C,EAAmB,CAAA,EAEzB,GAAI,OAAO/C,GAAW,UAAYA,GAAU,EAC1C,OAAA+C,EAAO,KAAK,kCAAkC,EACvC,CAAE,MAAO,GAAO,OAAAA,CAAA,EAGzB,MAAMpE,EAAYhD,EAAS,UAAYA,EAAS,YAAc,EACxDiD,EAAYjD,EAAS,UAAYA,EAAS,YAAc,KAE9D,OAAIqE,EAASrB,GACXoE,EAAO,KAAK,2BAA2BpE,CAAS,EAAE,EAGhDC,GAAaoB,EAASpB,GACxBmE,EAAO,KAAK,wBAAwBnE,CAAS,EAAE,EAG1C,CAAE,MAAOmE,EAAO,SAAW,EAAG,OAAAA,CAAA,CACvC,CAKA,MAAM,iBACJ/E,EACAoD,EACc,CACd,GAAI,CAACrG,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIiK,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAM6B,EACJ5I,IAAS,aAAe,sBAAwB,kBAElD,GAAI,CAEF,MAAM6I,EAAgB7I,IAAS,aAAe,WAAa,uBACrD8C,EAAU,MAAM/F,EAAI,MAAM,KAAK6L,EAAa,CAChD,OAAQ,CAAE,SAAUxF,EAAW,UAAS,EACxC,QAASyF,CAAA,CACV,EAEKC,EAAc,MAAM,QAAQhG,CAAO,EAAIA,EAAU,CAACA,CAAO,EAqC/D,MAlCc,CACZ,MAAOgG,EAAY,OACnB,QAASA,EAAY,OAAQnG,GAEjBA,EAAwB,WAAa,SAIhD,EAAE,OACH,SAAUmG,EAAY,OAAQnG,GAAM,CAClC,GAAI3C,IAAS,aACX,OAAQ2C,EAAwB,WAAa,WACxC,CACL,MAAM7E,EAAU6E,EAAoB,OAAA,EACpC,OAAO7E,IAAW,YAAcA,IAAW,WAC7C,CACF,CAAC,EAAE,OACH,SAAUgL,EAAY,OAAQnG,GAElBA,EAAwB,WAAa,UAIhD,EAAE,OACH,YAAamG,EAAY,OAAO,CAACC,EAAKpG,IAChC3C,IAAS,aACJ+I,GAAQpG,EAAwB,OAAA,GAAY,GAG5CoG,EAER,CAAC,CAAA,CAIR,OAASrL,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,qCAAqC,CACrE,CACF,CAKA,MAAM,4BACJsC,EACgC,CAChC,MAAMsB,EAAY,MAAM,KAAK,UAAUtB,CAAI,EACrCgJ,EAAiC,CAAA,EAEvC,UAAWrL,KAAY2D,EAAW,CAChC,MAAMb,EAAS9C,EAAS,OAAA,EACnBqL,EAAQvI,CAAM,IACjBuI,EAAQvI,CAAM,EAAI,CAAA,GAEpBuI,EAAQvI,CAAM,EAAE,KAAK9C,CAAQ,CAC/B,CAEA,OAAOqL,CACT,CAKA,MAAM,mBACJhJ,EACAiJ,EAAkD,OAClDC,EAA4B,MACZ,CAChB,MAAMC,EAAaD,IAAc,OAAS,IAAID,CAAM,GAAKA,EAEzD,OAAO,MAAM,KAAK,UAAUjJ,EAAM,CAChC,KAAMmJ,CAAA,CACP,CACH,CAKA,UAAUC,EAAyB,CACjC,MAAM1B,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAKA,WAAqB,CACnB,MAAMA,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAKA,UAAU0B,EAAyB,CACjC,MAAM1B,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAKQ,yBACN1H,EACAqH,EACM,CAIN,MAAMQ,EAHiB,CAAC,OAAQ,SAAU,WAAW,EAKrD,UAAWlD,KAASkD,EAClB,GAAI,CAACR,EAAW1C,CAAK,EACnB,MAAM,IAAIqC,EACR,GAAGrC,CAAK,oBAAoB3E,CAAI,aAChC+G,EAAiB,gBAAA,EAKvB,GAAI,OAAOM,EAAW,WAAc,UAAYA,EAAW,UAAY,EACrE,MAAM,IAAIL,EACR,0CACAD,EAAiB,gBAAA,EAIrB,GAAIM,EAAW,YAAc,SAEzB,OAAOA,EAAW,WAAc,UAChCA,EAAW,UAAYA,EAAW,WAElC,MAAM,IAAIL,EACR,gEACAD,EAAiB,gBAAA,EAKvB,GAAIM,EAAW,MAAQ,SACjB,OAAOA,EAAW,KAAQ,UAAYA,EAAW,IAAM,GACzD,MAAM,IAAIL,EACR,oCACAD,EAAiB,gBAAA,EAMvB,GAAI,OAAOM,EAAW,QAAW,UAAY,CAACA,EAAW,OAAO,OAC9D,MAAM,IAAIL,EACR,qBACAD,EAAiB,gBAAA,CAGvB,CAKQ,YAAYrJ,EAAYoK,EAAsC,CACpE,GAAIpK,aAAiBsJ,EACnB,OAAOtJ,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAMqK,EAAWrK,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIsJ,EACTe,EAAS,QAAUD,EACnBf,EAAiB,iBACjBgB,EAAS,KACTA,CAAA,CAEJ,CAGA,OAAIrK,EAAM,OAAS,aAAeA,EAAM,SAAS,SAAS,OAAO,EACxD,IAAIsJ,EACT,yBACAD,EAAiB,aAAA,EAKd,IAAIC,EACTtJ,EAAM,SAAWoK,EACjBf,EAAiB,YAAA,CAErB,CAKQ,gBAAgBrJ,EAAqB,CAC3C,OACEA,EAAM,SAAW,KACjBA,EAAM,UAAU,SAAW,KAC3BA,EAAM,SAAS,SAAS,WAAW,CAEvC,CACF,CAGO,MAAM+I,EAAkB,IAAI+B,kHCpcnC,MAAqBa,EAAoD,CAAzE,aAAA,CACE,KAAiB,iBAAmB,WAAA,CAKpC,MAAM,WAAWrL,EAAasL,EAAkC,CAC9D,GAAI,CAEF,GAAIvM,EAAI,MAAO,CACb,MAAMwM,EAAcxM,EAAI,MAAM,UAAUiB,CAAG,EAC3C,GAAiCuL,GAAgB,KAC/C,OAAOA,CAEX,CAGA,OAAOD,CACT,OAAS5L,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,0BAA0BM,CAAG,EAAE,CAC/D,CACF,CAKA,MAAM,YAAYA,EAAaC,EAA2B,CACxD,GAAI,CAEF,GAAI,CAACD,GAAO,OAAOA,GAAQ,SACzB,MAAM,IAAIgJ,EACR,yCACAD,EAAiB,gBAAA,EAKrB,MAAMyC,EAAe,KAAK,uBAAuBvL,CAAK,EAItD,MADiBlB,EAAI,MAAM,aAAa,UAAU,EACnC,KAAK,CAAE,CAACiB,CAAG,EAAGwL,EAAc,EAGvCzM,EAAI,OACNA,EAAI,MAAM,eAAe,CAAE,CAACiB,CAAG,EAAGC,EAAO,CAE7C,OAASP,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,2BAA2BM,CAAG,EAAE,CAChE,CACF,CAKA,MAAM,aAAayL,EAA8C,CAC/D,GAAI,CAEF,GAAI,CAACA,GAAY,OAAOA,GAAa,SACnC,MAAM,IAAIzC,EACR,6BACAD,EAAiB,gBAAA,EAKrB,MAAM2C,EAAwC,CAAA,EACxCC,EAAuC,CAAA,EAE7C,SAAW,CAAC3L,EAAKC,CAAK,IAAK,OAAO,QAAQwL,CAAQ,EAAG,CACnD,GAAI,CAACzL,GAAO,OAAOA,GAAQ,SACzB,MAAM,IAAIgJ,EACR,gBAAgBhJ,CAAG,+BACnB+I,EAAiB,gBAAA,EAGrB2C,EAAiB1L,CAAG,EAAI,KAAK,uBAAuBC,CAAK,EACzD0L,EAAgB3L,CAAG,EAAIC,CACzB,CAIA,MADuBlB,EAAI,MAAM,aAAa,UAAU,EACnC,KAAK2M,CAAgB,EAGtC3M,EAAI,OACNA,EAAI,MAAM,eAAe4M,CAAe,CAE5C,OAASjM,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,kCAAkC,CAClE,CACF,CAKA,MAAM,cAAcM,EAA4B,CAC9C,GAAI,CACF,GAAI,CAACA,GAAO,OAAOA,GAAQ,SACzB,MAAM,IAAIgJ,EACR,yCACAD,EAAiB,gBAAA,EAKrB,MAAM,KAAK,YAAY/I,EAAK,IAAI,CAClC,OAASN,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,6BAA6BM,CAAG,EAAE,CAClE,CACF,CAKA,MAAM,sBAAsBD,EAA8C,CACxE,GAAI,CACF,GAAI,CAACA,GAAU,OAAOA,GAAW,SAC/B,MAAM,IAAIiJ,EACR,oCACAD,EAAiB,gBAAA,EAIrB,MAAM0C,EAAgC,CAAA,EAEtC,GAAI1M,EAAI,MAAO,CACb,MAAMsK,EAAatK,EAAI,MAAM,KAAK,YAAc,CAAA,EAChD,SAAW,CAACiB,EAAKC,CAAK,IAAK,OAAO,QAAQoJ,CAAU,EAC9CrJ,EAAI,WAAWD,CAAM,IACvB0L,EAASzL,CAAG,EAAIC,EAGtB,CAEA,OAAOwL,CACT,OAAS/L,EAAO,CACd,MAAM,KAAK,YACTA,EACA,uCAAuCK,CAAM,EAAA,CAEjD,CACF,CAKA,mBAA6B,CAC3B,MAAM2J,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAKA,MAAM,oBACJkC,EACA5L,EACAsL,EACc,CACd,MAAMO,EAAU,GAAGD,CAAS,IAAI5L,CAAG,GACnC,OAAO,MAAM,KAAK,WAAW6L,EAASP,CAAY,CACpD,CAKA,MAAM,qBACJM,EACA5L,EACAC,EACe,CACf,MAAM4L,EAAU,GAAGD,CAAS,IAAI5L,CAAG,GACnC,OAAO,MAAM,KAAK,YAAY6L,EAAS5L,CAAK,CAC9C,CAKA,MAAM,qBAAqBD,EAAasL,EAAkC,CACxE,OAAO,MAAM,KAAK,oBAChB,mBACAtL,EACAsL,CAAA,CAEJ,CAKA,MAAM,sBAAsBtL,EAAaC,EAA2B,CAClE,OAAO,MAAM,KAAK,qBAAqB,mBAAoBD,EAAKC,CAAK,CACvE,CAKA,MAAM,0BAAyD,CAC7D,OAAO,MAAM,KAAK,sBAAsB,mBAAmB,CAC7D,CAKQ,uBAAuBA,EAAoB,CACjD,OAAIA,GAAU,KACL,GAGL,OAAOA,GAAU,SACZA,EAGL,OAAOA,GAAU,UACZA,EAAQ,IAAM,IAGnB,OAAOA,GAAU,SACZ,OAAOA,CAAK,EAId,KAAK,UAAUA,CAAK,CAC7B,CAKQ,YAAYP,EAAYoK,EAAsC,CACpE,GAAIpK,aAAiBsJ,EACnB,OAAOtJ,EAIT,GAAIA,EAAM,SAAW,KAAOA,EAAM,UAAU,SAAW,IACrD,OAAO,IAAIsJ,EACT,gDACAD,EAAiB,iBAAA,EAKrB,GAAIrJ,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAMqK,EAAWrK,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIsJ,EACTe,EAAS,QAAUD,EACnBf,EAAiB,iBACjBgB,EAAS,KACTA,CAAA,CAEJ,CAGA,OAAIrK,EAAM,OAAS,aAAeA,EAAM,SAAS,SAAS,OAAO,EACxD,IAAIsJ,EACT,iDACAD,EAAiB,aAAA,EAKd,IAAIC,EACTtJ,EAAM,SAAWoK,EACjBf,EAAiB,YAAA,CAErB,CACF,CAGO,MAAM7I,GAAkB,IAAImL,oHC/PnC,MAAMS,WAAiCxL,CAAU,CAC/C,MAAO,CACL,OAAOjB,EAAC,WAAI,qBAAmB,CACjC,CACF,CAEA,MAAM0M,WAA+BzL,CAAU,CAC7C,MAAO,CACL,OAAOjB,EAAC,WAAI,kBAAgB,CAC9B,CACF,CAGA,MAAqB2M,WAA8BhN,CAA2D,CAA9G,aAAA,CAAA,MAAA,GAAA,SAAA,EAGE,KAAQ,iBAAsC,CAAA,EAC9C,KAAQ,eAAuC,CAAA,EAC/C,KAAQ,MAAgC,CAAA,CAAC,CAE/B,WAA8E,CACtF,MAAO,CACL,UAAWD,EAAI,WAAW,MAAM,wBAAwB,EAAE,SAAA,EAC1D,YAAa,uBAGb,mBAAoBsJ,GAAA,EACpB,sBAAuBO,GAAA,EAGvB,kBAAmBvI,EAGnB,KAAM,CACJ,CACE,IAAK,cACL,MAAOtB,EAAI,WAAW,MAAM,8BAA8B,EAAE,SAAA,EAC5D,UAAW+M,EAAA,EAEb,CACE,IAAK,WACL,MAAO/M,EAAI,WAAW,MAAM,2BAA2B,EAAE,SAAA,EACzD,UAAWgN,EAAA,CACb,EAGF,aAAc,CACZ,eAAgB,wBAChB,kBAAmB,sBAAA,CACrB,CAEJ,CAGU,wBAA2C,CACnD,OAAI,KAAK,YAAc,gBAElB,MAAA,KACC1M,EAACgE,GAAA,CACC,UAAW,KAAK,UAChB,mBAAoB,KAAK,mBACzB,cAAe,KAAK,YAAY,KAAK,IAAI,EACzC,uBAAwB,KAAK,qBAAqB,KAAK,IAAI,EAC3D,iBAAkB,KAAK,eAAe,KAAK,IAAI,CAAA,CAAA,EAGjDhE,EAACiF,GAAA,CACC,SAAU,KAAK,aACf,sBAAuB,KAAK,wBAAwB,KAAK,IAAI,EAC7D,gBAAiB,KAAK,wBAAwB,KAAK,IAAI,CAAA,CAAA,CAE3D,EAIA,KAAK,YAAc,aAElB,MAAA,KACCjF,EAAC8G,GAAA,CACC,UAAW,KAAK,iBAChB,mBAAoB,KAAK,mBACzB,cAAe,KAAK,mBAAmB,KAAK,IAAI,EAChD,uBAAwB,KAAK,4BAA4B,KAAK,IAAI,EAClE,iBAAkB,KAAK,sBAAsB,KAAK,IAAI,CAAA,CAAA,EAGxD9G,EAACwF,GAAA,CACC,UAAW,KAAK,iBAChB,QAAS,KAAK,eACd,QAAS,KAAK,QACd,gBAAiB,KAAK,qBAAqB,KAAK,IAAI,EACpD,eAAgB,KAAK,oBAAoB,KAAK,IAAI,EAClD,eAAgB,KAAK,oBAAoB,KAAK,IAAI,CAAA,CAAA,CAEtD,EAKG,MAAM,uBAAA,CACf,CAGA,MAAgB,UAA0B,CACxC,GAAI,CAEF,MAAM,KAAK,cAAA,EACX,MAAM,KAAK,iBAAA,EAGX,MAAM,KAAK,aAAA,EAGX,MAAM,KAAK,qBAAA,EACX,MAAM,KAAK,mBAAA,CACb,OAASnF,EAAO,CACd,QAAQ,MAAM,sBAAuBA,CAAK,CAC5C,QAAA,CACE,KAAK,QAAU,GACfL,EAAE,OAAA,CACJ,CACF,CAGA,MAAc,mBAAmBI,EAA8B,CAC7D,GAAI,MAAK,mBAET,MAAK,mBAAqB,GAC1BJ,EAAE,OAAA,EAEF,GAAI,CAEF,MAAMgK,EAAa,CACjB,GAAG5J,EACH,UAAW,WAAWA,EAAS,SAAS,GAAK,EAC7C,UAAWA,EAAS,WAAaA,EAAS,UAAU,OAAS,WAAWA,EAAS,SAAS,EAAI,KAC9F,IAAKA,EAAS,KAAOA,EAAS,IAAI,OAAS,WAAWA,EAAS,GAAG,EAAI,EACtE,SAAUA,EAAS,WAAa,OAAYA,EAAS,SAAW,EAAA,EAGlE,MAAMgJ,EAAgB,OAAO,UAAWY,CAAU,EAClD,MAAM,KAAK,qBAAA,EAEXtK,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,2CAA2C,CAAA,CAEpE,OAASW,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EAErD,IAAIkC,EAAe7C,EAAI,WAAW,MAAM,yCAAyC,EAAE,SAAA,EAE/EW,aAAiBsJ,IACnBpH,EAAelC,EAAM,SAGvBX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6C,CAAA,CAEJ,QAAA,CACE,KAAK,mBAAqB,GAC1BvC,EAAE,OAAA,CACJ,EACF,CAEA,MAAc,4BAA4BM,EAA0C,CAClF,GAAI,CACF,MAAM8I,EAAgB,aAAa9I,CAAQ,EAC3C,MAAM,KAAK,qBAAA,EAEXZ,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,8CAA8C,CAAA,EAGrEM,EAAE,OAAA,CACJ,OAASK,EAAO,CACd,QAAQ,MAAM,0CAA2CA,CAAK,EAE9D,IAAIkC,EAAe7C,EAAI,WAAW,MAAM,4CAA4C,EAAE,SAAA,EAElFW,aAAiBsJ,IACnBpH,EAAelC,EAAM,SAGvBX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6C,CAAA,CAEJ,CACF,CAEA,MAAc,sBAAsBjC,EAA0C,CAC5E,MAAMC,GAAgB,OAAOD,EAAS,MAAS,WAAaA,EAAS,KAAA,EAASA,EAAS,OAAS,mBAEhGZ,EAAI,MAAM,KAAKZ,EAAc,CAC3B,MAAOY,EAAI,WAAW,MAAM,4CAA4C,EACxE,QAASA,EAAI,WAAW,MAAM,+CAAgD,CAAE,KAAMa,EAAc,EACpG,YAAab,EAAI,WAAW,MAAM,6CAA6C,EAC/E,WAAYA,EAAI,WAAW,MAAM,4CAA4C,EAC7E,UAAW,GACX,KAAM,eACN,UAAW,SAAY,CACrB,GAAI,CACF,MAAM0J,EAAgB,OAAO9I,CAAQ,EACrC,MAAM,KAAK,qBAAA,EAEXZ,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,8CAA8C,CAAA,CAEvE,OAASW,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,EAEvD,IAAIkC,EAAe7C,EAAI,WAAW,MAAM,4CAA4C,EAAE,SAAA,EAElFW,aAAiBsJ,IACnBpH,EAAelC,EAAM,SAGvBX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6C,CAAA,CAEJ,CACAvC,EAAE,OAAA,CACJ,EACA,SAAU,IAAM,CACdN,EAAI,MAAM,MAAA,CACZ,CAAA,CACD,CACH,CAGA,MAAc,0BAA0BiG,EAA4BlF,EAA+B,CACjG,GAAI,CACF,MAAMyK,EAAe,OAAOvF,EAAO,KAAM,CAAE,OAAAlF,EAAQ,EACnD,MAAM,KAAK,mBAAA,EAEXf,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,4CAA4C,CAAA,EAGnEM,EAAE,OAAA,CACJ,OAASK,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EAErD,IAAIkC,EAAe7C,EAAI,WAAW,MAAM,0CAA0C,EAAE,SAAA,EAEhFW,aAAiBsJ,IACnBpH,EAAelC,EAAM,SAGvBX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6C,CAAA,CAEJ,CACF,CAGQ,wBAAwBgC,EAAoB,CAClD,MAAMG,EAAY,OAAOH,EAAQ,IAAO,WAAaA,EAAQ,KAAOA,EAAQ,GACtEI,EAAS,OAAOJ,EAAQ,QAAW,WAAaA,EAAQ,SAAYA,EAAQ,YAAY,QAAU,EAGxG,IAAIO,EAAW,eACf,GAAI,OAAOP,EAAQ,MAAS,WAAY,CACtC,MAAMM,EAAWN,EAAQ,KAAA,EACrBM,GAAY,OAAOA,EAAS,aAAgB,WAC9CC,EAAWD,EAAS,YAAA,EACXA,GAAYA,EAAS,YAAY,cAC1CC,EAAWD,EAAS,WAAW,YAEnC,CAEAnF,EAAI,MAAM,KAAKZ,EAAc,CAC3B,MAAOY,EAAI,WAAW,MAAM,2CAA2C,EACvE,QAASA,EAAI,WAAW,MAAM,8CAA+C,CAAE,KAAM,GAAGoF,CAAQ,MAAMH,CAAM,EAAA,CAAI,EAChH,YAAajF,EAAI,WAAW,MAAM,4CAA4C,EAC9E,WAAYA,EAAI,WAAW,MAAM,2CAA2C,EAC5E,UAAW,GACX,KAAM,eACN,UAAW,SAAY,CACrB,GAAI,CACF,MAAMiG,EAASjG,EAAI,MAAM,QAAQ,sBAAuBgF,CAAS,EAC7DiB,IACF,MAAMA,EAAO,OAAA,EACb,MAAM,KAAK,iBAAA,EAEXjG,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,qCAAqC,CAAA,EAGhE,OAASW,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,EAC9CX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,mCAAmC,CAAA,CAE5D,CACF,EACA,SAAU,IAAM,CACdA,EAAI,MAAM,MAAA,CACZ,CAAA,CACD,CACH,CAGA,MAAc,sBAAsC,CAClD,GAAI,CACF,KAAK,iBAAmB,MAAM0J,EAAgB,KAAK,UAAW,CAC5D,KAAM,MAAA,CACP,EACD,QAAQ,IAAI,4BAA6B,KAAK,gBAAgB,CAChE,OAAS/I,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,EACvD,KAAK,iBAAmB,CAAA,CAC1B,CACF,CAGA,MAAc,cAA8B,CAE1C,GAAI,KAAK,aAAa,SAAW,EAAG,OAapC,MAAMuM,EAXU,CAAC,GAAG,IAAI,IAAI,KAAK,aAC9B,IAAItH,GAAK,CAER,MAAMuH,EAAgBvH,GAAW,MAAM,eAAe,MAAM,MAASA,GAAW,eAAe,MAAM,KACrG,OAAIuH,EACKA,EAAa,GAEf,IACT,CAAC,EACA,UAAa3J,GAAO,IAAwB,CAAA,CAC9C,EAC2B,OAAOgH,GAAU,CAAC,KAAK,MAAMA,CAAM,CAAC,EAEhE,GAAI0C,EAAY,OAAS,EACvB,GAAI,CACF,MAAME,EAAeF,EAAY,IAAI1C,GACnCxK,EAAI,MAAM,KAAK,QAASwK,CAAM,EAAE,MAAM7J,IACpC,QAAQ,MAAM,sBAAsB6J,CAAM,IAAK7J,CAAK,EAC7C,KACR,CAAA,EAGG0M,EAAc,MAAM,QAAQ,IAAID,CAAY,EAElDF,EAAY,QAAQ,CAAC1C,EAAQ8C,IAAU,CACjCD,EAAYC,CAAK,IACnB,KAAK,MAAM9C,CAAM,EAAI6C,EAAYC,CAAK,EAE1C,CAAC,CACH,OAAS3M,EAAO,CACd,QAAQ,MAAM,uBAAwBA,CAAK,CAC7C,CAEJ,CAGA,MAAc,oBAAoC,CAChD,GAAI,CAEF,MAAMoF,EAAU,MAAMyF,EAAe,KAAK,CACxC,QAAS,gBACT,KAAM,YAAA,CACP,EAED,KAAK,eAAiBzF,EACtB,QAAQ,IAAI,0BAA2B,KAAK,cAAc,CAC5D,OAASpF,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EACrD,KAAK,eAAiB,CAAA,CACxB,CACF,CAEA,MAAc,qBAAqBsF,EAAaW,EAAyBC,EAA+B,CACtG,GAAI,CACF,MAAMyD,EAAkB,CACtB,OAAQ,UAAA,EAGN1D,IAAmB,SACrB0D,EAAW,eAAiB1D,GAG1BC,IACFyD,EAAW,WAAazD,GAG1B,MAAM2E,EAAe,OAAOvF,EAAO,GAAA,EAAMqE,CAAU,EACnD,MAAM,KAAK,mBAAA,EAEXtK,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,6CAA6C,CAAA,EAGpEM,EAAE,OAAA,CACJ,OAASK,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EAEtD,IAAIkC,EAAe7C,EAAI,WAAW,MAAM,2CAA2C,EAAE,SAAA,EAErF,MAAIW,aAAiBsJ,IACnBpH,EAAelC,EAAM,SAGvBX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6C,CAAA,EAGIlC,CACR,CACF,CAEA,MAAc,oBAAoBsF,EAAaa,EAA+B,CAC5E,GAAI,CACF,MAAM0E,EAAe,OAAOvF,EAAO,GAAA,EAAM,CACvC,OAAQ,WACR,WAAYa,CAAA,CACb,EAED,MAAM,KAAK,mBAAA,EAEX9G,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,4CAA4C,CAAA,EAGnEM,EAAE,OAAA,CACJ,OAASK,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EAEtD,IAAIkC,EAAe7C,EAAI,WAAW,MAAM,0CAA0C,EAAE,SAAA,EAEpF,MAAIW,aAAiBsJ,IACnBpH,EAAelC,EAAM,SAGvBX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6C,CAAA,EAGIlC,CACR,CACF,CAEA,MAAc,oBAAoBsF,EAA4B,CAC5D,GAAI,CACF,MAAMuF,EAAe,OAAOvF,CAAM,EAClC,MAAM,KAAK,mBAAA,EAEXjG,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,4CAA4C,CAAA,EAGnEM,EAAE,OAAA,CACJ,OAASK,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EAErD,IAAIkC,EAAe7C,EAAI,WAAW,MAAM,0CAA0C,EAAE,SAAA,EAEpF,MAAIW,aAAiBsJ,IACnBpH,EAAelC,EAAM,SAGvBX,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6C,CAAA,EAGIlC,CACR,CACF,CACF,CCvfO,SAAS4M,EAAqBjD,EAA2C,CAC9E,MAAMtC,EAAmB,CAAA,EAGzB,OAAIsC,EAAW,OAAS,SAClB,CAACA,EAAW,MAAQ,OAAOA,EAAW,MAAS,WACjDtC,EAAO,KAAK,2BAA2B,EAKvCsC,EAAW,SAAW,SACpB,CAACA,EAAW,QAAU,OAAOA,EAAW,QAAW,WACrDtC,EAAO,KAAK,oBAAoB,EAI7BA,CACT,CAKO,SAASwF,EAAqBlD,EAAiCmD,EAAqC,CACzG,MAAMzF,EAAmB,CAAA,EAUzB,GAPIsC,EAAW,YAAc,SACvB,OAAOA,EAAW,WAAc,UAAYA,EAAW,UAAY,IACrEtC,EAAO,KAAK,8CAA8C,EAK1DsC,EAAW,YAAc,QAAaA,EAAW,YAAc,KAAM,EACnE,OAAOA,EAAW,WAAc,UAAYA,EAAW,UAAY,IACrEtC,EAAO,KAAK,8CAA8C,EAG5D,MAAMpE,EAAY0G,EAAW,WAAamD,GAAoB,EAC1DnD,EAAW,UAAY1G,GACzBoE,EAAO,KAAK,gEAAgE,CAEhF,CAGA,OAAIsC,EAAW,MAAQ,QAAaA,EAAW,MAAQ,OACjD,OAAOA,EAAW,KAAQ,UAAYA,EAAW,IAAM,IACzDtC,EAAO,KAAK,mCAAmC,EAI5CA,CACT,CAKO,SAAS0F,GAAsBpD,EAA2C,CAC/E,MAAMtC,EAAmB,CAAA,EAGzB,OAAIsC,EAAW,UAAY,QAAaA,EAAW,UAAY,MAAQA,EAAW,UAAY,IACxF,OAAOA,EAAW,SAAY,UAChCtC,EAAO,KAAK,0BAA0B,EAKtCsC,EAAW,UAAY,QAAaA,EAAW,UAAY,MAAQA,EAAW,UAAY,IACxF,OAAOA,EAAW,SAAY,UAChCtC,EAAO,KAAK,kCAAkC,EAI3CA,CACT,CAKO,SAAS2F,EAAc3F,EAAwB,CACpD,GAAIA,EAAO,OAAS,EAClB,MAAM,IAAIiC,EACRjC,EAAO,KAAK,IAAI,EAChBgC,EAAiB,gBAAA,CAGvB,CAKO,SAAS4D,GAA2BtD,EAAiCmD,EAAiC,CAC3G,MAAMzF,EAAS,CACb,GAAGuF,EAAqBjD,CAAU,EAClC,GAAGkD,EAAqBlD,EAAYmD,CAAgB,CAAA,EAGtDE,EAAc3F,CAAM,CACtB,CAKO,SAAS6F,GAAwBvD,EAAiCmD,EAAiC,CACxG,MAAMzF,EAAS,CACb,GAAGuF,EAAqBjD,CAAU,EAClC,GAAGkD,EAAqBlD,EAAYmD,CAAgB,EACpD,GAAGC,GAAsBpD,CAAU,CAAA,EAGrCqD,EAAc3F,CAAM,CACtB,CC1GA,MAAqB8F,WAA2BC,CAAM,CAAtD,aAAA,CAAA,MAAA,GAAA,SAAA,EAEE,KAAA,KAAOA,EAAM,UAAkB,MAAM,EACrC,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,QAAUA,EAAM,UAAyB,SAAS,EAClD,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,UAAYA,EAAM,UAAkB,WAAW,EAC/C,KAAA,UAAYA,EAAM,UAAkB,WAAW,EAC/C,KAAA,IAAMA,EAAM,UAAkB,KAAK,EAGnC,KAAA,gBAAkBA,EAAM,UAAkB,iBAAiB,EAC3D,KAAA,kBAAoBA,EAAM,UAAkB,mBAAmB,EAG/D,KAAA,SAAWA,EAAM,UAAmB,UAAU,EAG9C,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAC5D,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAG5D,KAAA,SAAWA,EAAM,UAA8B,UAAU,CAAA,CAGzD,aAAc,CACZ,MAAMvK,EAAK,KAAK,GAAA,EAChB,OAAOA,EAAK,yBAAyBA,CAAE,GAAK,uBAC9C,CAGA,gBAAyB,CACvB,OAAO,KAAK,eAAiB,KAAK,KAAA,CACpC,CAEA,cAAcyB,EAAyB,CACrC,MAAMpD,EAAM,KAAK,UAAA,EACXC,EAAM,KAAK,UAAA,EACjB,OAAOmD,GAAUpD,GAAOoD,GAAUnD,CACpC,CAEA,aAAamD,EAAwB,CACnC,OAAOA,EAAS,KAAK,IAAA,CACvB,CAOA,MAAM,KAAKqF,EAAgD,CAErDA,GACF,KAAK,mBAAmBA,CAAU,EAGpC,GAAI,CAEF,OADe,MAAM,MAAM,KAAKA,GAAc,CAAA,CAAE,CAElD,OAAS3J,EAAO,CACd,MAAM,KAAK,gBAAgBA,CAAK,CAClC,CACF,CAKA,MAAM,QAAwB,CAC5B,GAAI,CAAC,KAAK,YACR,MAAM,IAAIsJ,EACR,qDACAD,EAAiB,iBAAA,EAKrB,GAAI,MAAM,KAAK,UACb,MAAM,IAAIC,EACR,yDACAD,EAAiB,gBAAA,EAIrB,GAAI,CACF,MAAM,MAAM,OAAA,CACd,OAASrJ,EAAO,CACd,MAAM,KAAK,kBAAkBA,CAAK,CACpC,CACF,CAKA,MAAM,cAA4C,CAChD,GAAI,CAAC,KAAK,YACR,MAAM,IAAIsJ,EACR,qDACAD,EAAiB,iBAAA,EAIrB,OAAO,MAAM,KAAK,KAAK,CACrB,SAAU,CAAC,KAAK,SAAA,CAAS,CAC1B,CACH,CAKA,OAA4B,CAC1B,MAAMgE,EAAShO,EAAI,MAAM,aACvB,sBAAA,EAIF,OAAAgO,EAAO,eAAe,CACpB,KAAM,KAAK,KAAA,EAAS,UACpB,OAAQ,KAAK,OAAA,EACb,QAAS,KAAK,QAAA,EACd,UAAW,KAAK,UAAA,EAChB,UAAW,KAAK,UAAA,EAChB,IAAK,KAAK,IAAA,EAEV,gBAAiB,KAAK,gBAAA,EACtB,kBAAmB,KAAK,kBAAA,EACxB,SAAU,EAAA,CACX,EAEMA,CACT,CAOA,eAAe/I,EAAsD,CACnE,MAAM+C,EAAmB,CAAA,EAEzB,OAAI,OAAO/C,GAAW,UAAYA,GAAU,GAC1C+C,EAAO,KAAK,kCAAkC,EACvC,CAAE,MAAO,GAAO,OAAAA,CAAA,IAGrB/C,EAAS,KAAK,aAChB+C,EAAO,KACL,2BAA2B,KAAK,UAAA,CAAW,IAAI,KAAK,QAAQ,EAAA,EAI5D,KAAK,UAAA,GAAe/C,EAAS,KAAK,aACpC+C,EAAO,KAAK,wBAAwB,KAAK,WAAW,IAAI,KAAK,OAAA,CAAQ,EAAE,EAGlE,CAAE,MAAOA,EAAO,SAAW,EAAG,OAAAA,CAAA,EACvC,CAKA,oBACE/C,EACA2F,EACsC,CACtC,MAAM5C,EAAmB,CAAA,EACnBiG,EAAY,KAAK,aAAahJ,CAAM,EAE1C,GAAI2F,EAAcqD,EAAW,CAC3B,MAAMC,EACJ,KAAK,IAAA,EAAQ,EAAI,eAAe,KAAK,IAAA,CAAK,IAAI,KAAK,OAAA,CAAQ,QAAU,GACvElG,EAAO,KACL,mCAAmCiG,CAAS,IAAI,KAAK,OAAA,CAAQ,GAAGC,CAAO,gBAAgBtD,CAAW,IAAI,KAAK,QAAQ,EAAA,CAEvH,CAEA,MAAO,CAAE,MAAO5C,EAAO,SAAW,EAAG,OAAAA,CAAA,CACvC,CAOA,WAAqB,CACnB,MAAM2C,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAKA,WAAqB,CACnB,MAAMA,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAKA,SAAmB,CAEjB,GAAI,KAAK,SAAA,EAAY,MAAO,GAG5B,MAAMA,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAOA,MAAM,SAA4B,CAChC,GAAI,CACF,MAAMnH,EAAK,KAAK,GAAA,EAChB,GAAI,CAACA,EACH,MAAO,GAET,MAAMgC,EAAW,MAAMxF,EAAI,MAAM,KAAK,sBAAuB,CAC3D,OAAQ,CAAE,SAAUwD,EAAI,OAAQ,SAAA,CAAU,CAC3C,EAGD,OADsB,MAAM,QAAQgC,CAAQ,EAAIA,EAAW,CAACA,CAAQ,GAC/C,OAAS,CAChC,MAAQ,CAEN,MAAO,EACT,CACF,CAKA,iBAA0B,CACxB,MAAM1B,EAAM,KAAK,IAAA,EACjB,OAAIA,IAAQ,EACH,OAEF,GAAGA,CAAG,IAAI,KAAK,QAAQ,EAChC,CAKA,oBAA6B,CAC3B,MAAMjC,EAAM,KAAK,UAAA,EACXC,EAAM,KAAK,UAAA,EACX4B,EAAS,KAAK,OAAA,EAEpB,OAAI5B,EACK,GAAGD,CAAG,MAAMC,CAAG,IAAI4B,CAAM,GAE3B,QAAQ7B,CAAG,IAAI6B,CAAM,EAC9B,CAOQ,mBAAmB4G,EAAuC,CAChEsD,GAA2BtD,EAAY,KAAK,WAAW,CACzD,CAKQ,gBAAgB3J,EAA0B,CAChD,GAAIA,aAAiBsJ,EACnB,OAAOtJ,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAMqK,EAAWrK,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIsJ,EACTe,EAAS,QAAU,qCACnBhB,EAAiB,iBACjBgB,EAAS,KACTA,CAAA,CAEJ,CAEA,OAAO,IAAIf,EACTtJ,EAAM,SAAW,qCACjBqJ,EAAiB,YAAA,CAErB,CAKQ,kBAAkBrJ,EAA0B,CAClD,OAAIA,aAAiBsJ,EACZtJ,EAILA,EAAM,SAAW,KAAOA,EAAM,UAAU,SAAW,IAC9C,IAAIsJ,EACT,qDACAD,EAAiB,iBAAA,EAId,IAAIC,EACTtJ,EAAM,SAAW,uCACjBqJ,EAAiB,YAAA,CAErB,CACF,CC9PO,MAAMmE,EAAoB,CAC/B,QAAS,UACT,SAAU,WACV,SAAU,UACZ,EC7DA,MAAqBC,WAA0BL,CAAM,CAArD,aAAA,CAAA,MAAA,GAAA,SAAA,EAEE,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,eAAiBA,EAAM,UAAkB,gBAAgB,EACzD,KAAA,QAAUA,EAAM,UAAkB,SAAS,EAC3C,KAAA,OAASA,EAAM,UAA4B,QAAQ,EAGnD,KAAA,WAAaA,EAAM,UAAkB,YAAY,EACjD,KAAA,OAASA,EAAM,UAAkB,QAAQ,EAGzC,KAAA,UAAYA,EAAM,UAAgB,YAAcM,GAC9CN,EAAM,cAAcM,CAAc,CAAA,EAEpC,KAAA,UAAYN,EAAM,UAAgB,YAAcM,GAC9CN,EAAM,cAAcM,CAAc,CAAA,EAIpC,KAAA,KAAON,EAAM,OAAa,MAAM,EAChC,KAAA,SAAWA,EAAM,OAA2B,UAAU,CAAA,CAGtD,aAAc,CACZ,MAAMvK,EAAK,KAAK,GAAA,EAChB,OAAOA,EAAK,wBAAwBA,CAAE,GAAK,sBAC7C,CAGA,WAAqB,CACnB,OAAO,KAAK,WAAa2K,EAAkB,OAC7C,CAEA,YAAsB,CACpB,OAAO,KAAK,WAAaA,EAAkB,QAC7C,CAEA,YAAsB,CACpB,OAAO,KAAK,WAAaA,EAAkB,QAC7C,CAEA,eAAyB,CACvB,OAAO,KAAK,UAAA,CACd,CAGA,aAAsB,CACpB,MAAMpN,EAAS,KAAK,OAAA,EACpB,OAAOf,EAAI,WAAW,MAAM,sBAAsBe,CAAM,EAAE,EAAE,SAAA,CAC9D,CAEA,aAAsB,CAEpB,OADe,KAAK,OAAA,EACZ,CACN,KAAKoN,EAAkB,SACrB,MAAO,UACT,KAAKA,EAAkB,SACrB,MAAO,SACT,KAAKA,EAAkB,QACvB,QACE,MAAO,SAAA,CAEb,CAOA,MAAM,KAAK7D,EAAgD,CAErDA,GACF,KAAK,mBAAmBA,CAAU,EAGpC,GAAI,CAEF,OADe,MAAM,MAAM,KAAKA,GAAc,CAAA,CAAE,CAElD,OAAS3J,EAAO,CACd,MAAM,KAAK,gBAAgBA,CAAK,CAClC,CACF,CAKA,MAAM,QAAwB,CAC5B,GAAI,CAAC,KAAK,YACR,MAAM,IAAIsJ,EACR,oDACAD,EAAiB,iBAAA,EAKrB,MAAMW,EAAc3K,EAAI,QAAQ,KAChC,GAAI2K,GAAe,CAACA,EAAY,QAAA,GAAa,CAAC,KAAK,gBACjD,MAAM,IAAIV,EACR,kEACAD,EAAiB,gBAAA,EAIrB,GAAI,CACF,MAAM,MAAM,OAAA,CACd,OAASrJ,EAAO,CACd,MAAM,KAAK,kBAAkBA,CAAK,CACpC,CACF,CAKA,OAA2B,CACzB,MAAMqN,EAAShO,EAAI,MAAM,aACvB,qBAAA,EAIF,OAAAgO,EAAO,eAAe,CACpB,WAAY,KAAK,WAAA,EACjB,OAAQ,KAAK,OAAA,EACb,eAAgB,KAAK,eAAA,EACrB,QAAS,KAAK,QAAA,CAAQ,CACvB,EAEMA,CACT,CAKA,cAAuB,CACrB,MAAMpN,EAAW,KAAK,SAAA,EAChBkD,EAAMlD,GAAWA,EAAS,IAAA,GAAS,EACzC,OAAO,KAAK,SAAWkD,CACzB,CAKA,oBAA6B,CAC3B,MAAMlD,EAAW,KAAK,SAAA,EAChB8C,EAAS9C,EAAWA,EAAS,OAAA,EAAW,GAC9C,MAAO,GAAG,KAAK,OAAA,CAAQ,IAAI8C,CAAM,GAAG,KAAA,CACtC,CAKA,uBAAgC,CAC9B,MAAM9C,EAAW,KAAK,SAAA,EAChB8C,EAAS9C,EAAWA,EAAS,OAAA,EAAW,GACxCkD,EAAMlD,GAAWA,EAAS,IAAA,GAAS,EAEzC,OAAIkD,EAAM,EACD,GAAG,KAAK,OAAA,CAAQ,MAAMA,CAAG,YAAY,KAAK,aAAA,CAAc,IAAIJ,CAAM,GAAG,KAAA,EAGvE,KAAK,mBAAA,CACd,CAOA,WAAqB,CACnB,MAAMiH,EAAc3K,EAAI,QAAQ,KAChC,OAAK2K,EAGDA,EAAY,QAAA,EAAkB,GAG3B,OAAO,KAAK,OAAA,CAAQ,IAAMA,EAAY,GAAA,GAAQ,KAAK,cAAA,EANjC,EAO3B,CAKA,WAAqB,CACnB,MAAMA,EAAc3K,EAAI,QAAQ,KAChC,OAAK2K,EAGDA,EAAY,QAAA,EAAkB,GAG3B,OAAO,KAAK,OAAA,CAAQ,IAAMA,EAAY,GAAA,GAAQ,KAAK,cAAA,EANjC,EAO3B,CAKA,SAAmB,CACjB,MAAMA,EAAc3K,EAAI,QAAQ,KAChC,OAAK2K,EAGDA,EAAY,QAAA,EAAkB,GAG3B,OAAO,KAAK,OAAA,CAAQ,IAAMA,EAAY,GAAA,EANpB,EAO3B,CAOQ,mBAAmBL,EAAuC,CAChE,MAAMtC,EAAmB,CAAA,EAuBzB,GArBIsC,EAAW,SAAW,SACpB,OAAOA,EAAW,QAAW,UAAYA,EAAW,QAAU,IAChEtC,EAAO,KAAK,kCAAkC,EAI9CsC,EAAW,iBAAmB,SAE9B,CAACA,EAAW,gBACZ,OAAOA,EAAW,gBAAmB,WAErCtC,EAAO,KAAK,8BAA8B,EAI1CsC,EAAW,aAAe,SACxB,CAACA,EAAW,YAAc,OAAOA,EAAW,YAAe,WAC7DtC,EAAO,KAAK,gCAAgC,EAI5CA,EAAO,OAAS,EAClB,MAAM,IAAIiC,EACRjC,EAAO,KAAK,IAAI,EAChBgC,EAAiB,gBAAA,CAGvB,CAKQ,gBAAgBrJ,EAA0B,CAChD,GAAIA,aAAiBsJ,EACnB,OAAOtJ,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAMqK,EAAWrK,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIsJ,EACTe,EAAS,QAAU,+BACnBhB,EAAiB,iBACjBgB,EAAS,KACTA,CAAA,CAEJ,CAEA,OAAO,IAAIf,EACTtJ,EAAM,SAAW,+BACjBqJ,EAAiB,YAAA,CAErB,CAKQ,kBAAkBrJ,EAA0B,CAClD,OAAIA,aAAiBsJ,EACZtJ,EAILA,EAAM,SAAW,KAAOA,EAAM,UAAU,SAAW,IAC9C,IAAIsJ,EACT,oDACAD,EAAiB,iBAAA,EAId,IAAIC,EACTtJ,EAAM,SAAW,iCACjBqJ,EAAiB,YAAA,CAErB,CACF,CCnSA,MAAqBsE,WAAwBP,CAAM,CAAnD,aAAA,CAAA,MAAA,GAAA,SAAA,EACE,KAAA,KAAOA,EAAM,UAAkB,MAAM,EACrC,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,QAAUA,EAAM,UAAkB,SAAS,EAC3C,KAAA,cAAgBA,EAAM,UAAkB,eAAe,EACvD,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,UAAYA,EAAM,UAAkB,WAAW,EAC/C,KAAA,UAAYA,EAAM,UAAkB,WAAW,EAC/C,KAAA,IAAMA,EAAM,UAAkB,KAAK,EACnC,KAAA,QAAUA,EAAM,UAAkB,SAAS,EAC3C,KAAA,eAAiBA,EAAM,UAAkB,gBAAgB,EAEzD,KAAA,gBAAkBA,EAAM,UAAkB,iBAAiB,EAC3D,KAAA,kBAAoBA,EAAM,UAAkB,mBAAmB,EAC/D,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,cAAgBA,EAAM,UAAe,eAAe,EACpD,KAAA,SAAWA,EAAM,UAAmB,UAAU,EAC9C,KAAA,UAAYA,EAAM,UAAgB,YAAcM,GAC9CN,EAAM,cAAcM,CAAc,CAAA,EAEpC,KAAA,UAAYN,EAAM,UAAgB,YAAcM,GAC9CN,EAAM,cAAcM,CAAc,CAAA,EAIpC,KAAA,YAAcN,EAAM,OAAO,aAAa,EAGxC,KAAA,SAAWA,EAAM,UAA8B,UAAU,CAAA,CAGzD,gBAAyB,CACvB,OAAO,KAAK,eAAiB,KAAK,KAAA,CACpC,CAEA,oBAA6B,CAC3B,MAAMtK,EAAO,KAAK,eAAA,EACZE,EAAU,KAAK,QAAA,EACrB,OAAOA,EAAU,GAAGF,CAAI,KAAKE,CAAO,IAAMF,CAC5C,CAEA,cAAcwB,EAAyB,CACrC,MAAMpD,EAAM,KAAK,UAAA,GAAe,EAC1BC,EAAM,KAAK,UAAA,EACjB,OAAOmD,GAAUpD,IAAQ,CAACC,GAAOmD,GAAUnD,EAC7C,CAEA,aAAamD,EAAwB,CACnC,OAAOA,GAAU,KAAK,IAAA,GAAS,EACjC,CAOA,MAAM,KAAKqF,EAAgD,CAErDA,GACF,KAAK,mBAAmBA,CAAU,EAGpC,GAAI,CAEF,OADe,MAAM,MAAM,KAAKA,GAAc,CAAA,CAAE,CAElD,OAAS3J,EAAO,CACd,MAAM,KAAK,gBAAgBA,CAAK,CAClC,CACF,CAKA,MAAM,QAAwB,CAC5B,GAAI,CAAC,KAAK,YACR,MAAM,IAAIsJ,EACR,qDACAD,EAAiB,iBAAA,EAKrB,GAAI,MAAM,KAAK,UACb,MAAM,IAAIC,EACR,0DACAD,EAAiB,gBAAA,EAIrB,GAAI,CACF,MAAM,MAAM,OAAA,CACd,OAASrJ,EAAO,CACd,MAAM,KAAK,kBAAkBA,CAAK,CACpC,CACF,CAKA,MAAM,cAAyC,CAC7C,GAAI,CAAC,KAAK,YACR,MAAM,IAAIsJ,EACR,qDACAD,EAAiB,iBAAA,EAIrB,OAAO,MAAM,KAAK,KAAK,CACrB,SAAU,CAAC,KAAK,SAAA,CAAS,CAC1B,CACH,CAKA,OAAyB,CACvB,MAAMgE,EAAShO,EAAI,MAAM,aACvB,mBAAA,EAIF,OAAAgO,EAAO,eAAe,CACpB,KAAM,KAAK,KAAA,EAAS,UACpB,OAAQ,KAAK,OAAA,EACb,QAAS,KAAK,QAAA,EACd,cAAe,KAAK,cAAA,EACpB,UAAW,KAAK,UAAA,EAChB,UAAW,KAAK,UAAA,EAChB,IAAK,KAAK,IAAA,EACV,QAAS,KAAK,QAAA,EACd,eAAgB,KAAK,eAAA,EACrB,gBAAiB,KAAK,gBAAA,EACtB,kBAAmB,KAAK,kBAAA,EACxB,YAAa,KAAK,YAAA,EAClB,SAAU,EAAA,CACX,EAEMA,CACT,CAOA,eAAe/I,EAAsD,CACnE,MAAM+C,EAAmB,CAAA,EAEzB,GAAI,OAAO/C,GAAW,UAAYA,GAAU,EAC1C,OAAA+C,EAAO,KAAK,kCAAkC,EACvC,CAAE,MAAO,GAAO,OAAAA,CAAA,EAGzB,MAAMnG,EAAM,KAAK,UAAA,GAAe,EAC5BoD,EAASpD,GACXmG,EAAO,KAAK,2BAA2BnG,CAAG,IAAI,KAAK,OAAA,CAAQ,EAAE,EAG/D,MAAMC,EAAM,KAAK,UAAA,EACjB,OAAIA,GAAOmD,EAASnD,GAClBkG,EAAO,KAAK,wBAAwBlG,CAAG,IAAI,KAAK,OAAA,CAAQ,EAAE,EAGrD,CAAE,MAAOkG,EAAO,SAAW,EAAG,OAAAA,CAAA,CACvC,CAOA,WAAqB,CACnB,MAAM2C,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAKA,WAAqB,CACnB,MAAMA,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAKA,SAAmB,CAEjB,GAAI,KAAK,SAAA,EAAY,MAAO,GAG5B,MAAMA,EAAc3K,EAAI,QAAQ,KAChC,MAAO,CAAC,EAAE2K,GAAeA,EAAY,QAAA,EACvC,CAOA,MAAM,SAA4B,CAChC,GAAI,CACF,MAAMnH,EAAK,KAAK,GAAA,EAChB,GAAI,CAACA,EACH,MAAO,GAET,MAAMuC,EAAU,MAAM/F,EAAI,MAAM,KAAK,kBAAmB,CACtD,OAAQ,CAAE,SAAUwD,EAAG,SAAA,EAAY,OAAQ,SAAA,CAAU,CACtD,EAGD,OADqB,MAAM,QAAQuC,CAAO,EAAIA,EAAU,CAACA,CAAO,GAC5C,OAAS,CAC/B,MAAQ,CAEN,MAAO,EACT,CACF,CAKA,iBAA0B,CACxB,MAAMjC,EAAM,KAAK,IAAA,GAAS,EAC1B,OAAIA,IAAQ,EACH,OAEF,GAAGA,CAAG,IAAI,KAAK,QAAQ,EAChC,CAKA,oBAA6B,CAC3B,MAAMjC,EAAM,KAAK,UAAA,GAAe,EAC1BC,EAAM,KAAK,UAAA,EACX4B,EAAS,KAAK,OAAA,EAEpB,OAAI5B,EACK,GAAGD,CAAG,MAAMC,CAAG,IAAI4B,CAAM,GAE3B,QAAQ7B,CAAG,IAAI6B,CAAM,EAC9B,CAKA,uBAAuB6K,EAA0B,CAC/C,MAAMxK,EAAU,KAAK,QAAA,EAIrB,GAAIA,GAAW,OAAOA,GAAY,SAChC,OAAOA,EAGT,MAAM,IAAIkG,EACR,kDACAD,EAAiB,gBAAA,CAErB,CAOQ,mBAAmBM,EAAuC,CAChEuD,GAAwBvD,EAAY,KAAK,UAAA,GAAe,MAAS,CACnE,CAKQ,gBAAgB3J,EAA0B,CAChD,GAAIA,aAAiBsJ,EACnB,OAAOtJ,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAMqK,EAAWrK,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIsJ,EACTe,EAAS,QAAU,kCACnBhB,EAAiB,iBACjBgB,EAAS,KACTA,CAAA,CAEJ,CAEA,OAAO,IAAIf,EACTtJ,EAAM,SAAW,kCACjBqJ,EAAiB,YAAA,CAErB,CAKQ,kBAAkBrJ,EAA0B,CAClD,OAAIA,aAAiBsJ,EACZtJ,EAILA,EAAM,SAAW,KAAOA,EAAM,UAAU,SAAW,IAC9C,IAAIsJ,EACT,qDACAD,EAAiB,iBAAA,EAId,IAAIC,EACTtJ,EAAM,SAAW,oCACjBqJ,EAAiB,YAAA,CAErB,CACF,CCrUA,MAAqBwE,WAAsBT,CAAM,CAAjD,aAAA,CAAA,MAAA,GAAA,SAAA,EAEE,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,WAAaA,EAAM,UAAkB,YAAY,EACjD,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,YAAcA,EAAM,UAAU,cAAeA,EAAM,aAAa,EAChE,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,WAAaA,EAAM,UAAkB,YAAY,EACjD,KAAA,YAAcA,EAAM,UAAU,cAAeA,EAAM,aAAa,EAChE,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,WAAaA,EAAM,UAAkB,YAAY,EACjD,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAC5D,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAC5D,KAAA,mBAAqBA,EAAM,UAAkB,oBAAoB,EACjE,KAAA,qBAAuBA,EAAM,UAAkB,sBAAsB,EACrE,KAAA,UAAYA,EAAM,UAAmB,WAAW,EAChD,KAAA,WAAaA,EAAM,UAAmB,YAAY,EAClD,KAAA,WAAaA,EAAM,UAAmB,YAAY,EAGlD,KAAA,KAAOA,EAAM,OAAa,MAAM,EAChC,KAAA,gBAAkBA,EAAM,OAAa,iBAAiB,EACtD,KAAA,SAAWA,EAAM,OAAO,UAAU,CAAA,CAGlC,gBAAyB,CACvB,OAAQ,KAAK,SAAO,CAClB,IAAK,UACH,MAAO,UACT,IAAK,WACH,MAAO,UACT,IAAK,WACH,MAAO,SACT,QACE,MAAO,WAAA,CAEb,CAEA,eAAwB,CACtB,OAAQ,KAAK,SAAO,CAClB,IAAK,UACH,MAAO,eACT,IAAK,WACH,MAAO,sBACT,IAAK,WACH,MAAO,sBACT,QACE,MAAO,wBAAA,CAEb,CAEA,QAAQpD,EAA6B,CACnC,OAAKA,EAGDA,EAAY,QAAA,EAAkB,GAG3B,KAAK,SAAS,SAAA,IAAeA,EAAY,GAAA,GAAQ,KAAK,UAAA,EANpC,EAO3B,CAEA,UAAUA,EAA6B,CACrC,OAAKA,GAGEA,EAAY,WAAa,EAClC,CAEA,oBAA6B,CAC3B,MAAM1F,EAAS,KAAK,OAAA,EACpB,OAAOA,EAASA,EAAO,QAAQ,CAAC,EAAI,MACtC,CAEA,yBAAkC,CAChC,MAAMwJ,EAAO,KAAK,YAAA,EAClB,OAAOA,EAAOA,EAAK,mBAAA,EAAuB,IAAMA,EAAK,qBAAuB,EAC9E,CACF,CC1EAzO,EAAI,aAAa,IAAI,mBAAoB,IAAM,CAE7CA,EAAI,MAAM,OAAO,sBAAsB,EAAI8N,GAC3C9N,EAAI,MAAM,OAAO,qBAAqB,EAAIoO,GAC1CpO,EAAI,MAAM,OAAO,mBAAmB,EAAIsO,GACxCtO,EAAI,MAAM,OAAO,iBAAiB,EAAIwO,GAEtCxO,EAAI,cAAc,IAAI,kBAAkB,EAAE,aAAaiN,EAAqB,CAC9E,CAAC"}