{"version":3,"file":"admin.js","sources":["../src/common/components/shared/ConfirmModal.tsx","../src/admin/components/shared/GenericManagementPage.tsx","../src/admin/components/sections/GeneralSettingsSection.tsx","../src/common/utils/formValidators.ts","../src/admin/components/forms/AddPlatformForm.tsx","../src/admin/components/shared/GenericPlatformListItem.tsx","../src/admin/components/sections/PlatformManagementSection.tsx","../src/admin/components/items/WithdrawalRequestItem.tsx","../src/admin/components/sections/RequestManagementSection.tsx","../src/admin/components/forms/AddDepositPlatformForm.tsx","../src/admin/components/items/DepositTransactionItem.tsx","../src/admin/components/sections/DepositManagementSection.tsx","../src/admin/components/items/NetworkTypeListItem.tsx","../src/admin/components/forms/AddNetworkTypeForm.tsx","../src/admin/components/sections/NetworkTypeManagementSection.tsx","../src/common/utils/apiRequestUtils.ts","../src/admin/utils/platformOperations.ts","../src/admin/components/UnifiedManagementPage.tsx","../src/common/models/WithdrawalPlatform.ts","../src/common/types/index.ts","../src/common/models/WithdrawalRequest.ts","../src/common/models/DepositPlatform.ts","../src/common/models/DepositTransaction.ts","../src/common/models/NetworkType.ts","../src/admin/index.ts"],"sourcesContent":["import Modal from 'flarum/common/components/Modal';\r\nimport Button from 'flarum/common/components/Button';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport app from 'flarum/common/app';\r\n\r\nexport interface ConfirmModalAttrs {\r\n  title: string;\r\n  message: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  onConfirm: () => void;\r\n  onCancel: () => void;\r\n  dangerous?: boolean;\r\n  icon?: string;\r\n}\r\n\r\n/**\r\n * 通用确认模态框组件\r\n * 用于替代重复的删除确认、状态变更确认等模态框\r\n */\r\nexport default class ConfirmModal extends Modal<ConfirmModalAttrs> {\r\n  className() {\r\n    return 'ConfirmModal';\r\n  }\r\n\r\n  title() {\r\n    const { title, dangerous = false, icon: modalIcon = dangerous ? 'fas fa-exclamation-triangle' : 'fas fa-question-circle' } = this.attrs;\r\n    \r\n    return (\r\n      <span>\r\n        {modalIcon && (\r\n          <span className={`ConfirmModal-icon ${dangerous ? 'dangerous' : ''}`}>\r\n            {icon(modalIcon)}\r\n          </span>\r\n        )}\r\n        {title}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  content() {\r\n    const { \r\n      message, \r\n      confirmText = 'Confirm',\r\n      cancelText = 'Cancel',\r\n      onConfirm, \r\n      onCancel, \r\n      dangerous = false\r\n    } = this.attrs;\r\n\r\n    return (\r\n      <div className=\"Modal-body\">\r\n        <div className=\"ConfirmModal-message\">\r\n          {message}\r\n        </div>\r\n        \r\n        <div className=\"Form-group\">\r\n          <div className=\"ButtonGroup\">\r\n            <Button\r\n              className=\"Button\"\r\n              onclick={() => {\r\n                onCancel();\r\n                app.modal.close();\r\n              }}\r\n            >\r\n              {cancelText}\r\n            </Button>\r\n            <Button\r\n              className={`Button Button--${dangerous ? 'danger' : 'primary'}`}\r\n              onclick={() => {\r\n                onConfirm();\r\n                app.modal.close();\r\n              }}\r\n            >\r\n              {confirmText}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\r\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport ConfirmModal from '../../../common/components/shared/ConfirmModal';\r\n\r\n// Generic interfaces for platform management\r\nexport interface GenericPlatform {\r\n  id?: () => string | number;\r\n  name?: () => string;\r\n  isActive?: () => boolean;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface GenericTransaction {\r\n  id?: () => string | number;\r\n  status?: () => string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface PlatformOperations<T extends GenericPlatform> {\r\n  create: (data: any) => Promise<T>;\r\n  toggleStatus: (platform: T) => Promise<void>;\r\n  delete: (platform: T) => Promise<void>;\r\n  load: () => Promise<T[]>;\r\n}\r\n\r\nexport interface TransactionOperations<T extends GenericTransaction> {\r\n  updateStatus: (transaction: T, status: string) => Promise<void>;\r\n  load: () => Promise<T[]>;\r\n}\r\n\r\nexport interface TabConfiguration {\r\n  key: string;\r\n  label: string;\r\n  component: Mithril.ComponentTypes<any>;\r\n  props?: () => any;\r\n}\r\n\r\nexport interface GenericManagementPageConfig<\r\n  TPlatform extends GenericPlatform,\r\n  TTransaction extends GenericTransaction\r\n> {\r\n  pageTitle: string;\r\n  extensionId: string;\r\n  \r\n  // Platform configuration\r\n  platformOperations: PlatformOperations<TPlatform>;\r\n  transactionOperations?: TransactionOperations<TTransaction>;\r\n  \r\n  // Tab configuration\r\n  tabs: TabConfiguration[];\r\n  \r\n  // Optional settings section\r\n  settingsComponent?: Mithril.ComponentTypes<any>;\r\n  \r\n  // Translation prefixes\r\n  translations: {\r\n    platformPrefix: string;\r\n    transactionPrefix?: string;\r\n  };\r\n}\r\n\r\nexport default abstract class GenericManagementPage<\r\n  TPlatform extends GenericPlatform,\r\n  TTransaction extends GenericTransaction\r\n> extends ExtensionPage {\r\n  \r\n  // State management\r\n  protected platforms: TPlatform[] = [];\r\n  protected transactions: TTransaction[] = [];\r\n  protected loading = true;\r\n  protected submittingPlatform = false;\r\n  protected activeTab: string;\r\n  \r\n  // Abstract configuration - must be implemented by subclasses\r\n  protected abstract getConfig(): GenericManagementPageConfig<TPlatform, TTransaction>;\r\n  \r\n  constructor() {\r\n    super();\r\n    const config = this.getConfig();\r\n    this.activeTab = config.tabs[0]?.key || '';\r\n  }\r\n\r\n  oninit(vnode: Mithril.VnodeDOM) {\r\n    super.oninit(vnode);\r\n    this.loadData();\r\n  }\r\n\r\n  content() {\r\n    if (this.loading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n\r\n    const config = this.getConfig();\r\n\r\n    return (\r\n      <div className={`${config.extensionId}ManagementPage`}>\r\n        <div className=\"container\">\r\n          <h2>{config.pageTitle}</h2>\r\n          \r\n          {config.settingsComponent && (\r\n            <div className=\"SettingsSection\">\r\n              {m(config.settingsComponent, { \r\n                onSettingChange: this.saveSetting.bind(this) \r\n              })}\r\n            </div>\r\n          )}\r\n          \r\n          {config.tabs.length > 1 && (\r\n            <div className=\"AdminTabs\">\r\n              <div className=\"AdminTabs-nav\">\r\n                {config.tabs.map(tab => (\r\n                  <button \r\n                    key={tab.key}\r\n                    className={`AdminTabs-tab ${this.activeTab === tab.key ? 'active' : ''}`}\r\n                    onclick={() => { this.activeTab = tab.key; }}\r\n                  >\r\n                    {tab.label}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n              \r\n              <div className=\"AdminTabs-content\">\r\n                {this.renderActiveTabContent()}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {config.tabs.length === 1 && (\r\n            <div className=\"SingleTabContent\">\r\n              {this.renderActiveTabContent()}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  protected renderActiveTabContent(): Mithril.Children {\r\n    const config = this.getConfig();\r\n    const activeTab = config.tabs.find(tab => tab.key === this.activeTab);\r\n    \r\n    if (!activeTab) return null;\r\n\r\n    const props = {\r\n      // Common platform management props\r\n      platforms: this.platforms,\r\n      transactions: this.transactions,\r\n      submittingPlatform: this.submittingPlatform,\r\n      \r\n      // Platform management callbacks\r\n      onAddPlatform: this.addPlatform.bind(this),\r\n      onTogglePlatformStatus: this.togglePlatformStatus.bind(this),\r\n      onDeletePlatform: this.deletePlatform.bind(this),\r\n      \r\n      // Transaction management callbacks\r\n      ...(config.transactionOperations && {\r\n        onUpdateTransactionStatus: this.updateTransactionStatus.bind(this),\r\n      }),\r\n      \r\n      // Additional props from tab configuration\r\n      ...(activeTab.props ? activeTab.props() : {})\r\n    };\r\n\r\n    return m(activeTab.component, props);\r\n  }\r\n\r\n  // Generic platform management methods\r\n  protected async addPlatform(formData: any): Promise<void> {\r\n    if (this.submittingPlatform) return;\r\n\r\n    this.submittingPlatform = true;\r\n    const config = this.getConfig();\r\n\r\n    try {\r\n      await config.platformOperations.create(formData);\r\n      await this.loadPlatforms();\r\n    } catch (error) {\r\n      console.error('Error adding platform:', error);\r\n      // Error handling is done by the platform operations\r\n    } finally {\r\n      this.submittingPlatform = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  protected async togglePlatformStatus(platform: TPlatform): Promise<void> {\r\n    const config = this.getConfig();\r\n    try {\r\n      await config.platformOperations.toggleStatus(platform);\r\n      await this.loadPlatforms();\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error toggling platform status:', error);\r\n    }\r\n  }\r\n\r\n  protected deletePlatform(platform: TPlatform): void {\r\n    const config = this.getConfig();\r\n    const platformName = (typeof platform.name === 'function' ? platform.name() : platform.name) || 'Unknown Platform';\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_title`),\r\n      message: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_message`, { name: platformName }),\r\n      confirmText: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_button`),\r\n      cancelText: app.translator.trans(`${config.translations.platformPrefix}.delete_cancel_button`),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          await config.platformOperations.delete(platform);\r\n          await this.loadPlatforms();\r\n          m.redraw();\r\n          \r\n          app.alerts.show(\r\n            { type: 'success', dismissible: true },\r\n            app.translator.trans(`${config.translations.platformPrefix}.delete_success`)\r\n          );\r\n        } catch (error) {\r\n          console.error('Error deleting platform:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans(`${config.translations.platformPrefix}.delete_error`)\r\n          );\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Generic transaction management methods\r\n  protected async updateTransactionStatus(transaction: TTransaction, status: string): Promise<void> {\r\n    const config = this.getConfig();\r\n    if (!config.transactionOperations) return;\r\n\r\n    try {\r\n      await config.transactionOperations.updateStatus(transaction, status);\r\n      await this.loadTransactions();\r\n      \r\n      const prefix = config.translations.transactionPrefix || config.translations.platformPrefix;\r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`${prefix}.${status}_success`)\r\n      );\r\n    } catch (error) {\r\n      console.error('Error updating transaction:', error);\r\n      const prefix = config.translations.transactionPrefix || config.translations.platformPrefix;\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans(`${prefix}.update_error`)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Data loading methods\r\n  protected async loadData(): Promise<void> {\r\n    try {\r\n      await this.loadPlatforms();\r\n      if (this.getConfig().transactionOperations) {\r\n        await this.loadTransactions();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n    } finally {\r\n      this.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  protected async loadPlatforms(): Promise<void> {\r\n    const config = this.getConfig();\r\n    try {\r\n      this.platforms = await config.platformOperations.load();\r\n      console.log('Loaded platforms:', this.platforms);\r\n    } catch (error) {\r\n      console.error('Error loading platforms:', error);\r\n      this.platforms = [];\r\n    }\r\n  }\r\n\r\n  protected async loadTransactions(): Promise<void> {\r\n    const config = this.getConfig();\r\n    if (!config.transactionOperations) return;\r\n\r\n    try {\r\n      this.transactions = await config.transactionOperations.load();\r\n      console.log('Loaded transactions:', this.transactions);\r\n    } catch (error) {\r\n      console.error('Error loading transactions:', error);\r\n      this.transactions = [];\r\n    }\r\n  }\r\n\r\n  // Settings management\r\n  protected async saveSetting(key: string, value: string): Promise<void> {\r\n    try {\r\n      await app.request({\r\n        method: 'POST',\r\n        url: app.forum.attribute('apiUrl') + '/settings',\r\n        body: { [key]: value }\r\n      });\r\n      \r\n      // Update the forum attribute immediately so the UI reflects the change\r\n      app.forum.pushAttributes({ [key]: value });\r\n      \r\n    } catch (error) {\r\n      console.error('Error saving setting:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        'Failed to save setting'\r\n      );\r\n    }\r\n  }\r\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport type Mithril from 'mithril';\n\nexport interface GeneralSettingsSectionAttrs {\n  onSettingChange: (key: string, value: string) => void;\n}\n\nexport default class GeneralSettingsSection extends Component<GeneralSettingsSectionAttrs> {\n  view(): Mithril.Children {\n    return (\n      <div className=\"WithdrawalManagementPage-section\">\n        <h3>General Settings</h3>\n        \n        <div className=\"Form\">\n          <div className=\"Form-group\">\n            <label>{app.translator.trans('withdrawal.admin.settings.money_icon_url')}</label>\n            <input\n              type=\"url\"\n              className=\"FormControl\"\n              placeholder=\"https://i.mji.rip/2025/08/28/cd18932c68e9bbee9502b1fb6317cba9.png\"\n              value={app.forum.attribute('wusong8899-withdrawal.moneyIconUrl') || ''}\n              oninput={withAttr('value', (value: string) => \n                this.attrs.onSettingChange('wusong8899-withdrawal.moneyIconUrl', value)\n              )}\n            />\n            <small className=\"helpText\">{app.translator.trans('withdrawal.admin.settings.money_icon_url_help')}</small>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import app from 'flarum/common/app';\r\n\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n}\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  firstErrorMessage?: string;\r\n}\r\n\r\n/**\r\n * 通用表单验证工具\r\n * 统一提款和存款平台表单的验证逻辑\r\n */\r\nexport class FormValidator {\r\n  private errors: ValidationError[] = [];\r\n\r\n  /**\r\n   * 验证必填字段\r\n   */\r\n  required(value: any, fieldName: string, displayName?: string): this {\r\n    if (!value || (typeof value === 'string' && value.trim() === '')) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message: `${displayName || fieldName} is required`\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证最小长度\r\n   */\r\n  minLength(value: string, minLength: number, fieldName: string, displayName?: string): this {\r\n    if (value && value.length < minLength) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message: `${displayName || fieldName} must be at least ${minLength} characters`\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证数字范围\r\n   */\r\n  numberRange(value: string | number, min?: number, max?: number, fieldName?: string, displayName?: string): this {\r\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\r\n    \r\n    if (isNaN(numValue)) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be a valid number`\r\n      });\r\n      return this;\r\n    }\r\n\r\n    if (min !== undefined && numValue < min) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be at least ${min}`\r\n      });\r\n    }\r\n\r\n    if (max !== undefined && numValue > max) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be at most ${max}`\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证URL格式\r\n   */\r\n  url(value: string, fieldName: string, displayName?: string): this {\r\n    if (value && value.trim()) {\r\n      try {\r\n        const _url = new URL(value);\r\n        // URL is valid, no action needed\r\n        void _url; // Explicit void to indicate we don't need the result\r\n      } catch {\r\n        this.errors.push({\r\n          field: fieldName,\r\n          message: `${displayName || fieldName} must be a valid URL`\r\n        });\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 自定义验证规则\r\n   */\r\n  custom(condition: boolean, fieldName: string, message: string): this {\r\n    if (!condition) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 获取验证结果\r\n   */\r\n  getResult(): ValidationResult {\r\n    const isValid = this.errors.length === 0;\r\n    return {\r\n      isValid,\r\n      errors: this.errors,\r\n      firstErrorMessage: this.errors.length > 0 ? this.errors[0].message : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重置验证状态\r\n   */\r\n  reset(): this {\r\n    this.errors = [];\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * 提款平台表单验证\r\n */\r\nexport function validateWithdrawalPlatform(data: {\r\n  name: string;\r\n  symbol: string;\r\n  network?: string;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  fee: string;\r\n  iconUrl?: string;\r\n}): ValidationResult {\r\n  const validator = new FormValidator();\r\n\r\n  validator\r\n    .required(data.name, 'name', 'Platform Name')\r\n    .required(data.symbol, 'symbol', 'Currency Symbol')\r\n    .minLength(data.symbol, 1, 'symbol', 'Currency Symbol')\r\n    .numberRange(data.minAmount, 0, undefined, 'minAmount', 'Minimum Amount')\r\n    .numberRange(data.fee, 0, undefined, 'fee', 'Fee');\r\n\r\n  if (data.maxAmount) {\r\n    validator.numberRange(data.maxAmount, parseFloat(data.minAmount) || 0, undefined, 'maxAmount', 'Maximum Amount');\r\n  }\r\n\r\n  if (data.iconUrl) {\r\n    validator.url(data.iconUrl, 'iconUrl', 'Icon URL');\r\n  }\r\n\r\n  return validator.getResult();\r\n}\r\n\r\n/**\r\n * 存款平台表单验证\r\n */\r\nexport function validateDepositPlatform(data: {\r\n  name: string;\r\n  symbol: string;\r\n  network?: string;\r\n  address: string;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  qrCodeImageUrl?: string;\r\n  iconUrl?: string;\r\n}): ValidationResult {\r\n  const validator = new FormValidator();\r\n\r\n  validator\r\n    .required(data.name, 'name', 'Platform Name')\r\n    .required(data.symbol, 'symbol', 'Currency Symbol')\r\n    .required(data.address, 'address', 'Deposit Address')\r\n    .minLength(data.symbol, 1, 'symbol', 'Currency Symbol')\r\n    .minLength(data.address, 10, 'address', 'Deposit Address');\r\n\r\n  if (data.minAmount) {\r\n    validator.numberRange(data.minAmount, 0, undefined, 'minAmount', 'Minimum Amount');\r\n  }\r\n\r\n  if (data.maxAmount) {\r\n    const minAmountNum = parseFloat(data.minAmount) || 0;\r\n    validator.numberRange(data.maxAmount, minAmountNum, undefined, 'maxAmount', 'Maximum Amount');\r\n  }\r\n\r\n  if (data.qrCodeImageUrl) {\r\n    validator.url(data.qrCodeImageUrl, 'qrCodeImageUrl', 'QR Code Image URL');\r\n  }\r\n\r\n  if (data.iconUrl) {\r\n    validator.url(data.iconUrl, 'iconUrl', 'Icon URL');\r\n  }\r\n\r\n  return validator.getResult();\r\n}\r\n\r\n/**\r\n * 显示验证错误警告\r\n */\r\nexport function showValidationErrors(result: ValidationResult): void {\r\n  if (!result.isValid && result.firstErrorMessage) {\r\n    app.alerts.show(\r\n      { type: 'error', dismissible: true },\r\n      result.firstErrorMessage\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * 网络类型验证\r\n */\r\nexport function validateNetworkType(data: {\r\n  name: string;\r\n  code: string;\r\n  description?: string;\r\n  iconUrl?: string;\r\n  sortOrder?: string;\r\n}): ValidationResult {\r\n  const validator = new FormValidator();\r\n\r\n  validator\r\n    .required(data.name, 'name', 'Network Name')\r\n    .required(data.code, 'code', 'Network Code')\r\n    .minLength(data.code, 1, 'code', 'Network Code');\r\n\r\n  if (data.sortOrder) {\r\n    validator.numberRange(data.sortOrder, 0, 999, 'sortOrder', 'Sort Order');\r\n  }\r\n\r\n  if (data.iconUrl) {\r\n    validator.url(data.iconUrl, 'iconUrl', 'Icon URL');\r\n  }\r\n\r\n  return validator.getResult();\r\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport Stream from 'flarum/common/utils/Stream';\nimport type Mithril from 'mithril';\nimport { PlatformFormData } from '../types/AdminTypes';\nimport { FormValidator } from '../../../common/utils/formValidators';\nimport m from 'mithril';\n\nexport interface AddPlatformFormAttrs {\n  onSubmit: (formData: PlatformFormData) => Promise<void>;\n  submitting: boolean;\n}\n\nexport default class AddPlatformForm extends Component<AddPlatformFormAttrs> {\n  private name = Stream('');\n  private symbol = Stream('');\n  private network = Stream('');\n  private minAmount = Stream('');\n  private maxAmount = Stream('');\n  private fee = Stream('');\n  private iconUrl = Stream('');\n  private iconClass = Stream('');\n\n  view(): Mithril.Children {\n    return (\n      <div className=\"WithdrawalManagementPage-addPlatform\">\n        <div className=\"Form-group\">\n          <div className=\"Form-row\">\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.name')}</label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder={app.translator.trans('withdrawal.admin.platforms.add_placeholder')}\n                bidi={this.name}\n              />\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.symbol')}</label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"BTC, ETH, USDT...\"\n                bidi={this.symbol}\n              />\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.network')}</label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"TRC20, ERC20, BSC... (optional)\"\n                bidi={this.network}\n              />\n              <small className=\"helpText\">{app.translator.trans('withdrawal.admin.platforms.network_help')}</small>\n            </div>\n          </div>\n          \n          <div className=\"Form-row\">\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.min_amount')}</label>\n              <input\n                type=\"number\"\n                step=\"0.00000001\"\n                className=\"FormControl\"\n                placeholder=\"0.001\"\n                bidi={this.minAmount}\n              />\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.max_amount')}</label>\n              <input\n                type=\"number\"\n                step=\"0.00000001\"\n                className=\"FormControl\"\n                placeholder=\"10.0\"\n                bidi={this.maxAmount}\n              />\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.fee')}</label>\n              <input\n                type=\"number\"\n                step=\"0.00000001\"\n                className=\"FormControl\"\n                placeholder=\"0.0005\"\n                bidi={this.fee}\n              />\n            </div>\n          </div>\n          \n          <div className=\"Form-row\">\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.icon_url')}</label>\n              <input\n                type=\"url\"\n                className=\"FormControl\"\n                placeholder=\"https://example.com/icon.png\"\n                bidi={this.iconUrl}\n              />\n              <small className=\"helpText\">{app.translator.trans('withdrawal.admin.platforms.icon_url_help')}</small>\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.icon_class')}</label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"fas fa-coins\"\n                bidi={this.iconClass}\n              />\n              <small className=\"helpText\">{app.translator.trans('withdrawal.admin.platforms.icon_class_help')}</small>\n            </div>\n          </div>\n          \n          <div className=\"Form-group\">\n            <Button\n              className=\"Button Button--primary\"\n              loading={this.attrs.submitting}\n              disabled={this.attrs.submitting}\n              onclick={this.handleSubmit.bind(this)}\n            >\n              {app.translator.trans('withdrawal.admin.platforms.add_button')}\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private validateForm(): boolean {\n    const validator = new FormValidator();\n    \n    try {\n      validator\n        .required(this.name(), 'name', app.translator.trans('withdrawal.admin.platforms.name'))\n        .required(this.symbol(), 'symbol', app.translator.trans('withdrawal.admin.platforms.symbol'))\n        .numberRange(this.minAmount(), 0, undefined, 'minAmount', app.translator.trans('withdrawal.admin.platforms.min_amount'))\n        .numberRange(this.maxAmount(), 0, undefined, 'maxAmount', app.translator.trans('withdrawal.admin.platforms.max_amount'))\n        .numberRange(this.fee(), 0, undefined, 'fee', app.translator.trans('withdrawal.admin.platforms.fee'));\n\n      // Custom validation for max >= min\n      const minVal = parseFloat(this.minAmount());\n      const maxVal = parseFloat(this.maxAmount());\n      if (maxVal < minVal) {\n        validator.addError('maxAmount', app.translator.trans('withdrawal.admin.platforms.max_min_error'));\n      }\n\n      // Optional URL validation\n      if (this.iconUrl() && this.iconUrl().trim()) {\n        validator.url(this.iconUrl(), 'iconUrl', app.translator.trans('withdrawal.admin.platforms.icon_url'));\n      }\n\n      return validator.isValid();\n    } catch (error) {\n      if (error instanceof Error) {\n        app.alerts.show({ type: 'error', dismissible: true }, error.message);\n      }\n      return false;\n    }\n  }\n\n  private async handleSubmit(): Promise<void> {\n    if (this.attrs.submitting) return;\n\n    if (!this.validateForm()) return;\n\n    const formData: PlatformFormData = {\n      name: this.name(),\n      symbol: this.symbol(),\n      network: this.network(),\n      minAmount: this.minAmount(),\n      maxAmount: this.maxAmount(),\n      fee: this.fee(),\n      iconUrl: this.iconUrl(),\n      iconClass: this.iconClass()\n    };\n\n    try {\n      await this.attrs.onSubmit(formData);\n      this.clearForm();\n    } catch {\n      // Error handling is done in parent component\n    }\n  }\n\n  private clearForm(): void {\n    this.name('');\n    this.symbol('');\n    this.network('');\n    this.minAmount('');\n    this.maxAmount('');\n    this.fee('');\n    this.iconUrl('');\n    this.iconClass('');\n    m.redraw();\n  }\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Switch from 'flarum/common/components/Switch';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\n\r\n// Generic platform interface that can represent both withdrawal and deposit platforms\r\ninterface GenericPlatform {\r\n  id?: () => string | number;\r\n  name?: () => string;\r\n  symbol?: () => string;\r\n  network?: () => string;\r\n  displayName?: () => string;\r\n  minAmount?: () => number;\r\n  maxAmount?: () => number;\r\n  fee?: () => number;\r\n  address?: () => string;\r\n  iconUrl?: () => string;\r\n  iconClass?: () => string;\r\n  isActive?: () => boolean;\r\n  createdAt?: () => Date;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface GenericPlatformListItemAttrs {\r\n  platform: GenericPlatform;\r\n  type: 'withdrawal' | 'deposit';\r\n  onToggleStatus: (platform?: GenericPlatform) => Promise<void>;\r\n  onDelete: (platform?: GenericPlatform) => Promise<void>;\r\n  style?: 'card' | 'list';\r\n}\r\n\r\nexport default class GenericPlatformListItem extends Component<GenericPlatformListItemAttrs> {\r\n  view(vnode: Mithril.Vnode<GenericPlatformListItemAttrs>): Mithril.Children {\r\n    const { platform, type, onToggleStatus, onDelete, style = 'card' } = vnode.attrs;\r\n\r\n    if (style === 'card') {\r\n      return this.renderCardStyle(platform, type, onToggleStatus, onDelete);\r\n    } else {\r\n      return this.renderListStyle(platform, type, onToggleStatus, onDelete);\r\n    }\r\n  }\r\n\r\n  private renderCardStyle(\r\n    platform: GenericPlatform,\r\n    type: string,\r\n    onToggleStatus: (platform?: GenericPlatform) => Promise<void>,\r\n    onDelete: (platform?: GenericPlatform) => Promise<void>\r\n  ): Mithril.Children {\r\n    const platformData = this.extractPlatformData(platform);\r\n    const translationPrefix = type === 'withdrawal' ? 'withdrawal.admin.platforms' : 'withdrawal.admin.deposit.platforms';\r\n\r\n    return (\r\n      <div key={platformData.id} className={`${type}Platform`}>\r\n        <div className={`${type}Platform-info`}>\r\n          <div className={`${type}Platform-primary`}>\r\n            <span className={`${type}Platform-status ${platformData.isActive ? 'active' : 'inactive'}`}>\r\n              {platformData.isActive ? '🟢' : '🔴'}\r\n            </span>\r\n            <span className={`${type}Platform-name`}>{platformData.displayName}</span>\r\n            <span className=\"platform-id\">#{platformData.id}</span>\r\n            {platformData.network && <span className={`${type}Platform-network`}>({platformData.network})</span>}\r\n          </div>\r\n          <div className={`${type}Platform-details`}>\r\n            <span className={`${type}Platform-amounts`}>\r\n              Min: {platformData.minAmount} | Max: {platformData.maxAmount}\r\n              {type === 'withdrawal' && ` | Fee: ${platformData.fee}`}\r\n              {type === 'deposit' && ` | Address: ${platformData.address ? 'Static' : 'Template'}`}\r\n            </span>\r\n            {platformData.createdDate && (\r\n              <span className={`${type}Platform-date`}>{platformData.dateDisplay}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className={`${type}Platform-actions`}>\r\n          <Button\r\n            className={`Button ${platformData.isActive ? 'Button--secondary' : 'Button--primary'}`}\r\n            onclick={() => onToggleStatus(platform)}\r\n          >\r\n            {app.translator.trans(`${translationPrefix}.${platformData.isActive ? 'disable' : 'enable'}`)}\r\n          </Button>\r\n          <Button\r\n            className=\"Button Button--danger\"\r\n            onclick={() => onDelete(platform)}\r\n          >\r\n            {app.translator.trans(`${translationPrefix}.delete`)}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderListStyle(\r\n    platform: GenericPlatform,\r\n    type: string,\r\n    onToggleStatus: (platform?: GenericPlatform) => Promise<void>,\r\n    onDelete: (platform?: GenericPlatform) => Promise<void>\r\n  ): Mithril.Children {\r\n    const platformData = this.extractPlatformData(platform);\r\n    const translationPrefix = type === 'withdrawal' ? 'withdrawal.admin.platforms' : 'withdrawal.admin.deposit.platforms';\r\n\r\n    return (\r\n      <div className={`${type}PlatformListItem`}>\r\n        <div className={`${type}PlatformListItem-content`}>\r\n          <div className={`${type}PlatformListItem-icon`}>\r\n            {this.renderPlatformIcon(platform)}\r\n          </div>\r\n          \r\n          <div className={`${type}PlatformListItem-info`}>\r\n            <div className={`${type}PlatformListItem-primary`}>\r\n              <strong>{platformData.name}</strong>\r\n              <span className={`${type}PlatformListItem-displayName`}>\r\n                {platformData.symbol}\r\n                {platformData.network && ` (${platformData.network})`}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className={`${type}PlatformListItem-details`}>\r\n              <span className={`${type}PlatformListItem-detail`}>\r\n                Min: {platformData.minAmount} {platformData.symbol}\r\n              </span>\r\n              {platformData.maxAmount && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Max: {platformData.maxAmount} {platformData.symbol}\r\n                </span>\r\n              )}\r\n              {type === 'withdrawal' && platformData.fee && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Fee: {platformData.fee} {platformData.symbol}\r\n                </span>\r\n              )}\r\n              {type === 'deposit' && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Address: {platformData.address ? 'Static' : 'Template'}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className={`${type}PlatformListItem-actions`}>\r\n            <Switch \r\n              state={platformData.isActive} \r\n              onchange={async () => {\r\n                await onToggleStatus(platform);\r\n                m.redraw();\r\n              }}\r\n            >\r\n              {platformData.isActive \r\n                ? app.translator.trans(`${translationPrefix}.active`)\r\n                : app.translator.trans(`${translationPrefix}.inactive`)\r\n              }\r\n            </Switch>\r\n            \r\n            <Button\r\n              className=\"Button Button--icon Button--flat\"\r\n              icon=\"fas fa-trash\"\r\n              onclick={async () => {\r\n                await onDelete(platform);\r\n                m.redraw();\r\n              }}\r\n              title={app.translator.trans(`${translationPrefix}.delete`)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private extractPlatformData(platform: GenericPlatform) {\r\n    // Handle both Model instances and plain objects\r\n    const id = typeof platform.id === 'function' ? platform.id() : platform.id;\r\n    const name = (typeof platform.name === 'function' ? platform.name() : platform.attributes?.name) || 'Unknown Platform';\r\n    const symbol = (typeof platform.symbol === 'function' ? platform.symbol() : platform.attributes?.symbol) || '';\r\n    const network = (typeof platform.network === 'function' ? platform.network() : platform.attributes?.network) || null;\r\n    const displayName = (typeof platform.displayName === 'function' ? platform.displayName() : platform.attributes?.displayName) || name;\r\n    const minAmount = (typeof platform.minAmount === 'function' ? platform.minAmount() : platform.attributes?.minAmount) || 'N/A';\r\n    const maxAmount = (typeof platform.maxAmount === 'function' ? platform.maxAmount() : platform.attributes?.maxAmount) || 'N/A';\r\n    const fee = (typeof platform.fee === 'function' ? platform.fee() : platform.attributes?.fee) || 'N/A';\r\n    const address = (typeof platform.address === 'function' ? platform.address() : platform.attributes?.address) || null;\r\n    const isActive = (typeof platform.isActive === 'function' ? platform.isActive() : platform.attributes?.isActive) ?? false;\r\n    const createdDate = (typeof platform.createdAt === 'function' ? platform.createdAt() : platform.attributes?.createdAt) || null;\r\n    \r\n    let dateDisplay: Mithril.Children = 'N/A';\r\n    if (createdDate) {\r\n      try {\r\n        dateDisplay = humanTime(createdDate);\r\n      } catch (e) {\r\n        console.error('Error formatting date:', e);\r\n        dateDisplay = 'Invalid Date';\r\n      }\r\n    }\r\n\r\n    return {\r\n      id,\r\n      name,\r\n      symbol,\r\n      network,\r\n      displayName,\r\n      minAmount,\r\n      maxAmount,\r\n      fee,\r\n      address,\r\n      isActive,\r\n      createdDate,\r\n      dateDisplay\r\n    };\r\n  }\r\n\r\n  private renderPlatformIcon(platform: GenericPlatform): Mithril.Children {\r\n    const iconUrl = typeof platform.iconUrl === 'function' ? platform.iconUrl() : platform.attributes?.iconUrl;\r\n    const iconClass = typeof platform.iconClass === 'function' ? platform.iconClass() : platform.attributes?.iconClass;\r\n    const symbol = typeof platform.symbol === 'function' ? platform.symbol() : platform.attributes?.symbol;\r\n\r\n    if (iconUrl) {\r\n      return <img src={iconUrl} alt={symbol} className=\"PlatformListItem-img\" />;\r\n    }\r\n\r\n    if (iconClass) {\r\n      return icon(iconClass);\r\n    }\r\n\r\n    // Default currency icons - now uses generic class names that work for both types\r\n    switch (symbol) {\r\n      case 'USDT':\r\n        return <span className=\"PlatformListItem-currencyIcon usdt\">₮</span>;\r\n      case 'USDC':\r\n        return <span className=\"PlatformListItem-currencyIcon usdc\">$</span>;\r\n      case 'BTC':\r\n        return <span className=\"PlatformListItem-currencyIcon btc\">₿</span>;\r\n      case 'ETH':\r\n        return <span className=\"PlatformListItem-currencyIcon eth\">Ξ</span>;\r\n      default:\r\n        return icon('fas fa-coins');\r\n    }\r\n  }\r\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\nimport { WithdrawalPlatform, PlatformFormData } from '../types/AdminTypes';\nimport AddPlatformForm from '../forms/AddPlatformForm';\nimport GenericPlatformListItem from '../shared/GenericPlatformListItem';\n\nexport interface PlatformManagementSectionAttrs {\n  platforms: WithdrawalPlatform[];\n  submittingPlatform: boolean;\n  onAddPlatform: (formData: PlatformFormData) => Promise<void>;\n  onTogglePlatformStatus: (platform: WithdrawalPlatform) => Promise<void>;\n  onDeletePlatform: (platform: WithdrawalPlatform) => void;\n}\n\nexport default class PlatformManagementSection extends Component<PlatformManagementSectionAttrs> {\n  view(): Mithril.Children {\n    const { platforms, submittingPlatform, onAddPlatform, onTogglePlatformStatus, onDeletePlatform } = this.attrs;\n\n    return (\n      <div className=\"WithdrawalManagementPage-section\">\n        <h3>{app.translator.trans('withdrawal.admin.platforms.title')}</h3>\n        \n        <AddPlatformForm \n          onSubmit={onAddPlatform}\n          submitting={submittingPlatform}\n        />\n\n        <div className=\"WithdrawalManagementPage-platformList\">\n          {platforms.length === 0 ? (\n            <p>{app.translator.trans('withdrawal.admin.platforms.empty')}</p>\n          ) : (\n            platforms.map((platform) => (\n              <GenericPlatformListItem\n                key={typeof platform.id === 'function' ? platform.id() : platform.id}\n                platform={platform}\n                type=\"withdrawal\"\n                style=\"card\"\n                onToggleStatus={onTogglePlatformStatus}\n                onDelete={onDeletePlatform}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport humanTime from 'flarum/common/helpers/humanTime';\nimport type Mithril from 'mithril';\nimport { WithdrawalRequest } from '../types/AdminTypes';\n\nexport interface WithdrawalRequestItemAttrs {\n  request: WithdrawalRequest;\n  showActions: boolean;\n  showDelete?: boolean;\n  onUpdateStatus?: (request: WithdrawalRequest, status: string) => Promise<void>;\n  onDelete?: (request: WithdrawalRequest) => void;\n}\n\nexport default class WithdrawalRequestItem extends Component<WithdrawalRequestItemAttrs> {\n  view(): Mithril.Children {\n    const request = this.attrs.request;\n    const { showActions, showDelete = false } = this.attrs;\n    \n    // Handle Flarum Model instances\n    const requestId = typeof request.id === 'function' ? request.id() : request.id;\n    const amount = typeof request.amount === 'function' ? request.amount() : (request.attributes?.amount || 0);\n    const status = typeof request.status === 'function' ? request.status() : (request.attributes?.status || 'pending');\n    const accountDetails = typeof request.accountDetails === 'function' ? request.accountDetails() : \n      (request.attributes?.accountDetails || request.attributes?.account_details || 'N/A');\n    const createdDate = typeof request.createdAt === 'function' ? request.createdAt() : (request.attributes?.createdAt || null);\n    \n    // Get user info\n    let userName = 'Unknown User';\n    if (typeof request.user === 'function') {\n      const userData = request.user();\n      if (userData && typeof userData.displayName === 'function') {\n        userName = userData.displayName();\n      } else if (userData && userData.attributes?.displayName) {\n        userName = userData.attributes.displayName;\n      }\n    }\n    \n    // Get platform info - simplified approach using Flarum Model relationships\n    let platformName = 'Unknown Platform';\n    let platformSymbol = 'N/A';\n    \n    if (typeof request.platform === 'function') {\n      const platform = request.platform();\n      if (platform) {\n        platformName = typeof platform.name === 'function' ? platform.name() : (platform.attributes?.name || 'Unknown Platform');\n        platformSymbol = typeof platform.symbol === 'function' ? platform.symbol() : (platform.attributes?.symbol || 'N/A');\n      }\n    }\n    \n    const statusClass = `status-${status}`;\n    \n    let dateDisplay: Mithril.Children = 'N/A';\n    if (createdDate) {\n      try {\n        dateDisplay = humanTime(createdDate);\n      } catch (e) {\n        console.error('Error formatting request date:', e);\n        dateDisplay = 'Invalid Date';\n      }\n    }\n\n    return (\n      <div key={requestId} className={`WithdrawalRequest ${statusClass}`}>\n        <div className=\"WithdrawalRequest-info\">\n          <div className=\"WithdrawalRequest-user\">\n            <strong>{userName}</strong>\n            <span className=\"request-id\">#{requestId}</span>\n          </div>\n          <div className=\"WithdrawalRequest-details\">\n            <span className=\"amount\">{amount}</span>\n            <span className=\"platform\">{platformName}</span>\n            <span className=\"symbol\">{platformSymbol}</span>\n            <span className=\"date\">{dateDisplay}</span>\n          </div>\n          <div className=\"WithdrawalRequest-account\">\n            <strong>{app.translator.trans('withdrawal.admin.requests.account_details')}:</strong>\n            <span>{accountDetails}</span>\n          </div>\n          <div className=\"WithdrawalRequest-status\">\n            <span className={`Badge Badge--${status}`}>\n              {app.translator.trans(`withdrawal.admin.requests.status.${status}`)}\n            </span>\n          </div>\n        </div>\n        \n        {(showActions || showDelete) && (\n          <div className=\"WithdrawalRequest-actions\">\n            {showActions && this.attrs.onUpdateStatus && (\n              <>\n                <Button\n                  className=\"Button Button--primary\"\n                  onclick={() => this.attrs.onUpdateStatus!(request, 'approved')}\n                >\n                  {app.translator.trans('withdrawal.admin.requests.approve')}\n                </Button>\n                <Button\n                  className=\"Button Button--danger\"\n                  onclick={() => this.attrs.onUpdateStatus!(request, 'rejected')}\n                >\n                  {app.translator.trans('withdrawal.admin.requests.reject')}\n                </Button>\n              </>\n            )}\n            {this.attrs.onDelete && (\n              <Button\n                className=\"Button Button--link\"\n                onclick={() => this.attrs.onDelete!(request)}\n              >\n                <i className=\"fas fa-trash\"></i>\n                {app.translator.trans('withdrawal.admin.requests.delete')}\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\nimport { WithdrawalRequest } from '../types/AdminTypes';\nimport WithdrawalRequestItem from '../items/WithdrawalRequestItem';\n\nexport interface RequestManagementSectionAttrs {\n  requests: WithdrawalRequest[];\n  onUpdateRequestStatus: (request: WithdrawalRequest, status: string) => Promise<void>;\n  onDeleteRequest: (request: WithdrawalRequest) => void;\n}\n\nexport default class RequestManagementSection extends Component<RequestManagementSectionAttrs> {\n  view(): Mithril.Children {\n    const { requests, onUpdateRequestStatus, onDeleteRequest } = this.attrs;\n\n    const pendingRequests = requests.filter(r => {\n      const status = (typeof r.status === 'function' ? r.status() : r.attributes?.status) || 'pending';\n      return status === 'pending';\n    });\n    \n    const processedRequests = requests.filter(r => {\n      const status = (typeof r.status === 'function' ? r.status() : r.attributes?.status) || 'pending';\n      return status !== 'pending';\n    });\n\n    return (\n      <div className=\"WithdrawalManagementPage-section\">\n        <h3>{app.translator.trans('withdrawal.admin.requests.title')}</h3>\n        \n        <div className=\"WithdrawalManagementPage-pendingRequests\">\n          <h4>{app.translator.trans('withdrawal.admin.requests.pending_title')}</h4>\n          {pendingRequests.length === 0 ? (\n            <p>{app.translator.trans('withdrawal.admin.requests.no_pending')}</p>\n          ) : (\n            pendingRequests.map((request) => (\n              <WithdrawalRequestItem\n                key={typeof request.id === 'function' ? request.id() : request.id}\n                request={request}\n                showActions={true}\n                showDelete={true}\n                onUpdateStatus={onUpdateRequestStatus}\n                onDelete={onDeleteRequest}\n              />\n            ))\n          )}\n        </div>\n\n        <div className=\"WithdrawalManagementPage-processedRequests\">\n          <h4>{app.translator.trans('withdrawal.admin.requests.processed_title')}</h4>\n          {processedRequests.length === 0 ? (\n            <p>{app.translator.trans('withdrawal.admin.requests.no_processed')}</p>\n          ) : (\n            processedRequests.map((request) => (\n              <WithdrawalRequestItem\n                key={typeof request.id === 'function' ? request.id() : request.id}\n                request={request}\n                showActions={false}\n                showDelete={true}\n                onDelete={onDeleteRequest}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Switch from 'flarum/common/components/Switch';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport withAttr from 'flarum/common/utils/withAttr';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport NetworkType from '../../../common/models/NetworkType';\r\nimport { FormValidator } from '../../../common/utils/formValidators';\r\n\r\nexport interface DepositPlatformFormData {\r\n  name: string;\r\n  symbol: string;\r\n  network: string;\r\n  networkTypeId: number | null;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  address: string;\r\n  qrCodeImageUrl: string;\r\n  iconUrl: string;\r\n  iconClass: string;\r\n  warningText: string;\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface AddDepositPlatformFormAttrs {\r\n  submitting: boolean;\r\n  onSubmit: (formData: DepositPlatformFormData) => Promise<void>;\r\n  onCancel: () => void;\r\n}\r\n\r\nexport default class AddDepositPlatformForm extends Component<AddDepositPlatformFormAttrs> {\r\n  private formData = {\r\n    name: Stream(''),\r\n    symbol: Stream(''),\r\n    network: Stream(''),\r\n    networkTypeId: Stream<number | null>(null),\r\n    minAmount: Stream(''),\r\n    maxAmount: Stream(''),\r\n    address: Stream(''),\r\n    qrCodeImageUrl: Stream(''),\r\n    iconUrl: Stream(''),\r\n    iconClass: Stream(''),\r\n    warningText: Stream(''),\r\n    isActive: Stream(true)\r\n  };\r\n  \r\n  private networkTypes: NetworkType[] = [];\r\n  private loadingNetworkTypes = false;\r\n\r\n  oninit(vnode: Mithril.Vnode<AddDepositPlatformFormAttrs>) {\r\n    super.oninit(vnode);\r\n    this.loadNetworkTypes();\r\n  }\r\n\r\n  view(vnode: Mithril.Vnode<AddDepositPlatformFormAttrs>) {\r\n    const { submitting, onCancel } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"AddDepositPlatformForm\">\r\n        <div className=\"Form\">\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.name')}\r\n                <span className=\"Form-required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"e.g., Tether\"\r\n                bidi={this.formData.name}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.symbol')}\r\n                <span className=\"Form-required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"e.g., USDT\"\r\n                bidi={this.formData.symbol}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.network')}\r\n              </label>\r\n              <select\r\n                className=\"FormControl\"\r\n                value={this.formData.networkTypeId() || ''}\r\n                onchange={withAttr('value', (value: string) => {\r\n                  const networkTypeId = value ? parseInt(value) : null;\r\n                  this.formData.networkTypeId(networkTypeId);\r\n                  \r\n                  // Auto-fill network field based on selected network type\r\n                  if (networkTypeId) {\r\n                    const networkType = this.networkTypes.find(nt => nt.id() === networkTypeId);\r\n                    if (networkType) {\r\n                      this.formData.network(networkType.code());\r\n                    }\r\n                  } else {\r\n                    this.formData.network('');\r\n                  }\r\n                })}\r\n                disabled={submitting || this.loadingNetworkTypes}\r\n              >\r\n                <option value=\"\">{this.loadingNetworkTypes ? 'Loading...' : 'Select Network Type (Optional)'}</option>\r\n                {this.networkTypes.map(networkType => (\r\n                  <option key={networkType.id()} value={networkType.id()}>\r\n                    {networkType.name()}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            \r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.custom_network')}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"Custom network name (if not using predefined)\"\r\n                bidi={this.formData.network}\r\n                disabled={submitting}\r\n              />\r\n              <div className=\"helpText\">\r\n                Leave empty to use the selected network type above, or enter a custom network name.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.min_amount')}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                min=\"0\"\r\n                className=\"FormControl\"\r\n                placeholder=\"0.0\"\r\n                bidi={this.formData.minAmount}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.max_amount')}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                min=\"0\"\r\n                className=\"FormControl\"\r\n                placeholder=\"Leave empty for unlimited\"\r\n                bidi={this.formData.maxAmount}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.address')}\r\n              <span className=\"Form-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"FormControl\"\r\n              placeholder=\"Enter deposit address for this platform\"\r\n              bidi={this.formData.address}\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"helpText\">\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.address_help')}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.qr_code_image_url')}\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              className=\"FormControl\"\r\n              placeholder=\"https://example.com/qr-code.png\"\r\n              bidi={this.formData.qrCodeImageUrl}\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"helpText\">\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.qr_code_image_help')}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.icon_url')}\r\n              </label>\r\n              <input\r\n                type=\"url\"\r\n                className=\"FormControl\"\r\n                placeholder=\"https://example.com/icon.png\"\r\n                bidi={this.formData.iconUrl}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.icon_class')}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"fas fa-coins\"\r\n                bidi={this.formData.iconClass}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.warning_text')}\r\n            </label>\r\n            <textarea\r\n              className=\"FormControl\"\r\n              rows={3}\r\n              placeholder=\"Network-specific warning for users\"\r\n              bidi={this.formData.warningText}\r\n              disabled={submitting}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <Switch state={this.formData.isActive()} onchange={this.formData.isActive} disabled={submitting}>\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.is_active')}\r\n            </Switch>\r\n          </div>\r\n\r\n          <div className=\"Form-actions\">\r\n            <Button\r\n              className=\"Button Button--primary\"\r\n              type=\"submit\"\r\n              loading={submitting}\r\n              onclick={this.handleSubmit.bind(this, vnode.attrs)}\r\n            >\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.add_button')}\r\n            </Button>\r\n            <Button\r\n              className=\"Button\"\r\n              onclick={onCancel}\r\n              disabled={submitting}\r\n            >\r\n              {app.translator.trans('core.admin.basics.cancel_button')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private async loadNetworkTypes(): Promise<void> {\r\n    this.loadingNetworkTypes = true;\r\n    m.redraw();\r\n\r\n    try {\r\n      const response = await app.request({\r\n        method: 'GET',\r\n        url: app.forum.attribute('apiUrl') + '/network-types?filter[is_active]=1',\r\n      });\r\n\r\n      app.store.pushPayload(response);\r\n      this.networkTypes = app.store.all('network-types') as NetworkType[];\r\n    } catch (error) {\r\n      console.error('Failed to load network types:', error);\r\n    } finally {\r\n      this.loadingNetworkTypes = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private validateForm(): boolean {\r\n    const validator = new FormValidator();\r\n    \r\n    try {\r\n      validator\r\n        .required(this.formData.name(), 'name', app.translator.trans('withdrawal.admin.deposit.platforms.name'))\r\n        .required(this.formData.symbol(), 'symbol', app.translator.trans('withdrawal.admin.deposit.platforms.symbol'))\r\n        .required(this.formData.address(), 'address', app.translator.trans('withdrawal.admin.deposit.platforms.address'));\r\n\r\n      // Optional numeric fields validation\r\n      if (this.formData.minAmount() && this.formData.minAmount().trim()) {\r\n        validator.numberRange(this.formData.minAmount(), 0, undefined, 'minAmount', app.translator.trans('withdrawal.admin.deposit.platforms.min_amount'));\r\n      }\r\n      \r\n      if (this.formData.maxAmount() && this.formData.maxAmount().trim()) {\r\n        validator.numberRange(this.formData.maxAmount(), 0, undefined, 'maxAmount', app.translator.trans('withdrawal.admin.deposit.platforms.max_amount'));\r\n      }\r\n\r\n      // Custom validation for max >= min if both are provided\r\n      if (this.formData.minAmount() && this.formData.maxAmount()) {\r\n        const minVal = parseFloat(this.formData.minAmount());\r\n        const maxVal = parseFloat(this.formData.maxAmount());\r\n        if (!isNaN(minVal) && !isNaN(maxVal) && maxVal < minVal) {\r\n          validator.custom(false, 'maxAmount', app.translator.trans('withdrawal.admin.platforms.max_min_error'));\r\n        }\r\n      }\r\n\r\n      // Optional URL validations\r\n      if (this.formData.iconUrl() && this.formData.iconUrl().trim()) {\r\n        validator.url(this.formData.iconUrl(), 'iconUrl', app.translator.trans('withdrawal.admin.deposit.platforms.icon_url'));\r\n      }\r\n      \r\n      if (this.formData.qrCodeImageUrl() && this.formData.qrCodeImageUrl().trim()) {\r\n        validator.url(this.formData.qrCodeImageUrl(), 'qrCodeImageUrl', app.translator.trans('withdrawal.admin.deposit.platforms.qr_code_image_url'));\r\n      }\r\n\r\n      const result = validator.getResult();\r\n      \r\n      if (!result.isValid && result.firstErrorMessage) {\r\n        app.alerts.show({ type: 'error', dismissible: true }, result.firstErrorMessage);\r\n      }\r\n\r\n      return result.isValid;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        app.alerts.show({ type: 'error', dismissible: true }, error.message);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async handleSubmit(attrs: AddDepositPlatformFormAttrs): Promise<void> {\r\n    if (attrs.submitting) return;\r\n\r\n    if (!this.validateForm()) return;\r\n\r\n    const formData: DepositPlatformFormData = {\r\n      name: this.formData.name(),\r\n      symbol: this.formData.symbol(),\r\n      network: this.formData.network(),\r\n      networkTypeId: this.formData.networkTypeId(),\r\n      minAmount: this.formData.minAmount(),\r\n      maxAmount: this.formData.maxAmount(),\r\n      address: this.formData.address(),\r\n      qrCodeImageUrl: this.formData.qrCodeImageUrl(),\r\n      iconUrl: this.formData.iconUrl(),\r\n      iconClass: this.formData.iconClass(),\r\n      warningText: this.formData.warningText(),\r\n      isActive: this.formData.isActive()\r\n    };\r\n\r\n    try {\r\n      await attrs.onSubmit(formData);\r\n      \r\n      // Reset form\r\n      Object.keys(this.formData).forEach(key => {\r\n        if (key === 'isActive') {\r\n          this.formData[key](true);\r\n        } else if (key === 'networkTypeId') {\r\n          this.formData[key](null);\r\n        } else {\r\n          this.formData[key]('');\r\n        }\r\n      });\r\n\r\n      attrs.onCancel();\r\n    } catch (error) {\r\n      // Error handling is done in parent component\r\n      console.error('Form submission error:', error);\r\n    }\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport username from 'flarum/common/helpers/username';\r\nimport type Mithril from 'mithril';\r\nimport type { DepositTransaction } from '../types/AdminTypes';\r\n\r\nexport interface DepositTransactionItemAttrs {\r\n  transaction: DepositTransaction;\r\n  showActions: boolean;\r\n  onUpdateStatus: (status: string) => Promise<void>;\r\n}\r\n\r\nexport default class DepositTransactionItem extends Component<DepositTransactionItemAttrs> {\r\n  view(vnode: Mithril.Vnode<DepositTransactionItemAttrs>) {\r\n    const { transaction, showActions, onUpdateStatus } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"DepositTransactionItem\">\r\n        <div className=\"DepositTransactionItem-header\">\r\n          <div className=\"DepositTransactionItem-user\">\r\n            <strong>{username(transaction.user)}</strong>\r\n            <span className=\"DepositTransactionItem-time\">\r\n              {humanTime(transaction.createdAt)}\r\n            </span>\r\n          </div>\r\n          \r\n          <div className=\"DepositTransactionItem-amount\">\r\n            <span className=\"DepositTransactionItem-amountValue\">\r\n              {transaction.amount} {transaction.platform.symbol}\r\n            </span>\r\n            <div className={`DepositTransactionItem-status status-${transaction.statusColor}`}>\r\n              {this.getStatusIcon(transaction.status)}\r\n              {this.getStatusText(transaction.status)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"DepositTransactionItem-details\">\r\n          <div className=\"DepositTransactionItem-platform\">\r\n            <span className=\"DepositTransactionItem-label\">Platform:</span>\r\n            <span>{transaction.platform.name} ({transaction.platform.network})</span>\r\n          </div>\r\n\r\n          {transaction.transactionHash && (\r\n            <div className=\"DepositTransactionItem-hash\">\r\n              <span className=\"DepositTransactionItem-label\">Hash:</span>\r\n              {transaction.explorerUrl ? (\r\n                <a \r\n                  href={transaction.explorerUrl} \r\n                  target=\"_blank\" \r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"DepositTransactionItem-hashLink\"\r\n                >\r\n                  {this.formatHash(transaction.transactionHash)}\r\n                  {icon('fas fa-external-link-alt')}\r\n                </a>\r\n              ) : (\r\n                <span className=\"DepositTransactionItem-hashText\">\r\n                  {this.formatHash(transaction.transactionHash)}\r\n                </span>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {transaction.fromAddress && (\r\n            <div className=\"DepositTransactionItem-fromAddress\">\r\n              <span className=\"DepositTransactionItem-label\">From:</span>\r\n              <span className=\"DepositTransactionItem-address\">\r\n                {this.formatHash(transaction.fromAddress)}\r\n              </span>\r\n            </div>\r\n          )}\r\n\r\n          {transaction.confirmations !== undefined && (\r\n            <div className=\"DepositTransactionItem-confirmations\">\r\n              <span className=\"DepositTransactionItem-label\">Confirmations:</span>\r\n              <span>\r\n                {transaction.confirmations}/{transaction.requiredConfirmations}\r\n                {transaction.hasEnoughConfirmations && \r\n                  <span className=\"DepositTransactionItem-confirmed\"> ✓</span>\r\n                }\r\n              </span>\r\n            </div>\r\n          )}\r\n\r\n          {transaction.adminNotes && (\r\n            <div className=\"DepositTransactionItem-notes\">\r\n              <span className=\"DepositTransactionItem-label\">Notes:</span>\r\n              <span>{transaction.adminNotes}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {showActions && this.renderActions(transaction, onUpdateStatus)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderActions(transaction: DepositTransaction, onUpdateStatus: (status: string) => void): Mithril.Children {\r\n    const actions = [];\r\n\r\n    if (transaction.status === 'pending') {\r\n      actions.push(\r\n        <Button\r\n          key=\"confirm\"\r\n          className=\"Button Button--primary Button--sm\"\r\n          onclick={() => onUpdateStatus('confirmed')}\r\n        >\r\n          {app.translator.trans('withdrawal.admin.deposit.transactions.confirm')}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    if (transaction.status === 'confirmed' && transaction.canBeCompleted) {\r\n      actions.push(\r\n        <Button\r\n          key=\"complete\"\r\n          className=\"Button Button--success Button--sm\"\r\n          onclick={() => onUpdateStatus('completed')}\r\n        >\r\n          {app.translator.trans('withdrawal.admin.deposit.transactions.complete')}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    if (transaction.status === 'pending' || transaction.status === 'confirmed') {\r\n      actions.push(\r\n        <Button\r\n          key=\"reject\"\r\n          className=\"Button Button--danger Button--sm\"\r\n          onclick={() => onUpdateStatus('failed')}\r\n        >\r\n          {app.translator.trans('withdrawal.admin.deposit.transactions.reject')}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return actions.length > 0 ? (\r\n      <div className=\"DepositTransactionItem-actions\">\r\n        {actions}\r\n      </div>\r\n    ) : null;\r\n  }\r\n\r\n  private getStatusIcon(status: string): Mithril.Children {\r\n    switch (status) {\r\n      case 'pending':\r\n        return icon('fas fa-clock');\r\n      case 'confirmed':\r\n        return icon('fas fa-check-circle');\r\n      case 'completed':\r\n        return icon('fas fa-check-double');\r\n      case 'failed':\r\n        return icon('fas fa-times-circle');\r\n      case 'cancelled':\r\n        return icon('fas fa-ban');\r\n      default:\r\n        return icon('fas fa-question-circle');\r\n    }\r\n  }\r\n\r\n  private getStatusText(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return app.translator.trans('withdrawal.admin.deposit.transactions.status.pending');\r\n      case 'confirmed':\r\n        return app.translator.trans('withdrawal.admin.deposit.transactions.status.confirmed');\r\n      case 'completed':\r\n        return app.translator.trans('withdrawal.admin.deposit.transactions.status.completed');\r\n      case 'failed':\r\n        return app.translator.trans('withdrawal.admin.deposit.transactions.status.failed');\r\n      case 'cancelled':\r\n        return app.translator.trans('withdrawal.admin.deposit.transactions.status.cancelled');\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  private formatHash(hash: string): string {\r\n    if (hash.length <= 16) return hash;\r\n    return `${hash.substring(0, 8)}...${hash.substring(hash.length - 8)}`;\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport type Mithril from 'mithril';\r\nimport type DepositPlatform from '../../../common/models/DepositPlatform';\r\nimport type { DepositTransaction } from '../types/AdminTypes';\r\nimport AddDepositPlatformForm from '../forms/AddDepositPlatformForm';\r\nimport GenericPlatformListItem from '../shared/GenericPlatformListItem';\r\nimport DepositTransactionItem from '../items/DepositTransactionItem';\r\n\r\nexport interface DepositManagementSectionAttrs {\r\n  platforms: DepositPlatform[];\r\n  transactions: DepositTransaction[];\r\n  submittingPlatform: boolean;\r\n  onAddPlatform: (formData: any) => Promise<void>;\r\n  onTogglePlatformStatus: (platform: DepositPlatform) => Promise<void>;\r\n  onDeletePlatform: (platform: DepositPlatform) => Promise<void>;\r\n  onUpdateTransactionStatus: (transaction: DepositTransaction, status: string) => Promise<void>;\r\n}\r\n\r\nexport default class DepositManagementSection extends Component<DepositManagementSectionAttrs> {\r\n  private showPlatformForm = false;\r\n  private activeTransactionTab = 'pending';\r\n\r\n  view(vnode: Mithril.Vnode<DepositManagementSectionAttrs>) {\r\n    const { \r\n      platforms, \r\n      transactions, \r\n      submittingPlatform,\r\n      onAddPlatform,\r\n      onTogglePlatformStatus,\r\n      onDeletePlatform,\r\n      onUpdateTransactionStatus\r\n    } = vnode.attrs;\r\n\r\n    const pendingTransactions = transactions.filter(t => t.status === 'pending' || t.status === 'confirmed');\r\n    const completedTransactions = transactions.filter(t => t.status === 'completed' || t.status === 'failed' || t.status === 'cancelled');\r\n\r\n    return (\r\n      <div className=\"DepositManagementSection\">\r\n        <div className=\"Form-group\">\r\n          <h3>{app.translator.trans('withdrawal.admin.deposit.platforms.title')}</h3>\r\n          \r\n          <div className=\"DepositPlatforms\">\r\n            <div className=\"DepositPlatforms-header\">\r\n              <Button\r\n                className=\"Button Button--primary\"\r\n                onclick={() => { this.showPlatformForm = !this.showPlatformForm; }}\r\n              >\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.add_button')}\r\n              </Button>\r\n            </div>\r\n\r\n            {this.showPlatformForm && (\r\n              <AddDepositPlatformForm\r\n                submitting={submittingPlatform}\r\n                onSubmit={onAddPlatform}\r\n                onCancel={() => { this.showPlatformForm = false; }}\r\n              />\r\n            )}\r\n\r\n            <div className=\"DepositPlatforms-list\">\r\n              {platforms.length === 0 ? (\r\n                <p className=\"DepositPlatforms-empty\">\r\n                  {app.translator.trans('withdrawal.admin.deposit.platforms.empty')}\r\n                </p>\r\n              ) : (\r\n                platforms.map(platform => (\r\n                  <GenericPlatformListItem\r\n                    key={platform.id}\r\n                    platform={platform}\r\n                    type=\"deposit\"\r\n                    style=\"list\"\r\n                    onToggleStatus={() => onTogglePlatformStatus(platform)}\r\n                    onDelete={() => onDeletePlatform(platform)}\r\n                  />\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"Form-group\">\r\n          <h3>{app.translator.trans('withdrawal.admin.deposit.transactions.title')}</h3>\r\n          \r\n          <div className=\"DepositTransactions\">\r\n            <div className=\"DepositTransactions-tabs\">\r\n              <button\r\n                className={`DepositTransactions-tab ${this.activeTransactionTab === 'pending' ? 'active' : ''}`}\r\n                onclick={() => { this.activeTransactionTab = 'pending'; }}\r\n              >\r\n                {app.translator.trans('withdrawal.admin.deposit.transactions.pending_title')} ({pendingTransactions.length})\r\n              </button>\r\n              <button\r\n                className={`DepositTransactions-tab ${this.activeTransactionTab === 'completed' ? 'active' : ''}`}\r\n                onclick={() => { this.activeTransactionTab = 'completed'; }}\r\n              >\r\n                {app.translator.trans('withdrawal.admin.deposit.transactions.completed_title')} ({completedTransactions.length})\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"DepositTransactions-content\">\r\n              {this.activeTransactionTab === 'pending' ? (\r\n                <div className=\"DepositTransactions-pending\">\r\n                  {pendingTransactions.length === 0 ? (\r\n                    <p className=\"DepositTransactions-empty\">\r\n                      {app.translator.trans('withdrawal.admin.deposit.transactions.no_pending')}\r\n                    </p>\r\n                  ) : (\r\n                    pendingTransactions.map(transaction => (\r\n                      <DepositTransactionItem\r\n                        key={transaction.id}\r\n                        transaction={transaction}\r\n                        onUpdateStatus={(status) => onUpdateTransactionStatus(transaction, status)}\r\n                        showActions={true}\r\n                      />\r\n                    ))\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <div className=\"DepositTransactions-completed\">\r\n                  {completedTransactions.length === 0 ? (\r\n                    <p className=\"DepositTransactions-empty\">\r\n                      {app.translator.trans('withdrawal.admin.deposit.transactions.no_completed')}\r\n                    </p>\r\n                  ) : (\r\n                    completedTransactions.map(transaction => (\r\n                      <DepositTransactionItem\r\n                        key={transaction.id}\r\n                        transaction={transaction}\r\n                        onUpdateStatus={(status) => onUpdateTransactionStatus(transaction, status)}\r\n                        showActions={false}\r\n                      />\r\n                    ))\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\nimport Stream from 'flarum/common/utils/Stream';\nimport m from 'mithril';\nimport type Mithril from 'mithril';\nimport NetworkType from '../../../common/models/NetworkType';\n\nexport interface NetworkTypeListItemAttrs {\n  networkType: NetworkType;\n  onUpdate: (networkType: NetworkType, data: any) => Promise<void>;\n  onDelete: (networkType: NetworkType) => Promise<void>;\n}\n\nexport default class NetworkTypeListItem extends Component<NetworkTypeListItemAttrs> {\n  private editing = false;\n  private submitting = false;\n  private formData: Record<string, Stream<any>> = {};\n\n  oninit(vnode: Mithril.Vnode<NetworkTypeListItemAttrs>) {\n    super.oninit(vnode);\n    this.initFormData(vnode.attrs.networkType);\n  }\n\n  view(vnode: Mithril.Vnode<NetworkTypeListItemAttrs>) {\n    const { networkType } = vnode.attrs;\n\n    return (\n      <div className=\"NetworkTypeListItem\">\n        <div className=\"item-header\">\n          <div className=\"item-info\">\n            <div className=\"item-icon\">\n              {networkType.iconClass() ? (\n                <i className={networkType.iconClass()}></i>\n              ) : networkType.iconUrl() ? (\n                <img src={networkType.iconUrl()} alt={networkType.name()} style=\"width: 24px; height: 24px;\" />\n              ) : (\n                <i className=\"fas fa-network-wired\"></i>\n              )}\n            </div>\n            <div className=\"item-details\">\n              <h4>{networkType.name()}</h4>\n              <span className=\"code\">{networkType.code()}</span>\n              {networkType.description() && (\n                <p className=\"description\">{networkType.description()}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"item-actions\">\n            <Button\n              className=\"Button Button--link\"\n              icon=\"fas fa-edit\"\n              onclick={() => this.toggleEdit()}\n              disabled={this.submitting}\n            >\n              {this.editing ? app.translator.trans('core.admin.basics.cancel_button') : app.translator.trans('core.admin.edit')}\n            </Button>\n            <Button\n              className=\"Button Button--link text-danger\"\n              icon=\"fas fa-trash\"\n              onclick={() => vnode.attrs.onDelete(networkType)}\n              disabled={this.submitting}\n            >\n              {app.translator.trans('core.admin.delete')}\n            </Button>\n          </div>\n        </div>\n\n        {this.editing && (\n          <div className=\"item-edit-form\">\n            <div className=\"Form\">\n              <div className=\"Form-row\">\n                <div className=\"Form-group\">\n                  <label>Name</label>\n                  <input\n                    type=\"text\"\n                    className=\"FormControl\"\n                    bidi={this.formData.name}\n                    disabled={this.submitting}\n                  />\n                </div>\n                <div className=\"Form-group\">\n                  <label>Code</label>\n                  <input\n                    type=\"text\"\n                    className=\"FormControl\"\n                    bidi={this.formData.code}\n                    disabled={this.submitting}\n                  />\n                </div>\n              </div>\n\n              <div className=\"Form-group\">\n                <label>Description</label>\n                <textarea\n                  className=\"FormControl\"\n                  rows={2}\n                  bidi={this.formData.description}\n                  disabled={this.submitting}\n                />\n              </div>\n\n              <div className=\"Form-row\">\n                <div className=\"Form-group\">\n                  <label>Icon URL</label>\n                  <input\n                    type=\"url\"\n                    className=\"FormControl\"\n                    bidi={this.formData.iconUrl}\n                    disabled={this.submitting}\n                  />\n                </div>\n                <div className=\"Form-group\">\n                  <label>Icon Class</label>\n                  <input\n                    type=\"text\"\n                    className=\"FormControl\"\n                    bidi={this.formData.iconClass}\n                    disabled={this.submitting}\n                  />\n                </div>\n              </div>\n\n              <div className=\"Form-group\">\n                <label>Sort Order</label>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  className=\"FormControl\"\n                  bidi={this.formData.sortOrder}\n                  disabled={this.submitting}\n                />\n              </div>\n\n              <div className=\"Form-group\">\n                <Switch state={this.formData.isActive()} onchange={this.formData.isActive} disabled={this.submitting}>\n                  Active\n                </Switch>\n              </div>\n\n              <div className=\"Form-actions\">\n                <Button\n                  className=\"Button Button--primary\"\n                  loading={this.submitting}\n                  onclick={this.handleSave.bind(this, vnode.attrs)}\n                >\n                  {app.translator.trans('core.admin.basics.save_changes_button')}\n                </Button>\n                <Button\n                  className=\"Button\"\n                  onclick={() => this.toggleEdit()}\n                  disabled={this.submitting}\n                >\n                  {app.translator.trans('core.admin.basics.cancel_button')}\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  private initFormData(networkType: NetworkType): void {\n    this.formData = {\n      name: Stream(networkType.name() || ''),\n      code: Stream(networkType.code() || ''),\n      description: Stream(networkType.description() || ''),\n      iconUrl: Stream(networkType.iconUrl() || ''),\n      iconClass: Stream(networkType.iconClass() || ''),\n      isActive: Stream(networkType.isActive() ?? true),\n      sortOrder: Stream(String(networkType.sortOrder() || 0))\n    };\n  }\n\n  private toggleEdit(): void {\n    this.editing = !this.editing;\n    if (!this.editing) {\n      // Reset form data when cancelling\n      this.initFormData(this.attrs.networkType);\n    }\n    m.redraw();\n  }\n\n  private async handleSave(attrs: NetworkTypeListItemAttrs): Promise<void> {\n    this.submitting = true;\n    m.redraw();\n\n    const data = {\n      name: this.formData.name(),\n      code: this.formData.code().toUpperCase(),\n      description: this.formData.description() || null,\n      iconUrl: this.formData.iconUrl() || null,\n      iconClass: this.formData.iconClass() || null,\n      isActive: this.formData.isActive(),\n      sortOrder: parseInt(this.formData.sortOrder()) || 0\n    };\n\n    try {\n      await attrs.onUpdate(attrs.networkType, data);\n      this.editing = false;\n    } catch {\n      // Error handling is done in parent\n    } finally {\n      this.submitting = false;\n      m.redraw();\n    }\n  }\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\nimport Stream from 'flarum/common/utils/Stream';\nimport type Mithril from 'mithril';\n\nexport interface NetworkTypeFormData {\n  name: string;\n  code: string;\n  description: string;\n  iconUrl: string;\n  iconClass: string;\n  isActive: boolean;\n  sortOrder: number;\n}\n\nexport interface AddNetworkTypeFormAttrs {\n  submitting: boolean;\n  onSubmit: (formData: NetworkTypeFormData) => Promise<void>;\n  onCancel: () => void;\n}\n\nexport default class AddNetworkTypeForm extends Component<AddNetworkTypeFormAttrs> {\n  private formData = {\n    name: Stream(''),\n    code: Stream(''),\n    description: Stream(''),\n    iconUrl: Stream(''),\n    iconClass: Stream(''),\n    isActive: Stream(true),\n    sortOrder: Stream('0')\n  };\n\n  view(vnode: Mithril.Vnode<AddNetworkTypeFormAttrs>) {\n    const { submitting, onCancel } = vnode.attrs;\n\n    return (\n      <div className=\"AddNetworkTypeForm\">\n        <div className=\"Form\">\n          <div className=\"Form-row\">\n            <div className=\"Form-group\">\n              <label>\n                {app.translator.trans('withdrawal.admin.network_types.name')}\n                <span className=\"Form-required\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"e.g., TRON (TRC20)\"\n                bidi={this.formData.name}\n                disabled={submitting}\n              />\n            </div>\n            <div className=\"Form-group\">\n              <label>\n                {app.translator.trans('withdrawal.admin.network_types.code')}\n                <span className=\"Form-required\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"e.g., TRC20\"\n                bidi={this.formData.code}\n                disabled={submitting}\n              />\n            </div>\n          </div>\n\n          <div className=\"Form-group\">\n            <label>\n              {app.translator.trans('withdrawal.admin.network_types.description')}\n            </label>\n            <textarea\n              className=\"FormControl\"\n              rows={3}\n              placeholder=\"Optional description of the network\"\n              bidi={this.formData.description}\n              disabled={submitting}\n            />\n          </div>\n\n          <div className=\"Form-row\">\n            <div className=\"Form-group\">\n              <label>\n                {app.translator.trans('withdrawal.admin.network_types.icon_url')}\n              </label>\n              <input\n                type=\"url\"\n                className=\"FormControl\"\n                placeholder=\"https://example.com/icon.png\"\n                bidi={this.formData.iconUrl}\n                disabled={submitting}\n              />\n            </div>\n            <div className=\"Form-group\">\n              <label>\n                {app.translator.trans('withdrawal.admin.network_types.icon_class')}\n              </label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"fab fa-tron\"\n                bidi={this.formData.iconClass}\n                disabled={submitting}\n              />\n            </div>\n          </div>\n\n          <div className=\"Form-group\">\n            <label>\n              {app.translator.trans('withdrawal.admin.network_types.sort_order')}\n            </label>\n            <input\n              type=\"number\"\n              min=\"0\"\n              className=\"FormControl\"\n              placeholder=\"0\"\n              bidi={this.formData.sortOrder}\n              disabled={submitting}\n            />\n          </div>\n\n          <div className=\"Form-group\">\n            <Switch state={this.formData.isActive()} onchange={this.formData.isActive} disabled={submitting}>\n              {app.translator.trans('withdrawal.admin.network_types.is_active')}\n            </Switch>\n          </div>\n\n          <div className=\"Form-actions\">\n            <Button\n              className=\"Button Button--primary\"\n              type=\"submit\"\n              loading={submitting}\n              onclick={this.handleSubmit.bind(this, vnode.attrs)}\n            >\n              {app.translator.trans('withdrawal.admin.network_types.add_button')}\n            </Button>\n            <Button\n              className=\"Button\"\n              onclick={onCancel}\n              disabled={submitting}\n            >\n              {app.translator.trans('core.admin.basics.cancel_button')}\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private async handleSubmit(attrs: AddNetworkTypeFormAttrs): Promise<void> {\n    // Basic validation\n    if (!this.formData.name() || !this.formData.code()) {\n      app.alerts.show(\n        { type: 'error', dismissible: true },\n        app.translator.trans('withdrawal.admin.network_types.required_fields_error')\n      );\n      return;\n    }\n\n    const formData: NetworkTypeFormData = {\n      name: this.formData.name(),\n      code: this.formData.code().toUpperCase(),\n      description: this.formData.description(),\n      iconUrl: this.formData.iconUrl(),\n      iconClass: this.formData.iconClass(),\n      isActive: this.formData.isActive(),\n      sortOrder: parseInt(this.formData.sortOrder()) || 0\n    };\n\n    try {\n      await attrs.onSubmit(formData);\n      \n      // Reset form\n      Object.keys(this.formData).forEach(key => {\n        if (key === 'isActive') {\n          this.formData[key](true);\n        } else if (key === 'sortOrder') {\n          this.formData[key]('0');\n        } else {\n          this.formData[key]('');\n        }\n      });\n\n      attrs.onCancel();\n    } catch (error) {\n      // Error handling is done in parent component\n      console.error('Form submission error:', error);\n    }\n  }\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport type Mithril from 'mithril';\nimport NetworkType from '../../../common/models/NetworkType';\nimport NetworkTypeListItem from '../items/NetworkTypeListItem';\nimport AddNetworkTypeForm from '../forms/AddNetworkTypeForm';\n\ninterface NetworkTypeManagementSectionAttrs {}\n\nexport default class NetworkTypeManagementSection extends Component<NetworkTypeManagementSectionAttrs> {\n  private networkTypes: NetworkType[] = [];\n  private loading = false;\n  private showAddForm = false;\n\n  oninit(vnode: Mithril.Vnode<NetworkTypeManagementSectionAttrs>) {\n    super.oninit(vnode);\n    this.loadNetworkTypes();\n  }\n\n  view(): Mithril.Children {\n    return (\n      <div className=\"NetworkTypeManagementSection\">\n        <div className=\"section-header\">\n          <h3>{app.translator.trans('withdrawal.admin.network_types.title')}</h3>\n          <Button\n            className=\"Button Button--primary\"\n            icon=\"fas fa-plus\"\n            onclick={() => this.toggleAddForm()}\n          >\n            {app.translator.trans('withdrawal.admin.network_types.add_button')}\n          </Button>\n        </div>\n\n        {this.showAddForm && (\n          <div className=\"section-content\">\n            <AddNetworkTypeForm\n              submitting={this.loading}\n              onSubmit={this.handleAddNetworkType.bind(this)}\n              onCancel={() => this.toggleAddForm()}\n            />\n          </div>\n        )}\n\n        <div className=\"section-content\">\n          {this.loading && !this.networkTypes.length ? (\n            <LoadingIndicator />\n          ) : this.networkTypes.length === 0 ? (\n            <div className=\"empty-state\">\n              <p>{app.translator.trans('withdrawal.admin.network_types.empty')}</p>\n            </div>\n          ) : (\n            <div className=\"network-types-list\">\n              {this.networkTypes.map((networkType) => (\n                <NetworkTypeListItem\n                  key={networkType.id()}\n                  networkType={networkType}\n                  onUpdate={this.handleUpdateNetworkType.bind(this)}\n                  onDelete={this.handleDeleteNetworkType.bind(this)}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  private toggleAddForm(): void {\n    this.showAddForm = !this.showAddForm;\n    m.redraw();\n  }\n\n  private async loadNetworkTypes(): Promise<void> {\n    this.loading = true;\n    m.redraw();\n\n    try {\n      const response = await app.request({\n        method: 'GET',\n        url: app.forum.attribute('apiUrl') + '/network-types',\n      });\n\n      app.store.pushPayload(response);\n      this.networkTypes = app.store.all('network-types') as NetworkType[];\n    } catch (error) {\n      console.error('Failed to load network types:', error);\n      app.alerts.show(\n        { type: 'error', dismissible: true },\n        app.translator.trans('withdrawal.admin.network_types.load_error')\n      );\n    } finally {\n      this.loading = false;\n      m.redraw();\n    }\n  }\n\n  private async handleAddNetworkType(formData: any): Promise<void> {\n    this.loading = true;\n    m.redraw();\n\n    try {\n      const response = await app.request({\n        method: 'POST',\n        url: app.forum.attribute('apiUrl') + '/network-types',\n        body: {\n          data: {\n            type: 'network-types',\n            attributes: formData\n          }\n        }\n      });\n\n      app.store.pushPayload(response);\n      this.networkTypes = app.store.all('network-types') as NetworkType[];\n      this.showAddForm = false;\n\n      app.alerts.show(\n        { type: 'success', dismissible: true },\n        app.translator.trans('withdrawal.admin.network_types.created')\n      );\n    } catch (error) {\n      console.error('Failed to create network type:', error);\n      app.alerts.show(\n        { type: 'error', dismissible: true },\n        app.translator.trans('withdrawal.admin.network_types.create_error')\n      );\n      throw error;\n    } finally {\n      this.loading = false;\n      m.redraw();\n    }\n  }\n\n  private async handleUpdateNetworkType(networkType: NetworkType, data: any): Promise<void> {\n    try {\n      const response = await app.request({\n        method: 'PATCH',\n        url: app.forum.attribute('apiUrl') + '/network-types/' + networkType.id(),\n        body: {\n          data: {\n            type: 'network-types',\n            id: networkType.id(),\n            attributes: data\n          }\n        }\n      });\n\n      app.store.pushPayload(response);\n      m.redraw();\n\n      app.alerts.show(\n        { type: 'success', dismissible: true },\n        app.translator.trans('withdrawal.admin.network_types.updated')\n      );\n    } catch (error) {\n      console.error('Failed to update network type:', error);\n      app.alerts.show(\n        { type: 'error', dismissible: true },\n        app.translator.trans('withdrawal.admin.network_types.update_error')\n      );\n    }\n  }\n\n  private async handleDeleteNetworkType(networkType: NetworkType): Promise<void> {\n    if (!confirm(app.translator.trans('withdrawal.admin.network_types.delete_confirm'))) {\n      return;\n    }\n\n    try {\n      await app.request({\n        method: 'DELETE',\n        url: app.forum.attribute('apiUrl') + '/network-types/' + networkType.id()\n      });\n\n      // Remove from store and local array\n      this.networkTypes = this.networkTypes.filter(nt => nt.id() !== networkType.id());\n      app.store.remove(networkType);\n\n      app.alerts.show(\n        { type: 'success', dismissible: true },\n        app.translator.trans('withdrawal.admin.network_types.deleted')\n      );\n    } catch (error) {\n      console.error('Failed to delete network type:', error);\n      \n      let errorMessage = app.translator.trans('withdrawal.admin.network_types.delete_error');\n      if (error.responseJSON?.errors?.[0]?.detail) {\n        errorMessage = error.responseJSON.errors[0].detail;\n      }\n\n      app.alerts.show(\n        { type: 'error', dismissible: true },\n        errorMessage\n      );\n    } finally {\n      m.redraw();\n    }\n  }\n}","import app from 'flarum/common/app';\r\n\r\n/**\r\n * Standardized API request configuration\r\n */\r\ninterface ApiRequestConfig {\r\n  method: 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE';\r\n  endpoint: string;\r\n  body?: any;\r\n  params?: Record<string, any>;\r\n  headers?: Record<string, string>;\r\n  timeout?: number;\r\n}\r\n\r\n/**\r\n * Standardized error response structure\r\n */\r\ninterface ApiError {\r\n  message: string;\r\n  errors?: Array<{\r\n    detail: string;\r\n    source?: {\r\n      pointer?: string;\r\n      parameter?: string;\r\n    };\r\n  }>;\r\n  status?: number;\r\n  code?: string;\r\n}\r\n\r\n/**\r\n * API request options for different operation types\r\n */\r\ninterface ApiRequestOptions {\r\n  showSuccessAlert?: boolean;\r\n  showErrorAlert?: boolean;\r\n  successMessage?: string;\r\n  errorMessage?: string;\r\n  validateResponse?: (response: any) => boolean;\r\n  transformResponse?: (response: any) => any;\r\n  onSuccess?: (response: any) => void;\r\n  onError?: (error: ApiError) => void;\r\n}\r\n\r\nconst DEFAULT_TIMEOUT = 30000; // 30 seconds\r\nconst DEFAULT_HEADERS = {\r\n  'Content-Type': 'application/vnd.api+json',\r\n  'Accept': 'application/vnd.api+json'\r\n};\r\n\r\n/**\r\n * Build complete request configuration\r\n */\r\nfunction buildRequestConfig(config: ApiRequestConfig) {\r\n  const { method, endpoint, body, params, headers, timeout } = config;\r\n  \r\n  const fullUrl = endpoint.startsWith('http') \r\n    ? endpoint \r\n    : `${app.forum.attribute('apiUrl')}${endpoint}`;\r\n\r\n  const requestConfig: any = {\r\n    method,\r\n    url: fullUrl,\r\n    headers: { ...DEFAULT_HEADERS, ...headers },\r\n    timeout: timeout || DEFAULT_TIMEOUT\r\n  };\r\n\r\n  if (body && (method === 'POST' || method === 'PATCH' || method === 'PUT')) {\r\n    requestConfig.body = body;\r\n  }\r\n\r\n  if (params && method === 'GET') {\r\n    const urlParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null) {\r\n        urlParams.append(key, String(value));\r\n      }\r\n    });\r\n    requestConfig.url += `?${urlParams.toString()}`;\r\n  }\r\n\r\n  return requestConfig;\r\n}\r\n\r\n/**\r\n * Parse and standardize error responses\r\n */\r\nfunction parseError(error: any): ApiError {\r\n  // Handle network/timeout errors\r\n  if (error.name === 'TypeError' || error.message === 'Failed to fetch') {\r\n    return {\r\n      message: app.translator.trans('core.lib.error.network_error'),\r\n      status: 0\r\n    };\r\n  }\r\n\r\n  // Handle Flarum API errors\r\n  if (error && error.response) {\r\n    try {\r\n      const response = typeof error.response === 'string' \r\n        ? JSON.parse(error.response) \r\n        : error.response;\r\n      \r\n      if (response.errors && Array.isArray(response.errors)) {\r\n        return {\r\n          message: response.errors[0].detail || 'API error occurred',\r\n          errors: response.errors,\r\n          status: error.status\r\n        };\r\n      }\r\n    } catch {\r\n      // If parsing fails, treat as HTML error page\r\n      if (error.response.includes('<b>Fatal error</b>') || \r\n          error.response.includes('<!DOCTYPE')) {\r\n        return {\r\n          message: app.translator.trans('core.lib.error.generic_error'),\r\n          status: error.status || 500\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handle direct error objects\r\n  if (error instanceof Error) {\r\n    return {\r\n      message: error.message,\r\n      status: (error as any).status\r\n    };\r\n  }\r\n\r\n  // Fallback for unknown errors\r\n  return {\r\n    message: app.translator.trans('core.lib.error.generic_error'),\r\n    status: 500\r\n  };\r\n}\r\n\r\n/**\r\n * Generic API request method\r\n */\r\nexport async function apiRequest<T = any>(\r\n  config: ApiRequestConfig, \r\n  options: ApiRequestOptions = {}\r\n): Promise<T> {\r\n  const {\r\n    showSuccessAlert = false,\r\n    showErrorAlert = true,\r\n    successMessage,\r\n    errorMessage,\r\n    validateResponse,\r\n    transformResponse,\r\n    onSuccess,\r\n    onError\r\n  } = options;\r\n\r\n  try {\r\n    const requestConfig = buildRequestConfig(config);\r\n    const response = await app.request(requestConfig);\r\n    \r\n    // Validate response if validator provided\r\n    if (validateResponse && !validateResponse(response)) {\r\n      throw new Error('Response validation failed');\r\n    }\r\n\r\n    // Transform response if transformer provided\r\n    const finalResponse = transformResponse ? transformResponse(response) : response;\r\n\r\n    // Show success alert if requested\r\n    if (showSuccessAlert && successMessage) {\r\n      app.alerts.show({ type: 'success', dismissible: true }, successMessage);\r\n    }\r\n\r\n    // Execute success callback\r\n    if (onSuccess) {\r\n      onSuccess(finalResponse);\r\n    }\r\n\r\n    return finalResponse;\r\n  } catch (error) {\r\n    const apiError = parseError(error);\r\n    \r\n    // Execute error callback\r\n    if (onError) {\r\n      onError(apiError);\r\n    }\r\n\r\n    // Show error alert if requested\r\n    if (showErrorAlert) {\r\n      const message = errorMessage || apiError.message || 'An error occurred';\r\n      app.alerts.show({ type: 'error', dismissible: true }, message);\r\n    }\r\n\r\n    throw apiError;\r\n  }\r\n}\r\n\r\n/**\r\n * GET request helper\r\n */\r\nexport async function apiGet<T = any>(\r\n  endpoint: string, \r\n  params?: Record<string, any>, \r\n  options: ApiRequestOptions = {}\r\n): Promise<T> {\r\n  return apiRequest<T>({ method: 'GET', endpoint, params }, options);\r\n}\r\n\r\n/**\r\n * POST request helper\r\n */\r\nexport async function apiPost<T = any>(\r\n  endpoint: string, \r\n  body?: any, \r\n  options: ApiRequestOptions = {}\r\n): Promise<T> {\r\n  return apiRequest<T>({ method: 'POST', endpoint, body }, options);\r\n}\r\n\r\n/**\r\n * PATCH request helper\r\n */\r\nexport async function apiPatch<T = any>(\r\n  endpoint: string, \r\n  body?: any, \r\n  options: ApiRequestOptions = {}\r\n): Promise<T> {\r\n  return apiRequest<T>({ method: 'PATCH', endpoint, body }, options);\r\n}\r\n\r\n/**\r\n * DELETE request helper\r\n */\r\nexport async function apiDelete<T = any>(\r\n  endpoint: string, \r\n  options: ApiRequestOptions = {}\r\n): Promise<T> {\r\n  return apiRequest<T>({ method: 'DELETE', endpoint }, options);\r\n}\r\n\r\n/**\r\n * Platform-specific API helpers\r\n */\r\nexport const PlatformAPI = {\r\n  /**\r\n   * Load withdrawal platforms\r\n   */\r\n  async loadWithdrawalPlatforms(params?: Record<string, any>) {\r\n    return apiGet('/withdrawal-platforms', params, {\r\n      errorMessage: app.translator.trans('withdrawal.admin.platforms.load_error'),\r\n      transformResponse: (response) => {\r\n        app.store.pushPayload(response);\r\n        return app.store.all('withdrawal-platforms');\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Create withdrawal platform\r\n   */\r\n  async createWithdrawalPlatform(data: any) {\r\n    return apiPost('/withdrawal-platforms', { data }, {\r\n      showSuccessAlert: true,\r\n      successMessage: app.translator.trans('withdrawal.admin.platforms.add_success'),\r\n      errorMessage: app.translator.trans('withdrawal.admin.platforms.add_error'),\r\n      onSuccess: (response) => {\r\n        app.store.pushPayload(response);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Request-specific API helpers\r\n */\r\nexport const RequestAPI = {\r\n  /**\r\n   * Load withdrawal requests\r\n   */\r\n  async loadWithdrawalRequests(params?: Record<string, any>) {\r\n    return apiGet('/withdrawal-requests', { include: 'user,platform', ...params }, {\r\n      errorMessage: app.translator.trans('withdrawal.admin.requests.load_error'),\r\n      transformResponse: (response) => {\r\n        app.store.pushPayload(response);\r\n        return Array.isArray(response.data) \r\n          ? response.data.filter((r: any) => r !== null)\r\n          : (response.data ? [response.data] : []);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// For backward compatibility, create an object with the same interface as the class\r\nexport const ApiRequestUtils = {\r\n  PlatformAPI,\r\n  RequestAPI\r\n};","import app from 'flarum/admin/app';\r\nimport { apiPost, apiPatch, apiDelete, apiGet } from '../../common/utils/apiRequestUtils';\r\nimport type { PlatformOperations, TransactionOperations } from '../components/shared/GenericManagementPage';\r\n\r\n// Withdrawal platform operations\r\nexport const createWithdrawalPlatformOperations = (): PlatformOperations<any> => ({\r\n  async create(formData: any) {\r\n    const platformData = {\r\n      type: 'withdrawal-platforms',\r\n      attributes: {\r\n        name: formData.name,\r\n        symbol: formData.symbol,\r\n        network: formData.network || null,\r\n        minAmount: parseFloat(formData.minAmount),\r\n        maxAmount: parseFloat(formData.maxAmount),\r\n        fee: parseFloat(formData.fee || '0'),\r\n        iconUrl: formData.iconUrl || null,\r\n        iconClass: formData.iconClass || null,\r\n        isActive: true\r\n      }\r\n    };\r\n    \r\n    return apiPost('/withdrawal-platforms', { data: platformData }, {\r\n      showSuccessAlert: true,\r\n      successMessage: app.translator.trans('withdrawal.admin.platforms.add_success'),\r\n      errorMessage: app.translator.trans('withdrawal.admin.platforms.add_error'),\r\n      onSuccess: (response) => {\r\n        app.store.pushPayload(response);\r\n      }\r\n    });\r\n  },\r\n\r\n  async toggleStatus(platform: any) {\r\n    const platformId = typeof platform.id === 'function' ? platform.id() : platform.id;\r\n    const currentStatus = (typeof platform.isActive === 'function' ? platform.isActive() : platform.attributes?.isActive) ?? false;\r\n    const record = app.store.getById('withdrawal-platforms', platformId);\r\n    \r\n    if (record) {\r\n      await record.save({ isActive: !currentStatus });\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`withdrawal.admin.platforms.${!currentStatus ? 'enable' : 'disable'}_success`)\r\n      );\r\n    }\r\n  },\r\n\r\n  async delete(platform: any) {\r\n    const platformId = typeof platform.id === 'function' ? platform.id() : platform.id;\r\n    const record = app.store.getById('withdrawal-platforms', platformId);\r\n    if (record) {\r\n      await record.delete();\r\n    }\r\n  },\r\n\r\n  async load() {\r\n    return apiGet('/withdrawal-platforms', undefined, {\r\n      errorMessage: app.translator.trans('withdrawal.admin.platforms.load_error'),\r\n      transformResponse: (response) => {\r\n        app.store.pushPayload(response);\r\n        return app.store.all('withdrawal-platforms');\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n// Deposit platform operations\r\nexport const createDepositPlatformOperations = (): PlatformOperations<any> => ({\r\n  async create(formData: any) {\r\n    const platformData = {\r\n      type: 'deposit-platforms',\r\n      attributes: {\r\n        name: formData.name,\r\n        symbol: formData.symbol,\r\n        network: formData.network,\r\n        minAmount: parseFloat(formData.minAmount) || 0,\r\n        maxAmount: formData.maxAmount ? parseFloat(formData.maxAmount) : null,\r\n        address: formData.address || null,\r\n        qrCodeImageUrl: formData.qrCodeImageUrl || null,\r\n        iconUrl: formData.iconUrl || null,\r\n        iconClass: formData.iconClass || null,\r\n        warningText: formData.warningText || null,\r\n        isActive: formData.isActive\r\n      }\r\n    };\r\n    \r\n    return apiPost('/deposit-platforms', { data: platformData }, {\r\n      showSuccessAlert: true,\r\n      successMessage: app.translator.trans('withdrawal.admin.deposit.platforms.add_success'),\r\n      errorMessage: app.translator.trans('withdrawal.admin.deposit.platforms.add_error'),\r\n      onSuccess: (response) => {\r\n        app.store.pushPayload(response);\r\n      }\r\n    });\r\n  },\r\n\r\n  async toggleStatus(platform: any) {\r\n    const platformId = typeof platform.id === 'function' ? platform.id() : platform.id;\r\n    const currentStatus = (typeof platform.isActive === 'function' ? platform.isActive() : platform.attributes?.isActive) ?? false;\r\n    \r\n    return apiPatch(`/deposit-platforms/${platformId}`, {\r\n      data: {\r\n        type: 'deposit-platforms',\r\n        attributes: {\r\n          isActive: !currentStatus\r\n        }\r\n      }\r\n    }, {\r\n      showSuccessAlert: true,\r\n      successMessage: app.translator.trans(`withdrawal.admin.deposit.platforms.${!currentStatus ? 'enable' : 'disable'}_success`),\r\n      errorMessage: app.translator.trans('withdrawal.admin.deposit.platforms.toggle_error'),\r\n      onSuccess: (response) => {\r\n        app.store.pushPayload(response);\r\n      }\r\n    });\r\n  },\r\n\r\n  async delete(platform: any) {\r\n    const platformId = typeof platform.id === 'function' ? platform.id() : platform.id;\r\n    \r\n    return apiDelete(`/deposit-platforms/${platformId}`, {\r\n      errorMessage: app.translator.trans('withdrawal.admin.deposit.platforms.delete_error')\r\n    });\r\n  },\r\n\r\n  async load() {\r\n    return apiGet('/deposit-platforms', undefined, {\r\n      errorMessage: app.translator.trans('withdrawal.admin.deposit.platforms.load_error'),\r\n      transformResponse: (response) => {\r\n        app.store.pushPayload(response);\r\n        return app.store.all('deposit-platforms');\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n// Withdrawal request operations\r\nexport const createWithdrawalRequestOperations = (): TransactionOperations<any> => ({\r\n  async updateStatus(request: any, status: string) {\r\n    const requestId = typeof request.id === 'function' ? request.id() : request.id;\r\n    const record = app.store.getById('withdrawal-requests', requestId);\r\n    \r\n    if (record) {\r\n      await record.save({ status });\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`withdrawal.admin.requests.${status}_success`)\r\n      );\r\n    }\r\n  },\r\n\r\n  async load() {\r\n    return apiGet('/withdrawal-requests', { include: 'user,platform' }, {\r\n      errorMessage: app.translator.trans('withdrawal.admin.requests.load_error'),\r\n      transformResponse: (response) => {\r\n        app.store.pushPayload(response);\r\n        return Array.isArray(response.data) \r\n          ? response.data.filter((r: any) => r !== null)\r\n          : (response.data ? [response.data] : []);\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n// Deposit transaction operations\r\nexport const createDepositTransactionOperations = (): TransactionOperations<any> => ({\r\n  async updateStatus(transaction: any, status: string) {\r\n    const transactionId = typeof transaction.id === 'function' ? transaction.id() : transaction.id;\r\n    \r\n    return apiPatch(`/deposit-transactions/${transactionId}`, {\r\n      data: {\r\n        type: 'deposit-transactions',\r\n        attributes: {\r\n          status: status\r\n        }\r\n      }\r\n    }, {\r\n      showSuccessAlert: true,\r\n      successMessage: app.translator.trans(`withdrawal.admin.deposit.transactions.${status}_success`),\r\n      errorMessage: app.translator.trans('withdrawal.admin.deposit.transactions.update_error'),\r\n      onSuccess: (response) => {\r\n        app.store.pushPayload(response);\r\n      }\r\n    });\r\n  },\r\n\r\n  async load() {\r\n    return apiGet('/deposit-transactions', undefined, {\r\n      errorMessage: app.translator.trans('withdrawal.admin.deposit.transactions.load_error'),\r\n      transformResponse: (response) => {\r\n        app.store.pushPayload(response);\r\n        return app.store.all('deposit-transactions');\r\n      }\r\n    });\r\n  }\r\n});","import app from 'flarum/admin/app';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport GenericManagementPage, { \r\n  type GenericManagementPageConfig, \r\n  type GenericPlatform, \r\n  type GenericTransaction \r\n} from './shared/GenericManagementPage';\r\nimport GeneralSettingsSection from './sections/GeneralSettingsSection';\r\nimport PlatformManagementSection from './sections/PlatformManagementSection';\r\nimport RequestManagementSection from './sections/RequestManagementSection';\r\nimport DepositManagementSection from './sections/DepositManagementSection';\r\nimport NetworkTypeManagementSection from './sections/NetworkTypeManagementSection';\r\nimport ConfirmModal from '../../common/components/shared/ConfirmModal';\r\nimport { \r\n  createWithdrawalPlatformOperations,\r\n  createDepositPlatformOperations,\r\n  createWithdrawalRequestOperations,\r\n  createDepositTransactionOperations\r\n} from '../utils/platformOperations';\r\n\r\nexport default class UnifiedManagementPage extends GenericManagementPage<GenericPlatform, GenericTransaction> {\r\n  \r\n  // Additional state for complex scenarios\r\n  private depositPlatforms: GenericPlatform[] = [];\r\n  private depositTransactions: GenericTransaction[] = [];\r\n  private users: { [key: number]: any } = {};\r\n\r\n  protected getConfig(): GenericManagementPageConfig<GenericPlatform, GenericTransaction> {\r\n    return {\r\n      pageTitle: app.translator.trans('withdrawal.admin.page.title'),\r\n      extensionId: 'WithdrawalManagement',\r\n      \r\n      // Primary platform operations (withdrawal)\r\n      platformOperations: createWithdrawalPlatformOperations(),\r\n      transactionOperations: createWithdrawalRequestOperations(),\r\n      \r\n      // Settings component\r\n      settingsComponent: GeneralSettingsSection,\r\n      \r\n      // Tab configuration\r\n      tabs: [\r\n        {\r\n          key: 'withdrawals',\r\n          label: app.translator.trans('withdrawal.admin.tabs.withdrawals'),\r\n          component: 'div', // Will be replaced by custom content\r\n        },\r\n        {\r\n          key: 'deposits',\r\n          label: app.translator.trans('withdrawal.admin.tabs.deposits'),\r\n          component: DepositManagementSection,\r\n          props: () => ({\r\n            platforms: this.depositPlatforms,\r\n            transactions: this.depositTransactions,\r\n            submittingPlatform: this.submittingPlatform,\r\n            onAddPlatform: this.addDepositPlatform.bind(this),\r\n            onTogglePlatformStatus: this.toggleDepositPlatformStatus.bind(this),\r\n            onDeletePlatform: this.deleteDepositPlatform.bind(this),\r\n            onUpdateTransactionStatus: this.updateDepositTransactionStatus.bind(this),\r\n          })\r\n        },\r\n        {\r\n          key: 'network-types',\r\n          label: app.translator.trans('withdrawal.admin.tabs.network_types'),\r\n          component: NetworkTypeManagementSection,\r\n        }\r\n      ],\r\n      \r\n      translations: {\r\n        platformPrefix: 'withdrawal.admin.platforms',\r\n        transactionPrefix: 'withdrawal.admin.requests'\r\n      }\r\n    };\r\n  }\r\n\r\n  // Override renderActiveTabContent to handle the complex withdrawals tab  \r\n  protected renderActiveTabContent(): Mithril.Children {\r\n    if (this.activeTab === 'withdrawals') {\r\n      return (\r\n        <div>\r\n          <PlatformManagementSection\r\n            platforms={this.platforms}\r\n            submittingPlatform={this.submittingPlatform}\r\n            onAddPlatform={this.addPlatform.bind(this)}\r\n            onTogglePlatformStatus={this.togglePlatformStatus.bind(this)}\r\n            onDeletePlatform={this.deletePlatform.bind(this)}\r\n          />\r\n          \r\n          <RequestManagementSection\r\n            requests={this.transactions as any}\r\n            onUpdateRequestStatus={this.updateTransactionStatus.bind(this)}\r\n            onDeleteRequest={this.deleteRequest.bind(this)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    // For other tabs, use the parent implementation\r\n    return super.renderActiveTabContent();\r\n  }\r\n\r\n  // Override loadData to handle complex data loading\r\n  protected async loadData(): Promise<void> {\r\n    try {\r\n      // Load withdrawal data (handled by parent)\r\n      await this.loadPlatforms();\r\n      await this.loadTransactions();\r\n      \r\n      // Load additional user data for requests\r\n      await this.loadUserData();\r\n      \r\n      // Load deposit data\r\n      await this.loadDepositPlatforms();\r\n      await this.loadDepositTransactions();\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n    } finally {\r\n      this.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  // Deposit platform management methods\r\n  private async addDepositPlatform(formData: any): Promise<void> {\r\n    const depositOperations = createDepositPlatformOperations();\r\n    if (this.submittingPlatform) return;\r\n\r\n    this.submittingPlatform = true;\r\n\r\n    try {\r\n      await depositOperations.create(formData);\r\n      await this.loadDepositPlatforms();\r\n    } catch (error) {\r\n      console.error('Error adding deposit platform:', error);\r\n    } finally {\r\n      this.submittingPlatform = false;\r\n    }\r\n  }\r\n\r\n  private async toggleDepositPlatformStatus(platform: GenericPlatform): Promise<void> {\r\n    const depositOperations = createDepositPlatformOperations();\r\n    try {\r\n      await depositOperations.toggleStatus(platform);\r\n      await this.loadDepositPlatforms();\r\n    } catch (error) {\r\n      console.error('Error toggling deposit platform status:', error);\r\n    }\r\n  }\r\n\r\n  private async deleteDepositPlatform(platform: GenericPlatform): Promise<void> {\r\n    const depositOperations = createDepositPlatformOperations();\r\n    const platformName = (typeof platform.name === 'function' ? platform.name() : platform.name) || 'Unknown Platform';\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans('withdrawal.admin.platforms.delete_confirm_title'),\r\n      message: app.translator.trans('withdrawal.admin.platforms.delete_confirm_message', { name: platformName }),\r\n      confirmText: app.translator.trans('withdrawal.admin.platforms.delete_confirm_button'),\r\n      cancelText: app.translator.trans('withdrawal.admin.platforms.delete_cancel_button'),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          await depositOperations.delete(platform);\r\n          await this.loadDepositPlatforms();\r\n          \r\n          app.alerts.show(\r\n            { type: 'success', dismissible: true },\r\n            app.translator.trans('withdrawal.admin.deposit.platforms.delete_success')\r\n          );\r\n        } catch (error) {\r\n          console.error('Error deleting deposit platform:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans('withdrawal.admin.deposit.platforms.delete_error')\r\n          );\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  private async updateDepositTransactionStatus(transaction: GenericTransaction, status: string): Promise<void> {\r\n    const depositTransactionOperations = createDepositTransactionOperations();\r\n    try {\r\n      await depositTransactionOperations.updateStatus(transaction, status);\r\n      await this.loadDepositTransactions();\r\n    } catch (error) {\r\n      console.error('Error updating deposit transaction:', error);\r\n    }\r\n  }\r\n\r\n  // Deletion method for requests (different from transactions)\r\n  private deleteRequest(request: any): void {\r\n    const requestId = typeof request.id === 'function' ? request.id() : request.id;\r\n    const amount = typeof request.amount === 'function' ? request.amount() : (request.attributes?.amount || 0);\r\n    \r\n    // Get user name for display in confirmation\r\n    let userName = 'Unknown User';\r\n    if (typeof request.user === 'function') {\r\n      const userData = request.user();\r\n      if (userData && typeof userData.displayName === 'function') {\r\n        userName = userData.displayName();\r\n      } else if (userData && userData.attributes?.displayName) {\r\n        userName = userData.attributes.displayName;\r\n      }\r\n    }\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans('withdrawal.admin.requests.delete_confirm_title'),\r\n      message: app.translator.trans('withdrawal.admin.requests.delete_confirm_message', { info: `${userName} - ${amount}` }),\r\n      confirmText: app.translator.trans('withdrawal.admin.requests.delete_confirm_button'),\r\n      cancelText: app.translator.trans('withdrawal.admin.requests.delete_cancel_button'),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          const record = app.store.getById('withdrawal-requests', requestId);\r\n          if (record) {\r\n            await record.delete();\r\n            await this.loadTransactions();\r\n            \r\n            app.alerts.show(\r\n              { type: 'success', dismissible: true },\r\n              app.translator.trans('withdrawal.admin.requests.delete_success')\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error('Error deleting request:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans('withdrawal.admin.requests.delete_error')\r\n          );\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Additional data loading methods\r\n  private async loadDepositPlatforms(): Promise<void> {\r\n    const depositOperations = createDepositPlatformOperations();\r\n    try {\r\n      this.depositPlatforms = await depositOperations.load();\r\n      console.log('Loaded deposit platforms:', this.depositPlatforms);\r\n    } catch (error) {\r\n      console.error('Error loading deposit platforms:', error);\r\n      this.depositPlatforms = [];\r\n    }\r\n  }\r\n\r\n  private async loadDepositTransactions(): Promise<void> {\r\n    const depositTransactionOperations = createDepositTransactionOperations();\r\n    try {\r\n      this.depositTransactions = await depositTransactionOperations.load();\r\n      console.log('Loaded deposit transactions:', this.depositTransactions);\r\n    } catch (error) {\r\n      console.error('Error loading deposit transactions:', error);\r\n      this.depositTransactions = [];\r\n    }\r\n  }\r\n\r\n  private async loadUserData(): Promise<void> {\r\n    // Skip if no requests\r\n    if (this.transactions.length === 0) return;\r\n    \r\n    const userIds = [...new Set(this.transactions\r\n      .map(r => {\r\n        // Check both data.relationships and direct relationships structures\r\n        const userRelation = (r as any)?.data?.relationships?.user?.data || (r as any)?.relationships?.user?.data;\r\n        if (userRelation) {\r\n          return userRelation.id;\r\n        }\r\n        return null;\r\n      })\r\n      .filter(id => id !== null && id !== undefined)\r\n    )];\r\n    const usersToLoad = userIds.filter(userId => !this.users[userId]);\r\n    \r\n    if (usersToLoad.length > 0) {\r\n      try {\r\n        const userPromises = usersToLoad.map(userId => \r\n          app.store.find('users', userId).catch(error => {\r\n            console.error(`Error loading user ${userId}:`, error);\r\n            return null;\r\n          })\r\n        );\r\n        \r\n        const loadedUsers = await Promise.all(userPromises);\r\n        \r\n        usersToLoad.forEach((userId, index) => {\r\n          if (loadedUsers[index]) {\r\n            this.users[userId] = loadedUsers[index];\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading users:', error);\r\n      }\r\n    }\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\n\r\n/**\r\n * WithdrawalPlatform model for Flarum\r\n * \r\n * This model represents a withdrawal platform that users can use\r\n * to withdraw their virtual currency.\r\n */\r\nexport default class WithdrawalPlatform extends Model {\r\n  // Basic attributes\r\n  name = Model.attribute<string>('name');\r\n  symbol = Model.attribute<string>('symbol');\r\n  network = Model.attribute<string | null>('network');\r\n  displayName = Model.attribute<string>('displayName');\r\n  minAmount = Model.attribute<number>('minAmount');\r\n  maxAmount = Model.attribute<number>('maxAmount');\r\n  fee = Model.attribute<number>('fee');\r\n  \r\n  // Optional attributes\r\n  iconUrl = Model.attribute<string | null>('iconUrl');\r\n  iconClass = Model.attribute<string | null>('iconClass');\r\n  \r\n  // Status\r\n  isActive = Model.attribute<boolean>('isActive');\r\n  \r\n  // Timestamps\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n  \r\n  // Computed properties\r\n  apiEndpoint() {\r\n    return `/withdrawal-platforms/${this.id()}`;\r\n  }\r\n  \r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n  \r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    return amount >= min && amount <= max;\r\n  }\r\n  \r\n  getTotalCost(amount: number): number {\r\n    return amount + this.fee();\r\n  }\r\n}","/**\r\n * Shared type definitions for the Withdrawal extension\r\n */\r\n\r\n/**\r\n * Withdrawal platform data structure\r\n */\r\nexport interface WithdrawalPlatformData {\r\n  id: string | number;\r\n  name: string;\r\n  symbol: string;\r\n  minAmount: number;\r\n  maxAmount: number;\r\n  fee: number;\r\n  iconUrl?: string | null;\r\n  iconClass?: string | null;\r\n  isActive: boolean;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * Withdrawal request data structure\r\n */\r\nexport interface WithdrawalRequestData {\r\n  id: string | number;\r\n  amount: number;\r\n  accountDetails: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  platformId: number;\r\n  userId: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * User withdrawal data extension\r\n */\r\nexport interface UserWithdrawalData {\r\n  money?: number;\r\n  withdrawalRequests?: WithdrawalRequestData[];\r\n}\r\n\r\n/**\r\n * API response structures\r\n */\r\nexport interface ApiSuccessResponse<T = any> {\r\n  data: T;\r\n}\r\n\r\nexport interface ApiErrorResponse {\r\n  errors: Array<{\r\n    status: string;\r\n    code: string;\r\n    title: string;\r\n    detail?: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Form validation errors\r\n */\r\nexport interface ValidationErrors {\r\n  [field: string]: string[];\r\n}\r\n\r\n/**\r\n * Configuration constants\r\n */\r\nexport const WITHDRAWAL_STATUS = {\r\n  PENDING: 'pending',\r\n  APPROVED: 'approved',\r\n  REJECTED: 'rejected',\r\n} as const;\r\n\r\nexport type WithdrawalStatus = typeof WITHDRAWAL_STATUS[keyof typeof WITHDRAWAL_STATUS];\r\n\r\n/**\r\n * Default values\r\n */\r\nexport const DEFAULT_MIN_AMOUNT = 0.001;\r\nexport const DEFAULT_MAX_AMOUNT = 10;\r\nexport const DEFAULT_FEE = 0.0005;\r\n\r\n/**\r\n * Helper type guards\r\n */\r\nexport function isWithdrawalPlatform(obj: any): obj is WithdrawalPlatformData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'name' in obj &&\r\n    'symbol' in obj &&\r\n    'minAmount' in obj &&\r\n    'maxAmount' in obj;\r\n}\r\n\r\nexport function isWithdrawalRequest(obj: any): obj is WithdrawalRequestData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'amount' in obj &&\r\n    'accountDetails' in obj &&\r\n    'status' in obj &&\r\n    'platformId' in obj &&\r\n    'userId' in obj;\r\n}","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\nimport WithdrawalPlatform from './WithdrawalPlatform';\r\nimport { WithdrawalStatus, WITHDRAWAL_STATUS } from '../types';\r\n\r\n/**\r\n * WithdrawalRequest model for Flarum\r\n * \r\n * This model represents a user's withdrawal request.\r\n */\r\nexport default class WithdrawalRequest extends Model {\r\n  // Basic attributes\r\n  amount = Model.attribute<number>('amount');\r\n  accountDetails = Model.attribute<string>('accountDetails');\r\n  message = Model.attribute<string>('message');\r\n  status = Model.attribute<WithdrawalStatus>('status');\r\n  \r\n  // Foreign keys\r\n  platformId = Model.attribute<number>('platformId');\r\n  userId = Model.attribute<number>('userId');\r\n  \r\n  // Timestamps\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n  \r\n  // Relationships\r\n  user = Model.hasOne<User>('user');\r\n  platform = Model.hasOne<WithdrawalPlatform>('platform');\r\n  \r\n  // Computed properties\r\n  apiEndpoint() {\r\n    return `/withdrawal-requests/${this.id()}`;\r\n  }\r\n  \r\n  // Status helpers\r\n  isPending(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.PENDING;\r\n  }\r\n  \r\n  isApproved(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.APPROVED;\r\n  }\r\n  \r\n  isRejected(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.REJECTED;\r\n  }\r\n  \r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n  \r\n  // Display helpers\r\n  statusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`withdrawal.forum.status.${status}`);\r\n  }\r\n  \r\n  statusColor(): string {\r\n    const status = this.status();\r\n    switch (status) {\r\n      case WITHDRAWAL_STATUS.APPROVED:\r\n        return 'success';\r\n      case WITHDRAWAL_STATUS.REJECTED:\r\n        return 'danger';\r\n      case WITHDRAWAL_STATUS.PENDING:\r\n      default:\r\n        return 'warning';\r\n    }\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\n\r\nexport default class DepositPlatform extends Model {\r\n  name = Model.attribute<string>('name');\r\n  symbol = Model.attribute<string>('symbol');\r\n  network = Model.attribute<string>('network');\r\n  networkTypeId = Model.attribute('networkTypeId');\r\n  displayName = Model.attribute<string>('displayName');\r\n  minAmount = Model.attribute('minAmount');\r\n  maxAmount = Model.attribute('maxAmount');\r\n  address = Model.attribute('address');\r\n  qrCodeImageUrl = Model.attribute<string>('qrCodeImageUrl');\r\n  iconUrl = Model.attribute<string>('iconUrl');\r\n  iconClass = Model.attribute<string>('iconClass');\r\n  warningText = Model.attribute<string>('warningText');\r\n  networkConfig = Model.attribute('networkConfig');\r\n  isActive = Model.attribute('isActive');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n}","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\nimport DepositPlatform from './DepositPlatform';\r\nimport DepositAddress from './DepositAddress';\r\n\r\nexport default class DepositTransaction extends Model {\r\n  amount = Model.attribute('amount');\r\n  fee = Model.attribute('fee');\r\n  creditedAmount = Model.attribute('creditedAmount');\r\n  transactionHash = Model.attribute('transactionHash');\r\n  fromAddress = Model.attribute('fromAddress');\r\n  memo = Model.attribute('memo');\r\n  userMessage = Model.attribute('userMessage');\r\n  status = Model.attribute('status');\r\n  statusColor = Model.attribute('statusColor');\r\n  blockchainData = Model.attribute('blockchainData');\r\n  confirmations = Model.attribute('confirmations');\r\n  requiredConfirmations = Model.attribute('requiredConfirmations');\r\n  hasEnoughConfirmations = Model.attribute('hasEnoughConfirmations');\r\n  canBeCompleted = Model.attribute('canBeCompleted');\r\n  explorerUrl = Model.attribute('explorerUrl');\r\n  detectedAt = Model.attribute('detectedAt', Model.transformDate);\r\n  confirmedAt = Model.attribute('confirmedAt', Model.transformDate);\r\n  completedAt = Model.attribute('completedAt', Model.transformDate);\r\n  adminNotes = Model.attribute('adminNotes');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n\r\n  user = Model.hasOne<User>('user');\r\n  platform = Model.hasOne<DepositPlatform>('platform');\r\n  depositAddress = Model.hasOne<DepositAddress>('depositAddress');\r\n  processedBy = Model.hasOne<User>('processedBy');\r\n}","import Model from 'flarum/common/Model';\n\nexport default class NetworkType extends Model {\n  id = Model.attribute<number>('id');\n  name = Model.attribute<string>('name');\n  code = Model.attribute<string>('code');\n  description = Model.attribute<string>('description');\n  iconUrl = Model.attribute<string>('iconUrl');\n  iconClass = Model.attribute<string>('iconClass');\n  config = Model.attribute<Record<string, any>>('config');\n  isActive = Model.attribute<boolean>('isActive');\n  sortOrder = Model.attribute<number>('sortOrder');\n  createdAt = Model.attribute<Date>('createdAt', Model.transformDate);\n  updatedAt = Model.attribute<Date>('updatedAt', Model.transformDate);\n}","import app from 'flarum/admin/app';\r\nimport UnifiedManagementPage from './components/UnifiedManagementPage';\r\nimport WithdrawalPlatform from '../common/models/WithdrawalPlatform';\r\nimport WithdrawalRequest from '../common/models/WithdrawalRequest';\r\nimport DepositPlatform from '../common/models/DepositPlatform';\r\nimport DepositTransaction from '../common/models/DepositTransaction';\r\nimport NetworkType from '../common/models/NetworkType';\r\n\r\napp.initializers.add('wusong8899-withdrawal', () => {\r\n  // Register models in store\r\n  app.store.models['withdrawal-platforms'] = WithdrawalPlatform;\r\n  app.store.models['withdrawal-requests'] = WithdrawalRequest;\r\n  app.store.models['deposit-platforms'] = DepositPlatform;\r\n  app.store.models['deposit-transactions'] = DepositTransaction;\r\n  app.store.models['network-types'] = NetworkType;\r\n\r\n  app.extensionData\r\n    .for('wusong8899-withdrawal')\r\n    .registerPage(UnifiedManagementPage);\r\n});"],"names":["ConfirmModal","Modal","title","dangerous","modalIcon","icon","message","confirmText","cancelText","onConfirm","onCancel","Button","app","GenericManagementPage","ExtensionPage","config","vnode","LoadingIndicator","m","tab","activeTab","props","formData","error","platform","platformName","transaction","status","prefix","key","value","GeneralSettingsSection","Component","withAttr","FormValidator","fieldName","displayName","minLength","min","max","numValue","_url","condition","AddPlatformForm","Stream","validator","minVal","GenericPlatformListItem","type","onToggleStatus","onDelete","style","platformData","translationPrefix","Switch","id","name","symbol","network","minAmount","maxAmount","fee","address","isActive","createdDate","dateDisplay","humanTime","e","iconUrl","iconClass","PlatformManagementSection","platforms","submittingPlatform","onAddPlatform","onTogglePlatformStatus","onDeletePlatform","WithdrawalRequestItem","request","showActions","showDelete","requestId","amount","accountDetails","userName","userData","platformSymbol","statusClass","RequestManagementSection","requests","onUpdateRequestStatus","onDeleteRequest","pendingRequests","r","processedRequests","AddDepositPlatformForm","submitting","networkTypeId","networkType","nt","response","maxVal","result","attrs","DepositTransactionItem","onUpdateStatus","username","actions","hash","DepositManagementSection","transactions","onUpdateTransactionStatus","pendingTransactions","t","completedTransactions","NetworkTypeListItem","data","AddNetworkTypeForm","NetworkTypeManagementSection","errorMessage","DEFAULT_TIMEOUT","DEFAULT_HEADERS","buildRequestConfig","method","endpoint","body","params","headers","timeout","fullUrl","requestConfig","urlParams","parseError","apiRequest","options","showSuccessAlert","showErrorAlert","successMessage","validateResponse","transformResponse","onSuccess","onError","finalResponse","apiError","apiGet","apiPost","apiPatch","apiDelete","createWithdrawalPlatformOperations","platformId","currentStatus","record","createDepositPlatformOperations","createWithdrawalRequestOperations","createDepositTransactionOperations","transactionId","UnifiedManagementPage","depositOperations","depositTransactionOperations","usersToLoad","userRelation","userId","userPromises","loadedUsers","index","WithdrawalPlatform","Model","WITHDRAWAL_STATUS","WithdrawalRequest","DepositPlatform","DepositTransaction","NetworkType"],"mappings":"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"}