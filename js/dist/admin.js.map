{"version":3,"file":"admin.js","sources":["../src/common/components/shared/ConfirmModal.tsx","../src/admin/components/shared/GenericManagementPage.tsx","../src/admin/components/sections/GeneralSettingsSection.tsx","../src/common/utils/formValidators.ts","../src/admin/components/forms/AddPlatformForm.tsx","../src/admin/components/shared/GenericPlatformListItem.tsx","../src/admin/components/sections/PlatformManagementSection.tsx","../src/admin/components/items/WithdrawalRequestItem.tsx","../src/admin/components/sections/RequestManagementSection.tsx","../src/admin/components/sections/DepositRecordManagementSection.tsx","../src/admin/components/forms/AddDepositPlatformForm.tsx","../src/admin/components/sections/DepositPlatformManagementSection.tsx","../src/admin/utils/platformOperations.ts","../src/common/types/services.ts","../src/common/services/WithdrawalService.ts","../src/common/services/DepositService.ts","../src/common/services/PlatformService.ts","../src/common/services/SettingsService.ts","../src/common/services/AddressService.ts","../src/admin/components/UnifiedManagementPage.tsx","../src/common/models/WithdrawalPlatform.ts","../src/common/types/index.ts","../src/common/models/WithdrawalRequest.ts","../src/common/models/DepositPlatform.ts","../src/common/models/DepositRecord.ts","../src/admin/index.ts"],"sourcesContent":["import Modal, { IInternalModalAttrs } from 'flarum/common/components/Modal';\r\nimport Button from 'flarum/common/components/Button';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport app from 'flarum/common/app';\r\n\r\nexport interface ConfirmModalAttrs extends IInternalModalAttrs {\r\n  title: string;\r\n  message: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  onConfirm: () => void;\r\n  onCancel: () => void;\r\n  dangerous?: boolean;\r\n  icon?: string;\r\n}\r\n\r\n/**\r\n * 通用确认模态框组件\r\n * 用于替代重复的删除确认、状态变更确认等模态框\r\n */\r\nexport default class ConfirmModal extends Modal<ConfirmModalAttrs> {\r\n  className() {\r\n    return 'ConfirmModal';\r\n  }\r\n\r\n  title() {\r\n    const { title, dangerous = false, icon: modalIcon = dangerous ? 'fas fa-exclamation-triangle' : 'fas fa-question-circle' } = this.attrs;\r\n    \r\n    return (\r\n      <span>\r\n        {modalIcon && (\r\n          <span className={`ConfirmModal-icon ${dangerous ? 'dangerous' : ''}`}>\r\n            {icon(modalIcon)}\r\n          </span>\r\n        )}\r\n        {title}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  content() {\r\n    const { \r\n      message, \r\n      confirmText = 'Confirm',\r\n      cancelText = 'Cancel',\r\n      onConfirm, \r\n      onCancel, \r\n      dangerous = false\r\n    } = this.attrs;\r\n\r\n    return (\r\n      <div className=\"Modal-body\">\r\n        <div className=\"ConfirmModal-message\">\r\n          {message}\r\n        </div>\r\n        \r\n        <div className=\"Form-group\">\r\n          <div className=\"ButtonGroup\">\r\n            <Button\r\n              className=\"Button\"\r\n              onclick={() => {\r\n                onCancel();\r\n                app.modal.close();\r\n              }}\r\n            >\r\n              {cancelText}\r\n            </Button>\r\n            <Button\r\n              className={`Button Button--${dangerous ? 'danger' : 'primary'}`}\r\n              onclick={() => {\r\n                onConfirm();\r\n                app.modal.close();\r\n              }}\r\n            >\r\n              {confirmText}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\r\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport ConfirmModal from '../../../common/components/shared/ConfirmModal';\r\n\r\n// Generic interfaces for platform management\r\nexport interface GenericPlatform {\r\n  id?: () => string | number;\r\n  name?: () => string;\r\n  isActive?: () => boolean;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface GenericTransaction {\r\n  id?: () => string | number;\r\n  status?: () => string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface PlatformOperations<T extends GenericPlatform> {\r\n  create: (data: any) => Promise<T>;\r\n  toggleStatus: (platform: T) => Promise<void>;\r\n  delete: (platform: T) => Promise<void>;\r\n  load: () => Promise<T[]>;\r\n}\r\n\r\nexport interface TransactionOperations<T extends GenericTransaction> {\r\n  updateStatus: (transaction: T, status: string) => Promise<void>;\r\n  load: () => Promise<T[]>;\r\n}\r\n\r\nexport interface TabConfiguration {\r\n  key: string;\r\n  label: string;\r\n  component: Mithril.ComponentTypes<any>;\r\n  props?: () => any;\r\n}\r\n\r\nexport interface GenericManagementPageConfig<\r\n  TPlatform extends GenericPlatform,\r\n  TTransaction extends GenericTransaction\r\n> {\r\n  pageTitle: string;\r\n  extensionId: string;\r\n  \r\n  // Platform configuration\r\n  platformOperations: PlatformOperations<TPlatform>;\r\n  transactionOperations?: TransactionOperations<TTransaction>;\r\n  \r\n  // Tab configuration\r\n  tabs: TabConfiguration[];\r\n  \r\n  // Optional settings section\r\n  settingsComponent?: Mithril.ComponentTypes<any>;\r\n  \r\n  // Translation prefixes\r\n  translations: {\r\n    platformPrefix: string;\r\n    transactionPrefix?: string;\r\n  };\r\n}\r\n\r\nexport default abstract class GenericManagementPage<\r\n  TPlatform extends GenericPlatform,\r\n  TTransaction extends GenericTransaction\r\n> extends ExtensionPage {\r\n  \r\n  // State management\r\n  protected platforms: TPlatform[] = [];\r\n  protected transactions: TTransaction[] = [];\r\n  loading = true;\r\n  protected submittingPlatform = false;\r\n  protected activeTab: string;\r\n  \r\n  // Abstract configuration - must be implemented by subclasses\r\n  protected abstract getConfig(): GenericManagementPageConfig<TPlatform, TTransaction>;\r\n  \r\n  constructor() {\r\n    super();\r\n    const config = this.getConfig();\r\n    this.activeTab = config.tabs[0]?.key || '';\r\n  }\r\n\r\n  oninit(vnode: Mithril.VnodeDOM) {\r\n    super.oninit(vnode);\r\n    this.loadData();\r\n  }\r\n\r\n  content() {\r\n    if (this.loading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n\r\n    const config = this.getConfig();\r\n\r\n    return (\r\n      <div className={`${config.extensionId}ManagementPage`}>\r\n        <div className=\"container\">\r\n          <h2>{config.pageTitle}</h2>\r\n          \r\n          {config.settingsComponent && (\r\n            <div className=\"SettingsSection\">\r\n              {m(config.settingsComponent, { \r\n                onSettingChange: this.saveSetting.bind(this) \r\n              })}\r\n            </div>\r\n          )}\r\n          \r\n          {config.tabs.length > 1 && (\r\n            <div className=\"AdminTabs\">\r\n              <div className=\"AdminTabs-nav\">\r\n                {config.tabs.map(tab => (\r\n                  <button \r\n                    key={tab.key}\r\n                    className={`AdminTabs-tab ${this.activeTab === tab.key ? 'active' : ''}`}\r\n                    onclick={() => { this.activeTab = tab.key; }}\r\n                  >\r\n                    {tab.label}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n              \r\n              <div className=\"AdminTabs-content\">\r\n                {this.renderActiveTabContent()}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {config.tabs.length === 1 && (\r\n            <div className=\"SingleTabContent\">\r\n              {this.renderActiveTabContent()}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  protected renderActiveTabContent(): Mithril.Children {\r\n    const config = this.getConfig();\r\n    const activeTab = config.tabs.find(tab => tab.key === this.activeTab);\r\n    \r\n    if (!activeTab) return null;\r\n\r\n    const props = {\r\n      // Common platform management props\r\n      platforms: this.platforms,\r\n      transactions: this.transactions,\r\n      submittingPlatform: this.submittingPlatform,\r\n      \r\n      // Platform management callbacks\r\n      onAddPlatform: this.addPlatform.bind(this),\r\n      onTogglePlatformStatus: this.togglePlatformStatus.bind(this),\r\n      onDeletePlatform: this.deletePlatform.bind(this),\r\n      \r\n      // Transaction management callbacks\r\n      ...(config.transactionOperations && {\r\n        onUpdateTransactionStatus: this.updateTransactionStatus.bind(this),\r\n      }),\r\n      \r\n      // Additional props from tab configuration\r\n      ...(activeTab.props ? activeTab.props() : {})\r\n    };\r\n\r\n    return m(activeTab.component, props);\r\n  }\r\n\r\n  // Generic platform management methods\r\n  protected async addPlatform(formData: any): Promise<void> {\r\n    if (this.submittingPlatform) return;\r\n\r\n    this.submittingPlatform = true;\r\n    const config = this.getConfig();\r\n\r\n    try {\r\n      await config.platformOperations.create(formData);\r\n      await this.loadPlatforms();\r\n    } catch (error) {\r\n      console.error('Error adding platform:', error);\r\n      // Error handling is done by the platform operations\r\n    } finally {\r\n      this.submittingPlatform = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  protected async togglePlatformStatus(platform: TPlatform): Promise<void> {\r\n    const config = this.getConfig();\r\n    try {\r\n      await config.platformOperations.toggleStatus(platform);\r\n      await this.loadPlatforms();\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error toggling platform status:', error);\r\n    }\r\n  }\r\n\r\n  protected deletePlatform(platform: TPlatform): void {\r\n    const config = this.getConfig();\r\n    const platformName = (typeof platform.name === 'function' ? platform.name() : platform.name) || 'Unknown Platform';\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_title`),\r\n      message: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_message`, { name: platformName }),\r\n      confirmText: app.translator.trans(`${config.translations.platformPrefix}.delete_confirm_button`),\r\n      cancelText: app.translator.trans(`${config.translations.platformPrefix}.delete_cancel_button`),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          await config.platformOperations.delete(platform);\r\n          await this.loadPlatforms();\r\n          m.redraw();\r\n          \r\n          app.alerts.show(\r\n            { type: 'success', dismissible: true },\r\n            app.translator.trans(`${config.translations.platformPrefix}.delete_success`)\r\n          );\r\n        } catch (error) {\r\n          console.error('Error deleting platform:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans(`${config.translations.platformPrefix}.delete_error`)\r\n          );\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Generic transaction management methods\r\n  protected async updateTransactionStatus(transaction: TTransaction, status: string): Promise<void> {\r\n    const config = this.getConfig();\r\n    if (!config.transactionOperations) return;\r\n\r\n    try {\r\n      await config.transactionOperations.updateStatus(transaction, status);\r\n      await this.loadTransactions();\r\n      \r\n      const prefix = config.translations.transactionPrefix || config.translations.platformPrefix;\r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`${prefix}.${status}_success`)\r\n      );\r\n    } catch (error) {\r\n      console.error('Error updating transaction:', error);\r\n      const prefix = config.translations.transactionPrefix || config.translations.platformPrefix;\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans(`${prefix}.update_error`)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Data loading methods\r\n  protected async loadData(): Promise<void> {\r\n    try {\r\n      await this.loadPlatforms();\r\n      if (this.getConfig().transactionOperations) {\r\n        await this.loadTransactions();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n    } finally {\r\n      this.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  protected async loadPlatforms(): Promise<void> {\r\n    const config = this.getConfig();\r\n    try {\r\n      this.platforms = await config.platformOperations.load();\r\n      console.log('Loaded platforms:', this.platforms);\r\n    } catch (error) {\r\n      console.error('Error loading platforms:', error);\r\n      this.platforms = [];\r\n    }\r\n  }\r\n\r\n  protected async loadTransactions(): Promise<void> {\r\n    const config = this.getConfig();\r\n    if (!config.transactionOperations) return;\r\n\r\n    try {\r\n      this.transactions = await config.transactionOperations.load();\r\n      console.log('Loaded transactions:', this.transactions);\r\n    } catch (error) {\r\n      console.error('Error loading transactions:', error);\r\n      this.transactions = [];\r\n    }\r\n  }\r\n\r\n  // Settings management using SettingsService\r\n  protected async saveSetting(key: string, value: string): Promise<void> {\r\n    try {\r\n      // Import SettingsService dynamically to avoid circular dependencies\r\n      const { settingsService } = await import('../../../common/services/SettingsService');\r\n      await settingsService.saveSetting(key, value);\r\n      \r\n    } catch (error) {\r\n      console.error('Error saving setting:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : 'Failed to save setting'\r\n      );\r\n    }\r\n  }\r\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport type Mithril from 'mithril';\n\nexport interface GeneralSettingsSectionAttrs {\n  onSettingChange: (key: string, value: string) => void;\n}\n\nexport default class GeneralSettingsSection extends Component<GeneralSettingsSectionAttrs> {\n  view(): Mithril.Children {\n    return (\n      <div className=\"WithdrawalManagementPage-section\">\n        <h3>General Settings</h3>\n        \n        <div className=\"Form\">\n          <div className=\"Form-group\">\n            <label>{app.translator.trans('withdrawal.admin.settings.money_icon_url')}</label>\n            <input\n              type=\"url\"\n              className=\"FormControl\"\n              placeholder=\"https://i.mji.rip/2025/08/28/cd18932c68e9bbee9502b1fb6317cba9.png\"\n              value={app.forum.attribute('wusong8899-withdrawal.moneyIconUrl') || ''}\n              oninput={withAttr('value', (value: string) => \n                this.attrs.onSettingChange('wusong8899-withdrawal.moneyIconUrl', value)\n              )}\n            />\n            <small className=\"helpText\">{app.translator.trans('withdrawal.admin.settings.money_icon_url_help')}</small>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import app from 'flarum/common/app';\r\n\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n}\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  firstErrorMessage?: string;\r\n}\r\n\r\n/**\r\n * 通用表单验证工具\r\n * 统一提款和存款平台表单的验证逻辑\r\n */\r\nexport class FormValidator {\r\n  private errors: ValidationError[] = [];\r\n\r\n  /**\r\n   * 验证必填字段\r\n   */\r\n  required(value: any, fieldName: string, displayName?: string): this {\r\n    if (!value || (typeof value === 'string' && value.trim() === '')) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message: `${displayName || fieldName} is required`\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证最小长度\r\n   */\r\n  minLength(value: string, minLength: number, fieldName: string, displayName?: string): this {\r\n    if (value && value.length < minLength) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message: `${displayName || fieldName} must be at least ${minLength} characters`\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证数字范围\r\n   */\r\n  numberRange(value: string | number, min?: number, max?: number, fieldName?: string, displayName?: string): this {\r\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\r\n    \r\n    if (isNaN(numValue)) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be a valid number`\r\n      });\r\n      return this;\r\n    }\r\n\r\n    if (min !== undefined && numValue < min) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be at least ${min}`\r\n      });\r\n    }\r\n\r\n    if (max !== undefined && numValue > max) {\r\n      this.errors.push({\r\n        field: fieldName || 'number',\r\n        message: `${displayName || 'Value'} must be at most ${max}`\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证URL格式\r\n   */\r\n  url(value: string, fieldName: string, displayName?: string): this {\r\n    if (value && value.trim()) {\r\n      try {\r\n        const _url = new URL(value);\r\n        // URL is valid, no action needed\r\n        void _url; // Explicit void to indicate we don't need the result\r\n      } catch {\r\n        this.errors.push({\r\n          field: fieldName,\r\n          message: `${displayName || fieldName} must be a valid URL`\r\n        });\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 自定义验证规则\r\n   */\r\n  custom(condition: boolean, fieldName: string, message: string): this {\r\n    if (!condition) {\r\n      this.errors.push({\r\n        field: fieldName,\r\n        message\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 获取验证结果\r\n   */\r\n  getResult(): ValidationResult {\r\n    const isValid = this.errors.length === 0;\r\n    return {\r\n      isValid,\r\n      errors: this.errors,\r\n      firstErrorMessage: this.errors.length > 0 ? this.errors[0].message : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重置验证状态\r\n   */\r\n  reset(): this {\r\n    this.errors = [];\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * 提款平台表单验证\r\n */\r\nexport function validateWithdrawalPlatform(data: {\r\n  name: string;\r\n  symbol: string;\r\n  network?: string;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  fee: string;\r\n  iconUrl?: string;\r\n}): ValidationResult {\r\n  const validator = new FormValidator();\r\n\r\n  validator\r\n    .required(data.name, 'name', 'Platform Name')\r\n    .required(data.symbol, 'symbol', 'Currency Symbol')\r\n    .minLength(data.symbol, 1, 'symbol', 'Currency Symbol')\r\n    .numberRange(data.minAmount, 0, undefined, 'minAmount', 'Minimum Amount')\r\n    .numberRange(data.fee, 0, undefined, 'fee', 'Fee');\r\n\r\n  if (data.maxAmount) {\r\n    validator.numberRange(data.maxAmount, parseFloat(data.minAmount) || 0, undefined, 'maxAmount', 'Maximum Amount');\r\n  }\r\n\r\n  if (data.iconUrl) {\r\n    validator.url(data.iconUrl, 'iconUrl', 'Icon URL');\r\n  }\r\n\r\n  return validator.getResult();\r\n}\r\n\r\n/**\r\n * 存款平台表单验证\r\n */\r\nexport function validateDepositPlatform(data: {\r\n  name: string;\r\n  symbol: string;\r\n  network?: string;\r\n  address: string;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  qrCodeImageUrl?: string;\r\n  iconUrl?: string;\r\n}): ValidationResult {\r\n  const validator = new FormValidator();\r\n\r\n  validator\r\n    .required(data.name, 'name', 'Platform Name')\r\n    .required(data.symbol, 'symbol', 'Currency Symbol')\r\n    .required(data.address, 'address', 'Deposit Address')\r\n    .minLength(data.symbol, 1, 'symbol', 'Currency Symbol')\r\n    .minLength(data.address, 10, 'address', 'Deposit Address');\r\n\r\n  if (data.minAmount) {\r\n    validator.numberRange(data.minAmount, 0, undefined, 'minAmount', 'Minimum Amount');\r\n  }\r\n\r\n  if (data.maxAmount) {\r\n    const minAmountNum = parseFloat(data.minAmount) || 0;\r\n    validator.numberRange(data.maxAmount, minAmountNum, undefined, 'maxAmount', 'Maximum Amount');\r\n  }\r\n\r\n  if (data.qrCodeImageUrl) {\r\n    validator.url(data.qrCodeImageUrl, 'qrCodeImageUrl', 'QR Code Image URL');\r\n  }\r\n\r\n  if (data.iconUrl) {\r\n    validator.url(data.iconUrl, 'iconUrl', 'Icon URL');\r\n  }\r\n\r\n  return validator.getResult();\r\n}\r\n\r\n/**\r\n * 显示验证错误警告\r\n */\r\nexport function showValidationErrors(result: ValidationResult): void {\r\n  if (!result.isValid && result.firstErrorMessage) {\r\n    app.alerts.show(\r\n      { type: 'error', dismissible: true },\r\n      result.firstErrorMessage\r\n    );\r\n  }\r\n}\r\n\r\n","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport Stream from 'flarum/common/utils/Stream';\nimport type Mithril from 'mithril';\nimport { PlatformFormData } from '../types/AdminTypes';\nimport { FormValidator } from '../../../common/utils/formValidators';\nimport m from 'mithril';\n\nexport interface AddPlatformFormAttrs {\n  onSubmit: (formData: PlatformFormData) => Promise<void>;\n  submitting: boolean;\n}\n\nexport default class AddPlatformForm extends Component<AddPlatformFormAttrs> {\n  private name = Stream('');\n  private symbol = Stream('');\n  private network = Stream('');\n  private minAmount = Stream('');\n  private maxAmount = Stream('');\n  private fee = Stream('');\n  private iconUrl = Stream('');\n  private iconClass = Stream('');\n\n  view(): Mithril.Children {\n    return (\n      <div className=\"WithdrawalManagementPage-addPlatform\">\n        <div className=\"Form-group\">\n          <div className=\"Form-row\">\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.name')}</label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder={app.translator.trans('withdrawal.admin.platforms.add_placeholder')}\n                bidi={this.name}\n              />\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.symbol')}</label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"BTC, ETH, USDT...\"\n                bidi={this.symbol}\n              />\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.network')}</label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"TRC20, ERC20, BSC... (optional)\"\n                bidi={this.network}\n              />\n              <small className=\"helpText\">{app.translator.trans('withdrawal.admin.platforms.network_help')}</small>\n            </div>\n          </div>\n          \n          <div className=\"Form-row\">\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.min_amount')}</label>\n              <input\n                type=\"number\"\n                step=\"0.00000001\"\n                className=\"FormControl\"\n                placeholder=\"0.001\"\n                bidi={this.minAmount}\n              />\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.max_amount')}</label>\n              <input\n                type=\"number\"\n                step=\"0.00000001\"\n                className=\"FormControl\"\n                placeholder=\"10.0\"\n                bidi={this.maxAmount}\n              />\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.fee')}</label>\n              <input\n                type=\"number\"\n                step=\"0.00000001\"\n                className=\"FormControl\"\n                placeholder=\"0.0005\"\n                bidi={this.fee}\n              />\n            </div>\n          </div>\n          \n          <div className=\"Form-row\">\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.icon_url')}</label>\n              <input\n                type=\"url\"\n                className=\"FormControl\"\n                placeholder=\"https://example.com/icon.png\"\n                bidi={this.iconUrl}\n              />\n              <small className=\"helpText\">{app.translator.trans('withdrawal.admin.platforms.icon_url_help')}</small>\n            </div>\n            <div className=\"Form-col\">\n              <label>{app.translator.trans('withdrawal.admin.platforms.icon_class')}</label>\n              <input\n                type=\"text\"\n                className=\"FormControl\"\n                placeholder=\"fas fa-coins\"\n                bidi={this.iconClass}\n              />\n              <small className=\"helpText\">{app.translator.trans('withdrawal.admin.platforms.icon_class_help')}</small>\n            </div>\n          </div>\n          \n          <div className=\"Form-group\">\n            <Button\n              className=\"Button Button--primary\"\n              loading={this.attrs.submitting}\n              disabled={this.attrs.submitting}\n              onclick={this.handleSubmit.bind(this)}\n            >\n              {app.translator.trans('withdrawal.admin.platforms.add_button')}\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private validateForm(): boolean {\n    const validator = new FormValidator();\n    \n    try {\n      // Fixed: Convert NestedStringArray to string for FormValidator\n      const nameLabel = app.translator.trans('withdrawal.admin.platforms.name').toString();\n      const symbolLabel = app.translator.trans('withdrawal.admin.platforms.symbol').toString();\n      const minAmountLabel = app.translator.trans('withdrawal.admin.platforms.min_amount').toString();\n      const maxAmountLabel = app.translator.trans('withdrawal.admin.platforms.max_amount').toString();\n      const feeLabel = app.translator.trans('withdrawal.admin.platforms.fee').toString();\n      \n      validator\n        .required(this.name(), 'name', nameLabel)\n        .required(this.symbol(), 'symbol', symbolLabel)\n        .numberRange(this.minAmount(), 0, undefined, 'minAmount', minAmountLabel)\n        .numberRange(this.maxAmount(), 0, undefined, 'maxAmount', maxAmountLabel)\n        .numberRange(this.fee(), 0, undefined, 'fee', feeLabel);\n\n      // Custom validation for max >= min\n      const minVal = parseFloat(this.minAmount());\n      const maxVal = parseFloat(this.maxAmount());\n      if (maxVal < minVal) {\n        const errorMessage = app.translator.trans('withdrawal.admin.platforms.max_min_error').toString();\n        validator.custom(false, 'maxAmount', errorMessage);\n      }\n\n      // Optional URL validation\n      if (this.iconUrl() && this.iconUrl().trim()) {\n        const iconUrlLabel = app.translator.trans('withdrawal.admin.platforms.icon_url').toString();\n        validator.url(this.iconUrl(), 'iconUrl', iconUrlLabel);\n      }\n\n      const result = validator.getResult();\n      \n      if (!result.isValid && result.firstErrorMessage) {\n        app.alerts.show({ type: 'error', dismissible: true }, result.firstErrorMessage);\n      }\n\n      return result.isValid;\n    } catch (error) {\n      console.error('Form validation error:', error);\n      app.alerts.show({ type: 'error', dismissible: true }, 'Validation failed');\n      return false;\n    }\n  }\n\n  private async handleSubmit(): Promise<void> {\n    if (this.attrs.submitting) return;\n\n    if (!this.validateForm()) return;\n\n    const formData: PlatformFormData = {\n      name: this.name(),\n      symbol: this.symbol(),\n      network: this.network(),\n      minAmount: this.minAmount(),\n      maxAmount: this.maxAmount(),\n      fee: this.fee(),\n      iconUrl: this.iconUrl(),\n      iconClass: this.iconClass()\n    };\n\n    try {\n      await this.attrs.onSubmit(formData);\n      this.clearForm();\n    } catch {\n      // Error handling is done in parent component\n    }\n  }\n\n  private clearForm(): void {\n    this.name('');\n    this.symbol('');\n    this.network('');\n    this.minAmount('');\n    this.maxAmount('');\n    this.fee('');\n    this.iconUrl('');\n    this.iconClass('');\n    m.redraw();\n  }\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Switch from 'flarum/common/components/Switch';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\n\r\n// Generic platform interface that can represent both withdrawal and deposit platforms\r\ninterface GenericPlatform {\r\n  id?: () => string | number;\r\n  name?: () => string;\r\n  symbol?: () => string;\r\n  network?: () => string;\r\n  displayName?: () => string;\r\n  minAmount?: () => number;\r\n  maxAmount?: () => number;\r\n  fee?: () => number;\r\n  address?: () => string;\r\n  iconUrl?: () => string;\r\n  iconClass?: () => string;\r\n  isActive?: () => boolean;\r\n  createdAt?: () => Date;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface GenericPlatformListItemAttrs {\r\n  platform: GenericPlatform;\r\n  type: 'withdrawal' | 'deposit';\r\n  onToggleStatus: (platform?: GenericPlatform) => Promise<void>;\r\n  onDelete: (platform?: GenericPlatform) => Promise<void>;\r\n  style?: 'card' | 'list';\r\n}\r\n\r\nexport default class GenericPlatformListItem extends Component<GenericPlatformListItemAttrs> {\r\n  view(vnode: Mithril.Vnode<GenericPlatformListItemAttrs>): Mithril.Children {\r\n    const { platform, type, onToggleStatus, onDelete, style = 'card' } = vnode.attrs;\r\n\r\n    if (style === 'card') {\r\n      return this.renderCardStyle(platform, type, onToggleStatus, onDelete);\r\n    } else {\r\n      return this.renderListStyle(platform, type, onToggleStatus, onDelete);\r\n    }\r\n  }\r\n\r\n  private renderCardStyle(\r\n    platform: GenericPlatform,\r\n    type: string,\r\n    onToggleStatus: (platform?: GenericPlatform) => Promise<void>,\r\n    onDelete: (platform?: GenericPlatform) => Promise<void>\r\n  ): Mithril.Children {\r\n    const platformData = this.extractPlatformData(platform);\r\n    const translationPrefix = type === 'withdrawal' ? 'withdrawal.admin.platforms' : 'withdrawal.admin.deposit.platforms';\r\n\r\n    return (\r\n      <div key={platformData.id} className={`${type}Platform`}>\r\n        <div className={`${type}Platform-info`}>\r\n          <div className={`${type}Platform-primary`}>\r\n            <span className={`${type}Platform-status ${platformData.isActive ? 'active' : 'inactive'}`}>\r\n              {platformData.isActive ? '🟢' : '🔴'}\r\n            </span>\r\n            <span className={`${type}Platform-name`}>{platformData.displayName}</span>\r\n            <span className=\"platform-id\">#{platformData.id}</span>\r\n            {platformData.network && <span className={`${type}Platform-network`}>({platformData.network})</span>}\r\n          </div>\r\n          <div className={`${type}Platform-details`}>\r\n            <span className={`${type}Platform-amounts`}>\r\n              Min: {platformData.minAmount} | Max: {platformData.maxAmount}\r\n              {` | Fee: ${platformData.fee}`}\r\n              {type === 'deposit' && ` | Address: ${platformData.address ? 'Static' : 'Template'}`}\r\n            </span>\r\n            {platformData.createdDate && (\r\n              <span className={`${type}Platform-date`}>{platformData.dateDisplay}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className={`${type}Platform-actions`}>\r\n          <Button\r\n            className={`Button ${platformData.isActive ? 'Button--secondary' : 'Button--primary'}`}\r\n            onclick={() => onToggleStatus(platform)}\r\n          >\r\n            {app.translator.trans(`${translationPrefix}.${platformData.isActive ? 'disable' : 'enable'}`)}\r\n          </Button>\r\n          <Button\r\n            className=\"Button Button--danger\"\r\n            onclick={() => onDelete(platform)}\r\n          >\r\n            {app.translator.trans(`${translationPrefix}.delete`)}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderListStyle(\r\n    platform: GenericPlatform,\r\n    type: string,\r\n    onToggleStatus: (platform?: GenericPlatform) => Promise<void>,\r\n    onDelete: (platform?: GenericPlatform) => Promise<void>\r\n  ): Mithril.Children {\r\n    const platformData = this.extractPlatformData(platform);\r\n    const translationPrefix = type === 'withdrawal' ? 'withdrawal.admin.platforms' : 'withdrawal.admin.deposit.platforms';\r\n\r\n    return (\r\n      <div className={`${type}PlatformListItem`}>\r\n        <div className={`${type}PlatformListItem-content`}>\r\n          <div className={`${type}PlatformListItem-icon`}>\r\n            {this.renderPlatformIcon(platform)}\r\n          </div>\r\n          \r\n          <div className={`${type}PlatformListItem-info`}>\r\n            <div className={`${type}PlatformListItem-primary`}>\r\n              <strong>{platformData.name}</strong>\r\n              <span className={`${type}PlatformListItem-displayName`}>\r\n                {platformData.symbol}\r\n                {platformData.network && ` (${platformData.network})`}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className={`${type}PlatformListItem-details`}>\r\n              <span className={`${type}PlatformListItem-detail`}>\r\n                Min: {platformData.minAmount} {platformData.symbol}\r\n              </span>\r\n              {platformData.maxAmount && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Max: {platformData.maxAmount} {platformData.symbol}\r\n                </span>\r\n              )}\r\n              {platformData.fee && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Fee: {platformData.fee} {platformData.symbol}\r\n                </span>\r\n              )}\r\n              {type === 'deposit' && (\r\n                <span className={`${type}PlatformListItem-detail`}>\r\n                  Address: {platformData.address ? 'Static' : 'Template'}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className={`${type}PlatformListItem-actions`}>\r\n            <Switch \r\n              state={platformData.isActive} \r\n              onchange={async () => {\r\n                await onToggleStatus(platform);\r\n                m.redraw();\r\n              }}\r\n            >\r\n              {platformData.isActive \r\n                ? app.translator.trans(`${translationPrefix}.active`)\r\n                : app.translator.trans(`${translationPrefix}.inactive`)\r\n              }\r\n            </Switch>\r\n            \r\n            <Button\r\n              className=\"Button Button--icon Button--flat\"\r\n              icon=\"fas fa-trash\"\r\n              onclick={async () => {\r\n                await onDelete(platform);\r\n                m.redraw();\r\n              }}\r\n              title={app.translator.trans(`${translationPrefix}.delete`)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private extractPlatformData(platform: GenericPlatform) {\r\n    // Handle both Model instances and plain objects\r\n    const id = typeof platform.id === 'function' ? platform.id() : platform.id;\r\n    const name = (typeof platform.name === 'function' ? platform.name() : platform.data?.attributes?.name) || 'Unknown Platform';\r\n    const symbol = (typeof platform.symbol === 'function' ? platform.symbol() : platform.data?.attributes?.symbol) || '';\r\n    const network = (typeof platform.network === 'function' ? platform.network() : platform.data?.attributes?.network) || null;\r\n    const displayName = (typeof platform.displayName === 'function' ? platform.displayName() : platform.data?.attributes?.displayName) || name;\r\n    const minAmount = (typeof platform.minAmount === 'function' ? platform.minAmount() : platform.data?.attributes?.minAmount) || 'N/A';\r\n    const maxAmount = (typeof platform.maxAmount === 'function' ? platform.maxAmount() : platform.data?.attributes?.maxAmount) || 'N/A';\r\n    const fee = (typeof platform.fee === 'function' ? platform.fee() : platform.data?.attributes?.fee) || 'N/A';\r\n    const address = (typeof platform.address === 'function' ? platform.address() : platform.data?.attributes?.address) || null;\r\n    const isActive = (typeof platform.isActive === 'function' ? platform.isActive() : platform.data?.attributes?.isActive) ?? false;\r\n    const createdDate = (typeof platform.createdAt === 'function' ? platform.createdAt() : platform.data?.attributes?.createdAt) || null;\r\n    \r\n    let dateDisplay: Mithril.Children = 'N/A';\r\n    if (createdDate) {\r\n      try {\r\n        dateDisplay = humanTime(createdDate);\r\n      } catch (e) {\r\n        console.error('Error formatting date:', e);\r\n        dateDisplay = 'Invalid Date';\r\n      }\r\n    }\r\n\r\n    return {\r\n      id,\r\n      name,\r\n      symbol,\r\n      network,\r\n      displayName,\r\n      minAmount,\r\n      maxAmount,\r\n      fee,\r\n      address,\r\n      isActive,\r\n      createdDate,\r\n      dateDisplay\r\n    };\r\n  }\r\n\r\n  private renderPlatformIcon(platform: GenericPlatform): Mithril.Children {\r\n    const iconUrl = typeof platform.iconUrl === 'function' ? platform.iconUrl() : platform.attributes?.iconUrl;\r\n    const iconClass = typeof platform.iconClass === 'function' ? platform.iconClass() : platform.attributes?.iconClass;\r\n    const symbol = typeof platform.symbol === 'function' ? platform.symbol() : platform.attributes?.symbol;\r\n\r\n    if (iconUrl) {\r\n      return <img src={iconUrl} alt={symbol} className=\"PlatformListItem-img\" />;\r\n    }\r\n\r\n    if (iconClass) {\r\n      return icon(iconClass);\r\n    }\r\n\r\n    // Default currency icons - now uses generic class names that work for both types\r\n    switch (symbol) {\r\n      case 'USDT':\r\n        return <span className=\"PlatformListItem-currencyIcon usdt\">₮</span>;\r\n      case 'USDC':\r\n        return <span className=\"PlatformListItem-currencyIcon usdc\">$</span>;\r\n      case 'BTC':\r\n        return <span className=\"PlatformListItem-currencyIcon btc\">₿</span>;\r\n      case 'ETH':\r\n        return <span className=\"PlatformListItem-currencyIcon eth\">Ξ</span>;\r\n      default:\r\n        return icon('fas fa-coins');\r\n    }\r\n  }\r\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\nimport { WithdrawalPlatform, PlatformFormData } from '../types/AdminTypes';\nimport AddPlatformForm from '../forms/AddPlatformForm';\nimport GenericPlatformListItem from '../shared/GenericPlatformListItem';\n\nexport interface PlatformManagementSectionAttrs {\n  platforms: WithdrawalPlatform[];\n  submittingPlatform: boolean;\n  onAddPlatform: (formData: PlatformFormData) => Promise<void>;\n  onTogglePlatformStatus: (platform: WithdrawalPlatform) => Promise<void>;\n  onDeletePlatform: (platform: WithdrawalPlatform) => void;\n}\n\nexport default class PlatformManagementSection extends Component<PlatformManagementSectionAttrs> {\n  view(): Mithril.Children {\n    const { platforms, submittingPlatform, onAddPlatform, onTogglePlatformStatus, onDeletePlatform } = this.attrs;\n\n    return (\n      <div className=\"WithdrawalManagementPage-section\">\n        <h3>{app.translator.trans('withdrawal.admin.platforms.title')}</h3>\n        \n        <AddPlatformForm \n          onSubmit={onAddPlatform}\n          submitting={submittingPlatform}\n        />\n\n        <div className=\"WithdrawalManagementPage-platformList\">\n          {platforms.length === 0 ? (\n            <p>{app.translator.trans('withdrawal.admin.platforms.empty')}</p>\n          ) : (\n            platforms.map((platform) => (\n              <GenericPlatformListItem\n                key={platform.id?.() ?? platform.id ?? Math.random()}\n                platform={platform}\n                type=\"withdrawal\"\n                style=\"card\"\n                onToggleStatus={onTogglePlatformStatus}\n                onDelete={onDeletePlatform}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport humanTime from 'flarum/common/helpers/humanTime';\nimport type Mithril from 'mithril';\nimport { WithdrawalRequest } from '../types/AdminTypes';\n\nexport interface WithdrawalRequestItemAttrs {\n  request: WithdrawalRequest;\n  showActions: boolean;\n  showDelete?: boolean;\n  onUpdateStatus?: (request: WithdrawalRequest, status: string) => Promise<void>;\n  onDelete?: (request: WithdrawalRequest) => void;\n}\n\nexport default class WithdrawalRequestItem extends Component<WithdrawalRequestItemAttrs> {\n  view(): Mithril.Children {\n    const request = this.attrs.request;\n    const { showActions, showDelete = false } = this.attrs;\n    \n    // Handle Flarum Model instances\n    const requestId = typeof request.id === 'function' ? request.id() : request.id;\n    const amount = typeof request.amount === 'function' ? request.amount() : (request.attributes?.amount || 0);\n    const status = typeof request.status === 'function' ? request.status() : (request.attributes?.status || 'pending');\n    const accountDetails = typeof request.accountDetails === 'function' ? request.accountDetails() : \n      (request.attributes?.accountDetails || request.attributes?.account_details || 'N/A');\n    const createdDate = typeof request.createdAt === 'function' ? request.createdAt() : (request.attributes?.createdAt || null);\n    \n    // Get user info\n    let userName = 'Unknown User';\n    if (typeof request.user === 'function') {\n      const userData = request.user();\n      if (userData && typeof userData.displayName === 'function') {\n        userName = userData.displayName();\n      } else if (userData && userData.attributes?.displayName) {\n        userName = userData.attributes.displayName;\n      }\n    }\n    \n    // Get platform info - simplified approach using Flarum Model relationships\n    let platformName = 'Unknown Platform';\n    let platformSymbol = 'N/A';\n    \n    if (typeof request.platform === 'function') {\n      const platform = request.platform();\n      if (platform) {\n        platformName = typeof platform.name === 'function' ? platform.name() : (platform.attributes?.name || 'Unknown Platform');\n        platformSymbol = typeof platform.symbol === 'function' ? platform.symbol() : (platform.attributes?.symbol || 'N/A');\n      }\n    }\n    \n    const statusClass = `status-${status}`;\n    \n    let dateDisplay: Mithril.Children = 'N/A';\n    if (createdDate) {\n      try {\n        dateDisplay = humanTime(createdDate);\n      } catch (e) {\n        console.error('Error formatting request date:', e);\n        dateDisplay = 'Invalid Date';\n      }\n    }\n\n    return (\n      <div key={requestId} className={`WithdrawalRequest ${statusClass}`}>\n        <div className=\"WithdrawalRequest-info\">\n          <div className=\"WithdrawalRequest-user\">\n            <strong>{userName}</strong>\n            <span className=\"request-id\">#{requestId}</span>\n          </div>\n          <div className=\"WithdrawalRequest-details\">\n            <span className=\"amount\">{amount}</span>\n            <span className=\"platform\">{platformName}</span>\n            <span className=\"symbol\">{platformSymbol}</span>\n            <span className=\"date\">{dateDisplay}</span>\n          </div>\n          <div className=\"WithdrawalRequest-account\">\n            <strong>{app.translator.trans('withdrawal.admin.requests.account_details')}:</strong>\n            <span>{accountDetails}</span>\n          </div>\n          <div className=\"WithdrawalRequest-status\">\n            <span className={`Badge Badge--${status}`}>\n              {app.translator.trans(`withdrawal.admin.requests.status.${status}`)}\n            </span>\n          </div>\n        </div>\n        \n        {(showActions || showDelete) && (\n          <div className=\"WithdrawalRequest-actions\">\n            {showActions && this.attrs.onUpdateStatus && (\n              <>\n                <Button\n                  className=\"Button Button--primary\"\n                  onclick={() => this.attrs.onUpdateStatus!(request, 'approved')}\n                >\n                  {app.translator.trans('withdrawal.admin.requests.approve')}\n                </Button>\n                <Button\n                  className=\"Button Button--danger\"\n                  onclick={() => this.attrs.onUpdateStatus!(request, 'rejected')}\n                >\n                  {app.translator.trans('withdrawal.admin.requests.reject')}\n                </Button>\n              </>\n            )}\n            {this.attrs.onDelete && (\n              <Button\n                className=\"Button Button--link\"\n                onclick={() => this.attrs.onDelete!(request)}\n              >\n                <i className=\"fas fa-trash\"></i>\n                {app.translator.trans('withdrawal.admin.requests.delete')}\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}","import app from 'flarum/admin/app';\nimport Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\nimport { WithdrawalRequest } from '../types/AdminTypes';\nimport WithdrawalRequestItem from '../items/WithdrawalRequestItem';\n\nexport interface RequestManagementSectionAttrs {\n  requests: WithdrawalRequest[];\n  onUpdateRequestStatus: (request: WithdrawalRequest, status: string) => Promise<void>;\n  onDeleteRequest: (request: WithdrawalRequest) => void;\n}\n\nexport default class RequestManagementSection extends Component<RequestManagementSectionAttrs> {\n  view(): Mithril.Children {\n    const { requests, onUpdateRequestStatus, onDeleteRequest } = this.attrs;\n\n    const pendingRequests = requests.filter(r => {\n      const status = (typeof r.status === 'function' ? r.status() : r.attributes?.status) || 'pending';\n      return status === 'pending';\n    });\n    \n    const processedRequests = requests.filter(r => {\n      const status = (typeof r.status === 'function' ? r.status() : r.attributes?.status) || 'pending';\n      return status !== 'pending';\n    });\n\n    return (\n      <div className=\"WithdrawalManagementPage-section\">\n        <h3>{app.translator.trans('withdrawal.admin.requests.title')}</h3>\n        \n        <div className=\"WithdrawalManagementPage-pendingRequests\">\n          <h4>{app.translator.trans('withdrawal.admin.requests.pending_title')}</h4>\n          {pendingRequests.length === 0 ? (\n            <p>{app.translator.trans('withdrawal.admin.requests.no_pending')}</p>\n          ) : (\n            pendingRequests.map((request) => (\n              <WithdrawalRequestItem\n                key={typeof request.id === 'function' ? request.id() : request.id}\n                request={request}\n                showActions={true}\n                showDelete={true}\n                onUpdateStatus={onUpdateRequestStatus}\n                onDelete={onDeleteRequest}\n              />\n            ))\n          )}\n        </div>\n\n        <div className=\"WithdrawalManagementPage-processedRequests\">\n          <h4>{app.translator.trans('withdrawal.admin.requests.processed_title')}</h4>\n          {processedRequests.length === 0 ? (\n            <p>{app.translator.trans('withdrawal.admin.requests.no_processed')}</p>\n          ) : (\n            processedRequests.map((request) => (\n              <WithdrawalRequestItem\n                key={typeof request.id === 'function' ? request.id() : request.id}\n                request={request}\n                showActions={false}\n                showDelete={true}\n                onDelete={onDeleteRequest}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport ConfirmModal from '../../../common/components/shared/ConfirmModal';\r\n\r\ninterface DepositRecord {\r\n  id(): string | number;\r\n  userId(): number;\r\n  platformId(): number;\r\n  platformAccount(): string;\r\n  realName?(): string;\r\n  amount(): number;\r\n  depositTime(): Date;\r\n  screenshotUrl?(): string;\r\n  userMessage?(): string;\r\n  status(): string;\r\n  processedAt?(): Date;\r\n  processedBy?(): number;\r\n  adminNotes?(): string;\r\n  creditedAmount?(): number;\r\n  createdAt(): Date;\r\n  updatedAt(): Date;\r\n  user?(): any; // Flarum User model - keep as any for compatibility\r\n  platform?(): any;\r\n  processedByUser?(): any;\r\n  isPending(): boolean;\r\n  isApproved(): boolean;\r\n  isRejected(): boolean;\r\n}\r\n\r\ninterface DepositRecordManagementSectionAttrs {\r\n  records: DepositRecord[];\r\n  platforms: any[];\r\n  loading?: boolean;\r\n  onApproveRecord: (record: DepositRecord, creditedAmount?: number, notes?: string) => Promise<void>;\r\n  onRejectRecord: (record: DepositRecord, reason: string) => Promise<void>;\r\n  onDeleteRecord: (record: DepositRecord) => Promise<void>;\r\n}\r\n\r\ninterface DepositRecordManagementSectionState {\r\n  processingRecords: Set<string | number>;\r\n}\r\n\r\nexport default class DepositRecordManagementSection extends Component<\r\n  DepositRecordManagementSectionAttrs,\r\n  DepositRecordManagementSectionState\r\n> {\r\n  public state: DepositRecordManagementSectionState = {\r\n    processingRecords: new Set()\r\n  };\r\n\r\n  view(vnode: Mithril.Vnode<DepositRecordManagementSectionAttrs>): Mithril.Children {\r\n    const { records, platforms, loading } = vnode.attrs;\r\n\r\n    if (loading) {\r\n      return (\r\n        <div className=\"DepositRecordManagementSection\">\r\n          <div className=\"DepositRecordManagementSection-header\">\r\n            <h3>{app.translator.trans('withdrawal.admin.deposit.records.title')}</h3>\r\n          </div>\r\n          <LoadingIndicator />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"DepositRecordManagementSection\">\r\n        <div className=\"DepositRecordManagementSection-header\">\r\n          <h3>{app.translator.trans('withdrawal.admin.deposit.records.title')}</h3>\r\n          <div className=\"DepositRecordManagementSection-stats\">\r\n            <span className=\"DepositRecordManagementSection-count\">\r\n              {app.translator.trans('withdrawal.admin.deposit.records.total_count', {\r\n                count: records.length\r\n              })}\r\n            </span>\r\n            <span className=\"DepositRecordManagementSection-pending\">\r\n              {app.translator.trans('withdrawal.admin.deposit.records.pending_count', {\r\n                count: records.filter(r => r.isPending()).length\r\n              })}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"DepositRecordManagementSection-content\">\r\n          {records.length === 0 ? (\r\n            <div className=\"DepositRecordManagementSection-empty\">\r\n              <div className=\"DepositRecordManagementSection-emptyIcon\">\r\n                {icon('fas fa-receipt')}\r\n              </div>\r\n              <h4>{app.translator.trans('withdrawal.admin.deposit.records.empty.title')}</h4>\r\n              <p>{app.translator.trans('withdrawal.admin.deposit.records.empty.description')}</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"DepositRecordManagementSection-list\">\r\n              {records.map(record => this.renderRecord(record, platforms, vnode.attrs))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderRecord(\r\n    record: DepositRecord,\r\n    platforms: any[],\r\n    attrs: DepositRecordManagementSectionAttrs\r\n  ): Mithril.Children {\r\n    const recordId = record.id();\r\n    const isProcessing = this.state.processingRecords.has(recordId);\r\n    const platform = this.findPlatform(platforms, record.platformId());\r\n    const user = record.user?.();\r\n    const status = record.status();\r\n    const depositTime = record.depositTime();\r\n    const createdAt = record.createdAt();\r\n\r\n    return (\r\n      <div key={`record-${recordId}`} className={`DepositRecordItem status-${status}`}>\r\n        <div className=\"DepositRecordItem-header\">\r\n          <div className=\"DepositRecordItem-user\">\r\n            <span className=\"DepositRecordItem-username\">\r\n              {user?.displayName?.() || 'Unknown User'}\r\n            </span>\r\n            <span className=\"DepositRecordItem-userId\">\r\n              ID: {record.userId()}\r\n            </span>\r\n          </div>\r\n          \r\n          <div className=\"DepositRecordItem-amount\">\r\n            <span className=\"DepositRecordItem-amountValue\">\r\n              {record.amount()} {platform?.symbol?.() || ''}\r\n            </span>\r\n            <div className={`DepositRecordItem-status status-${this.getStatusColor(status)}`}>\r\n              {this.renderStatusIcon(status)}\r\n              {this.getStatusText(status)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"DepositRecordItem-details\">\r\n          <div className=\"DepositRecordItem-row\">\r\n            <span className=\"DepositRecordItem-label\">Platform:</span>\r\n            <span className=\"DepositRecordItem-value\">\r\n              {platform?.name?.() || 'Unknown Platform'} {platform?.network?.() ? `(${platform.network()})` : ''}\r\n            </span>\r\n          </div>\r\n          \r\n          <div className=\"DepositRecordItem-row\">\r\n            <span className=\"DepositRecordItem-label\">Platform Account:</span>\r\n            <span className=\"DepositRecordItem-value\">{record.platformAccount()}</span>\r\n          </div>\r\n          \r\n          {record.realName?.() && (\r\n            <div className=\"DepositRecordItem-row\">\r\n              <span className=\"DepositRecordItem-label\">Real Name:</span>\r\n              <span className=\"DepositRecordItem-value\">{record.realName()}</span>\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"DepositRecordItem-row\">\r\n            <span className=\"DepositRecordItem-label\">Deposit Time:</span>\r\n            <span className=\"DepositRecordItem-value\">\r\n              {depositTime.toLocaleDateString()} {depositTime.toLocaleTimeString()}\r\n            </span>\r\n          </div>\r\n          \r\n          <div className=\"DepositRecordItem-row\">\r\n            <span className=\"DepositRecordItem-label\">Submitted:</span>\r\n            <span className=\"DepositRecordItem-value\">\r\n              {humanTime(createdAt)}\r\n            </span>\r\n          </div>\r\n          \r\n          {record.userMessage?.() && (\r\n            <div className=\"DepositRecordItem-row\">\r\n              <span className=\"DepositRecordItem-label\">Message:</span>\r\n              <span className=\"DepositRecordItem-value\">{record.userMessage()}</span>\r\n            </div>\r\n          )}\r\n          \r\n          {record.screenshotUrl?.() && (\r\n            <div className=\"DepositRecordItem-row\">\r\n              <span className=\"DepositRecordItem-label\">Screenshot:</span>\r\n              <a\r\n                href={record.screenshotUrl()}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"DepositRecordItem-link\"\r\n              >\r\n                View Screenshot {icon('fas fa-external-link-alt')}\r\n              </a>\r\n            </div>\r\n          )}\r\n\r\n          {record.processedAt?.() && (\r\n            <div className=\"DepositRecordItem-processed\">\r\n              <div className=\"DepositRecordItem-row\">\r\n                <span className=\"DepositRecordItem-label\">Processed:</span>\r\n                <span className=\"DepositRecordItem-value\">\r\n                  {humanTime(record.processedAt())}\r\n                </span>\r\n              </div>\r\n              \r\n              {record.creditedAmount?.() && record.creditedAmount() !== record.amount() && (\r\n                <div className=\"DepositRecordItem-row\">\r\n                  <span className=\"DepositRecordItem-label\">Credited Amount:</span>\r\n                  <span className=\"DepositRecordItem-value\">\r\n                    {record.creditedAmount()} {platform?.symbol?.() || ''}\r\n                  </span>\r\n                </div>\r\n              )}\r\n              \r\n              {record.adminNotes?.() && (\r\n                <div className=\"DepositRecordItem-row\">\r\n                  <span className=\"DepositRecordItem-label\">Admin Notes:</span>\r\n                  <span className=\"DepositRecordItem-value\">{record.adminNotes()}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {status === 'pending' && (\r\n          <div className=\"DepositRecordItem-actions\">\r\n            <Button\r\n              className=\"Button Button--primary DepositRecordItem-approveButton\"\r\n              onclick={() => this.handleApprove(record, attrs)}\r\n              loading={isProcessing}\r\n              disabled={isProcessing}\r\n            >\r\n              {app.translator.trans('withdrawal.admin.deposit.records.approve')}\r\n            </Button>\r\n            \r\n            <Button\r\n              className=\"Button Button--danger DepositRecordItem-rejectButton\"\r\n              onclick={() => this.handleReject(record, attrs)}\r\n              loading={isProcessing}\r\n              disabled={isProcessing}\r\n            >\r\n              {app.translator.trans('withdrawal.admin.deposit.records.reject')}\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"DepositRecordItem-adminActions\">\r\n          <Button\r\n            className=\"Button Button--link DepositRecordItem-deleteButton\"\r\n            onclick={() => this.handleDelete(record, attrs)}\r\n            disabled={isProcessing}\r\n          >\r\n            {icon('fas fa-trash')}\r\n            {app.translator.trans('withdrawal.admin.deposit.records.delete')}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private findPlatform(platforms: any[], platformId: number): any | null {\r\n    return platforms.find(p => {\r\n      const id = typeof p.id === 'function' ? p.id() : p.id;\r\n      return parseInt(id) === platformId;\r\n    }) || null;\r\n  }\r\n\r\n  private getStatusColor(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'warning';\r\n      case 'approved':\r\n        return 'success';\r\n      case 'rejected':\r\n        return 'danger';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  private renderStatusIcon(status: string): Mithril.Children {\r\n    switch (status) {\r\n      case 'pending':\r\n        return icon('fas fa-clock');\r\n      case 'approved':\r\n        return icon('fas fa-check-circle');\r\n      case 'rejected':\r\n        return icon('fas fa-times-circle');\r\n      default:\r\n        return icon('fas fa-question-circle');\r\n    }\r\n  }\r\n\r\n  private getStatusText(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return app.translator.trans('withdrawal.admin.deposit.records.status.pending').toString();\r\n      case 'approved':\r\n        return app.translator.trans('withdrawal.admin.deposit.records.status.approved').toString();\r\n      case 'rejected':\r\n        return app.translator.trans('withdrawal.admin.deposit.records.status.rejected').toString();\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  }\r\n\r\n  private async handleApprove(record: DepositRecord, attrs: DepositRecordManagementSectionAttrs): Promise<void> {\r\n    const recordId = record.id();\r\n    const defaultAmount = record.amount();\r\n\r\n    // Simple approval - could be enhanced with a modal for custom amounts/notes\r\n    const creditedAmount = parseFloat(\r\n      prompt(\r\n        app.translator.trans('withdrawal.admin.deposit.records.approve_prompt', {\r\n          amount: defaultAmount\r\n        }).toString(),\r\n        defaultAmount.toString()\r\n      ) || defaultAmount.toString()\r\n    );\r\n\r\n    const notes = prompt(\r\n      app.translator.trans('withdrawal.admin.deposit.records.approve_notes_prompt').toString()\r\n    );\r\n\r\n    if (isNaN(creditedAmount) || creditedAmount <= 0) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.invalid_amount')\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.state.processingRecords.add(recordId);\r\n    m.redraw();\r\n\r\n    try {\r\n      await attrs.onApproveRecord(record, creditedAmount, notes || undefined);\r\n      // Success alert handled by parent component\r\n    } catch (error) {\r\n      console.error('Error approving deposit record:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.approve_error')\r\n      );\r\n    } finally {\r\n      this.state.processingRecords.delete(recordId);\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private async handleReject(record: DepositRecord, attrs: DepositRecordManagementSectionAttrs): Promise<void> {\r\n    const reason = prompt(\r\n      app.translator.trans('withdrawal.admin.deposit.records.reject_reason_prompt').toString()\r\n    );\r\n\r\n    if (!reason || reason.trim() === '') {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.reject_reason_required')\r\n      );\r\n      return;\r\n    }\r\n\r\n    const recordId = record.id();\r\n    this.state.processingRecords.add(recordId);\r\n    m.redraw();\r\n\r\n    try {\r\n      await attrs.onRejectRecord(record, reason);\r\n      // Success alert handled by parent component\r\n    } catch (error) {\r\n      console.error('Error rejecting deposit record:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.reject_error')\r\n      );\r\n    } finally {\r\n      this.state.processingRecords.delete(recordId);\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private handleDelete(record: DepositRecord, attrs: DepositRecordManagementSectionAttrs): void {\r\n    const user = record.user?.();\r\n    const amount = record.amount();\r\n\r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans('withdrawal.admin.deposit.records.delete_confirm_title'),\r\n      message: app.translator.trans('withdrawal.admin.deposit.records.delete_confirm_message', {\r\n        user: user,\r\n        amount: amount\r\n      }),\r\n      confirmText: app.translator.trans('withdrawal.admin.deposit.records.delete_confirm_button'),\r\n      cancelText: app.translator.trans('withdrawal.admin.deposit.records.delete_cancel_button'),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        const recordId = record.id();\r\n        this.state.processingRecords.add(recordId);\r\n        \r\n        try {\r\n          await attrs.onDeleteRecord(record);\r\n          // Success alert handled by parent component\r\n        } catch (error) {\r\n          console.error('Error deleting deposit record:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans('withdrawal.admin.deposit.records.delete_error')\r\n          );\r\n        } finally {\r\n          this.state.processingRecords.delete(recordId);\r\n          m.redraw();\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Switch from 'flarum/common/components/Switch';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport type Mithril from 'mithril';\r\nimport { FormValidator } from '../../../common/utils/formValidators';\r\n\r\nexport interface DepositPlatformFormData {\r\n  name: string;\r\n  symbol: string;\r\n  network: string;\r\n  minAmount: string;\r\n  maxAmount: string;\r\n  fee: string;\r\n  address: string;\r\n  qrCodeImageUrl: string;\r\n  iconUrl: string;\r\n  iconClass: string;\r\n  warningText: string;\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface AddDepositPlatformFormAttrs {\r\n  submitting: boolean;\r\n  onSubmit: (formData: DepositPlatformFormData) => Promise<void>;\r\n  onCancel: () => void;\r\n}\r\n\r\nexport default class AddDepositPlatformForm extends Component<AddDepositPlatformFormAttrs> {\r\n  private formData = {\r\n    name: Stream(''),\r\n    symbol: Stream(''),\r\n    network: Stream(''),\r\n    minAmount: Stream(''),\r\n    maxAmount: Stream(''),\r\n    fee: Stream(''),\r\n    address: Stream(''),\r\n    qrCodeImageUrl: Stream(''),\r\n    iconUrl: Stream(''),\r\n    iconClass: Stream(''),\r\n    warningText: Stream(''),\r\n    isActive: Stream(true)\r\n  };\r\n\r\n  oninit(vnode: Mithril.Vnode<AddDepositPlatformFormAttrs>) {\r\n    super.oninit(vnode);\r\n  }\r\n\r\n  view(vnode: Mithril.Vnode<AddDepositPlatformFormAttrs>) {\r\n    const { submitting, onCancel } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"AddDepositPlatformForm\">\r\n        <div className=\"Form\">\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.name')}\r\n                <span className=\"Form-required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"e.g., Tether\"\r\n                bidi={this.formData.name}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.symbol')}\r\n                <span className=\"Form-required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"e.g., USDT\"\r\n                bidi={this.formData.symbol}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.network')}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"e.g., TRC20, ERC20, BSC (optional)\"\r\n                bidi={this.formData.network}\r\n                disabled={submitting}\r\n              />\r\n              <div className=\"helpText\">\r\n                Optional. Specify the blockchain network for this platform.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.min_amount')}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                min=\"0\"\r\n                className=\"FormControl\"\r\n                placeholder=\"0.0\"\r\n                bidi={this.formData.minAmount}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.max_amount')}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                min=\"0\"\r\n                className=\"FormControl\"\r\n                placeholder=\"Leave empty for unlimited\"\r\n                bidi={this.formData.maxAmount}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.fee')}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.00000001\"\r\n                min=\"0\"\r\n                className=\"FormControl\"\r\n                placeholder=\"0.0\"\r\n                bidi={this.formData.fee}\r\n                disabled={submitting}\r\n              />\r\n              <div className=\"helpText\">\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.fee_help')}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.address')}\r\n              <span className=\"Form-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"FormControl\"\r\n              placeholder=\"Enter deposit address for this platform\"\r\n              bidi={this.formData.address}\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"helpText\">\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.address_help')}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.qr_code_image_url')}\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              className=\"FormControl\"\r\n              placeholder=\"https://example.com/qr-code.png\"\r\n              bidi={this.formData.qrCodeImageUrl}\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"helpText\">\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.qr_code_image_help')}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Form-row\">\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.icon_url')}\r\n              </label>\r\n              <input\r\n                type=\"url\"\r\n                className=\"FormControl\"\r\n                placeholder=\"https://example.com/icon.png\"\r\n                bidi={this.formData.iconUrl}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n            <div className=\"Form-group\">\r\n              <label>\r\n                {app.translator.trans('withdrawal.admin.deposit.platforms.icon_class')}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"FormControl\"\r\n                placeholder=\"fas fa-coins\"\r\n                bidi={this.formData.iconClass}\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"Form-group\">\r\n            <label>\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.warning_text')}\r\n            </label>\r\n            <textarea\r\n              className=\"FormControl\"\r\n              rows={3}\r\n              placeholder=\"Network-specific warning for users\"\r\n              bidi={this.formData.warningText}\r\n              disabled={submitting}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"Form-group\">\r\n            <Switch state={this.formData.isActive()} onchange={this.formData.isActive} disabled={submitting}>\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.is_active')}\r\n            </Switch>\r\n          </div>\r\n\r\n          <div className=\"Form-actions\">\r\n            <Button\r\n              className=\"Button Button--primary\"\r\n              type=\"submit\"\r\n              loading={submitting}\r\n              onclick={this.handleSubmit.bind(this, vnode.attrs)}\r\n            >\r\n              {app.translator.trans('withdrawal.admin.deposit.platforms.add_button')}\r\n            </Button>\r\n            <Button\r\n              className=\"Button\"\r\n              onclick={onCancel}\r\n              disabled={submitting}\r\n            >\r\n              {app.translator.trans('core.admin.basics.cancel_button')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  private validateForm(): boolean {\r\n    const validator = new FormValidator();\r\n    \r\n    try {\r\n      // Fixed: Convert NestedStringArray to string for FormValidator\r\n      const nameLabel = app.translator.trans('withdrawal.admin.deposit.platforms.name').toString();\r\n      const symbolLabel = app.translator.trans('withdrawal.admin.deposit.platforms.symbol').toString();\r\n      const addressLabel = app.translator.trans('withdrawal.admin.deposit.platforms.address').toString();\r\n      \r\n      validator\r\n        .required(this.formData.name(), 'name', nameLabel)\r\n        .required(this.formData.symbol(), 'symbol', symbolLabel)\r\n        .required(this.formData.address(), 'address', addressLabel);\r\n\r\n      // Optional numeric fields validation\r\n      if (this.formData.minAmount() && this.formData.minAmount().trim()) {\r\n        const minAmountLabel = app.translator.trans('withdrawal.admin.deposit.platforms.min_amount').toString();\r\n        validator.numberRange(this.formData.minAmount(), 0, undefined, 'minAmount', minAmountLabel);\r\n      }\r\n      \r\n      if (this.formData.maxAmount() && this.formData.maxAmount().trim()) {\r\n        const maxAmountLabel = app.translator.trans('withdrawal.admin.deposit.platforms.max_amount').toString();\r\n        validator.numberRange(this.formData.maxAmount(), 0, undefined, 'maxAmount', maxAmountLabel);\r\n      }\r\n\r\n      if (this.formData.fee() && this.formData.fee().trim()) {\r\n        const feeLabel = app.translator.trans('withdrawal.admin.deposit.platforms.fee').toString();\r\n        validator.numberRange(this.formData.fee(), 0, undefined, 'fee', feeLabel);\r\n      }\r\n\r\n      // Custom validation for max >= min if both are provided\r\n      if (this.formData.minAmount() && this.formData.maxAmount()) {\r\n        const minVal = parseFloat(this.formData.minAmount());\r\n        const maxVal = parseFloat(this.formData.maxAmount());\r\n        if (!isNaN(minVal) && !isNaN(maxVal) && maxVal < minVal) {\r\n          const errorMessage = app.translator.trans('withdrawal.admin.platforms.max_min_error').toString();\r\n          validator.custom(false, 'maxAmount', errorMessage);\r\n        }\r\n      }\r\n\r\n      // Optional URL validations\r\n      if (this.formData.iconUrl() && this.formData.iconUrl().trim()) {\r\n        const iconUrlLabel = app.translator.trans('withdrawal.admin.deposit.platforms.icon_url').toString();\r\n        validator.url(this.formData.iconUrl(), 'iconUrl', iconUrlLabel);\r\n      }\r\n      \r\n      if (this.formData.qrCodeImageUrl() && this.formData.qrCodeImageUrl().trim()) {\r\n        const qrCodeLabel = app.translator.trans('withdrawal.admin.deposit.platforms.qr_code_image_url').toString();\r\n        validator.url(this.formData.qrCodeImageUrl(), 'qrCodeImageUrl', qrCodeLabel);\r\n      }\r\n\r\n      const result = validator.getResult();\r\n      \r\n      if (!result.isValid && result.firstErrorMessage) {\r\n        app.alerts.show({ type: 'error', dismissible: true }, result.firstErrorMessage);\r\n      }\r\n\r\n      return result.isValid;\r\n    } catch (error) {\r\n      console.error('Form validation error:', error);\r\n      app.alerts.show({ type: 'error', dismissible: true }, 'Validation failed');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async handleSubmit(attrs: AddDepositPlatformFormAttrs, e: Event): Promise<void> {\r\n    e.preventDefault();\r\n\r\n    if (!this.validateForm()) {\r\n      return;\r\n    }\r\n\r\n    const formData: DepositPlatformFormData = {\r\n      name: this.formData.name(),\r\n      symbol: this.formData.symbol(),\r\n      network: this.formData.network(),\r\n      minAmount: this.formData.minAmount(),\r\n      maxAmount: this.formData.maxAmount(),\r\n      fee: this.formData.fee(),\r\n      address: this.formData.address(),\r\n      qrCodeImageUrl: this.formData.qrCodeImageUrl(),\r\n      iconUrl: this.formData.iconUrl(),\r\n      iconClass: this.formData.iconClass(),\r\n      warningText: this.formData.warningText(),\r\n      isActive: this.formData.isActive()\r\n    };\r\n\r\n    await attrs.onSubmit(formData);\r\n  }\r\n}","import app from 'flarum/admin/app';\nimport m from 'mithril';\nimport type Mithril from 'mithril';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport AddDepositPlatformForm from '../forms/AddDepositPlatformForm';\nimport GenericPlatformListItem from '../shared/GenericPlatformListItem';\nimport type { GenericPlatform } from '../shared/GenericManagementPage';\n\ninterface DepositPlatformManagementSectionAttrs {\n  platforms: GenericPlatform[];\n  submittingPlatform: boolean;\n  onAddPlatform: (formData: any) => Promise<void>;\n  onTogglePlatformStatus: (platform: GenericPlatform) => Promise<void>;\n  onDeletePlatform: (platform: GenericPlatform) => Promise<void>;\n}\n\nexport default class DepositPlatformManagementSection extends Component<DepositPlatformManagementSectionAttrs> {\n  private showAddForm = false;\n\n  view(vnode: Mithril.Vnode<DepositPlatformManagementSectionAttrs>): Mithril.Children {\n    const { platforms, submittingPlatform, onAddPlatform, onTogglePlatformStatus, onDeletePlatform } = vnode.attrs;\n\n    return (\n      <div className=\"DepositPlatformManagementSection\">\n        <div className=\"Section-header\">\n          <h3>{app.translator.trans('withdrawal.admin.deposit.platforms.title')}</h3>\n          <div className=\"Section-headerControls\">\n            <Button\n              className=\"Button Button--primary\"\n              icon=\"fas fa-plus\"\n              onclick={() => {\n                this.showAddForm = !this.showAddForm;\n                m.redraw();\n              }}\n            >\n              {app.translator.trans('withdrawal.admin.deposit.platforms.add_button')}\n            </Button>\n          </div>\n        </div>\n\n        {this.showAddForm && (\n          <div className=\"Section-content\">\n            <AddDepositPlatformForm\n              onSubmit={async (formData: any) => {\n                await onAddPlatform(formData);\n                this.showAddForm = false;\n                m.redraw();\n              }}\n              onCancel={() => {\n                this.showAddForm = false;\n                m.redraw();\n              }}\n              submitting={submittingPlatform}\n            />\n          </div>\n        )}\n\n        <div className=\"Section-content\">\n          {platforms.length === 0 ? (\n            <div className=\"helpText\">\n              {app.translator.trans('withdrawal.admin.deposit.platforms.empty')}\n            </div>\n          ) : (\n            <div className=\"PlatformList\">\n              {platforms.map((platform) => (\n                <GenericPlatformListItem\n                  key={typeof platform.id === 'function' ? platform.id() : platform.id}\n                  platform={platform}\n                  type=\"deposit\"\n                  onToggleStatus={() => onTogglePlatformStatus(platform)}\n                  onDelete={() => onDeletePlatform(platform)}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}","import app from 'flarum/admin/app';\r\nimport type { PlatformOperations, TransactionOperations } from '../components/shared/GenericManagementPage';\r\n\r\n// Withdrawal platform operations - now using service layer\r\nexport const createWithdrawalPlatformOperations = (): PlatformOperations<any> => ({\r\n  async create(formData: any) {\r\n    try {\r\n      // Import PlatformService dynamically to avoid circular dependencies\r\n      const { platformService } = await import('../../common/services/PlatformService');\r\n      \r\n      const attributes = {\r\n        name: formData.name,\r\n        symbol: formData.symbol,\r\n        network: formData.network || null,\r\n        minAmount: parseFloat(formData.minAmount),\r\n        maxAmount: parseFloat(formData.maxAmount),\r\n        fee: parseFloat(formData.fee || '0'),\r\n        iconUrl: formData.iconUrl || null,\r\n        iconClass: formData.iconClass || null,\r\n        isActive: true\r\n      };\r\n      \r\n      const result = await platformService.create('withdrawal', attributes);\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.platforms.add_success').toString()\r\n      );\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : app.translator.trans('withdrawal.admin.platforms.add_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async toggleStatus(platform: any) {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import('../../common/services/PlatformService');\r\n      \r\n      const result = await platformService.toggleStatus(platform);\r\n      const newStatus = result.isActive();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`withdrawal.admin.platforms.${newStatus ? 'enable' : 'disable'}_success`)\r\n      );\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : 'Failed to toggle platform status'\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async delete(platform: any) {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import('../../common/services/PlatformService');\r\n      \r\n      await platformService.delete(platform);\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.platforms.delete_success').toString()\r\n      );\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : 'Failed to delete platform'\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async load() {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import('../../common/services/PlatformService');\r\n      return await platformService.find('withdrawal');\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.platforms.load_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n});\r\n\r\n// Deposit platform operations - now using service layer\r\nexport const createDepositPlatformOperations = (): PlatformOperations<any> => ({\r\n  async create(formData: any) {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import('../../common/services/PlatformService');\r\n      \r\n      const attributes = {\r\n        name: formData.name,\r\n        symbol: formData.symbol,\r\n        network: formData.network,\r\n        minAmount: parseFloat(formData.minAmount) || 0,\r\n        maxAmount: formData.maxAmount ? parseFloat(formData.maxAmount) : null,\r\n        address: formData.address || null,\r\n        qrCodeImageUrl: formData.qrCodeImageUrl || null,\r\n        iconUrl: formData.iconUrl || null,\r\n        iconClass: formData.iconClass || null,\r\n        warningText: formData.warningText || null,\r\n        isActive: formData.isActive\r\n      };\r\n      \r\n      const result = await platformService.create('deposit', attributes);\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.platforms.add_success').toString()\r\n      );\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : app.translator.trans('withdrawal.admin.deposit.platforms.add_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async toggleStatus(platform: any) {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import('../../common/services/PlatformService');\r\n      \r\n      const result = await platformService.toggleStatus(platform);\r\n      const newStatus = result.isActive();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`withdrawal.admin.deposit.platforms.${newStatus ? 'enable' : 'disable'}_success`).toString()\r\n      );\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : app.translator.trans('withdrawal.admin.deposit.platforms.toggle_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async delete(platform: any) {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import('../../common/services/PlatformService');\r\n      \r\n      await platformService.delete(platform);\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.platforms.delete_success').toString()\r\n      );\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : app.translator.trans('withdrawal.admin.deposit.platforms.delete_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async load() {\r\n    try {\r\n      // Import PlatformService dynamically\r\n      const { platformService } = await import('../../common/services/PlatformService');\r\n      return await platformService.find('deposit');\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.platforms.load_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n});\r\n\r\n// Withdrawal request operations - now using service layer\r\nexport const createWithdrawalRequestOperations = (): TransactionOperations<any> => ({\r\n  async updateStatus(request: any, status: string) {\r\n    try {\r\n      // Import WithdrawalService dynamically\r\n      const { withdrawalService } = await import('../../common/services/WithdrawalService');\r\n      \r\n      const result = await withdrawalService.update(request, { status });\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`withdrawal.admin.requests.${status}_success`).toString()\r\n      );\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : `Failed to update request status to ${status}`\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async load() {\r\n    try {\r\n      // Import WithdrawalService dynamically\r\n      const { withdrawalService } = await import('../../common/services/WithdrawalService');\r\n      return await withdrawalService.find({ include: 'user,platform' });\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.requests.load_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n});\r\n\r\n// Deposit record operations - now using service layer\r\nexport const createDepositRecordOperations = (): TransactionOperations<any> => ({\r\n  async updateStatus(record: any, status: string) {\r\n    try {\r\n      // Import DepositService dynamically\r\n      const { depositService } = await import('../../common/services/DepositService');\r\n      \r\n      const result = await depositService.update(record, { status });\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans(`withdrawal.admin.deposit.records.${status}_success`).toString()\r\n      );\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        error instanceof Error ? error.message : app.translator.trans('withdrawal.admin.deposit.records.update_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async load() {\r\n    try {\r\n      // Import DepositService dynamically\r\n      const { depositService } = await import('../../common/services/DepositService');\r\n      return await depositService.find();\r\n    } catch (error) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.load_error').toString()\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n});","import Model from 'flarum/common/Model';\n\n/**\n * Standard pagination parameters for Flarum API requests\n */\nexport interface PaginationOptions {\n  limit?: number;\n  offset?: number;\n  page?: {\n    limit?: number;\n    offset?: number;\n  };\n}\n\n/**\n * Standard filter options for API requests\n */\nexport interface FilterOptions {\n  [key: string]: any;\n}\n\n/**\n * Standard sort options for API requests\n */\nexport interface SortOptions {\n  field: string;\n  direction: 'asc' | 'desc';\n}\n\n/**\n * Standard query options for finding records\n */\nexport interface QueryOptions {\n  include?: string | string[];\n  filter?: FilterOptions;\n  sort?: string | SortOptions | SortOptions[];\n  page?: PaginationOptions;\n}\n\n/**\n * Service response wrapper for better error handling\n */\nexport interface ServiceResponse<T> {\n  data: T;\n  meta?: {\n    total?: number;\n    count?: number;\n    hasMore?: boolean;\n  };\n  errors?: Array<{\n    detail: string;\n    source?: any;\n  }>;\n}\n\n/**\n * Base service interface that all services should implement\n */\nexport interface BaseService<TModel extends Model> {\n  /**\n   * Find multiple records\n   */\n  find(options?: QueryOptions): Promise<TModel[]>;\n\n  /**\n   * Find a single record by ID\n   */\n  findById(id: string | number, options?: QueryOptions): Promise<TModel | null>;\n\n  /**\n   * Create a new record\n   */\n  create(attributes: Record<string, any>): Promise<TModel>;\n\n  /**\n   * Update an existing record\n   */\n  update(model: TModel, attributes: Record<string, any>): Promise<TModel>;\n\n  /**\n   * Delete a record\n   */\n  delete(model: TModel): Promise<void>;\n\n  /**\n   * Check if a record can be modified by current user\n   */\n  canModify(model: TModel): boolean;\n\n  /**\n   * Check if current user can create new records\n   */\n  canCreate(): boolean;\n\n  /**\n   * Check if current user can delete a record\n   */\n  canDelete(model: TModel): boolean;\n}\n\n/**\n * Withdrawal-specific service interface\n */\nexport interface WithdrawalServiceInterface extends BaseService<any> {\n  /**\n   * Submit a withdrawal request\n   */\n  submitRequest(data: {\n    platformId: number;\n    amount: number;\n    accountDetails: string;\n    message?: string;\n  }): Promise<any>;\n\n  /**\n   * Get user's withdrawal history\n   */\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Get pending requests (admin only)\n   */\n  getPendingRequests(options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Approve a withdrawal request (admin only)\n   */\n  approve(request: any, message?: string): Promise<any>;\n\n  /**\n   * Reject a withdrawal request (admin only)\n   */\n  reject(request: any, reason?: string): Promise<any>;\n\n  /**\n   * Cancel a pending request (user only)\n   */\n  cancel(request: any): Promise<any>;\n}\n\n/**\n * Deposit-specific service interface\n */\nexport interface DepositServiceInterface extends BaseService<any> {\n  /**\n   * Generate deposit address for user\n   */\n  generateAddress(platformId: number): Promise<string>;\n\n  /**\n   * Get user's deposit history\n   */\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Create deposit record\n   */\n  createRecord(data: {\n    platformId: number;\n    amount: number;\n    transactionHash: string;\n    note?: string;\n  }): Promise<any>;\n\n  /**\n   * Get pending deposits (admin only)\n   */\n  getPendingDeposits(options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Confirm a deposit (admin only)\n   */\n  confirm(deposit: any, confirmedAmount?: number): Promise<any>;\n}\n\n/**\n * Platform service interface for both withdrawal and deposit platforms\n */\nexport interface PlatformServiceInterface extends BaseService<any> {\n  /**\n   * Get active platforms only\n   */\n  getActive(type: 'withdrawal' | 'deposit', options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Toggle platform status (admin only)\n   */\n  toggleStatus(platform: any): Promise<any>;\n\n  /**\n   * Update platform configuration (admin only)\n   */\n  updateConfig(platform: any, config: Record<string, any>): Promise<any>;\n\n  /**\n   * Get platforms by symbol\n   */\n  getBySymbol(symbol: string, type: 'withdrawal' | 'deposit'): Promise<any[]>;\n}\n\n/**\n * Settings service interface for managing Flarum admin settings\n */\nexport interface SettingsServiceInterface {\n  getSetting(key: string, defaultValue?: any): Promise<any>;\n  saveSetting(key: string, value: any): Promise<void>;\n  saveSettings(settings: Record<string, any>): Promise<void>;\n  deleteSetting(key: string): Promise<void>;\n  getSettingsWithPrefix(prefix: string): Promise<Record<string, any>>;\n  canManageSettings(): boolean;\n  getExtensionSetting(extension: string, key: string, defaultValue?: any): Promise<any>;\n  saveExtensionSetting(extension: string, key: string, value: any): Promise<void>;\n  getWithdrawalSetting(key: string, defaultValue?: any): Promise<any>;\n  saveWithdrawalSetting(key: string, value: any): Promise<void>;\n  getAllWithdrawalSettings(): Promise<Record<string, any>>;\n}\n\n/**\n * Address service interface for managing deposit addresses\n */\nexport interface AddressServiceInterface {\n  generateAddress(platformId: number, userId?: number): Promise<string>;\n  getUserAddresses(userId?: number, options?: QueryOptions): Promise<any[]>;\n  getAddressForPlatform(platformId: number, userId?: number): Promise<any | null>;\n  refreshAddress(platformId: number, userId?: number): Promise<string>;\n  deactivateAddress(addressId: number): Promise<void>;\n  canGenerateAddress(): boolean;\n  canViewAddress(address: any): boolean;\n\n  /**\n   * Validate platform limits\n   */\n  validateAmount(platform: any, amount: number): {\n    valid: boolean;\n    errors: string[];\n  };\n}\n\n/**\n * Cache service for managing local data storage\n */\nexport interface CacheOptions {\n  ttl?: number; // Time to live in milliseconds\n  key?: string; // Custom cache key\n  refresh?: boolean; // Force refresh from server\n}\n\n/**\n * Common service configuration\n */\nexport interface ServiceConfig {\n  apiUrl?: string;\n  timeout?: number;\n  retries?: number;\n  cache?: boolean;\n  defaultPageSize?: number;\n}\n\n/**\n * Service error types\n */\nexport enum ServiceErrorType {\n  NETWORK_ERROR = 'network_error',\n  PERMISSION_DENIED = 'permission_denied',\n  VALIDATION_ERROR = 'validation_error',\n  NOT_FOUND = 'not_found',\n  SERVER_ERROR = 'server_error',\n  TIMEOUT = 'timeout'\n}\n\n/**\n * Service error class\n */\nexport class ServiceError extends Error {\n  public type: ServiceErrorType;\n  public code?: string;\n  public details?: any;\n\n  constructor(\n    message: string, \n    type: ServiceErrorType = ServiceErrorType.SERVER_ERROR, \n    code?: string, \n    details?: any\n  ) {\n    super(message);\n    this.name = 'ServiceError';\n    this.type = type;\n    this.code = code;\n    this.details = details;\n  }\n}","import app from 'flarum/common/app';\nimport WithdrawalRequest from '../models/WithdrawalRequest';\nimport WithdrawalPlatform from '../models/WithdrawalPlatform';\nimport { \n  WithdrawalServiceInterface, \n  QueryOptions, \n  ServiceError, \n  ServiceErrorType\n} from '../types/services';\n\n/**\n * Service for managing withdrawal requests with proper CRUD operations\n */\nexport default class WithdrawalService implements WithdrawalServiceInterface {\n  private readonly modelType = 'withdrawal-requests';\n  private readonly platformModelType = 'withdrawal-platforms';\n\n  /**\n   * Find multiple withdrawal requests\n   */\n  async find(options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform',\n        sort: options.sort || '-createdAt',\n        ...options\n      };\n\n      // Add pagination if specified\n      if (options.page) {\n        queryParams.page = options.page;\n      }\n\n      // Add filters if specified\n      if (options.filter) {\n        queryParams.filter = options.filter;\n      }\n\n      const results = await app.store.find(this.modelType, queryParams);\n      return Array.isArray(results) ? results : [results];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch withdrawal requests');\n    }\n  }\n\n  /**\n   * Find a single withdrawal request by ID\n   */\n  async findById(id: string | number, options: QueryOptions = {}): Promise<WithdrawalRequest | null> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform'\n      };\n\n      const result = await app.store.find(this.modelType, id, queryParams);\n      return result as WithdrawalRequest;\n    } catch (error) {\n      if (this.isNotFoundError(error)) {\n        return null;\n      }\n      throw this.handleError(error, `Failed to fetch withdrawal request ${id}`);\n    }\n  }\n\n  /**\n   * Create a new withdrawal request\n   */\n  async create(attributes: Record<string, any>): Promise<WithdrawalRequest> {\n    try {\n      // Validate required fields\n      this.validateCreateAttributes(attributes);\n\n      const request = app.store.createRecord(this.modelType) as WithdrawalRequest;\n      \n      const savedRequest = await request.save(attributes);\n      return savedRequest as WithdrawalRequest;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to create withdrawal request');\n    }\n  }\n\n  /**\n   * Update an existing withdrawal request\n   */\n  async update(model: WithdrawalRequest, attributes: Record<string, any>): Promise<WithdrawalRequest> {\n    try {\n      if (!this.canModify(model)) {\n        throw new ServiceError(\n          'You do not have permission to modify this withdrawal request',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      const updatedModel = await model.save(attributes);\n      return updatedModel as WithdrawalRequest;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to update withdrawal request');\n    }\n  }\n\n  /**\n   * Delete a withdrawal request\n   */\n  async delete(model: WithdrawalRequest): Promise<void> {\n    try {\n      if (!this.canDelete(model)) {\n        throw new ServiceError(\n          'You do not have permission to delete this withdrawal request',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      await model.delete();\n    } catch (error) {\n      throw this.handleError(error, 'Failed to delete withdrawal request');\n    }\n  }\n\n  /**\n   * Submit a new withdrawal request with validation\n   */\n  async submitRequest(data: {\n    platformId: number;\n    amount: number;\n    accountDetails: string;\n    message?: string;\n  }): Promise<WithdrawalRequest> {\n    try {\n      // Validate user balance and platform limits\n      await this.validateWithdrawalRequest(data);\n\n      const attributes = {\n        platformId: data.platformId,\n        amount: data.amount,\n        accountDetails: data.accountDetails,\n        message: data.message || '',\n        status: 'pending'\n      };\n\n      return await this.create(attributes);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to submit withdrawal request');\n    }\n  }\n\n  /**\n   * Get user's withdrawal history\n   */\n  async getUserHistory(userId?: number, options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\n    const targetUserId = userId || app.session.user?.id();\n    \n    if (!targetUserId) {\n      throw new ServiceError(\n        'User not authenticated',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        user: targetUserId,\n        ...options.filter\n      },\n      include: options.include || 'platform',\n      sort: options.sort || '-createdAt'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Get pending requests (admin only)\n   */\n  async getPendingRequests(options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        status: 'pending',\n        ...options.filter\n      },\n      include: options.include || 'user,platform',\n      sort: options.sort || 'createdAt'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Approve a withdrawal request (admin only)\n   */\n  async approve(request: WithdrawalRequest, message?: string): Promise<WithdrawalRequest> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    if (!request.isPending()) {\n      throw new ServiceError(\n        'Only pending requests can be approved',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    const attributes: any = {\n      status: 'approved'\n    };\n\n    if (message) {\n      attributes.adminNote = message;\n    }\n\n    return await this.update(request, attributes);\n  }\n\n  /**\n   * Reject a withdrawal request (admin only)\n   */\n  async reject(request: WithdrawalRequest, reason?: string): Promise<WithdrawalRequest> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    if (!request.isPending()) {\n      throw new ServiceError(\n        'Only pending requests can be rejected',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    const attributes: any = {\n      status: 'rejected'\n    };\n\n    if (reason) {\n      attributes.adminNote = reason;\n    }\n\n    return await this.update(request, attributes);\n  }\n\n  /**\n   * Cancel a pending request (user only)\n   */\n  async cancel(request: WithdrawalRequest): Promise<any> {\n    if (!request.canBeModified()) {\n      throw new ServiceError(\n        'This request cannot be cancelled',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    const currentUser = app.session.user;\n    if (!currentUser || (request.userId() !== currentUser.id() && !currentUser.isAdmin())) {\n      throw new ServiceError(\n        'You can only cancel your own requests',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    return await this.delete(request);\n  }\n\n  /**\n   * Check if current user can modify a withdrawal request\n   */\n  canModify(model: WithdrawalRequest): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can modify any request\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only modify their own pending requests\n    return model.userId() === currentUser.id() && model.canBeModified();\n  }\n\n  /**\n   * Check if current user can create new withdrawal requests\n   */\n  canCreate(): boolean {\n    const currentUser = app.session.user;\n    return currentUser && !currentUser.isGuest();\n  }\n\n  /**\n   * Check if current user can delete a withdrawal request\n   */\n  canDelete(model: WithdrawalRequest): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can delete any request\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only delete their own pending requests\n    return model.userId() === currentUser.id() && model.canBeModified();\n  }\n\n  /**\n   * Get available withdrawal platforms\n   */\n  async getPlatforms(): Promise<WithdrawalPlatform[]> {\n    try {\n      const platforms = await app.store.find(this.platformModelType, {\n        filter: { isActive: true },\n        sort: 'name'\n      });\n      \n      return Array.isArray(platforms) ? platforms : [platforms];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch withdrawal platforms');\n    }\n  }\n\n  /**\n   * Validate withdrawal request data\n   */\n  private async validateWithdrawalRequest(data: any): Promise<void> {\n    const { platformId, amount } = data;\n\n    // Get platform details\n    const platform = await app.store.find(this.platformModelType, platformId);\n    if (!platform) {\n      throw new ServiceError(\n        'Invalid platform selected',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check if platform is active\n    if (!platform.isActive()) {\n      throw new ServiceError(\n        'Selected platform is not available',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Validate amount limits\n    const minAmount = platform.minAmount();\n    const maxAmount = platform.maxAmount();\n    \n    if (amount < minAmount) {\n      throw new ServiceError(\n        `Minimum withdrawal amount is ${minAmount}`,\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    if (maxAmount && amount > maxAmount) {\n      throw new ServiceError(\n        `Maximum withdrawal amount is ${maxAmount}`,\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check user balance\n    const currentUser = app.session.user;\n    if (currentUser) {\n      const userBalance = currentUser.money ? currentUser.money() : 0;\n      const fee = platform.fee ? platform.fee() : 0;\n      const totalRequired = amount + fee;\n\n      if (userBalance < totalRequired) {\n        throw new ServiceError(\n          `Insufficient balance. Required: ${totalRequired}, Available: ${userBalance}`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n  }\n\n  /**\n   * Validate create attributes\n   */\n  private validateCreateAttributes(attributes: any): void {\n    const required = ['platformId', 'amount', 'accountDetails'];\n    \n    for (const field of required) {\n      if (!attributes[field]) {\n        throw new ServiceError(\n          `${field} is required`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\n      throw new ServiceError(\n        'Amount must be a positive number',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n  }\n\n  /**\n   * Handle service errors with proper typing\n   */\n  private handleError(error: any, defaultMessage: string): ServiceError {\n    if (error instanceof ServiceError) {\n      return error;\n    }\n\n    // Handle Flarum API errors\n    if (error.response && error.response.errors) {\n      const apiError = error.response.errors[0];\n      return new ServiceError(\n        apiError.detail || defaultMessage,\n        ServiceErrorType.VALIDATION_ERROR,\n        apiError.code,\n        apiError\n      );\n    }\n\n    // Handle network errors\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\n      return new ServiceError(\n        'Network error occurred',\n        ServiceErrorType.NETWORK_ERROR\n      );\n    }\n\n    // Default error handling\n    return new ServiceError(\n      error.message || defaultMessage,\n      ServiceErrorType.SERVER_ERROR\n    );\n  }\n\n  /**\n   * Check if error is a not found error\n   */\n  private isNotFoundError(error: any): boolean {\n    return error.status === 404 || \n           error.response?.status === 404 ||\n           error.message?.includes('not found');\n  }\n}\n\n// Export singleton instance\nexport const withdrawalService = new WithdrawalService();","import app from 'flarum/common/app';\nimport DepositRecord from '../models/DepositRecord';\nimport DepositPlatform from '../models/DepositPlatform';\nimport DepositAddress from '../models/DepositAddress';\nimport { \n  DepositServiceInterface, \n  QueryOptions, \n  ServiceError, \n  ServiceErrorType\n} from '../types/services';\n\n/**\n * Service for managing deposit records and addresses with proper CRUD operations\n */\nexport default class DepositService implements DepositServiceInterface {\n  private readonly recordModelType = 'deposit-records';\n  private readonly platformModelType = 'deposit-platforms';\n  private readonly addressModelType = 'deposit-addresses';\n\n  /**\n   * Find multiple deposit records\n   */\n  async find(options: QueryOptions = {}): Promise<any[]> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform',\n        sort: options.sort || '-createdAt',\n        ...options\n      };\n\n      // Add pagination if specified\n      if (options.page) {\n        queryParams.page = options.page;\n      }\n\n      // Add filters if specified\n      if (options.filter) {\n        queryParams.filter = options.filter;\n      }\n\n      const results = await app.store.find(this.recordModelType, queryParams);\n      return Array.isArray(results) ? results : [results];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch deposit records');\n    }\n  }\n\n  /**\n   * Find a single deposit record by ID\n   */\n  async findById(id: string | number, options: QueryOptions = {}): Promise<any | null> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform'\n      };\n\n      const result = await app.store.find(this.recordModelType, String(id), queryParams);\n      return result;\n    } catch (error) {\n      if (this.isNotFoundError(error)) {\n        return null;\n      }\n      throw this.handleError(error, `Failed to fetch deposit record ${id}`);\n    }\n  }\n\n  /**\n   * Create a new deposit record\n   */\n  async create(attributes: Record<string, any>): Promise<any> {\n    try {\n      // Validate required fields\n      this.validateCreateAttributes(attributes);\n\n      const record = app.store.createRecord(this.recordModelType);\n      \n      const savedRecord = await record.save(attributes);\n      return savedRecord;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to create deposit record');\n    }\n  }\n\n  /**\n   * Update an existing deposit record\n   */\n  async update(model: DepositRecord, attributes: Record<string, any>): Promise<DepositRecord> {\n    try {\n      if (!this.canModify(model)) {\n        throw new ServiceError(\n          'You do not have permission to modify this deposit record',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      const updatedModel = await model.save(attributes);\n      return updatedModel as DepositRecord;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to update deposit record');\n    }\n  }\n\n  /**\n   * Delete a deposit record\n   */\n  async delete(model: DepositRecord): Promise<void> {\n    try {\n      if (!this.canDelete(model)) {\n        throw new ServiceError(\n          'You do not have permission to delete this deposit record',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      await model.delete();\n    } catch (error) {\n      throw this.handleError(error, 'Failed to delete deposit record');\n    }\n  }\n\n  /**\n   * Generate deposit address for user - delegates to AddressService\n   */\n  async generateAddress(platformId: number): Promise<string> {\n    try {\n      // Import AddressService dynamically to avoid circular dependencies\n      const { addressService } = await import('./AddressService') as any;\n      return await addressService.generateAddress(platformId);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to generate deposit address');\n    }\n  }\n\n  /**\n   * Get user's deposit history\n   */\n  async getUserHistory(userId?: number, options: QueryOptions = {}): Promise<DepositRecord[]> {\n    const targetUserId = userId || app.session.user?.id();\n    \n    if (!targetUserId) {\n      throw new ServiceError(\n        'User not authenticated',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        user: targetUserId,\n        ...options.filter\n      },\n      include: options.include || 'platform',\n      sort: options.sort || '-createdAt'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Create deposit record with transaction validation\n   */\n  async createRecord(data: {\n    platformId: number;\n    amount: number;\n    transactionHash: string;\n    note?: string;\n  }): Promise<DepositRecord> {\n    try {\n      // Validate transaction hash format and platform\n      await this.validateDepositRecord(data);\n\n      const attributes = {\n        platformId: data.platformId,\n        amount: data.amount,\n        transactionHash: data.transactionHash,\n        note: data.note || '',\n        status: 'pending'\n      };\n\n      return await this.create(attributes);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to create deposit record');\n    }\n  }\n\n  /**\n   * Get pending deposits (admin only)\n   */\n  async getPendingDeposits(options: QueryOptions = {}): Promise<DepositRecord[]> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        status: 'pending',\n        ...options.filter\n      },\n      include: options.include || 'user,platform',\n      sort: options.sort || 'createdAt'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Confirm a deposit (admin only)\n   */\n  async confirm(deposit: DepositRecord, confirmedAmount?: number): Promise<DepositRecord> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const attributes: any = {\n      status: 'confirmed'\n    };\n\n    if (confirmedAmount && confirmedAmount !== deposit.amount()) {\n      attributes.confirmedAmount = confirmedAmount;\n    }\n\n    return await this.update(deposit, attributes);\n  }\n\n  /**\n   * Reject a deposit (admin only)\n   */\n  async reject(deposit: DepositRecord, reason?: string): Promise<DepositRecord> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const attributes: any = {\n      status: 'rejected'\n    };\n\n    if (reason) {\n      attributes.adminNote = reason;\n    }\n\n    return await this.update(deposit, attributes);\n  }\n\n  /**\n   * Check if current user can modify a deposit record\n   */\n  canModify(model: DepositRecord): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can modify any record\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only modify their own pending records\n    return String((model as any).userId()) === String(currentUser.id()) && (model as any).status() === 'pending';\n  }\n\n  /**\n   * Check if current user can create new deposit records\n   */\n  canCreate(): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n    const isGuest = (currentUser as any).isGuest();\n    return !isGuest;\n  }\n\n  /**\n   * Check if current user can delete a deposit record\n   */\n  canDelete(model: DepositRecord): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can delete any record\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only delete their own pending records\n    return String((model as any).userId()) === String(currentUser.id()) && (model as any).status() === 'pending';\n  }\n\n  /**\n   * Get available deposit platforms\n   */\n  async getPlatforms(): Promise<any[]> {\n    try {\n      const platforms = await app.store.find(this.platformModelType, {\n        sort: 'name'\n      });\n      \n      return Array.isArray(platforms) ? platforms : [platforms];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch deposit platforms');\n    }\n  }\n\n  /**\n   * Get platforms grouped by symbol\n   */\n  async getPlatformsBySymbol(): Promise<Record<string, DepositPlatform[]>> {\n    const platforms = await this.getPlatforms();\n    const grouped: Record<string, DepositPlatform[]> = {};\n\n    for (const platform of platforms) {\n      const symbol = platform.symbol();\n      if (!grouped[symbol]) {\n        grouped[symbol] = [];\n      }\n      grouped[symbol].push(platform);\n    }\n\n    return grouped;\n  }\n\n  /**\n   * Get user's deposit addresses - delegates to AddressService\n   */\n  async getUserAddresses(userId?: number): Promise<DepositAddress[]> {\n    try {\n      // Import AddressService dynamically to avoid circular dependencies\n      const { addressService } = await import('./AddressService') as any;\n      return await addressService.getUserAddresses(userId);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch user deposit addresses');\n    }\n  }\n\n  /**\n   * Validate deposit record data\n   */\n  private async validateDepositRecord(data: any): Promise<void> {\n    const { platformId, amount, transactionHash } = data;\n\n    // Get platform details\n    const platform = await app.store.find(this.platformModelType, platformId);\n    if (!platform) {\n      throw new ServiceError(\n        'Invalid platform selected',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check if platform is active\n    if (!(platform as any).isActive()) {\n      throw new ServiceError(\n        'Selected platform is not available',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Validate amount limits\n    const minAmount = (platform as any).minAmount();\n    \n    if (amount < minAmount) {\n      throw new ServiceError(\n        `Minimum deposit amount is ${minAmount}`,\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Validate transaction hash format (basic validation)\n    if (!transactionHash || transactionHash.length < 10) {\n      throw new ServiceError(\n        'Invalid transaction hash',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check for duplicate transaction hash\n    try {\n      const existingRecords = await this.find({\n        filter: { transactionHash: transactionHash }\n      });\n\n      if (existingRecords.length > 0) {\n        throw new ServiceError(\n          'Transaction hash already exists',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    } catch (error) {\n      // If it's not a validation error, re-throw\n      if (error instanceof ServiceError && error.type === ServiceErrorType.VALIDATION_ERROR) {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Validate create attributes\n   */\n  private validateCreateAttributes(attributes: any): void {\n    const required = ['platformId', 'amount', 'transactionHash'];\n    \n    for (const field of required) {\n      if (!attributes[field]) {\n        throw new ServiceError(\n          `${field} is required`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\n      throw new ServiceError(\n        'Amount must be a positive number',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n  }\n\n  /**\n   * Handle service errors with proper typing\n   */\n  private handleError(error: any, defaultMessage: string): ServiceError {\n    if (error instanceof ServiceError) {\n      return error;\n    }\n\n    // Handle Flarum API errors\n    if (error.response && error.response.errors) {\n      const apiError = error.response.errors[0];\n      return new ServiceError(\n        apiError.detail || defaultMessage,\n        ServiceErrorType.VALIDATION_ERROR,\n        apiError.code,\n        apiError\n      );\n    }\n\n    // Handle network errors\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\n      return new ServiceError(\n        'Network error occurred',\n        ServiceErrorType.NETWORK_ERROR\n      );\n    }\n\n    // Default error handling\n    return new ServiceError(\n      error.message || defaultMessage,\n      ServiceErrorType.SERVER_ERROR\n    );\n  }\n\n  /**\n   * Check if error is a not found error\n   */\n  private isNotFoundError(error: any): boolean {\n    return error.status === 404 || \n           error.response?.status === 404 ||\n           error.message?.includes('not found');\n  }\n}\n\n// Export singleton instance\nexport const depositService = new DepositService();","import app from 'flarum/common/app';\nimport { \n  PlatformServiceInterface, \n  QueryOptions, \n  ServiceError, \n  ServiceErrorType \n} from '../types/services';\n\n/**\n * Service for managing both withdrawal and deposit platforms\n */\nexport default class PlatformService implements PlatformServiceInterface {\n  private readonly withdrawalModelType = 'withdrawal-platforms';\n  private readonly depositModelType = 'deposit-platforms';\n\n  /**\n   * Find multiple platforms of specified type\n   */\n  async find(type: 'withdrawal' | 'deposit', options: QueryOptions = {}): Promise<any[]> {\n    const modelType = type === 'withdrawal' ? this.withdrawalModelType : this.depositModelType;\n    \n    try {\n      const queryParams: any = {\n        sort: options.sort || 'name',\n        ...options\n      };\n\n      // Add pagination if specified\n      if (options.page) {\n        queryParams.page = options.page;\n      }\n\n      // Add filters if specified\n      if (options.filter) {\n        queryParams.filter = options.filter;\n      }\n\n      // Include relationships if specified\n      if (options.include) {\n        queryParams.include = options.include;\n      }\n\n      const results = await app.store.find(modelType, queryParams);\n      return Array.isArray(results) ? results : [results];\n    } catch (error) {\n      throw this.handleError(error, `Failed to fetch ${type} platforms`);\n    }\n  }\n\n  /**\n   * Find a single platform by ID\n   */\n  async findById(\n    type: 'withdrawal' | 'deposit', \n    id: string | number, \n    options: QueryOptions = {}\n  ): Promise<any | null> {\n    const modelType = type === 'withdrawal' ? this.withdrawalModelType : this.depositModelType;\n    \n    try {\n      const queryParams: any = {};\n      \n      // Include relationships if specified\n      if (options.include) {\n        queryParams.include = options.include;\n      }\n\n      const result = await app.store.find(modelType, id, queryParams);\n      return result;\n    } catch (error) {\n      if (this.isNotFoundError(error)) {\n        return null;\n      }\n      throw this.handleError(error, `Failed to fetch ${type} platform ${id}`);\n    }\n  }\n\n  /**\n   * Create a new platform\n   */\n  async create(type: 'withdrawal' | 'deposit', attributes: Record<string, any>): Promise<any> {\n    const modelType = type === 'withdrawal' ? this.withdrawalModelType : this.depositModelType;\n    \n    try {\n      // Validate required fields based on platform type\n      this.validateCreateAttributes(type, attributes);\n\n      const platform = app.store.createRecord(modelType);\n      \n      const savedPlatform = await platform.save(attributes);\n      return savedPlatform;\n    } catch (error) {\n      throw this.handleError(error, `Failed to create ${type} platform`);\n    }\n  }\n\n  /**\n   * Update an existing platform\n   */\n  async update(platform: any, attributes: Record<string, any>): Promise<any> {\n    try {\n      if (!this.canModify(platform)) {\n        throw new ServiceError(\n          'You do not have permission to modify this platform',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      const updatedPlatform = await platform.save(attributes);\n      return updatedPlatform;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to update platform');\n    }\n  }\n\n  /**\n   * Delete a platform\n   */\n  async delete(platform: any): Promise<void> {\n    try {\n      if (!this.canDelete(platform)) {\n        throw new ServiceError(\n          'You do not have permission to delete this platform',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      await platform.delete();\n    } catch (error) {\n      throw this.handleError(error, 'Failed to delete platform');\n    }\n  }\n\n  /**\n   * Get active platforms only\n   */\n  async getActive(type: 'withdrawal' | 'deposit', options: QueryOptions = {}): Promise<any[]> {\n    const queryOptions = {\n      ...options,\n      filter: {\n        isActive: true,\n        ...options.filter\n      }\n    };\n\n    return await this.find(type, queryOptions);\n  }\n\n  /**\n   * Toggle platform status (admin only)\n   */\n  async toggleStatus(platform: any): Promise<any> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const currentStatus = platform.isActive();\n    return await this.update(platform, { isActive: !currentStatus });\n  }\n\n  /**\n   * Update platform configuration (admin only)\n   */\n  async updateConfig(platform: any, config: Record<string, any>): Promise<any> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    return await this.update(platform, config);\n  }\n\n  /**\n   * Get platforms by symbol\n   */\n  async getBySymbol(symbol: string, type: 'withdrawal' | 'deposit'): Promise<any[]> {\n    return await this.find(type, {\n      filter: { symbol: symbol },\n      sort: 'name'\n    });\n  }\n\n  /**\n   * Validate platform limits for an amount\n   */\n  validateAmount(platform: any, amount: number): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (typeof amount !== 'number' || amount <= 0) {\n      errors.push('Amount must be a positive number');\n      return { valid: false, errors };\n    }\n\n    const minAmount = platform.minAmount ? platform.minAmount() : 0;\n    const maxAmount = platform.maxAmount ? platform.maxAmount() : null;\n\n    if (amount < minAmount) {\n      errors.push(`Amount must be at least ${minAmount}`);\n    }\n\n    if (maxAmount && amount > maxAmount) {\n      errors.push(`Amount cannot exceed ${maxAmount}`);\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * Get platform statistics (admin only)\n   */\n  async getPlatformStats(type: 'withdrawal' | 'deposit', platformId: number): Promise<any> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const requestType = type === 'withdrawal' ? 'withdrawal-requests' : 'deposit-records';\n    \n    try {\n      // Get all requests/records for this platform\n      const records = await app.store.find(requestType, {\n        filter: { platform: platformId },\n        include: 'platform'\n      });\n\n      const recordArray = Array.isArray(records) ? records : [records];\n\n      // Calculate statistics\n      const stats = {\n        total: recordArray.length,\n        pending: recordArray.filter(r => r.status() === 'pending').length,\n        approved: recordArray.filter(r => r.status() === 'approved' || r.status() === 'confirmed').length,\n        rejected: recordArray.filter(r => r.status() === 'rejected').length,\n        totalAmount: recordArray.reduce((sum, r) => sum + (r.amount() || 0), 0)\n      };\n\n      return stats;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch platform statistics');\n    }\n  }\n\n  /**\n   * Get platforms grouped by symbol\n   */\n  async getPlatformsBySymbolGrouped(type: 'withdrawal' | 'deposit'): Promise<Record<string, any[]>> {\n    const platforms = await this.getActive(type);\n    const grouped: Record<string, any[]> = {};\n\n    for (const platform of platforms) {\n      const symbol = platform.symbol();\n      if (!grouped[symbol]) {\n        grouped[symbol] = [];\n      }\n      grouped[symbol].push(platform);\n    }\n\n    return grouped;\n  }\n\n  /**\n   * Sort platforms by criteria\n   */\n  async getSortedPlatforms(\n    type: 'withdrawal' | 'deposit', \n    sortBy: 'name' | 'symbol' | 'createdAt' | 'fee' = 'name',\n    direction: 'asc' | 'desc' = 'asc'\n  ): Promise<any[]> {\n    const sortString = direction === 'desc' ? `-${sortBy}` : sortBy;\n    \n    return await this.getActive(type, {\n      sort: sortString\n    });\n  }\n\n  /**\n   * Check if current user can modify platforms\n   */\n  canModify(_platform: any): boolean {\n    const currentUser = app.session.user;\n    return currentUser && currentUser.isAdmin();\n  }\n\n  /**\n   * Check if current user can create new platforms\n   */\n  canCreate(): boolean {\n    const currentUser = app.session.user;\n    return currentUser && currentUser.isAdmin();\n  }\n\n  /**\n   * Check if current user can delete platforms\n   */\n  canDelete(_platform: any): boolean {\n    const currentUser = app.session.user;\n    return currentUser && currentUser.isAdmin();\n  }\n\n  /**\n   * Validate create attributes based on platform type\n   */\n  private validateCreateAttributes(type: 'withdrawal' | 'deposit', attributes: any): void {\n    const commonRequired = ['name', 'symbol', 'minAmount'];\n    \n    // Withdrawal platforms require address\n    // Deposit platforms require address and can have networkTypeId\n    const required = type === 'withdrawal' \n      ? [...commonRequired, 'address']\n      : [...commonRequired, 'address']; // Deposit platforms also require address\n\n    for (const field of required) {\n      if (!attributes[field]) {\n        throw new ServiceError(\n          `${field} is required for ${type} platforms`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\n      throw new ServiceError(\n        'minAmount must be a non-negative number',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    if (attributes.maxAmount !== undefined) {\n      if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < attributes.minAmount) {\n        throw new ServiceError(\n          'maxAmount must be a number greater than or equal to minAmount',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (attributes.fee !== undefined) {\n      if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\n        throw new ServiceError(\n          'fee must be a non-negative number',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    // Validate symbol format (basic validation)\n    if (typeof attributes.symbol !== 'string' || attributes.symbol.length < 2) {\n      throw new ServiceError(\n        'symbol must be at least 2 characters long',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n  }\n\n  /**\n   * Handle service errors with proper typing\n   */\n  private handleError(error: any, defaultMessage: string): ServiceError {\n    if (error instanceof ServiceError) {\n      return error;\n    }\n\n    // Handle Flarum API errors\n    if (error.response && error.response.errors) {\n      const apiError = error.response.errors[0];\n      return new ServiceError(\n        apiError.detail || defaultMessage,\n        ServiceErrorType.VALIDATION_ERROR,\n        apiError.code,\n        apiError\n      );\n    }\n\n    // Handle network errors\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\n      return new ServiceError(\n        'Network error occurred',\n        ServiceErrorType.NETWORK_ERROR\n      );\n    }\n\n    // Default error handling\n    return new ServiceError(\n      error.message || defaultMessage,\n      ServiceErrorType.SERVER_ERROR\n    );\n  }\n\n  /**\n   * Check if error is a not found error\n   */\n  private isNotFoundError(error: any): boolean {\n    return error.status === 404 || \n           error.response?.status === 404 ||\n           error.message?.includes('not found');\n  }\n}\n\n// Export singleton instance\nexport const platformService = new PlatformService();","import app from 'flarum/common/app';\nimport { \n  ServiceError, \n  ServiceErrorType,\n  SettingsServiceInterface \n} from '../types/services';\n\n/**\n * Service for managing Flarum admin settings\n * Provides type-safe settings operations with proper error handling\n */\nexport default class SettingsService implements SettingsServiceInterface {\n  private readonly settingsEndpoint = '/settings';\n\n  /**\n   * Get a setting value\n   */\n  async getSetting(key: string, defaultValue?: any): Promise<any> {\n    try {\n      // First try to get from forum attributes (cached)\n      if (app.forum) {\n        const cachedValue = app.forum.attribute(key);\n        if (cachedValue !== undefined && cachedValue !== null) {\n          return cachedValue;\n        }\n      }\n\n      // If not cached or forum not available, return default\n      return defaultValue;\n    } catch (error) {\n      throw this.handleError(error, `Failed to get setting: ${key}`);\n    }\n  }\n\n  /**\n   * Save a setting value\n   */\n  async saveSetting(key: string, value: any): Promise<void> {\n    try {\n      // Validate inputs\n      if (!key || typeof key !== 'string') {\n        throw new ServiceError(\n          'Setting key must be a non-empty string',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n\n      // Prepare the value for storage\n      const storageValue = this.prepareValueForStorage(value);\n\n      // Make the API request using Flarum's store mechanism\n      const settings = app.store.createRecord('settings');\n      await settings.save({ [key]: storageValue });\n      \n      // Update the forum attribute immediately for UI consistency\n      if (app.forum) {\n        app.forum.pushAttributes({ [key]: value });\n      }\n\n    } catch (error) {\n      throw this.handleError(error, `Failed to save setting: ${key}`);\n    }\n  }\n\n  /**\n   * Save multiple settings at once\n   */\n  async saveSettings(settings: Record<string, any>): Promise<void> {\n    try {\n      // Validate inputs\n      if (!settings || typeof settings !== 'object') {\n        throw new ServiceError(\n          'Settings must be an object',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n\n      // Prepare all values for storage\n      const preparedSettings: Record<string, any> = {};\n      const forumAttributes: Record<string, any> = {};\n\n      for (const [key, value] of Object.entries(settings)) {\n        if (!key || typeof key !== 'string') {\n          throw new ServiceError(\n            `Setting key '${key}' must be a non-empty string`,\n            ServiceErrorType.VALIDATION_ERROR\n          );\n        }\n        preparedSettings[key] = this.prepareValueForStorage(value);\n        forumAttributes[key] = value;\n      }\n\n      // Make the API request\n      const settingsRecord = app.store.createRecord('settings');\n      await settingsRecord.save(preparedSettings);\n      \n      // Update forum attributes\n      if (app.forum) {\n        app.forum.pushAttributes(forumAttributes);\n      }\n\n    } catch (error) {\n      throw this.handleError(error, 'Failed to save multiple settings');\n    }\n  }\n\n  /**\n   * Delete a setting\n   */\n  async deleteSetting(key: string): Promise<void> {\n    try {\n      if (!key || typeof key !== 'string') {\n        throw new ServiceError(\n          'Setting key must be a non-empty string',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n\n      // Set to null to delete the setting\n      await this.saveSetting(key, null);\n\n    } catch (error) {\n      throw this.handleError(error, `Failed to delete setting: ${key}`);\n    }\n  }\n\n  /**\n   * Get all settings with a prefix\n   */\n  async getSettingsWithPrefix(prefix: string): Promise<Record<string, any>> {\n    try {\n      if (!prefix || typeof prefix !== 'string') {\n        throw new ServiceError(\n          'Prefix must be a non-empty string',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n\n      const settings: Record<string, any> = {};\n      \n      if (app.forum) {\n        const attributes = app.forum.data.attributes;\n        for (const [key, value] of Object.entries(attributes)) {\n          if (key.startsWith(prefix)) {\n            settings[key] = value;\n          }\n        }\n      }\n\n      return settings;\n\n    } catch (error) {\n      throw this.handleError(error, `Failed to get settings with prefix: ${prefix}`);\n    }\n  }\n\n  /**\n   * Check if current user can manage settings\n   */\n  canManageSettings(): boolean {\n    const currentUser = app.session.user;\n    return currentUser && currentUser.isAdmin();\n  }\n\n  /**\n   * Get extension-specific setting with proper namespace\n   */\n  async getExtensionSetting(extension: string, key: string, defaultValue?: any): Promise<any> {\n    const fullKey = `${extension}.${key}`;\n    return await this.getSetting(fullKey, defaultValue);\n  }\n\n  /**\n   * Save extension-specific setting with proper namespace\n   */\n  async saveExtensionSetting(extension: string, key: string, value: any): Promise<void> {\n    const fullKey = `${extension}.${key}`;\n    return await this.saveSetting(fullKey, value);\n  }\n\n  /**\n   * Get withdrawal extension settings\n   */\n  async getWithdrawalSetting(key: string, defaultValue?: any): Promise<any> {\n    return await this.getExtensionSetting('wusong8899-withdrawal', key, defaultValue);\n  }\n\n  /**\n   * Save withdrawal extension setting\n   */\n  async saveWithdrawalSetting(key: string, value: any): Promise<void> {\n    return await this.saveExtensionSetting('wusong8899-withdrawal', key, value);\n  }\n\n  /**\n   * Get all withdrawal extension settings\n   */\n  async getAllWithdrawalSettings(): Promise<Record<string, any>> {\n    return await this.getSettingsWithPrefix('wusong8899-withdrawal.');\n  }\n\n  /**\n   * Prepare value for storage (handle objects, arrays, booleans)\n   */\n  private prepareValueForStorage(value: any): string {\n    if (value === null || value === undefined) {\n      return '';\n    }\n    \n    if (typeof value === 'string') {\n      return value;\n    }\n    \n    if (typeof value === 'boolean') {\n      return value ? '1' : '0';\n    }\n    \n    if (typeof value === 'number') {\n      return String(value);\n    }\n    \n    // Objects and arrays get JSON stringified\n    return JSON.stringify(value);\n  }\n\n  /**\n   * Handle service errors with proper typing\n   */\n  private handleError(error: any, defaultMessage: string): ServiceError {\n    if (error instanceof ServiceError) {\n      return error;\n    }\n\n    // Handle permission errors\n    if (error.status === 403 || error.response?.status === 403) {\n      return new ServiceError(\n        'Admin permissions required to manage settings',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    // Handle Flarum API errors\n    if (error.response && error.response.errors) {\n      const apiError = error.response.errors[0];\n      return new ServiceError(\n        apiError.detail || defaultMessage,\n        ServiceErrorType.VALIDATION_ERROR,\n        apiError.code,\n        apiError\n      );\n    }\n\n    // Handle network errors\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\n      return new ServiceError(\n        'Network error occurred while managing settings',\n        ServiceErrorType.NETWORK_ERROR\n      );\n    }\n\n    // Default error handling\n    return new ServiceError(\n      error.message || defaultMessage,\n      ServiceErrorType.SERVER_ERROR\n    );\n  }\n}\n\n// Export singleton instance\nexport const settingsService = new SettingsService();","import app from 'flarum/common/app';\r\nimport DepositAddress from '../models/DepositAddress';\r\nimport DepositPlatform from '../models/DepositPlatform';\r\nimport { \r\n  AddressServiceInterface, \r\n  QueryOptions, \r\n  ServiceError, \r\n  ServiceErrorType\r\n} from '../types/services';\r\n\r\n/**\r\n * Service for managing deposit addresses with Flarum Store integration\r\n */\r\nexport default class AddressService implements AddressServiceInterface {\r\n  private readonly addressModelType = 'deposit-addresses';\r\n  private readonly platformModelType = 'deposit-platforms';\r\n\r\n  /**\r\n   * Generate or retrieve deposit address for user and platform\r\n   */\r\n  async generateAddress(platformId: number, userId?: number): Promise<string> {\r\n    try {\r\n      const targetUserId = userId || app.session.user?.id();\r\n      \r\n      if (!targetUserId) {\r\n        throw new ServiceError(\r\n          'User not authenticated',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      // Check if platform exists and is active\r\n      const platform = await app.store.find(this.platformModelType, platformId) as DepositPlatform;\r\n      if (!platform) {\r\n        throw new ServiceError(\r\n          'Invalid platform selected',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      if (!platform.isActive()) {\r\n        throw new ServiceError(\r\n          'Platform is not currently active',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      // Try to find existing active address for this user/platform\r\n      const existingAddresses = await this.getUserAddresses(targetUserId);\r\n      const existingAddress = existingAddresses.find((addr: DepositAddress) => \r\n        addr.platform().id() === platformId && addr.isActive()\r\n      );\r\n\r\n      if (existingAddress) {\r\n        // Update last used timestamp\r\n        await this.updateLastUsed(existingAddress);\r\n        return existingAddress.fullAddress() || existingAddress.address();\r\n      }\r\n\r\n      // Generate new address\r\n      return await this.createNewAddress(platform, targetUserId);\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to generate deposit address');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all deposit addresses for a user\r\n   */\r\n  async getUserAddresses(userId?: number, options: QueryOptions = {}): Promise<DepositAddress[]> {\r\n    try {\r\n      const targetUserId = userId || app.session.user?.id();\r\n      \r\n      if (!targetUserId) {\r\n        throw new ServiceError(\r\n          'User not authenticated',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      const queryOptions = {\r\n        ...options,\r\n        filter: {\r\n          user: targetUserId,\r\n          ...options.filter\r\n        },\r\n        include: options.include || 'platform',\r\n        sort: options.sort || '-createdAt'\r\n      };\r\n\r\n      const addresses = await app.store.find(this.addressModelType, queryOptions);\r\n      return Array.isArray(addresses) ? addresses : [addresses];\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to get user addresses');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get specific address for platform and user\r\n   */\r\n  async getAddressForPlatform(platformId: number, userId?: number): Promise<DepositAddress | null> {\r\n    try {\r\n      const addresses = await this.getUserAddresses(userId, {\r\n        filter: { platform: platformId, isActive: true }\r\n      });\r\n      \r\n      return addresses.length > 0 ? addresses[0] : null;\r\n\r\n    } catch (error) {\r\n      if (this.isNotFoundError(error)) {\r\n        return null;\r\n      }\r\n      throw this.handleError(error, `Failed to get address for platform ${platformId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh/regenerate address for platform\r\n   */\r\n  async refreshAddress(platformId: number, userId?: number): Promise<string> {\r\n    try {\r\n      const targetUserId = userId || app.session.user?.id();\r\n      \r\n      if (!targetUserId) {\r\n        throw new ServiceError(\r\n          'User not authenticated',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      // Deactivate existing address\r\n      const existingAddress = await this.getAddressForPlatform(platformId, targetUserId);\r\n      if (existingAddress) {\r\n        await this.deactivateAddress(parseInt(existingAddress.id()));\r\n      }\r\n\r\n      // Generate new address\r\n      return await this.generateAddress(platformId, targetUserId);\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to refresh deposit address');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate a deposit address\r\n   */\r\n  async deactivateAddress(addressId: number): Promise<void> {\r\n    try {\r\n      const address = await app.store.find(this.addressModelType, addressId) as DepositAddress;\r\n      if (!address) {\r\n        throw new ServiceError(\r\n          'Address not found',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      if (!this.canViewAddress(address)) {\r\n        throw new ServiceError(\r\n          'You do not have permission to deactivate this address',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      await address.save({ isActive: false });\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to deactivate address');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if current user can generate addresses\r\n   */\r\n  canGenerateAddress(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && !currentUser.isGuest();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view an address\r\n   */\r\n  canViewAddress(address: DepositAddress): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view all addresses\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own addresses\r\n    return address.user()?.id() === currentUser.id();\r\n  }\r\n\r\n  /**\r\n   * Create new deposit address\r\n   */\r\n  private async createNewAddress(platform: DepositPlatform, userId: number): Promise<string> {\r\n    try {\r\n      // Use platform's address generation method\r\n      const address = platform.generateDepositAddress(userId);\r\n      \r\n      // Create address record in the store\r\n      const depositAddress = app.store.createRecord(this.addressModelType) as DepositAddress;\r\n      \r\n      const addressData = {\r\n        userId: userId,\r\n        platformId: platform.id(),\r\n        address: address,\r\n        fullAddress: address, // For now, same as address\r\n        isActive: true,\r\n        lastUsedAt: new Date()\r\n      };\r\n\r\n      const savedAddress = await depositAddress.save(addressData);\r\n      return (savedAddress as DepositAddress).fullAddress() || address;\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to create new address');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update last used timestamp for address\r\n   */\r\n  private async updateLastUsed(address: DepositAddress): Promise<void> {\r\n    try {\r\n      await address.save({ lastUsedAt: new Date() });\r\n    } catch (error) {\r\n      // Don't fail the whole operation if timestamp update fails\r\n      console.warn('Failed to update address last used timestamp:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all addresses with platform information\r\n   */\r\n  async getAddressesWithPlatforms(userId?: number): Promise<Array<{\r\n    address: DepositAddress;\r\n    platform: DepositPlatform;\r\n  }>> {\r\n    try {\r\n      const addresses = await this.getUserAddresses(userId, {\r\n        include: 'platform',\r\n        filter: { isActive: true }\r\n      });\r\n\r\n      return addresses.map(address => ({\r\n        address,\r\n        platform: address.platform()\r\n      })).filter(item => item.platform); // Filter out addresses without platforms\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to get addresses with platform information');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active addresses count for user\r\n   */\r\n  async getActiveAddressCount(userId?: number): Promise<number> {\r\n    try {\r\n      const addresses = await this.getUserAddresses(userId, {\r\n        filter: { isActive: true }\r\n      });\r\n      \r\n      return addresses.length;\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to get active address count');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate address format (basic validation)\r\n   */\r\n  validateAddressFormat(address: string, platform: DepositPlatform): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!address || typeof address !== 'string') {\r\n      errors.push('Address must be a valid string');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    if (address.length < 10) {\r\n      errors.push('Address must be at least 10 characters long');\r\n    }\r\n\r\n    // Add platform-specific validations\r\n    const symbol = platform.symbol()?.toLowerCase();\r\n    if (symbol === 'btc' && !address.match(/^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/)) {\r\n      errors.push('Invalid Bitcoin address format');\r\n    } else if (symbol === 'eth' && !address.match(/^0x[a-fA-F0-9]{40}$/)) {\r\n      errors.push('Invalid Ethereum address format');\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\r\n      return new ServiceError(\r\n        'Network error occurred',\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if error is a not found error\r\n   */\r\n  private isNotFoundError(error: any): boolean {\r\n    return error.status === 404 || \r\n           error.response?.status === 404 ||\r\n           error.message?.includes('not found');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const addressService = new AddressService();","import app from 'flarum/admin/app';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\nimport GenericManagementPage, { \r\n  type GenericManagementPageConfig, \r\n  type GenericPlatform, \r\n  type GenericTransaction \r\n} from './shared/GenericManagementPage';\r\nimport GeneralSettingsSection from './sections/GeneralSettingsSection';\r\nimport PlatformManagementSection from './sections/PlatformManagementSection';\r\nimport RequestManagementSection from './sections/RequestManagementSection';\r\nimport DepositRecordManagementSection from './sections/DepositRecordManagementSection';\r\nimport DepositPlatformManagementSection from './sections/DepositPlatformManagementSection';\r\nimport ConfirmModal from '../../common/components/shared/ConfirmModal';\r\nimport { \r\n  createWithdrawalPlatformOperations,\r\n  createWithdrawalRequestOperations\r\n} from '../utils/platformOperations';\r\n\r\n// Import services\r\nimport { depositService, platformService } from '../../common/services';\r\nimport { ServiceError } from '../../common/types/services';\r\nimport Component from 'flarum/common/Component';\r\n\r\n// Simple placeholder components for custom tabs\r\nclass WithdrawalTabPlaceholder extends Component {\r\n  view() {\r\n    return <div>Withdrawals Content</div>;\r\n  }\r\n}\r\n\r\nclass DepositsTabPlaceholder extends Component {\r\n  view() {\r\n    return <div>Deposits Content</div>;\r\n  }\r\n}\r\n\r\n\r\nexport default class UnifiedManagementPage extends GenericManagementPage<GenericPlatform, GenericTransaction> {\r\n  \r\n  // Additional state for complex scenarios\r\n  private depositPlatforms: GenericPlatform[] = [];\r\n  private depositRecords: GenericTransaction[] = [];\r\n  private users: { [key: number]: any } = {};\r\n\r\n  protected getConfig(): GenericManagementPageConfig<GenericPlatform, GenericTransaction> {\r\n    return {\r\n      pageTitle: app.translator.trans('withdrawal.admin.page.title').toString(),\r\n      extensionId: 'WithdrawalManagement',\r\n      \r\n      // Primary platform operations (withdrawal)\r\n      platformOperations: createWithdrawalPlatformOperations(),\r\n      transactionOperations: createWithdrawalRequestOperations(),\r\n      \r\n      // Settings component\r\n      settingsComponent: GeneralSettingsSection,\r\n      \r\n      // Tab configuration\r\n      tabs: [\r\n        {\r\n          key: 'withdrawals',\r\n          label: app.translator.trans('withdrawal.admin.tabs.withdrawals').toString(),\r\n          component: WithdrawalTabPlaceholder\r\n        },\r\n        {\r\n          key: 'deposits',\r\n          label: app.translator.trans('withdrawal.admin.tabs.deposits').toString(),\r\n          component: DepositsTabPlaceholder\r\n        }\r\n      ],\r\n      \r\n      translations: {\r\n        platformPrefix: 'withdrawal.admin.platforms',\r\n        transactionPrefix: 'withdrawal.admin.requests'\r\n      }\r\n    };\r\n  }\r\n\r\n  // Override renderActiveTabContent to handle the complex withdrawals and deposits tabs  \r\n  protected renderActiveTabContent(): Mithril.Children {\r\n    if (this.activeTab === 'withdrawals') {\r\n      return (\r\n        <div>\r\n          <PlatformManagementSection\r\n            platforms={this.platforms}\r\n            submittingPlatform={this.submittingPlatform}\r\n            onAddPlatform={this.addPlatform.bind(this)}\r\n            onTogglePlatformStatus={this.togglePlatformStatus.bind(this)}\r\n            onDeletePlatform={this.deletePlatform.bind(this)}\r\n          />\r\n          \r\n          <RequestManagementSection\r\n            requests={this.transactions as any}\r\n            onUpdateRequestStatus={this.updateTransactionStatus.bind(this)}\r\n            onDeleteRequest={this.deleteWithdrawalRequest.bind(this)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (this.activeTab === 'deposits') {\r\n      return (\r\n        <div>\r\n          <DepositPlatformManagementSection\r\n            platforms={this.depositPlatforms}\r\n            submittingPlatform={this.submittingPlatform}\r\n            onAddPlatform={this.addDepositPlatform.bind(this)}\r\n            onTogglePlatformStatus={this.toggleDepositPlatformStatus.bind(this)}\r\n            onDeletePlatform={this.deleteDepositPlatform.bind(this)}\r\n          />\r\n          \r\n          <DepositRecordManagementSection\r\n            platforms={this.depositPlatforms}\r\n            records={this.depositRecords}\r\n            loading={this.loading}\r\n            onApproveRecord={this.approveDepositRecord.bind(this)}\r\n            onRejectRecord={this.rejectDepositRecord.bind(this)}\r\n            onDeleteRecord={this.deleteDepositRecord.bind(this)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    // For other tabs, use the parent implementation\r\n    return super.renderActiveTabContent();\r\n  }\r\n\r\n  // Override loadData to handle unified withdrawal and deposit data loading\r\n  protected async loadData(): Promise<void> {\r\n    try {\r\n      // Load withdrawal data (handled by parent)\r\n      await this.loadPlatforms();\r\n      await this.loadTransactions();\r\n      \r\n      // Load additional user data for requests\r\n      await this.loadUserData();\r\n      \r\n      // Load deposit data\r\n      await this.loadDepositPlatforms();\r\n      await this.loadDepositRecords();\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n    } finally {\r\n      this.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  // Deposit platform management methods\r\n  private async addDepositPlatform(formData: any): Promise<void> {\r\n    if (this.submittingPlatform) return;\r\n\r\n    this.submittingPlatform = true;\r\n    m.redraw();\r\n\r\n    try {\r\n      // Convert numeric fields from strings to numbers\r\n      const attributes = {\r\n        ...formData,\r\n        minAmount: parseFloat(formData.minAmount) || 0,\r\n        maxAmount: formData.maxAmount && formData.maxAmount.trim() ? parseFloat(formData.maxAmount) : null,\r\n        fee: formData.fee && formData.fee.trim() ? parseFloat(formData.fee) : 0,\r\n        isActive: formData.isActive !== undefined ? formData.isActive : true\r\n      };\r\n      \r\n      await platformService.create('deposit', attributes);\r\n      await this.loadDepositPlatforms();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.platforms.add_success')\r\n      );\r\n    } catch (error) {\r\n      console.error('Error adding deposit platform:', error);\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.admin.deposit.platforms.add_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    } finally {\r\n      this.submittingPlatform = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private async toggleDepositPlatformStatus(platform: GenericPlatform): Promise<void> {\r\n    try {\r\n      await platformService.toggleStatus(platform);\r\n      await this.loadDepositPlatforms();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.platforms.status_updated')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error toggling deposit platform status:', error);\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.admin.deposit.platforms.status_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    }\r\n  }\r\n\r\n  private async deleteDepositPlatform(platform: GenericPlatform): Promise<void> {\r\n    const platformName = (typeof platform.name === 'function' ? platform.name() : platform.name) || 'Unknown Platform';\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans('withdrawal.admin.platforms.delete_confirm_title'),\r\n      message: app.translator.trans('withdrawal.admin.platforms.delete_confirm_message', { name: platformName }),\r\n      confirmText: app.translator.trans('withdrawal.admin.platforms.delete_confirm_button'),\r\n      cancelText: app.translator.trans('withdrawal.admin.platforms.delete_cancel_button'),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          await platformService.delete(platform);\r\n          await this.loadDepositPlatforms();\r\n          \r\n          app.alerts.show(\r\n            { type: 'success', dismissible: true },\r\n            app.translator.trans('withdrawal.admin.deposit.platforms.delete_success')\r\n          );\r\n        } catch (error) {\r\n          console.error('Error deleting deposit platform:', error);\r\n          \r\n          let errorMessage = app.translator.trans('withdrawal.admin.deposit.platforms.delete_error').toString();\r\n          \r\n          if (error instanceof ServiceError) {\r\n            errorMessage = error.message;\r\n          }\r\n          \r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            errorMessage\r\n          );\r\n        }\r\n        m.redraw();\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  private async updateDepositRecordStatus(record: GenericTransaction, status: string): Promise<void> {\r\n    try {\r\n      await depositService.update(record as any, { status });\r\n      await this.loadDepositRecords();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.status_updated')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error updating deposit record:', error);\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.admin.deposit.records.status_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    }\r\n  }\r\n\r\n  // Deletion method for withdrawal requests  \r\n  private deleteWithdrawalRequest(request: any): void {\r\n    const requestId = typeof request.id === 'function' ? request.id() : request.id;\r\n    const amount = typeof request.amount === 'function' ? request.amount() : (request.attributes?.amount || 0);\r\n    \r\n    // Get user name for display in confirmation\r\n    let userName = 'Unknown User';\r\n    if (typeof request.user === 'function') {\r\n      const userData = request.user();\r\n      if (userData && typeof userData.displayName === 'function') {\r\n        userName = userData.displayName();\r\n      } else if (userData && userData.attributes?.displayName) {\r\n        userName = userData.attributes.displayName;\r\n      }\r\n    }\r\n    \r\n    app.modal.show(ConfirmModal, {\r\n      title: app.translator.trans('withdrawal.admin.requests.delete_confirm_title'),\r\n      message: app.translator.trans('withdrawal.admin.requests.delete_confirm_message', { info: `${userName} - ${amount}` }),\r\n      confirmText: app.translator.trans('withdrawal.admin.requests.delete_confirm_button'),\r\n      cancelText: app.translator.trans('withdrawal.admin.requests.delete_cancel_button'),\r\n      dangerous: true,\r\n      icon: 'fas fa-trash',\r\n      onConfirm: async () => {\r\n        try {\r\n          const record = app.store.getById('withdrawal-requests', requestId);\r\n          if (record) {\r\n            await record.delete();\r\n            await this.loadTransactions();\r\n            \r\n            app.alerts.show(\r\n              { type: 'success', dismissible: true },\r\n              app.translator.trans('withdrawal.admin.requests.delete_success')\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error('Error deleting request:', error);\r\n          app.alerts.show(\r\n            { type: 'error', dismissible: true },\r\n            app.translator.trans('withdrawal.admin.requests.delete_error')\r\n          );\r\n        }\r\n      },\r\n      onCancel: () => {\r\n        app.modal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Additional data loading methods\r\n  private async loadDepositPlatforms(): Promise<void> {\r\n    try {\r\n      this.depositPlatforms = await platformService.find('deposit', {\r\n        sort: 'name'\r\n      });\r\n      console.log('Loaded deposit platforms:', this.depositPlatforms);\r\n    } catch (error) {\r\n      console.error('Error loading deposit platforms:', error);\r\n      this.depositPlatforms = [];\r\n    }\r\n  }\r\n\r\n\r\n  private async loadUserData(): Promise<void> {\r\n    // Skip if no requests\r\n    if (this.transactions.length === 0) return;\r\n    \r\n    const userIds = [...new Set(this.transactions\r\n      .map(r => {\r\n        // Check both data.relationships and direct relationships structures\r\n        const userRelation = (r as any)?.data?.relationships?.user?.data || (r as any)?.relationships?.user?.data;\r\n        if (userRelation) {\r\n          return userRelation.id;\r\n        }\r\n        return null;\r\n      })\r\n      .filter(id => id !== null && id !== undefined)\r\n    )];\r\n    const usersToLoad = userIds.filter(userId => !this.users[userId]);\r\n    \r\n    if (usersToLoad.length > 0) {\r\n      try {\r\n        const userPromises = usersToLoad.map(userId => \r\n          app.store.find('users', userId).catch(error => {\r\n            console.error(`Error loading user ${userId}:`, error);\r\n            return null;\r\n          })\r\n        );\r\n        \r\n        const loadedUsers = await Promise.all(userPromises);\r\n        \r\n        usersToLoad.forEach((userId, index) => {\r\n          if (loadedUsers[index]) {\r\n            this.users[userId] = loadedUsers[index];\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading users:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Deposit record management methods\r\n  private async loadDepositRecords(): Promise<void> {\r\n    try {\r\n      // For admin, get all deposit records (not just user's own)\r\n      const records = await depositService.find({\r\n        include: 'user,platform',\r\n        sort: '-createdAt'\r\n      });\r\n      \r\n      this.depositRecords = records as GenericTransaction[];\r\n      console.log('Loaded deposit records:', this.depositRecords);\r\n    } catch (error) {\r\n      console.error('Error loading deposit records:', error);\r\n      this.depositRecords = [];\r\n    }\r\n  }\r\n\r\n  private async approveDepositRecord(record: any, creditedAmount?: number, notes?: string): Promise<void> {\r\n    try {\r\n      const attributes: any = {\r\n        status: 'approved'\r\n      };\r\n      \r\n      if (creditedAmount !== undefined) {\r\n        attributes.creditedAmount = creditedAmount;\r\n      }\r\n      \r\n      if (notes) {\r\n        attributes.adminNotes = notes;\r\n      }\r\n      \r\n      await depositService.update(record, attributes);\r\n      await this.loadDepositRecords();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.approve_success')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error approving deposit record:', error);\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.admin.deposit.records.approve_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async rejectDepositRecord(record: any, reason: string): Promise<void> {\r\n    try {\r\n      await depositService.update(record, {\r\n        status: 'rejected',\r\n        adminNotes: reason\r\n      });\r\n      \r\n      await this.loadDepositRecords();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.reject_success')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error rejecting deposit record:', error);\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.admin.deposit.records.reject_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async deleteDepositRecord(record: any): Promise<void> {\r\n    try {\r\n      await depositService.delete(record);\r\n      await this.loadDepositRecords();\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.admin.deposit.records.delete_success')\r\n      );\r\n      \r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error deleting deposit record:', error);\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.admin.deposit.records.delete_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport app from 'flarum/common/app';\r\n\r\n/**\r\n * WithdrawalPlatform model for Flarum\r\n * \r\n * This model represents a withdrawal platform that users can use\r\n * to withdraw their virtual currency with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalPlatform extends Model {\r\n  // Basic attributes\r\n  name = Model.attribute<string>('name');\r\n  symbol = Model.attribute<string>('symbol');\r\n  network = Model.attribute<string | null>('network');\r\n  displayName = Model.attribute<string>('displayName');\r\n  minAmount = Model.attribute<number>('minAmount');\r\n  maxAmount = Model.attribute<number>('maxAmount');\r\n  fee = Model.attribute<number>('fee');\r\n  \r\n  // Optional attributes\r\n  iconUrl = Model.attribute<string | null>('iconUrl');\r\n  iconClass = Model.attribute<string | null>('iconClass');\r\n  \r\n  // Status\r\n  isActive = Model.attribute<boolean>('isActive');\r\n  \r\n  // Timestamps\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n  \r\n  // Computed properties\r\n  apiEndpoint() {\r\n    return `/withdrawal-platforms/${this.id()}`;\r\n  }\r\n  \r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n  \r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    return amount >= min && amount <= max;\r\n  }\r\n  \r\n  getTotalCost(amount: number): number {\r\n    return amount + this.fee();\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<WithdrawalPlatform> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as WithdrawalPlatform;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        'Cannot delete platform that has pending withdrawal requests',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<WithdrawalPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to modify this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): WithdrawalPlatform {\r\n    const cloned = app.store.createRecord('withdrawal-platforms') as WithdrawalPlatform;\r\n    \r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + ' (Copy)',\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      iconUrl: this.iconUrl(),\r\n      iconClass: this.iconClass(),\r\n      isActive: false // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== 'number' || amount <= 0) {\r\n      errors.push('Amount must be a positive number');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    if (amount < this.minAmount()) {\r\n      errors.push(`Amount must be at least ${this.minAmount()} ${this.symbol()}`);\r\n    }\r\n\r\n    if (this.maxAmount() && amount > this.maxAmount()) {\r\n      errors.push(`Amount cannot exceed ${this.maxAmount()} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Check if user has sufficient balance for withdrawal\r\n   */\r\n  validateUserBalance(amount: number, userBalance: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n    const totalCost = this.getTotalCost(amount);\r\n\r\n    if (userBalance < totalCost) {\r\n      const feeText = this.fee() > 0 ? ` (including ${this.fee()} ${this.symbol()} fee)` : '';\r\n      errors.push(`Insufficient balance. Required: ${totalCost} ${this.symbol()}${feeText}, Available: ${userBalance} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n    \r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const requests = await app.store.find('withdrawal-requests', {\r\n        filter: { platform: this.id(), status: 'pending' }\r\n      });\r\n      \r\n      const requestsArray = Array.isArray(requests) ? requests : [requests];\r\n      return requestsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee();\r\n    if (fee === 0) {\r\n      return 'Free';\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.name !== undefined) {\r\n      if (!attributes.name || typeof attributes.name !== 'string') {\r\n        errors.push('Platform name is required');\r\n      } else if (attributes.name.trim().length < 2) {\r\n        errors.push('Platform name must be at least 2 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.symbol !== undefined) {\r\n      if (!attributes.symbol || typeof attributes.symbol !== 'string') {\r\n        errors.push('Symbol is required');\r\n      } else if (attributes.symbol.trim().length < 2) {\r\n        errors.push('Symbol must be at least 2 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.minAmount !== undefined) {\r\n      if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\r\n        errors.push('Minimum amount must be a non-negative number');\r\n      }\r\n    }\r\n\r\n    if (attributes.maxAmount !== undefined && attributes.maxAmount !== null) {\r\n      if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < 0) {\r\n        errors.push('Maximum amount must be a non-negative number');\r\n      }\r\n      \r\n      const minAmount = attributes.minAmount || this.minAmount();\r\n      if (attributes.maxAmount < minAmount) {\r\n        errors.push('Maximum amount must be greater than or equal to minimum amount');\r\n      }\r\n    }\r\n\r\n    if (attributes.fee !== undefined) {\r\n      if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\r\n        errors.push('Fee must be a non-negative number');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(', '),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save withdrawal platform',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save withdrawal platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete withdrawal platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","/**\r\n * Shared type definitions for the Withdrawal extension\r\n */\r\n\r\n/**\r\n * Withdrawal platform data structure\r\n */\r\nexport interface WithdrawalPlatformData {\r\n  id: string | number;\r\n  name: string;\r\n  symbol: string;\r\n  minAmount: number;\r\n  maxAmount: number;\r\n  fee: number;\r\n  iconUrl?: string | null;\r\n  iconClass?: string | null;\r\n  isActive: boolean;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * Withdrawal request data structure\r\n */\r\nexport interface WithdrawalRequestData {\r\n  id: string | number;\r\n  amount: number;\r\n  accountDetails: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  platformId: number;\r\n  userId: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * User withdrawal data extension\r\n */\r\nexport interface UserWithdrawalData {\r\n  money?: number;\r\n  withdrawalRequests?: WithdrawalRequestData[];\r\n}\r\n\r\n/**\r\n * API response structures\r\n */\r\nexport interface ApiSuccessResponse<T = any> {\r\n  data: T;\r\n}\r\n\r\nexport interface ApiErrorResponse {\r\n  errors: Array<{\r\n    status: string;\r\n    code: string;\r\n    title: string;\r\n    detail?: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Form validation errors\r\n */\r\nexport interface ValidationErrors {\r\n  [field: string]: string[];\r\n}\r\n\r\n/**\r\n * Configuration constants\r\n */\r\nexport const WITHDRAWAL_STATUS = {\r\n  PENDING: 'pending',\r\n  APPROVED: 'approved',\r\n  REJECTED: 'rejected',\r\n} as const;\r\n\r\nexport type WithdrawalStatus = typeof WITHDRAWAL_STATUS[keyof typeof WITHDRAWAL_STATUS];\r\n\r\n/**\r\n * Default values\r\n */\r\nexport const DEFAULT_MIN_AMOUNT = 0.001;\r\nexport const DEFAULT_MAX_AMOUNT = 10;\r\nexport const DEFAULT_FEE = 0.0005;\r\n\r\n/**\r\n * Helper type guards\r\n */\r\nexport function isWithdrawalPlatform(obj: any): obj is WithdrawalPlatformData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'name' in obj &&\r\n    'symbol' in obj &&\r\n    'minAmount' in obj &&\r\n    'maxAmount' in obj;\r\n}\r\n\r\nexport function isWithdrawalRequest(obj: any): obj is WithdrawalRequestData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'amount' in obj &&\r\n    'accountDetails' in obj &&\r\n    'status' in obj &&\r\n    'platformId' in obj &&\r\n    'userId' in obj;\r\n}","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\nimport WithdrawalPlatform from './WithdrawalPlatform';\r\nimport { WithdrawalStatus, WITHDRAWAL_STATUS } from '../types';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport app from 'flarum/common/app';\r\n\r\n/**\r\n * WithdrawalRequest model for Flarum\r\n * \r\n * This model represents a user's withdrawal request with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalRequest extends Model {\r\n  // Basic attributes\r\n  amount = Model.attribute<number>('amount');\r\n  accountDetails = Model.attribute<string>('accountDetails');\r\n  message = Model.attribute<string>('message');\r\n  status = Model.attribute<WithdrawalStatus>('status');\r\n  \r\n  // Foreign keys\r\n  platformId = Model.attribute<number>('platformId');\r\n  userId = Model.attribute<number>('userId');\r\n  \r\n  // Timestamps\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n  \r\n  // Relationships\r\n  user = Model.hasOne<User>('user');\r\n  platform = Model.hasOne<WithdrawalPlatform>('platform');\r\n  \r\n  // Computed properties\r\n  apiEndpoint() {\r\n    return `/withdrawal-requests/${this.id()}`;\r\n  }\r\n  \r\n  // Status helpers\r\n  isPending(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.PENDING;\r\n  }\r\n  \r\n  isApproved(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.APPROVED;\r\n  }\r\n  \r\n  isRejected(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.REJECTED;\r\n  }\r\n  \r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n  \r\n  // Display helpers\r\n  statusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`withdrawal.forum.status.${status}`).toString();\r\n  }\r\n  \r\n  statusColor(): string {\r\n    const status = this.status();\r\n    switch (status) {\r\n      case WITHDRAWAL_STATUS.APPROVED:\r\n        return 'success';\r\n      case WITHDRAWAL_STATUS.REJECTED:\r\n        return 'danger';\r\n      case WITHDRAWAL_STATUS.PENDING:\r\n      default:\r\n        return 'warning';\r\n    }\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this withdrawal request with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<WithdrawalRequest> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this withdrawal request with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this request',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    if (!this.canBeModified()) {\r\n      throw new ServiceError(\r\n        'This request cannot be deleted as it has already been processed',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this request for resubmission\r\n   */\r\n  clone(): WithdrawalRequest {\r\n    const cloned = app.store.createRecord('withdrawal-requests') as WithdrawalRequest;\r\n    \r\n    // Copy relevant attributes but not status/timestamps\r\n    cloned.pushAttributes({\r\n      platformId: this.platformId(),\r\n      amount: this.amount(),\r\n      accountDetails: this.accountDetails(),\r\n      message: this.message()\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Get total cost including fees\r\n   */\r\n  getTotalCost(): number {\r\n    const platform = this.platform();\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n    return this.amount() + fee;\r\n  }\r\n\r\n  /**\r\n   * Get formatted amount string\r\n   */\r\n  getFormattedAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    return `${this.amount()} ${symbol}`.trim();\r\n  }\r\n\r\n  /**\r\n   * Get formatted total cost string including fees\r\n   */\r\n  getFormattedTotalCost(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n    \r\n    if (fee > 0) {\r\n      return `${this.amount()} + ${fee} (fee) = ${this.getTotalCost()} ${symbol}`.trim();\r\n    }\r\n    \r\n    return this.getFormattedAmount();\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this request\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending requests\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this request\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending requests\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this request's details\r\n   */\r\n  canView(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own requests\r\n    return this.userId() === currentUser.id();\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.amount !== undefined) {\r\n      if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\r\n        errors.push('Amount must be a positive number');\r\n      }\r\n    }\r\n\r\n    if (attributes.accountDetails !== undefined) {\r\n      if (!attributes.accountDetails || typeof attributes.accountDetails !== 'string') {\r\n        errors.push('Account details are required');\r\n      } else if (attributes.accountDetails.trim().length < 5) {\r\n        errors.push('Account details must be at least 5 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformId !== undefined) {\r\n      if (!attributes.platformId || typeof attributes.platformId !== 'number') {\r\n        errors.push('Platform selection is required');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(', '),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save withdrawal request',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save withdrawal request',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this request',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete withdrawal request',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport app from 'flarum/common/app';\r\n\r\nexport default class DepositPlatform extends Model {\r\n  name = Model.attribute<string>('name');\r\n  symbol = Model.attribute<string>('symbol');\r\n  network = Model.attribute<string>('network');\r\n  networkTypeId = Model.attribute('networkTypeId');\r\n  displayName = Model.attribute<string>('displayName');\r\n  minAmount = Model.attribute('minAmount');\r\n  maxAmount = Model.attribute('maxAmount');\r\n  fee = Model.attribute('fee');\r\n  address = Model.attribute('address');\r\n  qrCodeImageUrl = Model.attribute<string>('qrCodeImageUrl');\r\n  iconUrl = Model.attribute<string>('iconUrl');\r\n  iconClass = Model.attribute<string>('iconClass');\r\n  warningText = Model.attribute<string>('warningText');\r\n  networkConfig = Model.attribute('networkConfig');\r\n  isActive = Model.attribute('isActive');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n\r\n  // Relationships\r\n  networkType = Model.hasOne('networkType');\r\n\r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n\r\n  getFullDisplayName(): string {\r\n    const name = this.getDisplayName();\r\n    const network = this.network();\r\n    return network ? `${name} (${network})` : name;\r\n  }\r\n\r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    return amount >= min && (max === null || amount <= max);\r\n  }\r\n\r\n  getTotalCost(amount: number): number {\r\n    return amount + (this.fee() || 0);\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<DepositPlatform> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as DepositPlatform;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        'Cannot delete platform that has pending deposit records',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<DepositPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to modify this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): DepositPlatform {\r\n    const cloned = app.store.createRecord('deposit-platforms') as DepositPlatform;\r\n    \r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + ' (Copy)',\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      networkTypeId: this.networkTypeId(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      address: this.address(),\r\n      qrCodeImageUrl: this.qrCodeImageUrl(),\r\n      iconUrl: this.iconUrl(),\r\n      iconClass: this.iconClass(),\r\n      warningText: this.warningText(),\r\n      isActive: false // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== 'number' || amount <= 0) {\r\n      errors.push('Amount must be a positive number');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const min = this.minAmount() || 0;\r\n    if (amount < min) {\r\n      errors.push(`Amount must be at least ${min} ${this.symbol()}`);\r\n    }\r\n\r\n    const max = this.maxAmount();\r\n    if (max && amount > max) {\r\n      errors.push(`Amount cannot exceed ${max} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n    \r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const records = await app.store.find('deposit-records', {\r\n        filter: { platform: this.id(), status: 'pending' }\r\n      });\r\n      \r\n      const recordsArray = Array.isArray(records) ? records : [records];\r\n      return recordsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee() || 0;\r\n    if (fee === 0) {\r\n      return 'Free';\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  /**\r\n   * Generate deposit address for user\r\n   */\r\n  generateDepositAddress(_userId?: number): string {\r\n    const address = this.address();\r\n    \r\n    // For now, we return the static address\r\n    // In the future, this could be enhanced to support dynamic address generation\r\n    if (address) {\r\n      return address;\r\n    }\r\n    \r\n    throw new ServiceError(\r\n      'No deposit address configured for this platform',\r\n      ServiceErrorType.VALIDATION_ERROR\r\n    );\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.name !== undefined) {\r\n      if (!attributes.name || typeof attributes.name !== 'string') {\r\n        errors.push('Platform name is required');\r\n      } else if (attributes.name.trim().length < 2) {\r\n        errors.push('Platform name must be at least 2 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.symbol !== undefined) {\r\n      if (!attributes.symbol || typeof attributes.symbol !== 'string') {\r\n        errors.push('Symbol is required');\r\n      } else if (attributes.symbol.trim().length < 2) {\r\n        errors.push('Symbol must be at least 2 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.network !== undefined) {\r\n      if (!attributes.network || typeof attributes.network !== 'string') {\r\n        errors.push('Network is required');\r\n      }\r\n    }\r\n\r\n    if (attributes.address !== undefined) {\r\n      if (!attributes.address || typeof attributes.address !== 'string') {\r\n        errors.push('Deposit address is required');\r\n      } else if (attributes.address.trim().length < 10) {\r\n        errors.push('Deposit address must be at least 10 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.minAmount !== undefined) {\r\n      if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\r\n        errors.push('Minimum amount must be a non-negative number');\r\n      }\r\n    }\r\n\r\n    if (attributes.maxAmount !== undefined && attributes.maxAmount !== null) {\r\n      if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < 0) {\r\n        errors.push('Maximum amount must be a non-negative number');\r\n      }\r\n      \r\n      const minAmount = attributes.minAmount || this.minAmount() || 0;\r\n      if (attributes.maxAmount < minAmount) {\r\n        errors.push('Maximum amount must be greater than or equal to minimum amount');\r\n      }\r\n    }\r\n\r\n    if (attributes.fee !== undefined && attributes.fee !== null) {\r\n      if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\r\n        errors.push('Fee must be a non-negative number');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(', '),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save deposit platform',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save deposit platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete deposit platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\nimport DepositPlatform from './DepositPlatform';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport app from 'flarum/common/app';\r\n\r\nexport default class DepositRecord extends Model {\r\n  // Fixed: id() should return string to match Flarum's base Model interface\r\n  id = Model.attribute<string>('id');\r\n  userId = Model.attribute<number>('userId');\r\n  platformId = Model.attribute<number>('platformId');\r\n  platformAccount = Model.attribute<string>('platformAccount');\r\n  realName = Model.attribute<string>('realName');\r\n  amount = Model.attribute<number>('amount');\r\n  depositTime = Model.attribute('depositTime', Model.transformDate);\r\n  screenshotUrl = Model.attribute<string>('screenshotUrl');\r\n  userMessage = Model.attribute<string>('userMessage');\r\n  status = Model.attribute<string>('status');\r\n  processedAt = Model.attribute('processedAt', Model.transformDate);\r\n  processedBy = Model.attribute<number>('processedBy');\r\n  adminNotes = Model.attribute<string>('adminNotes');\r\n  creditedAmount = Model.attribute<number>('creditedAmount');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n\r\n  // Relationships\r\n  user = Model.hasOne<User>('user');\r\n  platform = Model.hasOne<DepositPlatform>('platform');\r\n  processedByUser = Model.hasOne<User>('processedByUser');\r\n\r\n  // Status constants\r\n  static STATUS_PENDING = 'pending';\r\n  static STATUS_APPROVED = 'approved';\r\n  static STATUS_REJECTED = 'rejected';\r\n\r\n  // Status check methods\r\n  isPending(): boolean {\r\n    return this.status() === DepositRecord.STATUS_PENDING;\r\n  }\r\n\r\n  isApproved(): boolean {\r\n    return this.status() === DepositRecord.STATUS_APPROVED;\r\n  }\r\n\r\n  isRejected(): boolean {\r\n    return this.status() === DepositRecord.STATUS_REJECTED;\r\n  }\r\n\r\n  getStatusColor(): string {\r\n    switch (this.status()) {\r\n      case DepositRecord.STATUS_PENDING:\r\n        return 'warning';\r\n      case DepositRecord.STATUS_APPROVED:\r\n        return 'success';\r\n      case DepositRecord.STATUS_REJECTED:\r\n        return 'error';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  // Display helpers\r\n  getStatusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`withdrawal.forum.deposit.status.${status}`).toString();\r\n  }\r\n\r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this deposit record with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<DepositRecord> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as DepositRecord;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this deposit record with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this deposit record',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this record for resubmission\r\n   */\r\n  clone(): DepositRecord {\r\n    const cloned = app.store.createRecord('deposit-records') as DepositRecord;\r\n    \r\n    // Copy relevant attributes but not status/timestamps\r\n    cloned.pushAttributes({\r\n      platformId: this.platformId(),\r\n      amount: this.amount(),\r\n      platformAccount: this.platformAccount(),\r\n      realName: this.realName(),\r\n      userMessage: this.userMessage(),\r\n      screenshotUrl: this.screenshotUrl()\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Get formatted amount string\r\n   */\r\n  getFormattedAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    return `${this.amount()} ${symbol}`.trim();\r\n  }\r\n\r\n  /**\r\n   * Get credited amount or original amount\r\n   */\r\n  getFinalAmount(): number {\r\n    return this.creditedAmount() || this.amount();\r\n  }\r\n\r\n  /**\r\n   * Get formatted credited amount\r\n   */\r\n  getFormattedFinalAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    const amount = this.getFinalAmount();\r\n    \r\n    if (this.creditedAmount() && this.creditedAmount() !== this.amount()) {\r\n      return `${amount} ${symbol} (credited: ${this.creditedAmount()})`.trim();\r\n    }\r\n    \r\n    return `${amount} ${symbol}`.trim();\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this record\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any record\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending records\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this record\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any record (including processed ones)\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending records\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this record's details\r\n   */\r\n  canView(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view any record\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own records\r\n    return this.userId() === currentUser.id();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can approve/reject this record\r\n   */\r\n  canProcess(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin() && this.isPending();\r\n  }\r\n\r\n  // Workflow methods\r\n\r\n  /**\r\n   * Approve this deposit record\r\n   */\r\n  async approve(creditedAmount?: number, adminNotes?: string): Promise<DepositRecord> {\r\n    if (!this.canProcess()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to approve this deposit',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: DepositRecord.STATUS_APPROVED,\r\n      processedAt: new Date(),\r\n      processedBy: app.session.user?.id()\r\n    };\r\n\r\n    if (creditedAmount !== undefined) {\r\n      attributes.creditedAmount = creditedAmount;\r\n    }\r\n\r\n    if (adminNotes) {\r\n      attributes.adminNotes = adminNotes;\r\n    }\r\n\r\n    return await this.save(attributes);\r\n  }\r\n\r\n  /**\r\n   * Reject this deposit record\r\n   */\r\n  async reject(reason?: string): Promise<DepositRecord> {\r\n    if (!this.canProcess()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to reject this deposit',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: DepositRecord.STATUS_REJECTED,\r\n      processedAt: new Date(),\r\n      processedBy: app.session.user?.id()\r\n    };\r\n\r\n    if (reason) {\r\n      attributes.adminNotes = reason;\r\n    }\r\n\r\n    return await this.save(attributes);\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.amount !== undefined) {\r\n      if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\r\n        errors.push('Amount must be a positive number');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformAccount !== undefined) {\r\n      if (!attributes.platformAccount || typeof attributes.platformAccount !== 'string') {\r\n        errors.push('Platform account is required');\r\n      }\r\n    }\r\n\r\n    if (attributes.realName !== undefined) {\r\n      if (!attributes.realName || typeof attributes.realName !== 'string') {\r\n        errors.push('Real name is required');\r\n      } else if (attributes.realName.trim().length < 2) {\r\n        errors.push('Real name must be at least 2 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformId !== undefined) {\r\n      if (!attributes.platformId || typeof attributes.platformId !== 'number') {\r\n        errors.push('Platform selection is required');\r\n      }\r\n    }\r\n\r\n    if (attributes.creditedAmount !== undefined) {\r\n      if (typeof attributes.creditedAmount !== 'number' || attributes.creditedAmount < 0) {\r\n        errors.push('Credited amount must be a non-negative number');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(', '),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save deposit record',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save deposit record',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this record',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete deposit record',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import app from 'flarum/admin/app';\r\nimport UnifiedManagementPage from './components/UnifiedManagementPage';\r\nimport WithdrawalPlatform from '../common/models/WithdrawalPlatform';\r\nimport WithdrawalRequest from '../common/models/WithdrawalRequest';\r\nimport DepositPlatform from '../common/models/DepositPlatform';\r\nimport DepositRecord from '../common/models/DepositRecord';\r\n\r\napp.initializers.add('wusong8899-withdrawal', () => {\r\n  // Register models in store\r\n  app.store.models['withdrawal-platforms'] = WithdrawalPlatform;\r\n  app.store.models['withdrawal-requests'] = WithdrawalRequest;\r\n  app.store.models['deposit-platforms'] = DepositPlatform;\r\n  app.store.models['deposit-records'] = DepositRecord;\r\n\r\n  app.extensionData\r\n    .for('wusong8899-withdrawal')\r\n    .registerPage(UnifiedManagementPage);\r\n});"],"names":["ConfirmModal","Modal","title","dangerous","modalIcon","icon","message","confirmText","cancelText","onConfirm","onCancel","Button","app","GenericManagementPage","ExtensionPage","config","vnode","LoadingIndicator","m","tab","activeTab","props","formData","error","platform","platformName","transaction","status","prefix","key","value","settingsService","__vitePreload","SettingsService$1","GeneralSettingsSection","Component","withAttr","FormValidator","fieldName","displayName","minLength","min","max","numValue","_url","condition","AddPlatformForm","Stream","validator","nameLabel","symbolLabel","minAmountLabel","maxAmountLabel","feeLabel","minVal","errorMessage","iconUrlLabel","result","GenericPlatformListItem","type","onToggleStatus","onDelete","style","platformData","translationPrefix","Switch","id","name","symbol","network","minAmount","maxAmount","fee","address","isActive","createdDate","dateDisplay","humanTime","e","iconUrl","iconClass","PlatformManagementSection","platforms","submittingPlatform","onAddPlatform","onTogglePlatformStatus","onDeletePlatform","WithdrawalRequestItem","request","showActions","showDelete","requestId","amount","accountDetails","userName","userData","platformSymbol","statusClass","RequestManagementSection","requests","onUpdateRequestStatus","onDeleteRequest","pendingRequests","r","processedRequests","DepositRecordManagementSection","records","loading","record","attrs","recordId","isProcessing","user","depositTime","createdAt","platformId","p","defaultAmount","creditedAmount","notes","reason","AddDepositPlatformForm","submitting","addressLabel","maxVal","qrCodeLabel","DepositPlatformManagementSection","createWithdrawalPlatformOperations","platformService","PlatformService$1","attributes","newStatus","createWithdrawalRequestOperations","withdrawalService","WithdrawalService$1","ServiceErrorType","ServiceError","code","details","WithdrawalService","options","queryParams","results","model","data","userId","targetUserId","queryOptions","currentUser","userBalance","totalRequired","required","field","defaultMessage","apiError","DepositService","addressService","AddressService$1","deposit","confirmedAmount","grouped","transactionHash","depositService","PlatformService","modelType","currentStatus","errors","requestType","recordArray","sum","sortBy","direction","sortString","_platform","commonRequired","SettingsService","defaultValue","cachedValue","storageValue","settings","preparedSettings","forumAttributes","extension","fullKey","AddressService","existingAddress","addr","addresses","addressId","depositAddress","addressData","item","WithdrawalTabPlaceholder","DepositsTabPlaceholder","UnifiedManagementPage","usersToLoad","userRelation","userPromises","loadedUsers","index","WithdrawalPlatform","Model","cloned","totalCost","feeText","WITHDRAWAL_STATUS","WithdrawalRequest","DepositPlatform","_userId","_DepositRecord","adminNotes","DepositRecord"],"mappings":"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"}