{"version":3,"file":"forum.js","sources":["../src/forum/components/withdrawal/utils/modelHelpers.ts","../src/forum/components/withdrawal/utils/constants.ts","../src/forum/components/withdrawal/common/PlatformIcon.tsx","../src/forum/components/withdrawal/forms/PlatformSelector.tsx","../src/forum/components/withdrawal/forms/AmountInput.tsx","../src/forum/components/withdrawal/forms/AddressInput.tsx","../src/forum/components/withdrawal/forms/MessageInput.tsx","../src/forum/components/withdrawal/forms/SubmitButton.tsx","../src/forum/components/withdrawal/forms/WithdrawalForm.tsx","../src/forum/components/withdrawal/common/StatusBadge.tsx","../src/forum/components/withdrawal/common/EmptyState.tsx","../src/forum/components/withdrawal/common/LoadingState.tsx","../src/forum/components/shared/TransactionHistory.tsx","../src/forum/components/deposit/selectors/DepositPlatformDropdown.tsx","../src/forum/components/deposit/components/AddressDisplay.tsx","../src/forum/components/deposit/components/ImageDisplay.tsx","../src/forum/components/deposit/forms/DepositRecordForm.tsx","../src/common/types/services.ts","../src/common/services/WithdrawalService.ts","../src/common/services/DepositService.ts","../src/common/services/PlatformService.ts","../src/common/services/AddressService.ts","../src/common/types/api.ts","../src/forum/components/FundsPage.tsx","../src/common/utils/PlatformValidation.ts","../src/common/models/WithdrawalPlatform.ts","../src/common/types/index.ts","../src/common/models/WithdrawalRequest.ts","../src/common/models/DepositPlatform.ts","../src/common/models/DepositRecord.ts","../src/forum/components/MoneyDisplay.tsx","../src/forum/components/MobileMoneyDisplay.tsx","../src/forum/utils/ConfigManager.ts","../src/forum/utils/MobileDetector.ts","../src/forum/index.ts"],"sourcesContent":["/**\n * Helper functions for accessing Flarum model data\n * These handle both Model instances and plain object data\n */\n\n/**\n * Get ID from Flarum model or plain object\n */\nexport const getId = (obj: any): string | number => {\n  return typeof obj.id === 'function' ? obj.id() : obj.id;\n};\n\n/**\n * Get attribute value from Flarum model or plain object\n */\nexport const getAttr = (obj: any, attr: string): any => {\n  if (typeof obj[attr] === 'function') {\n    return obj[attr]();\n  }\n  return obj.attributes ? obj.attributes[attr] : obj[attr];\n};\n\n/**\n * Get string representation of ID for comparison\n */\nexport const getIdString = (obj: any): string => {\n  return String(getId(obj));\n};\n\n/**\n * Find platform by ID with proper type handling\n */\nexport const findPlatformById = (platforms: any[], platformId: string | number): any => {\n  const platformIdStr = String(platformId);\n  return platforms.find(p => {\n    const pId = getId(p);\n    return String(pId) === platformIdStr;\n  });\n};\n\n/**\n * Safely extract and convert date attribute to Date object\n */\nexport const getDateFromAttr = (obj: any, attr: string): Date => {\n  const dateStr = getAttr(obj, attr);\n  return dateStr ? new Date(dateStr) : new Date();\n};","import type { StatusType, StatusClass } from '../types/interfaces';\n\n/**\n * Withdrawal request status constants\n */\nexport const WITHDRAWAL_STATUS: Record<string, StatusType> = {\n  PENDING: 'pending',\n  APPROVED: 'approved',\n  REJECTED: 'rejected',\n} as const;\n\n/**\n * Status class mapping for UI styling\n */\nexport const STATUS_CLASS_MAP: Record<StatusType, StatusClass> = {\n  pending: 'warning',\n  approved: 'success',\n  rejected: 'danger',\n} as const;\n\n/**\n * Tab types\n */\nexport const TABS = {\n  WITHDRAWAL: 'withdrawal',\n  HISTORY: 'history',\n} as const;\n\n/**\n * Default values\n */\nexport const DEFAULTS = {\n  MIN_AMOUNT: 0.001,\n  MAX_AMOUNT: 10,\n  FEE: 0.0005,\n  BALANCE_PRECISION: 8,\n} as const;\n\n/**\n * CSS class names\n */\nexport const CSS_CLASSES = {\n  WITHDRAWAL_PAGE: 'WithdrawalPage',\n  MODAL: 'WithdrawalPage-modal',\n  HEADER: 'WithdrawalPage-header',\n  TABS: 'WithdrawalPage-tabs',\n  TAB: 'WithdrawalPage-tab',\n  TAB_ACTIVE: 'active',\n  CONTENT: 'WithdrawalPage-content',\n  LOADING: 'WithdrawalPage-loading',\n  EMPTY_STATE: 'WithdrawalPage-emptyState',\n} as const;\n\n/**\n * Icon names\n */\nexport const ICONS = {\n  CLOSE: 'fas fa-times',\n  COINS: 'fas fa-coins',\n  HISTORY: 'fas fa-history',\n  BITCOIN: 'fas fa-bitcoin',\n  CHEVRON_DOWN: 'fas fa-chevron-down',\n  PASTE: 'fas fa-paste',\n  BOOKMARK: 'fas fa-bookmark',\n} as const;","import icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport { getAttr } from '../utils/modelHelpers';\nimport { ICONS } from '../utils/constants';\n\ninterface PlatformIconProps {\n  platform: WithdrawalPlatform | null;\n  className?: string;\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport default class PlatformIcon {\n  view(vnode: Mithril.Vnode<PlatformIconProps>): Mithril.Children {\n    const { platform, className = '', size = 'medium' } = vnode.attrs;\n\n    // Add null checks to prevent errors\n    if (!platform) {\n      return icon(ICONS.COINS, { className: `crypto-icon default ${className}` });\n    }\n\n    // Handle both Model instances and plain objects\n    const iconUrl = getAttr(platform, 'iconUrl');\n    const iconClass = getAttr(platform, 'iconClass');\n    const name = getAttr(platform, 'name');\n    const symbol = getAttr(platform, 'symbol');\n\n    // Size classes\n    const sizeClass = `platform-icon-${size}`;\n\n    // Priority: iconUrl > iconClass > default\n    if (iconUrl) {\n      return (\n        <img \n          src={iconUrl} \n          alt={name || 'Platform'}\n          className={`platform-icon-image ${sizeClass} ${className}`}\n          onerror={(e: Event) => {\n            // Fallback to iconClass or default icon if image fails to load\n            const target = e.target as HTMLImageElement;\n            target.style.display = 'none';\n            const fallbackIcon = document.createElement('i');\n            const fallbackIconClass = iconClass || ICONS.COINS;\n            fallbackIcon.className = `${fallbackIconClass} crypto-icon ${className}`;\n            target.parentElement?.appendChild(fallbackIcon);\n          }}\n        />\n      );\n    }\n\n    // Use Font Awesome icon class if specified, otherwise default\n    const finalIconClass = iconClass || ICONS.COINS;\n    const finalSymbol = symbol?.toLowerCase() || 'default';\n    return icon(finalIconClass, { \n      className: `crypto-icon ${finalSymbol} ${sizeClass} ${className}` \n    });\n  }\n}","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport PlatformIcon from '../common/PlatformIcon';\nimport { getAttr } from '../utils/modelHelpers';\nimport { ICONS } from '../utils/constants';\n\ninterface PlatformSelectorProps {\n  platforms: WithdrawalPlatform[];\n  selectedPlatform: WithdrawalPlatform | null;\n  onPlatformSelect: (platform: WithdrawalPlatform) => void;\n  onAmountChange?: () => void; // Callback when platform changes to clear amount\n}\n\ninterface PlatformSelectorState {\n  showDropdown: boolean;\n}\n\nexport default class PlatformSelector extends Component<PlatformSelectorProps, PlatformSelectorState> {\n  oninit(vnode: Mithril.Vnode<PlatformSelectorProps, PlatformSelectorState>) {\n    super.oninit(vnode);\n    this.state = {\n      showDropdown: false,\n    };\n  }\n\n  view(): Mithril.Children {\n    const { selectedPlatform } = this.attrs;\n    const { showDropdown } = this.state;\n\n    return (\n      <div className=\"WithdrawalPage-platformSelector\">\n        <div className=\"WithdrawalPage-label\">提取平台</div>\n        <div \n          className=\"WithdrawalPage-platformDropdown\" \n          onclick={() => this.toggleDropdown()}\n        >\n          <div className=\"WithdrawalPage-platformSelected\">\n            <div className=\"WithdrawalPage-platformInfo\">\n              <div className=\"WithdrawalPage-platformIcon\">\n                <PlatformIcon \n                  platform={selectedPlatform} \n                  size=\"medium\"\n                />\n              </div>\n              <div className=\"WithdrawalPage-platformDetails\">\n                <div className=\"WithdrawalPage-platformName\">\n                  {this.getPlatformName(selectedPlatform)}\n                </div>\n              </div>\n            </div>\n          </div>\n          {icon(ICONS.CHEVRON_DOWN, { className: 'WithdrawalPage-dropdownIcon' })}\n        </div>\n\n        {showDropdown && this.renderPlatformDropdown()}\n      </div>\n    );\n  }\n\n  private toggleDropdown(): void {\n    this.state.showDropdown = !this.state.showDropdown;\n  }\n\n  private getPlatformName(platform: WithdrawalPlatform | null): string {\n    if (!platform) {\n      return '请选择平台';\n    }\n    return getAttr(platform, 'displayName') || getAttr(platform, 'name') || '请选择平台';\n  }\n\n  private renderPlatformDropdown(): Mithril.Children {\n    const { platforms } = this.attrs;\n\n    // Ensure platforms array is valid and filter out invalid items\n    const validPlatforms = (platforms || []).filter(platform => !!platform);\n\n    if (validPlatforms.length === 0) {\n      return (\n        <div className=\"WithdrawalPage-dropdownMenu\">\n          <div className=\"WithdrawalPage-dropdownItem WithdrawalPage-noData\">\n            {app.translator.trans('withdrawal.forum.no_platforms')}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"WithdrawalPage-dropdownMenu\">\n        {validPlatforms.map(platform => (\n          <div \n            key={platform.id()}\n            className=\"WithdrawalPage-dropdownItem\"\n            onclick={() => this.selectPlatform(platform)}\n          >\n            <div className=\"WithdrawalPage-platformIcon\">\n              <PlatformIcon platform={platform} size=\"small\" />\n            </div>\n            <div className=\"WithdrawalPage-platformName\">\n              {getAttr(platform, 'displayName') || getAttr(platform, 'name')}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  private selectPlatform(platform: WithdrawalPlatform): void {\n    const { onPlatformSelect, onAmountChange } = this.attrs;\n    \n    onPlatformSelect(platform);\n    this.state.showDropdown = false;\n    \n    // Clear amount when switching platforms\n    if (onAmountChange) {\n      onAmountChange();\n    }\n  }\n}","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport { getAttr } from '../utils/modelHelpers';\nimport { DEFAULTS, ICONS } from '../utils/constants';\n\ninterface AmountInputProps {\n  amount: string;\n  selectedPlatform: WithdrawalPlatform | null;\n  loadingBalance: boolean;\n  onAmountChange: (amount: string) => void;\n  onFillAllAmount: () => void;\n}\n\nexport default class AmountInput extends Component<AmountInputProps> {\n  view(): Mithril.Children {\n    const { \n      amount, \n      selectedPlatform, \n      loadingBalance,\n      onAmountChange,\n      onFillAllAmount \n    } = this.attrs;\n\n    const minAmount = this.getMinAmount(selectedPlatform);\n    const maxAmount = this.getMaxAmount(selectedPlatform);\n    const fee = this.getFee(selectedPlatform);\n\n    return (\n      <div className=\"WithdrawalPage-amountSection\">\n        <div className=\"WithdrawalPage-formGroup\">\n          <div className=\"WithdrawalPage-label\">\n            {app.translator.trans('withdrawal.forum.form.amount')}\n          </div>\n\n          <div className=\"WithdrawalPage-amountInput\">\n            <input\n              type=\"text\"\n              className=\"WithdrawalPage-input\"\n              placeholder=\"0.00000000\"\n              value={amount}\n              oninput={(e: Event) => onAmountChange((e.target as HTMLInputElement).value)}\n            />\n            <Button\n              className=\"WithdrawalPage-allButton\"\n              onclick={onFillAllAmount}\n              disabled={loadingBalance}\n            >\n              {app.translator.trans('withdrawal.forum.form.all_button')}\n            </Button>\n          </div>\n\n          <div className=\"WithdrawalPage-amountLimits\">\n            <div className=\"WithdrawalPage-limitRow\">\n              <span className=\"WithdrawalPage-limitLabel\">\n                {app.translator.trans('withdrawal.forum.limits.min_max')}\n              </span>\n              <span className=\"WithdrawalPage-limitValue\">\n                {icon(ICONS.COINS)} {minAmount} ~ {maxAmount}\n              </span>\n            </div>\n            <div className=\"WithdrawalPage-limitRow\">\n              <span className=\"WithdrawalPage-limitLabel\">\n                {app.translator.trans('withdrawal.forum.limits.fee')}\n              </span>\n              <span className=\"WithdrawalPage-limitValue\">\n                {icon(ICONS.COINS)} {fee}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private getMinAmount(platform: WithdrawalPlatform | null): number {\n    if (!platform) return DEFAULTS.MIN_AMOUNT;\n    return getAttr(platform, 'minAmount') || DEFAULTS.MIN_AMOUNT;\n  }\n\n  private getMaxAmount(platform: WithdrawalPlatform | null): number {\n    if (!platform) return DEFAULTS.MAX_AMOUNT;\n    return getAttr(platform, 'maxAmount') || DEFAULTS.MAX_AMOUNT;\n  }\n\n  private getFee(platform: WithdrawalPlatform | null): number {\n    if (!platform) return DEFAULTS.FEE;\n    return getAttr(platform, 'fee') || DEFAULTS.FEE;\n  }\n}","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport { getAttr } from '../utils/modelHelpers';\nimport { ICONS } from '../utils/constants';\nimport m from 'mithril';\n\ninterface AddressInputProps {\n  accountDetails: string;\n  selectedPlatform: WithdrawalPlatform | null;\n  saveAddress: boolean;\n  onAccountDetailsChange: (details: string) => void;\n  onSaveAddressToggle: (save: boolean) => void;\n}\n\nexport default class AddressInput extends Component<AddressInputProps> {\n  view(): Mithril.Children {\n    const { \n      accountDetails, \n      selectedPlatform, \n      saveAddress,\n      onAccountDetailsChange,\n      onSaveAddressToggle\n    } = this.attrs;\n\n    const symbol = this.getSymbol(selectedPlatform);\n\n    return (\n      <div className=\"WithdrawalPage-addressSection\">\n        <div className=\"WithdrawalPage-formGroup\">\n          <div className=\"WithdrawalPage-addressHeader\">\n            <span className=\"WithdrawalPage-label\">\n              {app.translator.trans('withdrawal.forum.form.address', { symbol })}\n              <span className=\"WithdrawalPage-required\">*</span>\n            </span>\n            <div \n              className=\"WithdrawalPage-saveAddress\" \n              onclick={() => onSaveAddressToggle(!saveAddress)}\n            >\n              {icon(ICONS.BOOKMARK)}\n              {app.translator.trans('withdrawal.forum.form.save_address')}\n            </div>\n          </div>\n\n          <div className=\"WithdrawalPage-addressInput\">\n            <input\n              type=\"text\"\n              className=\"WithdrawalPage-input\"\n              placeholder={app.translator.trans('withdrawal.forum.form.address_placeholder')}\n              value={accountDetails}\n              oninput={(e: Event) => onAccountDetailsChange((e.target as HTMLInputElement).value)}\n            />\n            <button \n              className=\"WithdrawalPage-pasteButton\" \n              onclick={() => this.pasteFromClipboard()}\n            >\n              {icon(ICONS.PASTE)}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private getSymbol(platform: WithdrawalPlatform | null): string {\n    if (!platform) return '';\n    return getAttr(platform, 'symbol') || '';\n  }\n\n  private async pasteFromClipboard(): Promise<void> {\n    const { onAccountDetailsChange } = this.attrs;\n    \n    try {\n      if (navigator.clipboard && navigator.clipboard.readText) {\n        const text = await navigator.clipboard.readText();\n        onAccountDetailsChange(text.trim());\n        m.redraw();\n      }\n    } catch (error) {\n      console.error('Failed to read from clipboard:', error);\n      app.alerts.show({\n        type: 'error',\n        dismissible: true\n      }, app.translator.trans('withdrawal.forum.clipboard_error'));\n    }\n  }\n}","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\n\ninterface MessageInputProps {\n  message: string;\n  onMessageChange: (message: string) => void;\n}\n\nexport default class MessageInput extends Component<MessageInputProps> {\n  view(): Mithril.Children {\n    const { \n      message,\n      onMessageChange\n    } = this.attrs;\n\n    return (\n      <div className=\"WithdrawalPage-messageSection\">\n        <div className=\"WithdrawalPage-formGroup\">\n          <span className=\"WithdrawalPage-label\">\n            {app.translator.trans('withdrawal.forum.form.message')}\n          </span>\n          <textarea\n            className=\"WithdrawalPage-textarea\"\n            placeholder={app.translator.trans('withdrawal.forum.form.message_placeholder')}\n            value={message}\n            rows={3}\n            maxlength={500}\n            oninput={(e: Event) => onMessageChange((e.target as HTMLTextAreaElement).value)}\n          />\n          <div className=\"WithdrawalPage-helperText\">\n            {app.translator.trans('withdrawal.forum.form.message_helper')} ({message.length}/500)\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport type Mithril from 'mithril';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport { getAttr } from '../utils/modelHelpers';\nimport { DEFAULTS } from '../utils/constants';\n\ninterface SubmitButtonProps {\n  amount: string;\n  selectedPlatform: WithdrawalPlatform | null;\n  accountDetails: string;\n  submitting: boolean;\n  canSubmit: boolean;\n  onSubmit: () => void;\n}\n\nexport default class SubmitButton extends Component<SubmitButtonProps> {\n  view(): Mithril.Children {\n    const { \n      amount, \n      selectedPlatform, \n      submitting, \n      canSubmit, \n      onSubmit \n    } = this.attrs;\n\n    const numericAmount = parseFloat(amount) || 0;\n    const fee = this.getFee(selectedPlatform);\n    const finalAmount = Math.max(0, numericAmount - fee);\n    const symbol = this.getSymbol(selectedPlatform);\n\n    return (\n      <div className=\"WithdrawalPage-submitSection\">\n        <Button\n          className=\"WithdrawalPage-submitButton\"\n          loading={submitting}\n          disabled={!canSubmit}\n          onclick={onSubmit}\n        >\n          {app.translator.trans('withdrawal.forum.form.submit')}\n        </Button>\n\n        {numericAmount > 0 && (\n          <div className=\"WithdrawalPage-finalAmount\">\n            {app.translator.trans('withdrawal.forum.final_amount', { \n              amount: finalAmount.toFixed(DEFAULTS.BALANCE_PRECISION), \n              symbol \n            })}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  private getFee(platform: WithdrawalPlatform | null): number {\n    if (!platform) return DEFAULTS.FEE;\n    return getAttr(platform, 'fee') || DEFAULTS.FEE;\n  }\n\n  private getSymbol(platform: WithdrawalPlatform | null): string {\n    if (!platform) return '';\n    return getAttr(platform, 'symbol') || '';\n  }\n}","import Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\nimport type { WithdrawalFormData } from '../types/interfaces';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport PlatformSelector from './PlatformSelector';\nimport AmountInput from './AmountInput';\nimport AddressInput from './AddressInput';\nimport MessageInput from './MessageInput';\nimport SubmitButton from './SubmitButton';\n\ninterface WithdrawalFormProps {\n  platforms: WithdrawalPlatform[];\n  formData: WithdrawalFormData;\n  loadingBalance: boolean;\n  submitting: boolean;\n  onFormDataChange: (data: Partial<WithdrawalFormData>) => void;\n  onFillAllAmount: () => void;\n  onSubmit: () => void;\n}\n\nexport default class WithdrawalForm extends Component<WithdrawalFormProps> {\n  view(): Mithril.Children {\n    const { \n      platforms, \n      formData, \n      loadingBalance,\n      submitting,\n      onFormDataChange,\n      onFillAllAmount,\n      onSubmit \n    } = this.attrs;\n\n    return [\n      <PlatformSelector \n        platforms={platforms}\n        selectedPlatform={formData.selectedPlatform}\n        onPlatformSelect={(platform: any) => onFormDataChange({ selectedPlatform: platform })}\n        onAmountChange={() => onFormDataChange({ amount: '' })}\n      />,\n      \n      <AmountInput \n        amount={formData.amount}\n        selectedPlatform={formData.selectedPlatform}\n        loadingBalance={loadingBalance}\n        onAmountChange={(amount: any) => onFormDataChange({ amount })}\n        onFillAllAmount={onFillAllAmount}\n      />,\n      \n      <AddressInput \n        accountDetails={formData.accountDetails}\n        selectedPlatform={formData.selectedPlatform}\n        saveAddress={formData.saveAddress}\n        onAccountDetailsChange={(accountDetails: any) => onFormDataChange({ accountDetails })}\n        onSaveAddressToggle={(saveAddress: any) => onFormDataChange({ saveAddress })}\n      />,\n      \n      <MessageInput \n        message={formData.message}\n        onMessageChange={(message: any) => onFormDataChange({ message })}\n      />,\n      \n      <SubmitButton \n        amount={formData.amount}\n        selectedPlatform={formData.selectedPlatform}\n        accountDetails={formData.accountDetails}\n        submitting={submitting}\n        canSubmit={this.canSubmit()}\n        onSubmit={onSubmit}\n      />\n    ];\n  }\n\n  private canSubmit(): boolean {\n    const { formData, submitting } = this.attrs;\n    const { selectedPlatform, amount, accountDetails } = formData;\n\n    return !!(\n      selectedPlatform &&\n      amount &&\n      accountDetails &&\n      !submitting &&\n      parseFloat(amount) > 0\n    );\n  }\n}","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\nimport type { StatusType } from '../types/interfaces';\nimport { STATUS_CLASS_MAP } from '../utils/constants';\n\ninterface StatusBadgeProps {\n  status: StatusType;\n  className?: string;\n}\n\nexport default class StatusBadge extends Component<StatusBadgeProps> {\n  view(): Mithril.Children {\n    const { status, className = '' } = this.attrs;\n    \n    const statusClass = this.getStatusClass(status);\n    const statusLabel = this.getStatusLabel(status);\n\n    return (\n      <div className={`WithdrawalPage-historyStatus ${statusClass} ${className}`}>\n        {statusLabel}\n      </div>\n    );\n  }\n\n  private getStatusClass(status: StatusType): string {\n    return STATUS_CLASS_MAP[status] || STATUS_CLASS_MAP.pending;\n  }\n\n  private getStatusLabel(status: StatusType): string {\n    return app.translator.trans(`withdrawal.forum.status.${status}`).toString();\n  }\n}","import Component from 'flarum/common/Component';\nimport icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\n\ninterface EmptyStateProps {\n  iconName: string;\n  title: string;\n  description: string;\n  className?: string;\n}\n\nexport default class EmptyState extends Component<EmptyStateProps> {\n  view(): Mithril.Children {\n    const { iconName, title, description, className = '' } = this.attrs;\n    \n    return (\n      <div className={`WithdrawalPage-emptyState ${className}`}>\n        <div className=\"WithdrawalPage-emptyIcon\">\n          {icon(iconName)}\n        </div>\n        <h3 className=\"WithdrawalPage-emptyTitle\">\n          {title}\n        </h3>\n        <p className=\"WithdrawalPage-emptyDescription\">\n          {description}\n        </p>\n      </div>\n    );\n  }\n}","import LoadingIndicator from 'flarum/common/components/LoadingIndicator';\n\ninterface LoadingStateProps {\n  className?: string;\n}\n\nexport default function LoadingState(props: LoadingStateProps): JSX.Element {\n  const { className = '' } = props;\n  \n  return (\n    <div className={`WithdrawalPage-loading ${className}`}>\n      <LoadingIndicator />\n    </div>\n  );\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalRequest from '../../../common/models/WithdrawalRequest';\r\nimport WithdrawalPlatform from '../../../common/models/WithdrawalPlatform';\r\nimport type DepositPlatform from '../../../common/models/DepositPlatform';\r\nimport type DepositRecord from '../../../common/models/DepositRecord';\r\nimport { getAttr, findPlatformById, getDateFromAttr, getIdString } from '../withdrawal/utils/modelHelpers';\r\nimport PlatformIcon from '../withdrawal/common/PlatformIcon';\r\nimport StatusBadge from '../withdrawal/common/StatusBadge';\r\nimport EmptyState from '../withdrawal/common/EmptyState';\r\nimport LoadingState from '../withdrawal/common/LoadingState';\r\n\r\n// Generic transaction type that can represent withdrawal requests or deposit records\r\ninterface Transaction {\r\n  id?: () => string | number;\r\n  amount?: () => number;\r\n  status?: () => string;\r\n  createdAt?: () => Date;\r\n  platform?: () => any;\r\n  platformId?: () => string | number;\r\n  // Withdrawal request specific fields\r\n  accountDetails?: () => string;\r\n  // Deposit record specific fields\r\n  platformAccount?: () => string;\r\n  realName?: () => string;\r\n  depositTime?: () => Date;\r\n  screenshotUrl?: () => string;\r\n  userMessage?: () => string;\r\n  processedAt?: () => Date;\r\n  adminNotes?: () => string;\r\n  creditedAmount?: () => number;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface TransactionHistoryAttrs {\r\n  transactions: (WithdrawalRequest | DepositRecord)[];\r\n  platforms: (WithdrawalPlatform | DepositPlatform)[];\r\n  loading: boolean;\r\n  type: 'withdrawal' | 'deposit';\r\n}\r\n\r\nexport default class TransactionHistory extends Component<TransactionHistoryAttrs> {\r\n  view(vnode: Mithril.Vnode<TransactionHistoryAttrs>): Mithril.Children {\r\n    const { transactions, platforms, loading, type } = vnode.attrs;\r\n\r\n    if (loading) {\r\n      return <LoadingState className={`${type}History-loading`} />;\r\n    }\r\n\r\n    if (!transactions || transactions.length === 0) {\r\n      return (\r\n        <EmptyState\r\n          iconName={type === 'withdrawal' ? 'fas fa-history' : 'fas fa-inbox'}\r\n          title={app.translator.trans(`${type}.forum.history.empty.title`)}\r\n          description={app.translator.trans(`${type}.forum.history.empty.description`)}\r\n          className={`${type}History-empty`}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={`${type}History`}>\r\n        <div className={`${type}History-header`}>\r\n          <h3>{app.translator.trans(`${type}.forum.history.title`)}</h3>\r\n          <span className={`${type}History-count`}>{transactions.length} {app.translator.trans(`${type}.forum.history.transactions`)}</span>\r\n        </div>\r\n        \r\n        <div className={`${type}History-list`}>\r\n          {transactions.map(transaction => this.renderTransaction(transaction as Transaction, platforms, type))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderTransaction(transaction: Transaction, platforms: any[], type: string): Mithril.Children {\r\n    const transactionId = this.getTransactionId(transaction);\r\n    const platform = this.getPlatform(transaction, platforms);\r\n    const amount = getAttr(transaction, 'amount') || 0;\r\n    const status = getAttr(transaction, 'status') || 'pending';\r\n    const statusColor = getAttr(transaction, 'statusColor') || this.getStatusColor(status);\r\n    const createdAt = getDateFromAttr(transaction, 'createdAt');\r\n\r\n    if (type === 'deposit') {\r\n      // Only deposit records now\r\n      return this.renderDepositRecord(transaction, platform, amount, status, statusColor, createdAt, transactionId);\r\n    } else {\r\n      return this.renderWithdrawalTransaction(transaction, platform, amount, status, createdAt, transactionId);\r\n    }\r\n  }\r\n\r\n  private renderWithdrawalTransaction(\r\n    transaction: Transaction, \r\n    platform: any, \r\n    amount: number, \r\n    status: string, \r\n    createdAt: Date, \r\n    transactionId: string\r\n  ): Mithril.Children {\r\n    const accountDetails = getAttr(transaction, 'accountDetails') || '';\r\n\r\n    return (\r\n      <div key={transactionId} className=\"WithdrawalPage-historyItem\">\r\n        <div className=\"WithdrawalPage-historyHeader\">\r\n          <div className=\"WithdrawalPage-historyPlatform\">\r\n            <div className=\"WithdrawalPage-platformIcon\">\r\n              <PlatformIcon platform={platform} size=\"small\" />\r\n            </div>\r\n            <div className=\"WithdrawalPage-historyInfo\">\r\n              <div className=\"WithdrawalPage-historyPlatformName\">\r\n                {this.getPlatformName(platform)}\r\n              </div>\r\n              <div className=\"WithdrawalPage-historyDate\">\r\n                {createdAt.toLocaleDateString()} {createdAt.toLocaleTimeString()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <StatusBadge status={status as any} />\r\n        </div>\r\n        <div className=\"WithdrawalPage-historyDetails\">\r\n          <div className=\"WithdrawalPage-historyAmount\">\r\n            <span className=\"WithdrawalPage-historyLabel\">\r\n              {app.translator.trans('withdrawal.forum.history.amount')}:\r\n            </span>\r\n            <span className=\"WithdrawalPage-historyValue\">\r\n              {amount} {this.getPlatformSymbol(platform)}\r\n            </span>\r\n          </div>\r\n          <div className=\"WithdrawalPage-historyAddress\">\r\n            <span className=\"WithdrawalPage-historyLabel\">\r\n              {app.translator.trans('withdrawal.forum.history.address')}:\r\n            </span>\r\n            <span className=\"WithdrawalPage-historyValue\">\r\n              {accountDetails}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositRecord(\r\n    transaction: Transaction,\r\n    platform: any,\r\n    amount: number,\r\n    status: string,\r\n    statusColor: string,\r\n    createdAt: Date,\r\n    transactionId: string\r\n  ): Mithril.Children {\r\n    const platformAccount = getAttr(transaction, 'platformAccount');\r\n    const realName = getAttr(transaction, 'realName');\r\n    const depositTime = getDateFromAttr(transaction, 'depositTime');\r\n    const screenshotUrl = getAttr(transaction, 'screenshotUrl');\r\n    const userMessage = getAttr(transaction, 'userMessage');\r\n    const processedAt = getDateFromAttr(transaction, 'processedAt');\r\n    const adminNotes = getAttr(transaction, 'adminNotes');\r\n    const creditedAmount = getAttr(transaction, 'creditedAmount');\r\n\r\n    return (\r\n      <div key={transactionId} className=\"DepositRecord-item\">\r\n        <div className=\"DepositRecord-itemHeader\">\r\n          <div className=\"DepositRecord-itemPlatform\">\r\n            {platform && (\r\n              <>\r\n                <div className=\"DepositRecord-itemIcon\">\r\n                  {this.renderPlatformIcon(platform)}\r\n                </div>\r\n                <div className=\"DepositRecord-itemInfo\">\r\n                  <span className=\"DepositRecord-itemCurrency\">\r\n                    {getAttr(platform, 'symbol')} {getAttr(platform, 'network') && `(${getAttr(platform, 'network')})`}\r\n                  </span>\r\n                  <span className=\"DepositRecord-itemType\">\r\n                    Manual Deposit\r\n                  </span>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"DepositRecord-itemAmount\">\r\n            <span className=\"DepositRecord-itemAmountValue\">\r\n              +{amount} {platform ? getAttr(platform, 'symbol') : ''}\r\n            </span>\r\n            <div className={`DepositRecord-itemStatus status-${statusColor}`}>\r\n              {this.getStatusIcon(status)}\r\n              {this.getStatusText(status)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"DepositRecord-itemDetails\">\r\n          <div className=\"DepositRecord-itemMeta\">\r\n            <span className=\"DepositRecord-itemTime\">\r\n              Submitted: {createdAt ? humanTime(createdAt) : 'Unknown time'}\r\n            </span>\r\n            \r\n            {depositTime && (\r\n              <span className=\"DepositRecord-itemDepositTime\">\r\n                Deposit Time: {depositTime.toLocaleDateString()} {depositTime.toLocaleTimeString()}\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"DepositRecord-itemInfo\">\r\n            <div className=\"DepositRecord-itemRow\">\r\n              <span className=\"DepositRecord-itemLabel\">Platform Account:</span>\r\n              <span className=\"DepositRecord-itemValue\">{platformAccount}</span>\r\n            </div>\r\n            \r\n            {realName && (\r\n              <div className=\"DepositRecord-itemRow\">\r\n                <span className=\"DepositRecord-itemLabel\">Real Name:</span>\r\n                <span className=\"DepositRecord-itemValue\">{realName}</span>\r\n              </div>\r\n            )}\r\n            \r\n            {userMessage && (\r\n              <div className=\"DepositRecord-itemRow\">\r\n                <span className=\"DepositRecord-itemLabel\">Message:</span>\r\n                <span className=\"DepositRecord-itemValue\">{userMessage}</span>\r\n              </div>\r\n            )}\r\n            \r\n            {screenshotUrl && (\r\n              <div className=\"DepositRecord-itemRow\">\r\n                <span className=\"DepositRecord-itemLabel\">Screenshot:</span>\r\n                <a href={screenshotUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"DepositRecord-itemLink\">\r\n                  View Screenshot {icon('fas fa-external-link-alt')}\r\n                </a>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {processedAt && (\r\n            <div className=\"DepositRecord-itemProcessed\">\r\n              <div className=\"DepositRecord-itemProcessedTime\">\r\n                Processed: {humanTime(processedAt)}\r\n              </div>\r\n              \r\n              {creditedAmount && creditedAmount !== amount && (\r\n                <div className=\"DepositRecord-itemCredited\">\r\n                  Credited Amount: {creditedAmount} {platform ? getAttr(platform, 'symbol') : ''}\r\n                </div>\r\n              )}\r\n              \r\n              {adminNotes && (\r\n                <div className=\"DepositRecord-itemNotes\">\r\n                  <span className=\"DepositRecord-itemLabel\">Admin Notes:</span>\r\n                  <span className=\"DepositRecord-itemValue\">{adminNotes}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  private getTransactionId(transaction: Transaction): string {\r\n    if (typeof transaction.id === 'function') {\r\n      return `transaction-${transaction.id()}`;\r\n    }\r\n    return `transaction-${getIdString(transaction) || Math.random()}`;\r\n  }\r\n\r\n  private getPlatform(transaction: Transaction, platforms: any[]): any {\r\n    const platformId = this.getPlatformId(transaction);\r\n    return findPlatformById(platforms, platformId);\r\n  }\r\n\r\n  private getPlatformId(transaction: Transaction): string | number {\r\n    return getAttr(transaction, 'platformId') || \r\n           (transaction.relationships?.platform?.data?.id) || '';\r\n  }\r\n\r\n  private getPlatformName(platform: any): string {\r\n    if (!platform) return 'Unknown Platform';\r\n    return getAttr(platform, 'name') || 'Unknown Platform';\r\n  }\r\n\r\n  private getPlatformSymbol(platform: any): string {\r\n    if (!platform) return '';\r\n    return getAttr(platform, 'symbol') || '';\r\n  }\r\n\r\n  private getStatusColor(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'warning';\r\n      case 'approved':\r\n      case 'confirmed':\r\n      case 'completed':\r\n        return 'success';\r\n      case 'rejected':\r\n      case 'failed':\r\n      case 'cancelled':\r\n        return 'danger';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  private renderPlatformIcon(platform: any): Mithril.Children {\r\n    const iconUrl = getAttr(platform, 'iconUrl');\r\n    const iconClass = getAttr(platform, 'iconClass');\r\n    const symbol = getAttr(platform, 'symbol');\r\n\r\n    if (iconUrl) {\r\n      return <img src={iconUrl} alt={symbol} className=\"DepositHistory-platformImg\" />;\r\n    }\r\n\r\n    if (iconClass) {\r\n      return icon(iconClass);\r\n    }\r\n\r\n    // Default currency icons\r\n    switch (symbol) {\r\n      case 'USDT':\r\n        return <span className=\"DepositHistory-currencyIcon usdt\">₮</span>;\r\n      case 'USDC':\r\n        return <span className=\"DepositHistory-currencyIcon usdc\">$</span>;\r\n      case 'BTC':\r\n        return <span className=\"DepositHistory-currencyIcon btc\">₿</span>;\r\n      case 'ETH':\r\n        return <span className=\"DepositHistory-currencyIcon eth\">Ξ</span>;\r\n      default:\r\n        return icon('fas fa-coins');\r\n    }\r\n  }\r\n\r\n  private getStatusIcon(status: string): Mithril.Children {\r\n    switch (status) {\r\n      case 'pending':\r\n        return icon('fas fa-clock');\r\n      case 'approved':\r\n      case 'confirmed':\r\n        return icon('fas fa-check-circle');\r\n      case 'completed':\r\n        return icon('fas fa-check-double');\r\n      case 'rejected':\r\n      case 'failed':\r\n        return icon('fas fa-times-circle');\r\n      case 'cancelled':\r\n        return icon('fas fa-ban');\r\n      default:\r\n        return icon('fas fa-question-circle');\r\n    }\r\n  }\r\n\r\n  private getStatusText(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'Pending';\r\n      case 'approved':\r\n        return 'Approved';\r\n      case 'confirmed':\r\n        return 'Confirmed';\r\n      case 'completed':\r\n        return 'Completed';\r\n      case 'rejected':\r\n        return 'Rejected';\r\n      case 'failed':\r\n        return 'Failed';\r\n      case 'cancelled':\r\n        return 'Cancelled';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  }\r\n\r\n  private formatHash(hash: string): string {\r\n    if (hash.length <= 16) return hash;\r\n    return `${hash.substring(0, 8)}...${hash.substring(hash.length - 8)}`;\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport { getAttr } from '../../withdrawal/utils/modelHelpers';\r\nimport { ICONS } from '../../withdrawal/utils/constants';\r\nimport m from 'mithril';\r\n\r\ninterface DepositPlatformDropdownProps {\r\n  platforms: DepositPlatform[];\r\n  selectedPlatform: DepositPlatform | null;\r\n  onPlatformSelect: (platform: DepositPlatform) => void;\r\n}\r\n\r\ninterface DepositPlatformDropdownState {\r\n  showDropdown: boolean;\r\n}\r\n\r\nexport default class DepositPlatformDropdown extends Component<DepositPlatformDropdownProps, DepositPlatformDropdownState> {\r\n  oninit(vnode: Mithril.Vnode<DepositPlatformDropdownProps, DepositPlatformDropdownState>) {\r\n    super.oninit(vnode);\r\n    this.state = {\r\n      showDropdown: false,\r\n    };\r\n  }\r\n\r\n  view(): Mithril.Children {\r\n    const { selectedPlatform } = this.attrs;\r\n    const { showDropdown } = this.state;\r\n\r\n    return (\r\n      <div className=\"FundsPage-platformSelector\">\r\n        <div className=\"FundsPage-label\">{app.translator.trans('withdrawal.forum.deposit.platform_label')}</div>\r\n        <div \r\n          className=\"FundsPage-platformDropdown\" \r\n          onclick={() => this.toggleDropdown()}\r\n        >\r\n          <div className=\"FundsPage-platformSelected\">\r\n            <div className=\"FundsPage-platformInfo\">\r\n              <div className=\"FundsPage-platformIcon\">\r\n                {this.renderPlatformIcon(selectedPlatform)}\r\n              </div>\r\n              <div className=\"FundsPage-platformDetails\">\r\n                <div className=\"FundsPage-platformName\">\r\n                  {this.getPlatformDisplayName(selectedPlatform)}\r\n                </div>\r\n                {selectedPlatform && this.renderPlatformSubtext(selectedPlatform)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {icon(ICONS.CHEVRON_DOWN, { className: 'FundsPage-dropdownIcon' })}\r\n        </div>\r\n\r\n        {showDropdown && this.renderPlatformDropdown()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  oncreate(vnode: Mithril.VnodeDOM) {\r\n    super.oncreate(vnode);\r\n    \r\n    // Close dropdown when clicking outside\r\n    document.addEventListener('click', this.handleOutsideClick);\r\n  }\r\n\r\n  onremove(vnode: Mithril.VnodeDOM) {\r\n    super.onremove(vnode);\r\n    document.removeEventListener('click', this.handleOutsideClick);\r\n  }\r\n\r\n  private handleOutsideClick = (e: MouseEvent) => {\r\n    const element = this.element;\r\n    if (element && !element.contains(e.target as Node)) {\r\n      this.state.showDropdown = false;\r\n      m.redraw();\r\n    }\r\n  };\r\n\r\n  private toggleDropdown(): void {\r\n    this.state.showDropdown = !this.state.showDropdown;\r\n  }\r\n\r\n  private getPlatformDisplayName(platform: DepositPlatform | null): string {\r\n    if (!platform) {\r\n      return app.translator.trans('withdrawal.forum.deposit.select_platform').toString();\r\n    }\r\n    \r\n    const name = getAttr(platform, 'name') || '';\r\n    const network = getAttr(platform, 'network');\r\n    \r\n    if (network) {\r\n      return `${name} (${network})`;\r\n    }\r\n    \r\n    return name;\r\n  }\r\n\r\n  private renderPlatformIcon(platform: DepositPlatform | null): Mithril.Children {\r\n    if (!platform) {\r\n      return icon('fas fa-coins');\r\n    }\r\n\r\n    const iconUrl = getAttr(platform, 'iconUrl');\r\n    const symbol = getAttr(platform, 'symbol');\r\n    \r\n    if (iconUrl) {\r\n      return <img src={iconUrl} alt={symbol} className=\"FundsPage-platformIconImage\" />;\r\n    }\r\n    \r\n    // Default icons based on symbol\r\n    return this.getCurrencyIcon(symbol);\r\n  }\r\n\r\n  private getCurrencyIcon(symbol: string): Mithril.Children {\r\n    switch (symbol?.toUpperCase()) {\r\n      case 'USDT':\r\n        return <span className=\"FundsPage-currencyIcon usdt\">₮</span>;\r\n      case 'USDC':\r\n        return <span className=\"FundsPage-currencyIcon usdc\">$</span>;\r\n      case 'BTC':\r\n        return <span className=\"FundsPage-currencyIcon btc\">₿</span>;\r\n      case 'ETH':\r\n        return <span className=\"FundsPage-currencyIcon eth\">Ξ</span>;\r\n      default:\r\n        return icon('fas fa-coins');\r\n    }\r\n  }\r\n\r\n  private renderPlatformSubtext(platform: DepositPlatform): Mithril.Children {\r\n    const minAmount = getAttr(platform, 'minAmount');\r\n    const fee = getAttr(platform, 'fee');\r\n    const symbol = getAttr(platform, 'symbol');\r\n    \r\n    const parts: string[] = [];\r\n    \r\n    if (minAmount && minAmount > 0) {\r\n      parts.push(app.translator.trans('withdrawal.forum.deposit.min_amount_short', {\r\n        amount: minAmount,\r\n        symbol: symbol\r\n      }).toString());\r\n    }\r\n    \r\n    if (fee && fee > 0) {\r\n      parts.push(app.translator.trans('withdrawal.forum.deposit.fee_short', {\r\n        fee: fee,\r\n        symbol: symbol\r\n      }).toString());\r\n    }\r\n    \r\n    if (parts.length > 0) {\r\n      return (\r\n        <div className=\"FundsPage-platformSubtext\">\r\n          {parts.join(' • ')}\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  private renderPlatformDropdown(): Mithril.Children {\r\n    const { platforms } = this.attrs;\r\n\r\n    // Group platforms by currency and sort\r\n    const groupedPlatforms = this.groupPlatformsByCurrency(platforms);\r\n    \r\n    if (Object.keys(groupedPlatforms).length === 0) {\r\n      return (\r\n        <div className=\"FundsPage-dropdownMenu\">\r\n          <div className=\"FundsPage-dropdownItem FundsPage-noData\">\r\n            {app.translator.trans('withdrawal.forum.deposit.no_platforms')}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-dropdownMenu\">\r\n        {Object.entries(groupedPlatforms).flatMap(([currency, currencyPlatforms]) => [\r\n          // Currency header\r\n          <div key={`${currency}-header`} className=\"FundsPage-dropdownHeader\">\r\n            <div className=\"FundsPage-currencyHeader\">\r\n              <div className=\"FundsPage-currencyIcon\">\r\n                {this.getCurrencyIcon(currency)}\r\n              </div>\r\n              <span className=\"FundsPage-currencyName\">{currency}</span>\r\n            </div>\r\n          </div>,\r\n          // Platforms for this currency\r\n          ...currencyPlatforms.map(platform => (\r\n            <div \r\n              key={platform.id()}\r\n              className=\"FundsPage-dropdownItem\"\r\n              onclick={() => this.selectPlatform(platform)}\r\n            >\r\n              <div className=\"FundsPage-platformIcon\">\r\n                {this.renderPlatformIcon(platform)}\r\n              </div>\r\n              <div className=\"FundsPage-platformInfo\">\r\n                <div className=\"FundsPage-platformName\">\r\n                  {this.getPlatformDisplayName(platform)}\r\n                </div>\r\n                {this.renderPlatformSubtext(platform)}\r\n              </div>\r\n            </div>\r\n          ))\r\n        ])}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private groupPlatformsByCurrency(platforms: DepositPlatform[]): { [currency: string]: DepositPlatform[] } {\r\n    const grouped: { [currency: string]: DepositPlatform[] } = {};\r\n    \r\n    // Filter active platforms and group by currency\r\n    const validPlatforms = (platforms || []).filter(platform => \r\n      platform && getAttr(platform, 'isActive')\r\n    );\r\n\r\n    validPlatforms.forEach(platform => {\r\n      const symbol = getAttr(platform, 'symbol');\r\n      if (!grouped[symbol]) {\r\n        grouped[symbol] = [];\r\n      }\r\n      grouped[symbol].push(platform);\r\n    });\r\n\r\n    // Sort platforms within each currency group by network\r\n    Object.keys(grouped).forEach(currency => {\r\n      grouped[currency].sort((a, b) => {\r\n        const networkA = getAttr(a, 'network') || '';\r\n        const networkB = getAttr(b, 'network') || '';\r\n        return networkA.localeCompare(networkB);\r\n      });\r\n    });\r\n\r\n    return grouped;\r\n  }\r\n\r\n  private selectPlatform(platform: DepositPlatform): void {\r\n    const { onPlatformSelect } = this.attrs;\r\n    \r\n    onPlatformSelect(platform);\r\n    this.state.showDropdown = false;\r\n  }\r\n}","import Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\n\r\nexport interface AddressDisplayAttrs {\r\n  address: string;\r\n  loading: boolean;\r\n  onCopy: () => void;\r\n}\r\n\r\nexport default class AddressDisplay extends Component<AddressDisplayAttrs> {\r\n  view(vnode: Mithril.Vnode<AddressDisplayAttrs>) {\r\n    const { address, loading, onCopy } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"AddressDisplay\">\r\n        {loading ? (\r\n          <div className=\"AddressDisplay-loading\">\r\n            <i className=\"fas fa-spinner fa-spin\"></i>\r\n            <span>Generating address...</span>\r\n          </div>\r\n        ) : address ? (\r\n          <div className=\"AddressDisplay-content\">\r\n            <div className=\"AddressDisplay-address\" title={address}>\r\n              {address}\r\n            </div>\r\n            <div className=\"AddressDisplay-actions\">\r\n              <button\r\n                className=\"AddressDisplay-copyBtn\"\r\n                onclick={onCopy}\r\n                title=\"Copy address\"\r\n              >\r\n                {icon('fas fa-copy')}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"AddressDisplay-placeholder\">\r\n            <span>No address available</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import Component from 'flarum/common/Component';\r\nimport DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport type Mithril from 'mithril';\r\n\r\nexport interface ImageDisplayAttrs {\r\n  platform: DepositPlatform | null;\r\n  loading?: boolean;\r\n  size?: number;\r\n}\r\n\r\nexport default class ImageDisplay extends Component<ImageDisplayAttrs> {\r\n  view(vnode: Mithril.Vnode<ImageDisplayAttrs>) {\r\n    const { platform, loading, size = 160 } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"ImageDisplay\" style={{ width: `${size}px`, height: `${size}px` }}>\r\n        {loading ? (\r\n          <div className=\"ImageDisplay-loading\">\r\n            <i className=\"fas fa-spinner fa-spin\"></i>\r\n          </div>\r\n        ) : platform && platform.qrCodeImageUrl() ? (\r\n          <img \r\n            src={platform.qrCodeImageUrl()} \r\n            alt={`${platform.name()} Image`}\r\n            className=\"ImageDisplay-image\"\r\n            onerror=\"this.style.display='none'; this.nextElementSibling.style.display='block';\"\r\n          />\r\n        ) : (\r\n          <div className=\"ImageDisplay-placeholder\">\r\n            <i className=\"fas fa-image\"></i>\r\n            <div>No Image</div>\r\n          </div>\r\n        )}\r\n        <div className=\"ImageDisplay-error\" style={{ display: 'none' }}>\r\n          <i className=\"fas fa-exclamation-triangle\"></i>\r\n          <div>Image Load Failed</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport withAttr from 'flarum/common/utils/withAttr';\r\nimport type Mithril from 'mithril';\r\nimport type DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport { getAttr, getIdString } from '../../withdrawal/utils/modelHelpers';\r\n\r\nexport interface DepositRecordFormData {\r\n  platformId: number;\r\n  platformAccount: string;\r\n  realName?: string;\r\n  amount: number;\r\n  depositTime: Date;\r\n  screenshotUrl?: string;\r\n  userMessage?: string;\r\n}\r\n\r\ninterface DepositRecordFormProps {\r\n  platform: DepositPlatform;\r\n  onSubmit: (data: DepositRecordFormData) => Promise<void>;\r\n  onCancel: () => void;\r\n  submitting: boolean;\r\n}\r\n\r\ninterface DepositRecordFormState {\r\n  platformAccount: Stream<string>;\r\n  realName: Stream<string>;\r\n  amount: Stream<string>;\r\n  depositTime: Stream<string>;\r\n  screenshotUrl: Stream<string>;\r\n  userMessage: Stream<string>;\r\n}\r\n\r\nexport default class DepositRecordForm extends Component<DepositRecordFormProps, DepositRecordFormState> {\r\n  oninit(vnode: Mithril.Vnode<DepositRecordFormProps>) {\r\n    super.oninit(vnode);\r\n    \r\n    // Initialize form data with current date/time\r\n    const now = new Date();\r\n    const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000)\r\n      .toISOString()\r\n      .slice(0, 16); // Format: YYYY-MM-DDTHH:mm\r\n    \r\n    this.state = {\r\n      platformAccount: Stream(''),\r\n      realName: Stream(''),\r\n      amount: Stream(''),\r\n      depositTime: Stream(localDateTime),\r\n      screenshotUrl: Stream(''),\r\n      userMessage: Stream('')\r\n    };\r\n  }\r\n\r\n  view(vnode: Mithril.Vnode<DepositRecordFormProps>): Mithril.Children {\r\n    const { platform, submitting } = vnode.attrs;\r\n    const minAmount = getAttr(platform, 'minAmount') || 0;\r\n    const maxAmount = getAttr(platform, 'maxAmount');\r\n    const symbol = getAttr(platform, 'symbol') || '';\r\n\r\n    return (\r\n      <div className=\"DepositRecordForm\">\r\n        <div className=\"DepositRecordForm-header\">\r\n          <div className=\"DepositRecordForm-title\">\r\n            <i className=\"fas fa-plus-circle\"></i>\r\n            {app.translator.trans('withdrawal.forum.deposit.record.form_title')}\r\n          </div>\r\n          <div className=\"DepositRecordForm-platformInfo\">\r\n            {app.translator.trans('withdrawal.forum.deposit.record.selected_platform', {\r\n              platform: getAttr(platform, 'name'),\r\n              symbol: symbol\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <form onsubmit={this.handleSubmit.bind(this)} className=\"DepositRecordForm-form\">\r\n          {/* Platform Account Field */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.platform_account')}\r\n              <span className=\"DepositRecordForm-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"DepositRecordForm-input\"\r\n              placeholder={app.translator.trans('withdrawal.forum.deposit.record.platform_account_placeholder')}\r\n              value={this.state.platformAccount()}\r\n              oninput={withAttr('value', this.state.platformAccount)}\r\n              required\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"DepositRecordForm-help\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.platform_account_help')}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Real Name Field (Optional) */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.real_name')}\r\n              <span className=\"DepositRecordForm-optional\">\r\n                ({app.translator.trans('withdrawal.forum.deposit.record.optional')})\r\n              </span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"DepositRecordForm-input\"\r\n              placeholder={app.translator.trans('withdrawal.forum.deposit.record.real_name_placeholder')}\r\n              value={this.state.realName()}\r\n              oninput={withAttr('value', this.state.realName)}\r\n              disabled={submitting}\r\n            />\r\n          </div>\r\n\r\n          {/* Amount Field */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.amount')} ({symbol})\r\n              <span className=\"DepositRecordForm-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              min={minAmount}\r\n              max={maxAmount}\r\n              className=\"DepositRecordForm-input\"\r\n              placeholder={app.translator.trans('withdrawal.forum.deposit.record.amount_placeholder')}\r\n              value={this.state.amount()}\r\n              oninput={withAttr('value', this.state.amount)}\r\n              required\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"DepositRecordForm-limits\">\r\n              {minAmount > 0 && (\r\n                <span className=\"DepositRecordForm-limit\">\r\n                  {app.translator.trans('withdrawal.forum.deposit.record.min_amount', {\r\n                    amount: minAmount,\r\n                    symbol: symbol\r\n                  })}\r\n                </span>\r\n              )}\r\n              {maxAmount && (\r\n                <span className=\"DepositRecordForm-limit\">\r\n                  {app.translator.trans('withdrawal.forum.deposit.record.max_amount', {\r\n                    amount: maxAmount,\r\n                    symbol: symbol\r\n                  })}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Deposit Time Field */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.deposit_time')}\r\n              <span className=\"DepositRecordForm-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"datetime-local\"\r\n              className=\"DepositRecordForm-input\"\r\n              value={this.state.depositTime()}\r\n              oninput={withAttr('value', this.state.depositTime)}\r\n              required\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"DepositRecordForm-help\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.deposit_time_help')}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Screenshot URL Field (Optional) */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.screenshot_url')}\r\n              <span className=\"DepositRecordForm-optional\">\r\n                ({app.translator.trans('withdrawal.forum.deposit.record.optional')})\r\n              </span>\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              className=\"DepositRecordForm-input\"\r\n              placeholder={app.translator.trans('withdrawal.forum.deposit.record.screenshot_url_placeholder')}\r\n              value={this.state.screenshotUrl()}\r\n              oninput={withAttr('value', this.state.screenshotUrl)}\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"DepositRecordForm-help\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.screenshot_url_help')}\r\n            </div>\r\n          </div>\r\n\r\n          {/* User Message Field (Optional) */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('withdrawal.forum.deposit.record.user_message')}\r\n              <span className=\"DepositRecordForm-optional\">\r\n                ({app.translator.trans('withdrawal.forum.deposit.record.optional')})\r\n              </span>\r\n            </label>\r\n            <textarea\r\n              className=\"DepositRecordForm-textarea\"\r\n              placeholder={app.translator.trans('withdrawal.forum.deposit.record.user_message_placeholder')}\r\n              value={this.state.userMessage()}\r\n              oninput={withAttr('value', this.state.userMessage)}\r\n              rows={3}\r\n              disabled={submitting}\r\n            ></textarea>\r\n          </div>\r\n\r\n          {/* Form Actions */}\r\n          <div className=\"DepositRecordForm-actions\">\r\n            <Button\r\n              type=\"button\"\r\n              className=\"Button Button--secondary DepositRecordForm-cancelButton\"\r\n              onclick={vnode.attrs.onCancel}\r\n              disabled={submitting}\r\n            >\r\n              {app.translator.trans('withdrawal.forum.deposit.record.cancel')}\r\n            </Button>\r\n            \r\n            <Button\r\n              type=\"submit\"\r\n              className=\"Button Button--primary DepositRecordForm-submitButton\"\r\n              loading={submitting}\r\n              disabled={submitting}\r\n            >\r\n              {app.translator.trans('withdrawal.forum.deposit.record.submit')}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleSubmit(e: Event): void {\r\n    e.preventDefault();\r\n\r\n    const { platform, onSubmit } = this.attrs;\r\n    \r\n    // Basic validation\r\n    if (!this.state.platformAccount() || !this.state.amount() || !this.state.depositTime()) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.forum.deposit.record.validation.required_fields')\r\n      );\r\n      return;\r\n    }\r\n\r\n    const amount = parseFloat(this.state.amount());\r\n    if (isNaN(amount) || amount <= 0) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.forum.deposit.record.validation.invalid_amount')\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Check platform limits\r\n    const minAmount = getAttr(platform, 'minAmount') || 0;\r\n    const maxAmount = getAttr(platform, 'maxAmount');\r\n\r\n    if (amount < minAmount) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.forum.deposit.record.validation.amount_too_low', {\r\n          amount: amount,\r\n          min: minAmount,\r\n          symbol: getAttr(platform, 'symbol')\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (maxAmount && amount > maxAmount) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.forum.deposit.record.validation.amount_too_high', {\r\n          amount: amount,\r\n          max: maxAmount,\r\n          symbol: getAttr(platform, 'symbol')\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Prepare form data\r\n    const formData: DepositRecordFormData = {\r\n      platformId: parseInt(getIdString(platform)),\r\n      platformAccount: this.state.platformAccount(),\r\n      realName: this.state.realName() || undefined,\r\n      amount: amount,\r\n      depositTime: new Date(this.state.depositTime()),\r\n      screenshotUrl: this.state.screenshotUrl() || undefined,\r\n      userMessage: this.state.userMessage() || undefined\r\n    };\r\n\r\n    onSubmit(formData);\r\n  }\r\n}","import Model from 'flarum/common/Model';\n\n/**\n * Standard pagination parameters for Flarum API requests\n */\nexport interface PaginationOptions {\n  limit?: number;\n  offset?: number;\n  page?: {\n    limit?: number;\n    offset?: number;\n  };\n}\n\n/**\n * Standard filter options for API requests\n */\nexport interface FilterOptions {\n  [key: string]: any;\n}\n\n/**\n * Standard sort options for API requests\n */\nexport interface SortOptions {\n  field: string;\n  direction: 'asc' | 'desc';\n}\n\n/**\n * Standard query options for finding records\n */\nexport interface QueryOptions {\n  include?: string | string[];\n  filter?: FilterOptions;\n  sort?: string | SortOptions | SortOptions[];\n  page?: PaginationOptions;\n}\n\n/**\n * Service response wrapper for better error handling\n */\nexport interface ServiceResponse<T> {\n  data: T;\n  meta?: {\n    total?: number;\n    count?: number;\n    hasMore?: boolean;\n  };\n  errors?: Array<{\n    detail: string;\n    source?: any;\n  }>;\n}\n\n/**\n * Base service interface that all services should implement\n */\nexport interface BaseService<TModel extends Model> {\n  /**\n   * Find multiple records\n   */\n  find(options?: QueryOptions): Promise<TModel[]>;\n\n  /**\n   * Find a single record by ID\n   */\n  findById(id: string | number, options?: QueryOptions): Promise<TModel | null>;\n\n  /**\n   * Create a new record\n   */\n  create(attributes: Record<string, any>): Promise<TModel>;\n\n  /**\n   * Update an existing record\n   */\n  update(model: TModel, attributes: Record<string, any>): Promise<TModel>;\n\n  /**\n   * Delete a record\n   */\n  delete(model: TModel): Promise<void>;\n\n  /**\n   * Check if a record can be modified by current user\n   */\n  canModify(model: TModel): boolean;\n\n  /**\n   * Check if current user can create new records\n   */\n  canCreate(): boolean;\n\n  /**\n   * Check if current user can delete a record\n   */\n  canDelete(model: TModel): boolean;\n}\n\n/**\n * Withdrawal-specific service interface\n */\nexport interface WithdrawalServiceInterface extends BaseService<any> {\n  /**\n   * Submit a withdrawal request\n   */\n  submitRequest(data: {\n    platformId: number;\n    amount: number;\n    accountDetails: string;\n    message?: string;\n  }): Promise<any>;\n\n  /**\n   * Get user's withdrawal history\n   */\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Get pending requests (admin only)\n   */\n  getPendingRequests(options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Approve a withdrawal request (admin only)\n   */\n  approve(request: any, message?: string): Promise<any>;\n\n  /**\n   * Reject a withdrawal request (admin only)\n   */\n  reject(request: any, reason?: string): Promise<any>;\n\n  /**\n   * Cancel a pending request (user only)\n   */\n  cancel(request: any): Promise<any>;\n}\n\n/**\n * Deposit-specific service interface\n */\nexport interface DepositServiceInterface extends BaseService<any> {\n  /**\n   * Generate deposit address for user\n   */\n  generateAddress(platformId: number): Promise<string>;\n\n  /**\n   * Get user's deposit history\n   */\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Create deposit record\n   */\n  createRecord(data: {\n    platformId: number;\n    amount: number;\n    transactionHash: string;\n    note?: string;\n  }): Promise<any>;\n\n  /**\n   * Get pending deposits (admin only)\n   */\n  getPendingDeposits(options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Confirm a deposit (admin only)\n   */\n  confirm(deposit: any, confirmedAmount?: number): Promise<any>;\n}\n\n/**\n * Platform service interface for both withdrawal and deposit platforms\n */\nexport interface PlatformServiceInterface extends BaseService<any> {\n  /**\n   * Get active platforms only\n   */\n  getActive(type: 'withdrawal' | 'deposit', options?: QueryOptions): Promise<any[]>;\n\n  /**\n   * Toggle platform status (admin only)\n   */\n  toggleStatus(platform: any): Promise<any>;\n\n  /**\n   * Update platform configuration (admin only)\n   */\n  updateConfig(platform: any, config: Record<string, any>): Promise<any>;\n\n  /**\n   * Get platforms by symbol\n   */\n  getBySymbol(symbol: string, type: 'withdrawal' | 'deposit'): Promise<any[]>;\n}\n\n/**\n * Settings service interface for managing Flarum admin settings\n */\nexport interface SettingsServiceInterface {\n  getSetting(key: string, defaultValue?: any): Promise<any>;\n  saveSetting(key: string, value: any): Promise<void>;\n  saveSettings(settings: Record<string, any>): Promise<void>;\n  deleteSetting(key: string): Promise<void>;\n  getSettingsWithPrefix(prefix: string): Promise<Record<string, any>>;\n  canManageSettings(): boolean;\n  getExtensionSetting(extension: string, key: string, defaultValue?: any): Promise<any>;\n  saveExtensionSetting(extension: string, key: string, value: any): Promise<void>;\n  getWithdrawalSetting(key: string, defaultValue?: any): Promise<any>;\n  saveWithdrawalSetting(key: string, value: any): Promise<void>;\n  getAllWithdrawalSettings(): Promise<Record<string, any>>;\n}\n\n/**\n * Address service interface for managing deposit addresses\n */\nexport interface AddressServiceInterface {\n  generateAddress(platformId: number, userId?: number): Promise<string>;\n  canGenerateAddress(): boolean;\n}\n\n/**\n * Cache service for managing local data storage\n */\nexport interface CacheOptions {\n  ttl?: number; // Time to live in milliseconds\n  key?: string; // Custom cache key\n  refresh?: boolean; // Force refresh from server\n}\n\n/**\n * Common service configuration\n */\nexport interface ServiceConfig {\n  apiUrl?: string;\n  timeout?: number;\n  retries?: number;\n  cache?: boolean;\n  defaultPageSize?: number;\n}\n\n/**\n * Service error types\n */\nexport enum ServiceErrorType {\n  NETWORK_ERROR = 'network_error',\n  PERMISSION_DENIED = 'permission_denied',\n  VALIDATION_ERROR = 'validation_error',\n  NOT_FOUND = 'not_found',\n  SERVER_ERROR = 'server_error',\n  TIMEOUT = 'timeout'\n}\n\n/**\n * Service error class\n */\nexport class ServiceError extends Error {\n  public type: ServiceErrorType;\n  public code?: string;\n  public details?: any;\n\n  constructor(\n    message: string, \n    type: ServiceErrorType = ServiceErrorType.SERVER_ERROR, \n    code?: string, \n    details?: any\n  ) {\n    super(message);\n    this.name = 'ServiceError';\n    this.type = type;\n    this.code = code;\n    this.details = details;\n  }\n}","import app from 'flarum/common/app';\nimport WithdrawalRequest from '../models/WithdrawalRequest';\nimport WithdrawalPlatform from '../models/WithdrawalPlatform';\nimport { \n  WithdrawalServiceInterface, \n  QueryOptions, \n  ServiceError, \n  ServiceErrorType\n} from '../types/services';\n\n/**\n * Service for managing withdrawal requests with proper CRUD operations\n */\nexport default class WithdrawalService implements WithdrawalServiceInterface {\n  private readonly modelType = 'withdrawal-requests';\n  private readonly platformModelType = 'withdrawal-platforms';\n\n  /**\n   * Find multiple withdrawal requests\n   */\n  async find(options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform',\n        sort: options.sort || '-created_at',\n        ...options\n      };\n\n      // Add pagination if specified\n      if (options.page) {\n        queryParams.page = options.page;\n      }\n\n      // Add filters if specified\n      if (options.filter) {\n        queryParams.filter = options.filter;\n      }\n\n      const results = await app.store.find(this.modelType, queryParams);\n      return Array.isArray(results) ? results : [results];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch withdrawal requests');\n    }\n  }\n\n  /**\n   * Find a single withdrawal request by ID\n   */\n  async findById(id: string | number, options: QueryOptions = {}): Promise<WithdrawalRequest | null> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform'\n      };\n\n      const result = await app.store.find(this.modelType, id, queryParams);\n      return result as WithdrawalRequest;\n    } catch (error) {\n      if (this.isNotFoundError(error)) {\n        return null;\n      }\n      throw this.handleError(error, `Failed to fetch withdrawal request ${id}`);\n    }\n  }\n\n  /**\n   * Create a new withdrawal request\n   */\n  async create(attributes: Record<string, any>): Promise<WithdrawalRequest> {\n    try {\n      // Validate required fields\n      this.validateCreateAttributes(attributes);\n\n      const request = app.store.createRecord(this.modelType) as WithdrawalRequest;\n      \n      const savedRequest = await request.save(attributes);\n      return savedRequest as WithdrawalRequest;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to create withdrawal request');\n    }\n  }\n\n  /**\n   * Update an existing withdrawal request\n   */\n  async update(model: WithdrawalRequest, attributes: Record<string, any>): Promise<WithdrawalRequest> {\n    try {\n      if (!this.canModify(model)) {\n        throw new ServiceError(\n          'You do not have permission to modify this withdrawal request',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      const updatedModel = await model.save(attributes);\n      return updatedModel as WithdrawalRequest;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to update withdrawal request');\n    }\n  }\n\n  /**\n   * Delete a withdrawal request\n   */\n  async delete(model: WithdrawalRequest): Promise<void> {\n    try {\n      if (!this.canDelete(model)) {\n        throw new ServiceError(\n          'You do not have permission to delete this withdrawal request',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      await model.delete();\n    } catch (error) {\n      throw this.handleError(error, 'Failed to delete withdrawal request');\n    }\n  }\n\n  /**\n   * Submit a new withdrawal request with validation\n   */\n  async submitRequest(data: {\n    platformId: number;\n    amount: number;\n    accountDetails: string;\n    message?: string;\n  }): Promise<WithdrawalRequest> {\n    try {\n      // Validate user balance and platform limits\n      await this.validateWithdrawalRequest(data);\n\n      const attributes = {\n        platformId: data.platformId,\n        amount: data.amount,\n        accountDetails: data.accountDetails,\n        message: data.message || '',\n        status: 'pending'\n      };\n\n      return await this.create(attributes);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to submit withdrawal request');\n    }\n  }\n\n  /**\n   * Get user's withdrawal history\n   */\n  async getUserHistory(userId?: number, options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\n    const targetUserId = userId || app.session.user?.id();\n    \n    if (!targetUserId) {\n      throw new ServiceError(\n        'User not authenticated',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        user: targetUserId,\n        ...options.filter\n      },\n      include: options.include || 'platform',\n      sort: options.sort || '-created_at'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Get pending requests (admin only)\n   */\n  async getPendingRequests(options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        status: 'pending',\n        ...options.filter\n      },\n      include: options.include || 'user,platform',\n      sort: options.sort || 'created_at'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Approve a withdrawal request (admin only)\n   */\n  async approve(request: WithdrawalRequest, message?: string): Promise<WithdrawalRequest> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    if (!request.isPending()) {\n      throw new ServiceError(\n        'Only pending requests can be approved',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    const attributes: any = {\n      status: 'approved'\n    };\n\n    if (message) {\n      attributes.adminNote = message;\n    }\n\n    return await this.update(request, attributes);\n  }\n\n  /**\n   * Reject a withdrawal request (admin only)\n   */\n  async reject(request: WithdrawalRequest, reason?: string): Promise<WithdrawalRequest> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    if (!request.isPending()) {\n      throw new ServiceError(\n        'Only pending requests can be rejected',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    const attributes: any = {\n      status: 'rejected'\n    };\n\n    if (reason) {\n      attributes.adminNote = reason;\n    }\n\n    return await this.update(request, attributes);\n  }\n\n  /**\n   * Cancel a pending request (user only)\n   */\n  async cancel(request: WithdrawalRequest): Promise<any> {\n    if (!request.canBeModified()) {\n      throw new ServiceError(\n        'This request cannot be cancelled',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    const currentUser = app.session.user;\n    if (!currentUser || (request.userId() !== currentUser.id() && !currentUser.isAdmin())) {\n      throw new ServiceError(\n        'You can only cancel your own requests',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    return await this.delete(request);\n  }\n\n  /**\n   * Check if current user can modify a withdrawal request\n   */\n  canModify(model: WithdrawalRequest): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can modify any request\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only modify their own pending requests\n    return model.userId() === currentUser.id() && model.canBeModified();\n  }\n\n  /**\n   * Check if current user can create new withdrawal requests\n   */\n  canCreate(): boolean {\n    const currentUser = app.session.user;\n    return currentUser && !currentUser.isGuest();\n  }\n\n  /**\n   * Check if current user can delete a withdrawal request\n   */\n  canDelete(model: WithdrawalRequest): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can delete any request\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only delete their own pending requests\n    return model.userId() === currentUser.id() && model.canBeModified();\n  }\n\n  /**\n   * Get available withdrawal platforms\n   */\n  async getPlatforms(): Promise<WithdrawalPlatform[]> {\n    try {\n      const platforms = await app.store.find(this.platformModelType, {\n        filter: { isActive: true },\n        sort: 'name'\n      });\n      \n      return Array.isArray(platforms) ? platforms : [platforms];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch withdrawal platforms');\n    }\n  }\n\n  /**\n   * Validate withdrawal request data\n   */\n  private async validateWithdrawalRequest(data: any): Promise<void> {\n    const { platformId, amount } = data;\n\n    // Get platform details\n    const platform = await app.store.find(this.platformModelType, platformId);\n    if (!platform) {\n      throw new ServiceError(\n        'Invalid platform selected',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check if platform is active\n    if (!platform.isActive()) {\n      throw new ServiceError(\n        'Selected platform is not available',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Validate amount limits\n    const minAmount = platform.minAmount();\n    const maxAmount = platform.maxAmount();\n    \n    if (amount < minAmount) {\n      throw new ServiceError(\n        `Minimum withdrawal amount is ${minAmount}`,\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    if (maxAmount && amount > maxAmount) {\n      throw new ServiceError(\n        `Maximum withdrawal amount is ${maxAmount}`,\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check user balance\n    const currentUser = app.session.user;\n    if (currentUser) {\n      const userBalance = currentUser.money ? currentUser.money() : 0;\n      const fee = platform.fee ? platform.fee() : 0;\n      const totalRequired = amount + fee;\n\n      if (userBalance < totalRequired) {\n        throw new ServiceError(\n          `Insufficient balance. Required: ${totalRequired}, Available: ${userBalance}`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n  }\n\n  /**\n   * Validate create attributes\n   */\n  private validateCreateAttributes(attributes: any): void {\n    const required = ['platformId', 'amount', 'accountDetails'];\n    \n    for (const field of required) {\n      if (!attributes[field]) {\n        throw new ServiceError(\n          `${field} is required`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\n      throw new ServiceError(\n        'Amount must be a positive number',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n  }\n\n  /**\n   * Handle service errors with proper typing\n   */\n  private handleError(error: any, defaultMessage: string): ServiceError {\n    if (error instanceof ServiceError) {\n      return error;\n    }\n\n    // Handle Flarum API errors\n    if (error.response && error.response.errors) {\n      const apiError = error.response.errors[0];\n      return new ServiceError(\n        apiError.detail || defaultMessage,\n        ServiceErrorType.VALIDATION_ERROR,\n        apiError.code,\n        apiError\n      );\n    }\n\n    // Handle network errors\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\n      return new ServiceError(\n        'Network error occurred',\n        ServiceErrorType.NETWORK_ERROR\n      );\n    }\n\n    // Default error handling\n    return new ServiceError(\n      error.message || defaultMessage,\n      ServiceErrorType.SERVER_ERROR\n    );\n  }\n\n  /**\n   * Check if error is a not found error\n   */\n  private isNotFoundError(error: any): boolean {\n    return error.status === 404 || \n           error.response?.status === 404 ||\n           error.message?.includes('not found');\n  }\n}\n\n// Export singleton instance\nexport const withdrawalService = new WithdrawalService();","import app from 'flarum/common/app';\nimport DepositRecord from '../models/DepositRecord';\nimport DepositPlatform from '../models/DepositPlatform';\nimport { \n  DepositServiceInterface, \n  QueryOptions, \n  ServiceError, \n  ServiceErrorType\n} from '../types/services';\n\n/**\n * Service for managing deposit records and addresses with proper CRUD operations\n */\nexport default class DepositService implements DepositServiceInterface {\n  private readonly recordModelType = 'deposit-records';\n  private readonly platformModelType = 'deposit-platforms';\n  private readonly addressModelType = 'deposit-addresses';\n\n  /**\n   * Find multiple deposit records\n   */\n  async find(options: QueryOptions = {}): Promise<any[]> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform',\n        sort: options.sort || '-created_at',\n        ...options\n      };\n\n      // Add pagination if specified\n      if (options.page) {\n        queryParams.page = options.page;\n      }\n\n      // Add filters if specified\n      if (options.filter) {\n        queryParams.filter = options.filter;\n      }\n\n      const results = await app.store.find(this.recordModelType, queryParams);\n      return Array.isArray(results) ? results : [results];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch deposit records');\n    }\n  }\n\n  /**\n   * Find a single deposit record by ID\n   */\n  async findById(id: string | number, options: QueryOptions = {}): Promise<any | null> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform'\n      };\n\n      const result = await app.store.find(this.recordModelType, String(id), queryParams);\n      return result;\n    } catch (error) {\n      if (this.isNotFoundError(error)) {\n        return null;\n      }\n      throw this.handleError(error, `Failed to fetch deposit record ${id}`);\n    }\n  }\n\n  /**\n   * Create a new deposit record\n   */\n  async create(attributes: Record<string, any>): Promise<any> {\n    try {\n      // Validate required fields\n      this.validateCreateAttributes(attributes);\n\n      const record = app.store.createRecord(this.recordModelType);\n      \n      const savedRecord = await record.save(attributes);\n      return savedRecord;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to create deposit record');\n    }\n  }\n\n  /**\n   * Update an existing deposit record\n   */\n  async update(model: DepositRecord, attributes: Record<string, any>): Promise<DepositRecord> {\n    try {\n      if (!this.canModify(model)) {\n        throw new ServiceError(\n          'You do not have permission to modify this deposit record',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      const updatedModel = await model.save(attributes);\n      return updatedModel as DepositRecord;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to update deposit record');\n    }\n  }\n\n  /**\n   * Delete a deposit record\n   */\n  async delete(model: DepositRecord): Promise<void> {\n    try {\n      if (!this.canDelete(model)) {\n        throw new ServiceError(\n          'You do not have permission to delete this deposit record',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      await model.delete();\n    } catch (error) {\n      throw this.handleError(error, 'Failed to delete deposit record');\n    }\n  }\n\n  /**\n   * Generate deposit address for user - delegates to AddressService\n   */\n  async generateAddress(platformId: number): Promise<string> {\n    try {\n      // Import AddressService dynamically to avoid circular dependencies\n      const { addressService } = await import('./AddressService') as any;\n      return await addressService.generateAddress(platformId);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to generate deposit address');\n    }\n  }\n\n  /**\n   * Get user's deposit history\n   */\n  async getUserHistory(userId?: number, options: QueryOptions = {}): Promise<DepositRecord[]> {\n    const targetUserId = userId || app.session.user?.id();\n    \n    if (!targetUserId) {\n      throw new ServiceError(\n        'User not authenticated',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        user: targetUserId,\n        ...options.filter\n      },\n      include: options.include || 'platform',\n      sort: options.sort || '-created_at'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Create deposit record with transaction validation\n   */\n  async createRecord(data: {\n    platformId: number;\n    amount: number;\n    transactionHash: string;\n    note?: string;\n  }): Promise<DepositRecord> {\n    try {\n      // Validate transaction hash format and platform\n      await this.validateDepositRecord(data);\n\n      const attributes = {\n        platformId: data.platformId,\n        amount: data.amount,\n        transactionHash: data.transactionHash,\n        note: data.note || '',\n        status: 'pending'\n      };\n\n      return await this.create(attributes);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to create deposit record');\n    }\n  }\n\n  /**\n   * Get pending deposits (admin only)\n   */\n  async getPendingDeposits(options: QueryOptions = {}): Promise<DepositRecord[]> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        status: 'pending',\n        ...options.filter\n      },\n      include: options.include || 'user,platform',\n      sort: options.sort || 'created_at'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Confirm a deposit (admin only)\n   */\n  async confirm(deposit: DepositRecord, confirmedAmount?: number): Promise<DepositRecord> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const attributes: any = {\n      status: 'confirmed'\n    };\n\n    if (confirmedAmount && confirmedAmount !== deposit.amount()) {\n      attributes.confirmedAmount = confirmedAmount;\n    }\n\n    return await this.update(deposit, attributes);\n  }\n\n  /**\n   * Reject a deposit (admin only)\n   */\n  async reject(deposit: DepositRecord, reason?: string): Promise<DepositRecord> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const attributes: any = {\n      status: 'rejected'\n    };\n\n    if (reason) {\n      attributes.adminNote = reason;\n    }\n\n    return await this.update(deposit, attributes);\n  }\n\n  /**\n   * Check if current user can modify a deposit record\n   */\n  canModify(model: DepositRecord): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can modify any record\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only modify their own pending records\n    return String((model as any).userId()) === String(currentUser.id()) && (model as any).status() === 'pending';\n  }\n\n  /**\n   * Check if current user can create new deposit records\n   */\n  canCreate(): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n    const isGuest = (currentUser as any).isGuest();\n    return !isGuest;\n  }\n\n  /**\n   * Check if current user can delete a deposit record\n   */\n  canDelete(model: DepositRecord): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can delete any record\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only delete their own pending records\n    return String((model as any).userId()) === String(currentUser.id()) && (model as any).status() === 'pending';\n  }\n\n  /**\n   * Get available deposit platforms\n   */\n  async getPlatforms(): Promise<any[]> {\n    try {\n      const platforms = await app.store.find(this.platformModelType, {\n        sort: 'name'\n      });\n      \n      return Array.isArray(platforms) ? platforms : [platforms];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch deposit platforms');\n    }\n  }\n\n  /**\n   * Get platforms grouped by symbol\n   */\n  async getPlatformsBySymbol(): Promise<Record<string, DepositPlatform[]>> {\n    const platforms = await this.getPlatforms();\n    const grouped: Record<string, DepositPlatform[]> = {};\n\n    for (const platform of platforms) {\n      const symbol = platform.symbol();\n      if (!grouped[symbol]) {\n        grouped[symbol] = [];\n      }\n      grouped[symbol].push(platform);\n    }\n\n    return grouped;\n  }\n\n\n  /**\n   * Validate deposit record data\n   */\n  private async validateDepositRecord(data: any): Promise<void> {\n    const { platformId, amount, transactionHash } = data;\n\n    // Get platform details\n    const platform = await app.store.find(this.platformModelType, platformId);\n    if (!platform) {\n      throw new ServiceError(\n        'Invalid platform selected',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check if platform is active\n    if (!(platform as any).isActive()) {\n      throw new ServiceError(\n        'Selected platform is not available',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Validate amount limits\n    const minAmount = (platform as any).minAmount();\n    \n    if (amount < minAmount) {\n      throw new ServiceError(\n        `Minimum deposit amount is ${minAmount}`,\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Validate transaction hash format (basic validation)\n    if (!transactionHash || transactionHash.length < 10) {\n      throw new ServiceError(\n        'Invalid transaction hash',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check for duplicate transaction hash\n    try {\n      const existingRecords = await this.find({\n        filter: { transactionHash: transactionHash }\n      });\n\n      if (existingRecords.length > 0) {\n        throw new ServiceError(\n          'Transaction hash already exists',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    } catch (error) {\n      // If it's not a validation error, re-throw\n      if (error instanceof ServiceError && error.type === ServiceErrorType.VALIDATION_ERROR) {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Validate create attributes\n   */\n  private validateCreateAttributes(attributes: any): void {\n    const required = ['platformId', 'amount', 'transactionHash'];\n    \n    for (const field of required) {\n      if (!attributes[field]) {\n        throw new ServiceError(\n          `${field} is required`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\n      throw new ServiceError(\n        'Amount must be a positive number',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n  }\n\n  /**\n   * Handle service errors with proper typing\n   */\n  private handleError(error: any, defaultMessage: string): ServiceError {\n    if (error instanceof ServiceError) {\n      return error;\n    }\n\n    // Handle Flarum API errors\n    if (error.response && error.response.errors) {\n      const apiError = error.response.errors[0];\n      return new ServiceError(\n        apiError.detail || defaultMessage,\n        ServiceErrorType.VALIDATION_ERROR,\n        apiError.code,\n        apiError\n      );\n    }\n\n    // Handle network errors\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\n      return new ServiceError(\n        'Network error occurred',\n        ServiceErrorType.NETWORK_ERROR\n      );\n    }\n\n    // Default error handling\n    return new ServiceError(\n      error.message || defaultMessage,\n      ServiceErrorType.SERVER_ERROR\n    );\n  }\n\n  /**\n   * Check if error is a not found error\n   */\n  private isNotFoundError(error: any): boolean {\n    return error.status === 404 || \n           error.response?.status === 404 ||\n           error.message?.includes('not found');\n  }\n}\n\n// Export singleton instance\nexport const depositService = new DepositService();","import app from 'flarum/common/app';\nimport { \n  PlatformServiceInterface, \n  QueryOptions, \n  ServiceError, \n  ServiceErrorType \n} from '../types/services';\n\n/**\n * Service for managing both withdrawal and deposit platforms\n */\nexport default class PlatformService implements PlatformServiceInterface {\n  private readonly withdrawalModelType = 'withdrawal-platforms';\n  private readonly depositModelType = 'deposit-platforms';\n\n  /**\n   * Find multiple platforms of specified type\n   */\n  async find(type: 'withdrawal' | 'deposit', options: QueryOptions = {}): Promise<any[]> {\n    const modelType = type === 'withdrawal' ? this.withdrawalModelType : this.depositModelType;\n    \n    try {\n      const queryParams: any = {\n        sort: options.sort || 'name',\n        ...options\n      };\n\n      // Add pagination if specified\n      if (options.page) {\n        queryParams.page = options.page;\n      }\n\n      // Add filters if specified\n      if (options.filter) {\n        queryParams.filter = options.filter;\n      }\n\n      // Include relationships if specified\n      if (options.include) {\n        queryParams.include = options.include;\n      }\n\n      const results = await app.store.find(modelType, queryParams);\n      return Array.isArray(results) ? results : [results];\n    } catch (error) {\n      throw this.handleError(error, `Failed to fetch ${type} platforms`);\n    }\n  }\n\n  /**\n   * Find a single platform by ID\n   */\n  async findById(\n    type: 'withdrawal' | 'deposit', \n    id: string | number, \n    options: QueryOptions = {}\n  ): Promise<any | null> {\n    const modelType = type === 'withdrawal' ? this.withdrawalModelType : this.depositModelType;\n    \n    try {\n      const queryParams: any = {};\n      \n      // Include relationships if specified\n      if (options.include) {\n        queryParams.include = options.include;\n      }\n\n      const result = await app.store.find(modelType, id, queryParams);\n      return result;\n    } catch (error) {\n      if (this.isNotFoundError(error)) {\n        return null;\n      }\n      throw this.handleError(error, `Failed to fetch ${type} platform ${id}`);\n    }\n  }\n\n  /**\n   * Create a new platform\n   */\n  async create(type: 'withdrawal' | 'deposit', attributes: Record<string, any>): Promise<any> {\n    const modelType = type === 'withdrawal' ? this.withdrawalModelType : this.depositModelType;\n    \n    try {\n      // Validate required fields based on platform type\n      this.validateCreateAttributes(type, attributes);\n\n      const platform = app.store.createRecord(modelType);\n      \n      const savedPlatform = await platform.save(attributes);\n      return savedPlatform;\n    } catch (error) {\n      throw this.handleError(error, `Failed to create ${type} platform`);\n    }\n  }\n\n  /**\n   * Update an existing platform\n   */\n  async update(platform: any, attributes: Record<string, any>): Promise<any> {\n    try {\n      if (!this.canModify(platform)) {\n        throw new ServiceError(\n          'You do not have permission to modify this platform',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      const updatedPlatform = await platform.save(attributes);\n      return updatedPlatform;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to update platform');\n    }\n  }\n\n  /**\n   * Delete a platform\n   */\n  async delete(platform: any): Promise<void> {\n    try {\n      if (!this.canDelete(platform)) {\n        throw new ServiceError(\n          'You do not have permission to delete this platform',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      await platform.delete();\n    } catch (error) {\n      throw this.handleError(error, 'Failed to delete platform');\n    }\n  }\n\n  /**\n   * Get active platforms only\n   */\n  async getActive(type: 'withdrawal' | 'deposit', options: QueryOptions = {}): Promise<any[]> {\n    const queryOptions = {\n      ...options,\n      filter: {\n        isActive: true,\n        ...options.filter\n      }\n    };\n\n    return await this.find(type, queryOptions);\n  }\n\n  /**\n   * Toggle platform status (admin only)\n   */\n  async toggleStatus(platform: any): Promise<any> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const currentStatus = platform.isActive();\n    return await this.update(platform, { isActive: !currentStatus });\n  }\n\n  /**\n   * Update platform configuration (admin only)\n   */\n  async updateConfig(platform: any, config: Record<string, any>): Promise<any> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    return await this.update(platform, config);\n  }\n\n  /**\n   * Get platforms by symbol\n   */\n  async getBySymbol(symbol: string, type: 'withdrawal' | 'deposit'): Promise<any[]> {\n    return await this.find(type, {\n      filter: { symbol: symbol },\n      sort: 'name'\n    });\n  }\n\n  /**\n   * Validate platform limits for an amount\n   */\n  validateAmount(platform: any, amount: number): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (typeof amount !== 'number' || amount <= 0) {\n      errors.push('Amount must be a positive number');\n      return { valid: false, errors };\n    }\n\n    const minAmount = platform.minAmount ? platform.minAmount() : 0;\n    const maxAmount = platform.maxAmount ? platform.maxAmount() : null;\n\n    if (amount < minAmount) {\n      errors.push(`Amount must be at least ${minAmount}`);\n    }\n\n    if (maxAmount && amount > maxAmount) {\n      errors.push(`Amount cannot exceed ${maxAmount}`);\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * Get platform statistics (admin only)\n   */\n  async getPlatformStats(type: 'withdrawal' | 'deposit', platformId: number): Promise<any> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const requestType = type === 'withdrawal' ? 'withdrawal-requests' : 'deposit-records';\n    \n    try {\n      // Get all requests/records for this platform\n      const records = await app.store.find(requestType, {\n        filter: { platform: platformId },\n        include: 'platform'\n      });\n\n      const recordArray = Array.isArray(records) ? records : [records];\n\n      // Calculate statistics\n      const stats = {\n        total: recordArray.length,\n        pending: recordArray.filter(r => r.status() === 'pending').length,\n        approved: recordArray.filter(r => r.status() === 'approved' || r.status() === 'confirmed').length,\n        rejected: recordArray.filter(r => r.status() === 'rejected').length,\n        totalAmount: recordArray.reduce((sum, r) => sum + (r.amount() || 0), 0)\n      };\n\n      return stats;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch platform statistics');\n    }\n  }\n\n  /**\n   * Get platforms grouped by symbol\n   */\n  async getPlatformsBySymbolGrouped(type: 'withdrawal' | 'deposit'): Promise<Record<string, any[]>> {\n    const platforms = await this.getActive(type);\n    const grouped: Record<string, any[]> = {};\n\n    for (const platform of platforms) {\n      const symbol = platform.symbol();\n      if (!grouped[symbol]) {\n        grouped[symbol] = [];\n      }\n      grouped[symbol].push(platform);\n    }\n\n    return grouped;\n  }\n\n  /**\n   * Sort platforms by criteria\n   */\n  async getSortedPlatforms(\n    type: 'withdrawal' | 'deposit', \n    sortBy: 'name' | 'symbol' | 'createdAt' | 'fee' = 'name',\n    direction: 'asc' | 'desc' = 'asc'\n  ): Promise<any[]> {\n    const sortString = direction === 'desc' ? `-${sortBy}` : sortBy;\n    \n    return await this.getActive(type, {\n      sort: sortString\n    });\n  }\n\n  /**\n   * Check if current user can modify platforms\n   */\n  canModify(_platform: any): boolean {\n    const currentUser = app.session.user;\n    return currentUser && currentUser.isAdmin();\n  }\n\n  /**\n   * Check if current user can create new platforms\n   */\n  canCreate(): boolean {\n    const currentUser = app.session.user;\n    return currentUser && currentUser.isAdmin();\n  }\n\n  /**\n   * Check if current user can delete platforms\n   */\n  canDelete(_platform: any): boolean {\n    const currentUser = app.session.user;\n    return currentUser && currentUser.isAdmin();\n  }\n\n  /**\n   * Validate create attributes based on platform type\n   */\n  private validateCreateAttributes(type: 'withdrawal' | 'deposit', attributes: any): void {\n    const commonRequired = ['name', 'symbol', 'minAmount'];\n    \n    // Only common fields are required (removed address requirement)\n    const required = commonRequired;\n\n    for (const field of required) {\n      if (!attributes[field]) {\n        throw new ServiceError(\n          `${field} is required for ${type} platforms`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\n      throw new ServiceError(\n        'minAmount must be a non-negative number',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    if (attributes.maxAmount !== undefined) {\n      if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < attributes.minAmount) {\n        throw new ServiceError(\n          'maxAmount must be a number greater than or equal to minAmount',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (attributes.fee !== undefined) {\n      if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\n        throw new ServiceError(\n          'fee must be a non-negative number',\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    // Validate symbol format (basic validation)\n    if (typeof attributes.symbol !== 'string' || !attributes.symbol.trim()) {\n      throw new ServiceError(\n        'Symbol is required',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n  }\n\n  /**\n   * Handle service errors with proper typing\n   */\n  private handleError(error: any, defaultMessage: string): ServiceError {\n    if (error instanceof ServiceError) {\n      return error;\n    }\n\n    // Handle Flarum API errors\n    if (error.response && error.response.errors) {\n      const apiError = error.response.errors[0];\n      return new ServiceError(\n        apiError.detail || defaultMessage,\n        ServiceErrorType.VALIDATION_ERROR,\n        apiError.code,\n        apiError\n      );\n    }\n\n    // Handle network errors\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\n      return new ServiceError(\n        'Network error occurred',\n        ServiceErrorType.NETWORK_ERROR\n      );\n    }\n\n    // Default error handling\n    return new ServiceError(\n      error.message || defaultMessage,\n      ServiceErrorType.SERVER_ERROR\n    );\n  }\n\n  /**\n   * Check if error is a not found error\n   */\n  private isNotFoundError(error: any): boolean {\n    return error.status === 404 || \n           error.response?.status === 404 ||\n           error.message?.includes('not found');\n  }\n}\n\n// Export singleton instance\nexport const platformService = new PlatformService();","import app from 'flarum/common/app';\r\nimport DepositPlatform from '../models/DepositPlatform';\r\nimport { \r\n  AddressServiceInterface, \r\n  ServiceError, \r\n  ServiceErrorType\r\n} from '../types/services';\r\n\r\n/**\r\n * Simplified service for getting deposit addresses from platform configuration\r\n */\r\nexport default class AddressService implements AddressServiceInterface {\r\n\r\n  /**\r\n   * Get deposit address for platform (from platform configuration)\r\n   */\r\n  async generateAddress(platformId: number, _userId?: number): Promise<string> {\r\n    try {\r\n      const currentUser = app.session.user;\r\n      if (!currentUser) {\r\n        throw new ServiceError(\r\n          'User not authenticated',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      // Get platform details\r\n      const platform = await app.store.find('deposit-platforms', platformId) as unknown as DepositPlatform;\r\n      if (!platform) {\r\n        throw new ServiceError(\r\n          'Invalid platform selected',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      if (!platform.isActive()) {\r\n        throw new ServiceError(\r\n          'Platform is not currently active',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      // Since platforms have pre-configured addresses, just return the platform's address\r\n      if (!platform.address()) {\r\n        throw new ServiceError(\r\n          'Platform does not have a configured deposit address',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      return platform.address();\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to get deposit address');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if current user can generate addresses\r\n   */\r\n  canGenerateAddress(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && !currentUser.isGuest();\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\r\n      return new ServiceError(\r\n        'Network error occurred',\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const addressService = new AddressService();","/**\r\n * Flarum API error interface for proper error handling\r\n */\r\nexport interface FlarumApiError {\r\n  response?: {\r\n    status?: number;\r\n    errors?: Array<{\r\n      detail?: string;\r\n      code?: string;\r\n    }>;\r\n  };\r\n  responseText?: string;\r\n  status?: number;\r\n}\r\n\r\n/**\r\n * Helper function to extract error message from Flarum API error\r\n */\r\nexport function extractErrorMessage(error: any, fallback = 'An error occurred'): string {\r\n  if (!error) return fallback;\r\n\r\n  // Check for JSON:API error format\r\n  if (error.response && error.response.errors && Array.isArray(error.response.errors)) {\r\n    const firstError = error.response.errors[0];\r\n    if (firstError && firstError.detail) {\r\n      return firstError.detail;\r\n    }\r\n  }\r\n\r\n  // Check for HTML error responses (PHP Fatal Errors)\r\n  if (error.responseText) {\r\n    if (error.responseText.includes('<b>Fatal error</b>') || error.responseText.includes('<!DOCTYPE')) {\r\n      return 'Server error occurred. Please try again later.';\r\n    }\r\n    \r\n    // Try to parse JSON response\r\n    try {\r\n      const response = JSON.parse(error.responseText);\r\n      if (response.errors && Array.isArray(response.errors)) {\r\n        return response.errors[0].detail || fallback;\r\n      }\r\n    } catch {\r\n      // Not valid JSON, return server error message\r\n      return 'Server error occurred. Please try again later.';\r\n    }\r\n  }\r\n\r\n  return fallback;\r\n}\r\n\r\n/**\r\n * Type guard to check if error is a Flarum API error\r\n */\r\nexport function isFlarumApiError(error: any): error is FlarumApiError {\r\n  return error && (\r\n    (error.response && error.response.errors) ||\r\n    error.responseText ||\r\n    error.status\r\n  );\r\n}\r\n\r\n/**\r\n * Type assertion helper for API responses\r\n * This is a temporary solution until better typing is available\r\n */\r\nexport function assertApiPayload(response: unknown): any {\r\n  // In a production environment, you would add runtime validation here\r\n  return response as any;\r\n}","import app from 'flarum/forum/app';\r\nimport Page from 'flarum/common/components/Page';\r\nimport Button from 'flarum/common/components/Button';\r\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\n\r\n// Withdrawal imports\r\nimport type { WithdrawalFormData } from './withdrawal/types/interfaces';\r\nimport WithdrawalPlatform from '../../common/models/WithdrawalPlatform';\r\nimport WithdrawalForm from './withdrawal/forms/WithdrawalForm';\r\nimport TransactionHistory from './shared/TransactionHistory';\r\n\r\n// Deposit imports\r\nimport type { DepositFormData, DepositAddressData } from './deposit/types/interfaces';\r\nimport type DepositPlatform from '../../common/models/DepositPlatform';\r\nimport DepositPlatformDropdown from './deposit/selectors/DepositPlatformDropdown';\r\nimport AddressDisplay from './deposit/components/AddressDisplay';\r\nimport ImageDisplay from './deposit/components/ImageDisplay';\r\nimport DepositRecordForm from './deposit/forms/DepositRecordForm';\r\nimport type { DepositRecordFormData } from './deposit/forms/DepositRecordForm';\r\n\r\n// Services\r\nimport { withdrawalService, depositService, platformService } from '../../common/services';\r\nimport { ServiceError } from '../../common/types/services';\r\n\r\n// Utilities\r\nimport { getAttr, getIdString, getDateFromAttr } from './withdrawal/utils/modelHelpers';\r\nimport { extractErrorMessage, type FlarumApiError } from '../../common/types/api';\r\n\r\ntype TabType = 'withdrawal' | 'deposit' | 'withdrawal-history' | 'deposit-history';\r\n\r\ninterface FundsPageState {\r\n  // Withdrawal state\r\n  withdrawalPlatforms: WithdrawalPlatform[];\r\n  withdrawalRequests: any[];\r\n  userBalance: number;\r\n  loadingBalance: boolean;\r\n  submitting: boolean;\r\n  \r\n  // Deposit state\r\n  depositPlatforms: DepositPlatform[];\r\n  depositRecords: any[];\r\n  showDepositRecordForm: boolean;\r\n  submittingDepositRecord: boolean;\r\n  \r\n  // Shared state\r\n  loading: boolean;\r\n  activeTab: Stream<TabType>;\r\n}\r\n\r\nexport default class FundsPage extends Page<any, FundsPageState> {\r\n  state: FundsPageState = {\r\n    withdrawalPlatforms: [],\r\n    withdrawalRequests: [],\r\n    userBalance: 0,\r\n    loadingBalance: true,\r\n    submitting: false,\r\n    depositPlatforms: [],\r\n    depositRecords: [],\r\n    showDepositRecordForm: false,\r\n    submittingDepositRecord: false,\r\n    loading: true,\r\n    activeTab: Stream('withdrawal')\r\n  };\r\n\r\n  // Withdrawal form data\r\n  private withdrawalFormData: WithdrawalFormData = {\r\n    amount: Stream(''),\r\n    selectedPlatform: Stream<WithdrawalPlatform | null>(null),\r\n    accountDetails: Stream(''),\r\n    message: Stream(''),\r\n    saveAddress: Stream(false)\r\n  };\r\n\r\n  // Deposit form data and address - Fixed: Added missing userMessage property\r\n  private depositFormData: DepositFormData = {\r\n    selectedPlatform: Stream<DepositPlatform | null>(null),\r\n    userMessage: Stream('')\r\n  };\r\n\r\n  private depositAddressData: DepositAddressData = {\r\n    address: '',\r\n    platform: null as any,\r\n    loading: false\r\n  };\r\n\r\n  // Platform-based selection for deposits  \r\n  private availablePlatforms: DepositPlatform[] = [];\r\n\r\n  oninit(vnode: Mithril.VnodeDOM) {\r\n    super.oninit(vnode);\r\n\r\n    // Parse URL to determine initial tab\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const tabParam = urlParams.get('tab');\r\n    const pathTab = this.getTabFromPath();\r\n    \r\n    if (pathTab) {\r\n      this.state.activeTab(pathTab);\r\n    } else if (tabParam && this.isValidTab(tabParam)) {\r\n      this.state.activeTab(tabParam as TabType);\r\n    }\r\n\r\n    // Set page title based on active tab\r\n    this.updatePageTitle();\r\n\r\n    // Load data for both systems\r\n    this.loadAllData();\r\n  }\r\n\r\n  private getTabFromPath(): TabType | null {\r\n    const path = window.location.pathname;\r\n    if (path.includes('/funds/withdrawal')) return 'withdrawal';\r\n    if (path.includes('/funds/deposit')) return 'deposit';\r\n    if (path.includes('/funds/withdrawal-history')) return 'withdrawal-history';\r\n    if (path.includes('/funds/deposit-history')) return 'deposit-history';\r\n    return null;\r\n  }\r\n\r\n  private isValidTab(tab: string): boolean {\r\n    return ['withdrawal', 'deposit', 'withdrawal-history', 'deposit-history'].includes(tab);\r\n  }\r\n\r\n  private updatePageTitle(): void {\r\n    const tab = this.state.activeTab();\r\n    let titleKey = 'withdrawal.forum.page.title'; // default\r\n    \r\n    switch (tab) {\r\n      case 'withdrawal':\r\n      case 'withdrawal-history':\r\n        titleKey = 'withdrawal.forum.page.title';\r\n        break;\r\n      case 'deposit':\r\n      case 'deposit-history':\r\n        titleKey = 'withdrawal.forum.deposit.page.title';\r\n        break;\r\n    }\r\n    \r\n    // Fixed: Convert NestedStringArray to string using toString()\r\n    const title = app.translator.trans(titleKey);\r\n    app.setTitle(typeof title === 'string' ? title : title.toString());\r\n  }\r\n\r\n  view() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"FundsPage\">\r\n          <div className=\"FundsPage-loading\">\r\n            <LoadingIndicator />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage\">\r\n        <div className=\"FundsPage-modal\">\r\n          {this.renderHeader()}\r\n          <div className=\"FundsPage-content\">\r\n            {this.renderActiveTab()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderHeader(): Mithril.Children {\r\n    const activeTab = this.state.activeTab();\r\n    \r\n    return (\r\n      <div className=\"FundsPage-header\">\r\n        <div className=\"FundsPage-tabs\">\r\n          <div \r\n            className={`FundsPage-tab ${activeTab === 'withdrawal' ? 'active' : ''}`}\r\n            onclick={() => this.handleTabChange('withdrawal')}\r\n          >\r\n            {app.translator.trans('withdrawal.forum.tabs.withdrawal')}\r\n          </div>\r\n          <div \r\n            className={`FundsPage-tab ${activeTab === 'deposit' ? 'active' : ''}`}\r\n            onclick={() => this.handleTabChange('deposit')}\r\n          >\r\n            {app.translator.trans('withdrawal.forum.deposit.tabs.deposit')}\r\n          </div>\r\n          <div \r\n            className={`FundsPage-tab ${activeTab === 'withdrawal-history' ? 'active' : ''}`}\r\n            onclick={() => this.handleTabChange('withdrawal-history')}\r\n          >\r\n            {app.translator.trans('withdrawal.forum.tabs.history')}\r\n          </div>\r\n          <div \r\n            className={`FundsPage-tab ${activeTab === 'deposit-history' ? 'active' : ''}`}\r\n            onclick={() => this.handleTabChange('deposit-history')}\r\n          >\r\n            {app.translator.trans('withdrawal.forum.deposit.tabs.history')}\r\n          </div>\r\n        </div>\r\n        <Button\r\n          className=\"FundsPage-close\"\r\n          icon=\"fas fa-times\"\r\n          onclick={() => app.history.back()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderActiveTab(): Mithril.Children {\r\n    const activeTab = this.state.activeTab();\r\n    \r\n    switch (activeTab) {\r\n      case 'withdrawal':\r\n        return this.renderWithdrawalTab();\r\n      case 'deposit':\r\n        return this.renderDepositTab();\r\n      case 'withdrawal-history':\r\n        return this.renderWithdrawalHistoryTab();\r\n      case 'deposit-history':\r\n        return this.renderDepositHistoryTab();\r\n      default:\r\n        return this.renderWithdrawalTab();\r\n    }\r\n  }\r\n\r\n  private renderWithdrawalTab(): Mithril.Children {\r\n    const validPlatforms = (this.state.withdrawalPlatforms || []).filter(platform => !!platform);\r\n\r\n    if (validPlatforms.length === 0) {\r\n      return (\r\n        <div className=\"FundsPage-withdrawalTab\">\r\n          <div className=\"WithdrawalPage-emptyState\">\r\n            <div className=\"WithdrawalPage-emptyIcon\">\r\n              {icon('fas fa-coins')}\r\n            </div>\r\n            <h3 className=\"WithdrawalPage-emptyTitle\">\r\n              {app.translator.trans('withdrawal.forum.no_platforms')}\r\n            </h3>\r\n            <p className=\"WithdrawalPage-emptyDescription\">\r\n              {app.translator.trans('withdrawal.forum.no_platforms_description')}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawalTab\">\r\n        <WithdrawalForm\r\n          platforms={this.state.withdrawalPlatforms}\r\n          formData={this.getWithdrawalFormDataForComponent()}\r\n          loadingBalance={this.state.loadingBalance}\r\n          submitting={this.state.submitting}\r\n          onFormDataChange={this.handleWithdrawalFormDataChange.bind(this)}\r\n          onFillAllAmount={this.handleFillAllAmount.bind(this)}\r\n          onSubmit={this.handleWithdrawalSubmit.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositTab(): Mithril.Children {\r\n    const availablePlatforms = (this.state.depositPlatforms || []).filter(platform => \r\n      platform && getAttr(platform, 'isActive')\r\n    );\r\n\r\n    if (availablePlatforms.length === 0) {\r\n      return (\r\n        <div className=\"FundsPage-emptyState\">\r\n          <div className=\"FundsPage-emptyIcon\">\r\n            {icon('fas fa-coins')}\r\n          </div>\r\n          <h3 className=\"FundsPage-emptyTitle\">\r\n            {app.translator.trans('withdrawal.forum.deposit.no_platforms')}\r\n          </h3>\r\n          <p className=\"FundsPage-emptyDescription\">\r\n            {app.translator.trans('withdrawal.forum.deposit.no_platforms_description')}\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-depositTab\">\r\n        {this.renderDepositSelectors()}\r\n        {this.renderDepositInfo()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositSelectors(): Mithril.Children {\r\n    return (\r\n      <div className=\"FundsPage-selectors\">\r\n        <DepositPlatformDropdown\r\n          platforms={this.availablePlatforms}\r\n          selectedPlatform={this.depositFormData.selectedPlatform()}\r\n          onPlatformSelect={(platform: DepositPlatform) => this.handlePlatformSelect(platform)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositInfo(): Mithril.Children {\r\n    const platform = this.depositFormData.selectedPlatform();\r\n    \r\n    if (!platform) {\r\n      return (\r\n        <div className=\"FundsPage-selectPrompt\">\r\n          <p>{app.translator.trans('withdrawal.forum.deposit.select_platform')}</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const minAmount = getAttr(platform, 'minAmount') || 0;\r\n    const warningText = getAttr(platform, 'warningText') || \r\n      app.translator.trans('withdrawal.forum.deposit.default_warning', {\r\n        currency: getAttr(platform, 'symbol'),\r\n        network: getAttr(platform, 'network'),\r\n        minAmount\r\n      });\r\n\r\n    return (\r\n      <div className=\"FundsPage-depositInfo\">\r\n        <p className=\"FundsPage-instructionText\">\r\n          {app.translator.trans('withdrawal.forum.deposit.scan_or_use_address')}\r\n        </p>\r\n        \r\n        <AddressDisplay\r\n          address={this.depositAddressData.address}\r\n          loading={this.depositAddressData.loading}\r\n          onCopy={this.handleCopyAddress.bind(this)}\r\n        />\r\n        \r\n        <p className=\"FundsPage-minAmountText\">\r\n          {app.translator.trans('withdrawal.forum.deposit.min_amount', {\r\n            amount: minAmount,\r\n            currency: getAttr(platform, 'symbol')\r\n          })}\r\n        </p>\r\n        \r\n        {(() => {\r\n          const fee = getAttr(platform, 'fee') || 0;\r\n          if (fee > 0) {\r\n            return (\r\n              <p className=\"FundsPage-feeText\">\r\n                {app.translator.trans('withdrawal.forum.deposit.fee', {\r\n                  fee: fee,\r\n                  currency: getAttr(platform, 'symbol')\r\n                })}\r\n              </p>\r\n            );\r\n          }\r\n          return null;\r\n        })()}\r\n        \r\n        {/* Only show image container if platform has qrCodeImageUrl */}\r\n        {this.depositAddressData.platform && this.depositAddressData.platform.qrCodeImageUrl && this.depositAddressData.platform.qrCodeImageUrl() && (\r\n          <div className=\"FundsPage-imageContainer\">\r\n            <ImageDisplay\r\n              platform={this.depositAddressData.platform}\r\n              loading={this.depositAddressData.loading}\r\n              size={160}\r\n            />\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"FundsPage-infoPanel\">\r\n          <i className=\"fas fa-info-circle\"></i>\r\n          <span>{warningText}</span>\r\n        </div>\r\n\r\n        {/* Deposit Record Submission Section */}\r\n        <div className=\"FundsPage-recordSection\">\r\n          <div className=\"FundsPage-recordHeader\">\r\n            <h4>{app.translator.trans('withdrawal.forum.deposit.record.section_title')}</h4>\r\n            <Button\r\n              className=\"Button Button--primary FundsPage-recordButton\"\r\n              onclick={this.handleToggleDepositRecordForm.bind(this)}\r\n              disabled={this.state.submittingDepositRecord}\r\n            >\r\n              {this.state.showDepositRecordForm \r\n                ? app.translator.trans('withdrawal.forum.deposit.record.hide_form')\r\n                : app.translator.trans('withdrawal.forum.deposit.record.show_form')\r\n              }\r\n            </Button>\r\n          </div>\r\n          \r\n          {this.state.showDepositRecordForm && (\r\n            <DepositRecordForm\r\n              platform={platform}\r\n              onSubmit={this.handleDepositRecordSubmit.bind(this)}\r\n              onCancel={this.handleCancelDepositRecordForm.bind(this)}\r\n              submitting={this.state.submittingDepositRecord}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderWithdrawalHistoryTab(): Mithril.Children {\r\n    return (\r\n      <div className=\"FundsPage-withdrawalTab\">\r\n        <TransactionHistory\r\n          transactions={this.state.withdrawalRequests}\r\n          platforms={this.state.withdrawalPlatforms}\r\n          loading={false}\r\n          type=\"withdrawal\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositHistoryTab(): Mithril.Children {\r\n    // Use only deposit records for history\r\n    const allDepositHistory = [...this.state.depositRecords];\r\n    \r\n    // Sort by creation date (newest first)\r\n    allDepositHistory.sort((a, b) => {\r\n      const dateA = getDateFromAttr(a, 'createdAt') || new Date(0);\r\n      const dateB = getDateFromAttr(b, 'createdAt') || new Date(0);\r\n      return dateB.getTime() - dateA.getTime();\r\n    });\r\n\r\n    return (\r\n      <TransactionHistory\r\n        transactions={allDepositHistory}\r\n        platforms={this.state.depositPlatforms}\r\n        loading={false}\r\n        type=\"deposit\"\r\n      />\r\n    );\r\n  }\r\n\r\n  private handleTabChange(tab: TabType): void {\r\n    this.state.activeTab(tab);\r\n    this.updatePageTitle();\r\n    \r\n    // Update URL without page reload\r\n    const url = new URL(window.location.href);\r\n    url.searchParams.set('tab', tab);\r\n    window.history.replaceState({}, '', url.toString());\r\n  }\r\n\r\n  // Withdrawal methods (copied from WithdrawalPage)\r\n  private getWithdrawalFormDataForComponent() {\r\n    // Fixed: Added null check to prevent invoking null objects\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    return {\r\n      selectedPlatform: selectedPlatform,\r\n      amount: this.withdrawalFormData.amount(),\r\n      accountDetails: this.withdrawalFormData.accountDetails(),\r\n      message: this.withdrawalFormData.message(),\r\n      saveAddress: this.withdrawalFormData.saveAddress()\r\n    };\r\n  }\r\n\r\n  private handleWithdrawalFormDataChange(data: Partial<WithdrawalFormData>): void {\r\n    if (data.selectedPlatform !== undefined) {\r\n      this.withdrawalFormData.selectedPlatform(data.selectedPlatform);\r\n    }\r\n    if (data.amount !== undefined) {\r\n      this.withdrawalFormData.amount(data.amount);\r\n    }\r\n    if (data.accountDetails !== undefined) {\r\n      this.withdrawalFormData.accountDetails(data.accountDetails);\r\n    }\r\n    if (data.message !== undefined) {\r\n      this.withdrawalFormData.message(data.message);\r\n    }\r\n    if (data.saveAddress !== undefined) {\r\n      this.withdrawalFormData.saveAddress(data.saveAddress);\r\n    }\r\n  }\r\n\r\n  private async handleFillAllAmount(): Promise<void> {\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    if (!selectedPlatform) return;\r\n\r\n    if (this.state.loadingBalance) return;\r\n\r\n    try {\r\n      await this.loadUserBalance(true);\r\n\r\n      const fee = getAttr(selectedPlatform, 'fee') || 0;\r\n      const maxAmount = getAttr(selectedPlatform, 'maxAmount') || Infinity;\r\n      let availableAmount = this.state.userBalance - fee;\r\n      \r\n      if (maxAmount < Infinity && availableAmount > maxAmount) {\r\n        availableAmount = maxAmount;\r\n      }\r\n      \r\n      if (availableAmount > 0) {\r\n        this.withdrawalFormData.amount(availableAmount.toString());\r\n      } else {\r\n        app.alerts.show(\r\n          { type: 'warning', dismissible: true },\r\n          app.translator.trans('withdrawal.forum.insufficient_balance')\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing balance:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('withdrawal.forum.balance_refresh_error')\r\n      );\r\n    }\r\n  }\r\n\r\n  private async handleWithdrawalSubmit(): Promise<void> {\r\n    if (this.state.submitting) return;\r\n\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    const amount = this.withdrawalFormData.amount();\r\n    const accountDetails = this.withdrawalFormData.accountDetails();\r\n\r\n    if (!selectedPlatform || !amount || !accountDetails) {\r\n      return;\r\n    }\r\n\r\n    // Basic validation\r\n    const amountNum = parseFloat(amount);\r\n    if (isNaN(amountNum) || amountNum <= 0) {\r\n      app.alerts.show(\r\n        { type: 'warning', dismissible: true },\r\n        app.translator.trans('withdrawal.forum.invalid_amount')\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.state.submitting = true;\r\n\r\n    try {\r\n      await withdrawalService.submitRequest({\r\n        platformId: parseInt(getIdString(selectedPlatform), 10),\r\n        amount: amountNum,\r\n        accountDetails,\r\n        message: this.withdrawalFormData.message()\r\n      });\r\n\r\n      // Clear form\r\n      this.withdrawalFormData.amount('');\r\n      this.withdrawalFormData.accountDetails('');\r\n      this.withdrawalFormData.message('');\r\n      if (!this.withdrawalFormData.saveAddress()) {\r\n        this.withdrawalFormData.selectedPlatform(null);\r\n      }\r\n\r\n      // Refresh data\r\n      await Promise.all([\r\n        this.loadUserBalance(true),\r\n        this.loadWithdrawalRequests()\r\n      ]);\r\n\r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.forum.submit_success')\r\n      );\r\n\r\n    } catch (error: unknown) {\r\n      console.error('Withdrawal request failed:', error);\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.forum.error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      } else {\r\n        errorMessage = extractErrorMessage(\r\n          error as FlarumApiError, \r\n          errorMessage\r\n        );\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    } finally {\r\n      this.state.submitting = false;\r\n    }\r\n  }\r\n\r\n  // Deposit methods - simplified platform selection\r\n  \r\n  private handlePlatformSelect(platform: DepositPlatform): void {\r\n    this.depositFormData.selectedPlatform(platform);\r\n    this.loadDepositAddress(platform);\r\n  }\r\n\r\n  private handleCopyAddress(): void {\r\n    if (this.depositAddressData.address) {\r\n      navigator.clipboard.writeText(this.depositAddressData.address).then(() => {\r\n        app.alerts.show(\r\n          { type: 'success', dismissible: true },\r\n          app.translator.trans('withdrawal.forum.deposit.address_copied')\r\n        );\r\n      }).catch(() => {\r\n        app.alerts.show(\r\n          { type: 'error', dismissible: true },\r\n          app.translator.trans('withdrawal.forum.deposit.copy_failed')\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  private handleToggleDepositRecordForm(): void {\r\n    this.state.showDepositRecordForm = !this.state.showDepositRecordForm;\r\n    m.redraw();\r\n  }\r\n\r\n  private handleCancelDepositRecordForm(): void {\r\n    this.state.showDepositRecordForm = false;\r\n    m.redraw();\r\n  }\r\n\r\n  private async handleDepositRecordSubmit(data: DepositRecordFormData): Promise<void> {\r\n    if (this.state.submittingDepositRecord) return;\r\n\r\n    this.state.submittingDepositRecord = true;\r\n    m.redraw();\r\n\r\n    try {\r\n      await depositService.create({\r\n        platformId: data.platformId,\r\n        platformAccount: data.platformAccount,\r\n        realName: data.realName,\r\n        amount: data.amount,\r\n        depositTime: data.depositTime.toISOString(),\r\n        screenshotUrl: data.screenshotUrl,\r\n        userMessage: data.userMessage,\r\n        status: 'pending'\r\n      });\r\n\r\n      // Hide form and show success message\r\n      this.state.showDepositRecordForm = false;\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('withdrawal.forum.deposit.record.submit_success')\r\n      );\r\n\r\n      // Reload deposit history\r\n      await this.loadDepositRecords();\r\n\r\n    } catch (error: unknown) {\r\n      console.error('Deposit record submission failed:', error);\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.forum.deposit.record.submit_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      } else {\r\n        errorMessage = extractErrorMessage(\r\n          error as FlarumApiError,\r\n          errorMessage\r\n        );\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    } finally {\r\n      this.state.submittingDepositRecord = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n\r\n  // Data loading methods\r\n  private async loadAllData(): Promise<void> {\r\n    try {\r\n      await Promise.all([\r\n        this.loadWithdrawalData(),\r\n        this.loadDepositData(),\r\n        this.loadUserBalance()\r\n      ]);\r\n      \r\n      this.state.loading = false;\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n      this.state.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load withdrawal platforms and user requests using service layer\r\n   */\r\n  private async loadWithdrawalData(): Promise<void> {\r\n    try {\r\n      const [platforms, requests] = await Promise.all([\r\n        platformService.getActive('withdrawal'),\r\n        withdrawalService.getUserHistory()\r\n      ]);\r\n\r\n      this.state.withdrawalPlatforms = platforms as WithdrawalPlatform[];\r\n      this.state.withdrawalRequests = requests;\r\n    } catch (error) {\r\n      console.error('Error loading withdrawal data:', error);\r\n      // Fallback to empty arrays\r\n      this.state.withdrawalPlatforms = [];\r\n      this.state.withdrawalRequests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load deposit platforms and user records using service layer\r\n   */\r\n  private async loadDepositData(): Promise<void> {\r\n    try {\r\n      const [platforms, records] = await Promise.all([\r\n        platformService.getActive('deposit'),\r\n        depositService.getUserHistory()\r\n      ]);\r\n\r\n      this.state.depositPlatforms = platforms as DepositPlatform[];\r\n      this.state.depositRecords = records;\r\n      \r\n      // Filter active platforms\r\n      this.availablePlatforms = platforms.filter(platform => getAttr(platform, 'isActive')) as DepositPlatform[];\r\n    } catch (error) {\r\n      console.error('Error loading deposit data:', error);\r\n      // Fallback to empty arrays\r\n      this.state.depositPlatforms = [];\r\n      this.state.depositRecords = [];\r\n      this.availablePlatforms = [];\r\n    }\r\n  }\r\n\r\n  private async loadDepositRecords(): Promise<void> {\r\n    try {\r\n      const records = await depositService.getUserHistory();\r\n      this.state.depositRecords = records;\r\n    } catch (error) {\r\n      console.error('Error loading deposit records:', error);\r\n      this.state.depositRecords = [];\r\n    }\r\n  }\r\n\r\n  private async loadUserBalance(forceRefresh = false): Promise<void> {\r\n    try {\r\n      this.state.loadingBalance = true;\r\n      \r\n      if (forceRefresh && app.session.user) {\r\n        const userId = app.session.user.id();\r\n        if (!userId) {\r\n          throw new Error('User ID not available');\r\n        }\r\n        \r\n        // Refresh user data through the store\r\n        const updatedUser = await app.store.find('users', userId);\r\n        \r\n        if (updatedUser) {\r\n          this.state.userBalance = parseFloat(updatedUser.attribute('money')) || 0;\r\n        } else {\r\n          this.state.userBalance = 0;\r\n        }\r\n      } else {\r\n        this.state.userBalance = parseFloat(app.session.user?.attribute('money') || '0');\r\n      }\r\n      \r\n      this.state.loadingBalance = false;\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error loading user balance:', error);\r\n      this.state.loadingBalance = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private async loadWithdrawalRequests(): Promise<void> {\r\n    try {\r\n      const requests = await withdrawalService.getUserHistory();\r\n      this.state.withdrawalRequests = requests;\r\n    } catch (error) {\r\n      console.error('Error loading withdrawal requests:', error);\r\n      this.state.withdrawalRequests = [];\r\n    }\r\n  }\r\n\r\n  private async loadDepositAddress(platform: DepositPlatform): Promise<void> {\r\n    this.depositAddressData.loading = true;\r\n    m.redraw();\r\n\r\n    try {\r\n      const address = await depositService.generateAddress(parseInt(getAttr(platform, 'id'), 10));\r\n      \r\n      this.depositAddressData = {\r\n        address,\r\n        platform,\r\n        loading: false\r\n      };\r\n\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error loading deposit address:', error);\r\n      this.depositAddressData.loading = false;\r\n      \r\n      let errorMessage = app.translator.trans('withdrawal.forum.deposit.address_load_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n      \r\n      m.redraw();\r\n    }\r\n  }\r\n}","import { ServiceError, ServiceErrorType } from '../types/services';\n\n/**\n * Validate common platform fields\n */\nexport function validateCommonFields(attributes: Record<string, any>): string[] {\n  const errors: string[] = [];\n\n  // Name validation\n  if (attributes.name !== undefined) {\n    if (!attributes.name || typeof attributes.name !== 'string') {\n      errors.push('Platform name is required');\n    }\n  }\n\n  // Symbol validation\n  if (attributes.symbol !== undefined) {\n    if (!attributes.symbol || typeof attributes.symbol !== 'string') {\n      errors.push('Symbol is required');\n    }\n  }\n\n  return errors;\n}\n\n/**\n * Validate amount fields (min/max/fee)\n */\nexport function validateAmountFields(attributes: Record<string, any>, currentMinAmount?: number): string[] {\n  const errors: string[] = [];\n\n  // Min amount validation\n  if (attributes.minAmount !== undefined) {\n    if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\n      errors.push('Minimum amount must be a non-negative number');\n    }\n  }\n\n  // Max amount validation\n  if (attributes.maxAmount !== undefined && attributes.maxAmount !== null) {\n    if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < 0) {\n      errors.push('Maximum amount must be a non-negative number');\n    }\n    \n    const minAmount = attributes.minAmount ?? currentMinAmount ?? 0;\n    if (attributes.maxAmount < minAmount) {\n      errors.push('Maximum amount must be greater than or equal to minimum amount');\n    }\n  }\n\n  // Fee validation\n  if (attributes.fee !== undefined && attributes.fee !== null) {\n    if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\n      errors.push('Fee must be a non-negative number');\n    }\n  }\n\n  return errors;\n}\n\n/**\n * Validate deposit-specific fields\n */\nexport function validateDepositFields(attributes: Record<string, any>): string[] {\n  const errors: string[] = [];\n\n  // Network validation (for deposit platforms) - only validate if provided\n  if (attributes.network !== undefined && attributes.network !== null && attributes.network !== '') {\n    if (typeof attributes.network !== 'string') {\n      errors.push('Network must be a string');\n    }\n  }\n\n  // Address validation (for deposit platforms) - only validate if provided\n  if (attributes.address !== undefined && attributes.address !== null && attributes.address !== '') {\n    if (typeof attributes.address !== 'string') {\n      errors.push('Deposit address must be a string');\n    }\n  }\n\n  return errors;\n}\n\n/**\n * Throw validation error if there are any errors\n */\nexport function throwIfErrors(errors: string[]): void {\n  if (errors.length > 0) {\n    throw new ServiceError(\n      errors.join(', '),\n      ServiceErrorType.VALIDATION_ERROR\n    );\n  }\n}\n\n/**\n * Complete validation for withdrawal platforms\n */\nexport function validateWithdrawalPlatform(attributes: Record<string, any>, currentMinAmount?: number): void {\n  const errors = [\n    ...validateCommonFields(attributes),\n    ...validateAmountFields(attributes, currentMinAmount)\n  ];\n  \n  throwIfErrors(errors);\n}\n\n/**\n * Complete validation for deposit platforms\n */\nexport function validateDepositPlatform(attributes: Record<string, any>, currentMinAmount?: number): void {\n  const errors = [\n    ...validateCommonFields(attributes),\n    ...validateAmountFields(attributes, currentMinAmount),\n    ...validateDepositFields(attributes)\n  ];\n  \n  throwIfErrors(errors);\n}","import Model from 'flarum/common/Model';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport { validateWithdrawalPlatform } from '../utils/PlatformValidation';\r\nimport app from 'flarum/common/app';\r\n\r\n/**\r\n * WithdrawalPlatform model for Flarum\r\n * \r\n * This model represents a withdrawal platform that users can use\r\n * to withdraw their virtual currency with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalPlatform extends Model {\r\n  // Basic attributes\r\n  name = Model.attribute<string>('name');\r\n  symbol = Model.attribute<string>('symbol');\r\n  network = Model.attribute<string | null>('network');\r\n  displayName = Model.attribute<string>('displayName');\r\n  minAmount = Model.attribute<number>('minAmount');\r\n  maxAmount = Model.attribute<number>('maxAmount');\r\n  fee = Model.attribute<number>('fee');\r\n  \r\n  // Optional attributes\r\n  iconUrl = Model.attribute<string | null>('iconUrl');\r\n  iconClass = Model.attribute<string | null>('iconClass');\r\n  \r\n  // Status\r\n  isActive = Model.attribute<boolean>('isActive');\r\n  \r\n  // Timestamps\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n  \r\n  // Computed properties\r\n  apiEndpoint() {\r\n    return `/withdrawal-platforms/${this.id()}`;\r\n  }\r\n  \r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n  \r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    return amount >= min && amount <= max;\r\n  }\r\n  \r\n  getTotalCost(amount: number): number {\r\n    return amount + this.fee();\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<WithdrawalPlatform> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as WithdrawalPlatform;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        'Cannot delete platform that has pending withdrawal requests',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<WithdrawalPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to modify this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): WithdrawalPlatform {\r\n    const cloned = app.store.createRecord('withdrawal-platforms') as WithdrawalPlatform;\r\n    \r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + ' (Copy)',\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      iconUrl: this.iconUrl(),\r\n      iconClass: this.iconClass(),\r\n      isActive: false // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== 'number' || amount <= 0) {\r\n      errors.push('Amount must be a positive number');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    if (amount < this.minAmount()) {\r\n      errors.push(`Amount must be at least ${this.minAmount()} ${this.symbol()}`);\r\n    }\r\n\r\n    if (this.maxAmount() && amount > this.maxAmount()) {\r\n      errors.push(`Amount cannot exceed ${this.maxAmount()} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Check if user has sufficient balance for withdrawal\r\n   */\r\n  validateUserBalance(amount: number, userBalance: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n    const totalCost = this.getTotalCost(amount);\r\n\r\n    if (userBalance < totalCost) {\r\n      const feeText = this.fee() > 0 ? ` (including ${this.fee()} ${this.symbol()} fee)` : '';\r\n      errors.push(`Insufficient balance. Required: ${totalCost} ${this.symbol()}${feeText}, Available: ${userBalance} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n    \r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const requests = await app.store.find('withdrawal-requests', {\r\n        filter: { platform: this.id(), status: 'pending' }\r\n      });\r\n      \r\n      const requestsArray = Array.isArray(requests) ? requests : [requests];\r\n      return requestsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee();\r\n    if (fee === 0) {\r\n      return 'Free';\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    validateWithdrawalPlatform(attributes, this.minAmount());\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save withdrawal platform',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save withdrawal platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete withdrawal platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","/**\r\n * Shared type definitions for the Withdrawal extension\r\n */\r\n\r\n/**\r\n * Withdrawal platform data structure\r\n */\r\nexport interface WithdrawalPlatformData {\r\n  id: string | number;\r\n  name: string;\r\n  symbol: string;\r\n  minAmount: number;\r\n  maxAmount: number;\r\n  fee: number;\r\n  iconUrl?: string | null;\r\n  iconClass?: string | null;\r\n  isActive: boolean;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * Withdrawal request data structure\r\n */\r\nexport interface WithdrawalRequestData {\r\n  id: string | number;\r\n  amount: number;\r\n  accountDetails: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  platformId: number;\r\n  userId: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * User withdrawal data extension\r\n */\r\nexport interface UserWithdrawalData {\r\n  money?: number;\r\n  withdrawalRequests?: WithdrawalRequestData[];\r\n}\r\n\r\n/**\r\n * API response structures\r\n */\r\nexport interface ApiSuccessResponse<T = any> {\r\n  data: T;\r\n}\r\n\r\nexport interface ApiErrorResponse {\r\n  errors: Array<{\r\n    status: string;\r\n    code: string;\r\n    title: string;\r\n    detail?: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Form validation errors\r\n */\r\nexport interface ValidationErrors {\r\n  [field: string]: string[];\r\n}\r\n\r\n/**\r\n * Configuration constants\r\n */\r\nexport const WITHDRAWAL_STATUS = {\r\n  PENDING: 'pending',\r\n  APPROVED: 'approved',\r\n  REJECTED: 'rejected',\r\n} as const;\r\n\r\nexport type WithdrawalStatus = typeof WITHDRAWAL_STATUS[keyof typeof WITHDRAWAL_STATUS];\r\n\r\n/**\r\n * Default values\r\n */\r\nexport const DEFAULT_MIN_AMOUNT = 0.001;\r\nexport const DEFAULT_MAX_AMOUNT = 10;\r\nexport const DEFAULT_FEE = 0.0005;\r\n\r\n/**\r\n * Helper type guards\r\n */\r\nexport function isWithdrawalPlatform(obj: any): obj is WithdrawalPlatformData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'name' in obj &&\r\n    'symbol' in obj &&\r\n    'minAmount' in obj &&\r\n    'maxAmount' in obj;\r\n}\r\n\r\nexport function isWithdrawalRequest(obj: any): obj is WithdrawalRequestData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'amount' in obj &&\r\n    'accountDetails' in obj &&\r\n    'status' in obj &&\r\n    'platformId' in obj &&\r\n    'userId' in obj;\r\n}","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\nimport WithdrawalPlatform from './WithdrawalPlatform';\r\nimport { WithdrawalStatus, WITHDRAWAL_STATUS } from '../types';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport app from 'flarum/common/app';\r\n\r\n/**\r\n * WithdrawalRequest model for Flarum\r\n * \r\n * This model represents a user's withdrawal request with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalRequest extends Model {\r\n  // Basic attributes\r\n  amount = Model.attribute<number>('amount');\r\n  accountDetails = Model.attribute<string>('accountDetails');\r\n  message = Model.attribute<string>('message');\r\n  status = Model.attribute<WithdrawalStatus>('status');\r\n  \r\n  // Foreign keys\r\n  platformId = Model.attribute<number>('platformId');\r\n  userId = Model.attribute<number>('userId');\r\n  \r\n  // Timestamps\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n  \r\n  // Relationships\r\n  user = Model.hasOne<User>('user');\r\n  platform = Model.hasOne<WithdrawalPlatform>('platform');\r\n  \r\n  // Computed properties\r\n  apiEndpoint() {\r\n    return `/withdrawal-requests/${this.id()}`;\r\n  }\r\n  \r\n  // Status helpers\r\n  isPending(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.PENDING;\r\n  }\r\n  \r\n  isApproved(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.APPROVED;\r\n  }\r\n  \r\n  isRejected(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.REJECTED;\r\n  }\r\n  \r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n  \r\n  // Display helpers\r\n  statusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`withdrawal.forum.status.${status}`).toString();\r\n  }\r\n  \r\n  statusColor(): string {\r\n    const status = this.status();\r\n    switch (status) {\r\n      case WITHDRAWAL_STATUS.APPROVED:\r\n        return 'success';\r\n      case WITHDRAWAL_STATUS.REJECTED:\r\n        return 'danger';\r\n      case WITHDRAWAL_STATUS.PENDING:\r\n      default:\r\n        return 'warning';\r\n    }\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this withdrawal request with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<WithdrawalRequest> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this withdrawal request with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this request',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    if (!this.canBeModified()) {\r\n      throw new ServiceError(\r\n        'This request cannot be deleted as it has already been processed',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this request for resubmission\r\n   */\r\n  clone(): WithdrawalRequest {\r\n    const cloned = app.store.createRecord('withdrawal-requests') as WithdrawalRequest;\r\n    \r\n    // Copy relevant attributes but not status/timestamps\r\n    cloned.pushAttributes({\r\n      platformId: this.platformId(),\r\n      amount: this.amount(),\r\n      accountDetails: this.accountDetails(),\r\n      message: this.message()\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Get total cost including fees\r\n   */\r\n  getTotalCost(): number {\r\n    const platform = this.platform();\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n    return this.amount() + fee;\r\n  }\r\n\r\n  /**\r\n   * Get formatted amount string\r\n   */\r\n  getFormattedAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    return `${this.amount()} ${symbol}`.trim();\r\n  }\r\n\r\n  /**\r\n   * Get formatted total cost string including fees\r\n   */\r\n  getFormattedTotalCost(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n    \r\n    if (fee > 0) {\r\n      return `${this.amount()} + ${fee} (fee) = ${this.getTotalCost()} ${symbol}`.trim();\r\n    }\r\n    \r\n    return this.getFormattedAmount();\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this request\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending requests\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this request\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending requests\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this request's details\r\n   */\r\n  canView(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own requests\r\n    return this.userId() === currentUser.id();\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.amount !== undefined) {\r\n      if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\r\n        errors.push('Amount must be a positive number');\r\n      }\r\n    }\r\n\r\n    if (attributes.accountDetails !== undefined) {\r\n      if (!attributes.accountDetails || typeof attributes.accountDetails !== 'string') {\r\n        errors.push('Account details are required');\r\n      } else if (attributes.accountDetails.trim().length < 5) {\r\n        errors.push('Account details must be at least 5 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformId !== undefined) {\r\n      if (!attributes.platformId || typeof attributes.platformId !== 'number') {\r\n        errors.push('Platform selection is required');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(', '),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save withdrawal request',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save withdrawal request',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this request',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete withdrawal request',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport { validateDepositPlatform } from '../utils/PlatformValidation';\r\nimport app from 'flarum/common/app';\r\n\r\nexport default class DepositPlatform extends Model {\r\n  name = Model.attribute<string>('name');\r\n  symbol = Model.attribute<string>('symbol');\r\n  network = Model.attribute<string>('network');\r\n  networkTypeId = Model.attribute('networkTypeId');\r\n  displayName = Model.attribute<string>('displayName');\r\n  minAmount = Model.attribute('minAmount');\r\n  maxAmount = Model.attribute('maxAmount');\r\n  fee = Model.attribute('fee');\r\n  address = Model.attribute('address');\r\n  qrCodeImageUrl = Model.attribute<string>('qrCodeImageUrl');\r\n  iconUrl = Model.attribute<string>('iconUrl');\r\n  iconClass = Model.attribute<string>('iconClass');\r\n  warningText = Model.attribute<string>('warningText');\r\n  networkConfig = Model.attribute('networkConfig');\r\n  isActive = Model.attribute('isActive');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n\r\n  // Relationships\r\n  networkType = Model.hasOne('networkType');\r\n\r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n\r\n  getFullDisplayName(): string {\r\n    const name = this.getDisplayName();\r\n    const network = this.network();\r\n    return network ? `${name} (${network})` : name;\r\n  }\r\n\r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    return amount >= min && (max === null || amount <= max);\r\n  }\r\n\r\n  getTotalCost(amount: number): number {\r\n    return amount + (this.fee() || 0);\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<DepositPlatform> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as DepositPlatform;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        'Cannot delete platform that has pending deposit records',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<DepositPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to modify this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): DepositPlatform {\r\n    const cloned = app.store.createRecord('deposit-platforms') as DepositPlatform;\r\n    \r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + ' (Copy)',\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      networkTypeId: this.networkTypeId(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      address: this.address(),\r\n      qrCodeImageUrl: this.qrCodeImageUrl(),\r\n      iconUrl: this.iconUrl(),\r\n      iconClass: this.iconClass(),\r\n      warningText: this.warningText(),\r\n      isActive: false // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== 'number' || amount <= 0) {\r\n      errors.push('Amount must be a positive number');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const min = this.minAmount() || 0;\r\n    if (amount < min) {\r\n      errors.push(`Amount must be at least ${min} ${this.symbol()}`);\r\n    }\r\n\r\n    const max = this.maxAmount();\r\n    if (max && amount > max) {\r\n      errors.push(`Amount cannot exceed ${max} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n    \r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const records = await app.store.find('deposit-records', {\r\n        filter: { platform: this.id(), status: 'pending' }\r\n      });\r\n      \r\n      const recordsArray = Array.isArray(records) ? records : [records];\r\n      return recordsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee() || 0;\r\n    if (fee === 0) {\r\n      return 'Free';\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  /**\r\n   * Generate deposit address for user\r\n   */\r\n  generateDepositAddress(_userId?: number): string {\r\n    const address = this.address();\r\n    \r\n    // For now, we return the static address\r\n    // In the future, this could be enhanced to support dynamic address generation\r\n    if (address) {\r\n      return address;\r\n    }\r\n    \r\n    throw new ServiceError(\r\n      'No deposit address configured for this platform',\r\n      ServiceErrorType.VALIDATION_ERROR\r\n    );\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    validateDepositPlatform(attributes, this.minAmount());\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save deposit platform',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save deposit platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete deposit platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\nimport DepositPlatform from './DepositPlatform';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport app from 'flarum/common/app';\r\n\r\nexport default class DepositRecord extends Model {\r\n  // Fixed: id() should return string to match Flarum's base Model interface\r\n  id = Model.attribute<string>('id');\r\n  userId = Model.attribute<number>('userId');\r\n  platformId = Model.attribute<number>('platformId');\r\n  platformAccount = Model.attribute<string>('platformAccount');\r\n  realName = Model.attribute<string>('realName');\r\n  amount = Model.attribute<number>('amount');\r\n  depositTime = Model.attribute('depositTime', Model.transformDate);\r\n  screenshotUrl = Model.attribute<string>('screenshotUrl');\r\n  userMessage = Model.attribute<string>('userMessage');\r\n  status = Model.attribute<string>('status');\r\n  processedAt = Model.attribute('processedAt', Model.transformDate);\r\n  processedBy = Model.attribute<number>('processedBy');\r\n  adminNotes = Model.attribute<string>('adminNotes');\r\n  creditedAmount = Model.attribute<number>('creditedAmount');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n\r\n  // Relationships\r\n  user = Model.hasOne<User>('user');\r\n  platform = Model.hasOne<DepositPlatform>('platform');\r\n  processedByUser = Model.hasOne<User>('processedByUser');\r\n\r\n  // Status constants\r\n  static STATUS_PENDING = 'pending';\r\n  static STATUS_APPROVED = 'approved';\r\n  static STATUS_REJECTED = 'rejected';\r\n\r\n  // Status check methods\r\n  isPending(): boolean {\r\n    return this.status() === DepositRecord.STATUS_PENDING;\r\n  }\r\n\r\n  isApproved(): boolean {\r\n    return this.status() === DepositRecord.STATUS_APPROVED;\r\n  }\r\n\r\n  isRejected(): boolean {\r\n    return this.status() === DepositRecord.STATUS_REJECTED;\r\n  }\r\n\r\n  getStatusColor(): string {\r\n    switch (this.status()) {\r\n      case DepositRecord.STATUS_PENDING:\r\n        return 'warning';\r\n      case DepositRecord.STATUS_APPROVED:\r\n        return 'success';\r\n      case DepositRecord.STATUS_REJECTED:\r\n        return 'error';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  // Display helpers\r\n  getStatusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`withdrawal.forum.deposit.status.${status}`).toString();\r\n  }\r\n\r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this deposit record with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<DepositRecord> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as DepositRecord;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this deposit record with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this deposit record',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this record for resubmission\r\n   */\r\n  clone(): DepositRecord {\r\n    const cloned = app.store.createRecord('deposit-records') as DepositRecord;\r\n    \r\n    // Copy relevant attributes but not status/timestamps\r\n    cloned.pushAttributes({\r\n      platformId: this.platformId(),\r\n      amount: this.amount(),\r\n      platformAccount: this.platformAccount(),\r\n      realName: this.realName(),\r\n      userMessage: this.userMessage(),\r\n      screenshotUrl: this.screenshotUrl()\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Get formatted amount string\r\n   */\r\n  getFormattedAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    return `${this.amount()} ${symbol}`.trim();\r\n  }\r\n\r\n  /**\r\n   * Get credited amount or original amount\r\n   */\r\n  getFinalAmount(): number {\r\n    return this.creditedAmount() || this.amount();\r\n  }\r\n\r\n  /**\r\n   * Get formatted credited amount\r\n   */\r\n  getFormattedFinalAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    const amount = this.getFinalAmount();\r\n    \r\n    if (this.creditedAmount() && this.creditedAmount() !== this.amount()) {\r\n      return `${amount} ${symbol} (credited: ${this.creditedAmount()})`.trim();\r\n    }\r\n    \r\n    return `${amount} ${symbol}`.trim();\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this record\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any record\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending records\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this record\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any record (including processed ones)\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending records\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this record's details\r\n   */\r\n  canView(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view any record\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own records\r\n    return this.userId() === currentUser.id();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can approve/reject this record\r\n   */\r\n  canProcess(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin() && this.isPending();\r\n  }\r\n\r\n  // Workflow methods\r\n\r\n  /**\r\n   * Approve this deposit record\r\n   */\r\n  async approve(creditedAmount?: number, adminNotes?: string): Promise<DepositRecord> {\r\n    if (!this.canProcess()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to approve this deposit',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: DepositRecord.STATUS_APPROVED,\r\n      processedAt: new Date(),\r\n      processedBy: app.session.user?.id()\r\n    };\r\n\r\n    if (creditedAmount !== undefined) {\r\n      attributes.creditedAmount = creditedAmount;\r\n    }\r\n\r\n    if (adminNotes) {\r\n      attributes.adminNotes = adminNotes;\r\n    }\r\n\r\n    return await this.save(attributes);\r\n  }\r\n\r\n  /**\r\n   * Reject this deposit record\r\n   */\r\n  async reject(reason?: string): Promise<DepositRecord> {\r\n    if (!this.canProcess()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to reject this deposit',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: DepositRecord.STATUS_REJECTED,\r\n      processedAt: new Date(),\r\n      processedBy: app.session.user?.id()\r\n    };\r\n\r\n    if (reason) {\r\n      attributes.adminNotes = reason;\r\n    }\r\n\r\n    return await this.save(attributes);\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.amount !== undefined) {\r\n      if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\r\n        errors.push('Amount must be a positive number');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformAccount !== undefined) {\r\n      if (!attributes.platformAccount || typeof attributes.platformAccount !== 'string') {\r\n        errors.push('Platform account is required');\r\n      }\r\n    }\r\n\r\n    if (attributes.realName !== undefined) {\r\n      if (!attributes.realName || typeof attributes.realName !== 'string') {\r\n        errors.push('Real name is required');\r\n      } else if (attributes.realName.trim().length < 2) {\r\n        errors.push('Real name must be at least 2 characters long');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformId !== undefined) {\r\n      if (!attributes.platformId || typeof attributes.platformId !== 'number') {\r\n        errors.push('Platform selection is required');\r\n      }\r\n    }\r\n\r\n    if (attributes.creditedAmount !== undefined) {\r\n      if (typeof attributes.creditedAmount !== 'number' || attributes.creditedAmount < 0) {\r\n        errors.push('Credited amount must be a non-negative number');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(', '),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save deposit record',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save deposit record',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this record',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete deposit record',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import Component, { ComponentAttrs } from 'flarum/common/Component';\r\nimport app from 'flarum/forum/app';\r\nimport type Mithril from 'mithril';\r\n\r\n/**\r\n * MoneyDisplay component shows the user's money balance with withdrawal button\r\n */\r\nexport default class MoneyDisplay extends Component<ComponentAttrs> {\r\n  view(): Mithril.Children {\r\n    if (!app.session.user) {\r\n      return null;\r\n    }\r\n\r\n    const moneyName: string = app.forum.attribute('antoinefr-money.moneyname') || '[money]';\r\n    const userMoneyText: string = moneyName.replace('[money]', app.session.user.attribute(\"money\"));\r\n    const iconUrl: string | null = app.forum.attribute('wusong8899-withdrawal.moneyIconUrl');\r\n\r\n    return (\r\n      <div\r\n        id=\"moneyDisplayContainer\"\r\n        className=\"client1-header-adv-wrapper clientCustomizeWithdrawalHeaderTotalMoney\"\r\n      >\r\n        <div className=\"clientCustomizeWithdrawalHeaderText\">\r\n          {iconUrl && iconUrl.trim() && (\r\n            <span style={{  \r\n              borderRadius: '50%', \r\n              padding: '6px 8px', \r\n              marginRight: '8px',\r\n              display: 'inline-flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}>\r\n              <img \r\n                src={iconUrl} \r\n                alt=\"Money icon\" \r\n                style={{ \r\n                  width: '20px', \r\n                  height: '20px'\r\n                }}\r\n                onError={(e: Event) => {\r\n                  // Hide image if it fails to load\r\n                  const target = e.target as HTMLImageElement;\r\n                  target.style.display = 'none';\r\n                }}\r\n              />\r\n            </span>\r\n          )}\r\n          {userMoneyText}\r\n        </div>\r\n        \r\n        <div className=\"clientCustomizeWithdrawalHeaderIcon\">\r\n          <i className=\"fas fa-wallet\" />\r\n        </div>\r\n\r\n        <div className=\"clientCustomizeWithdrawalButtons\">\r\n          <div\r\n            className=\"clientCustomizeWithdrawalButton\"\r\n            onclick={this.handleWithdrawalClick.bind(this)}\r\n            title=\"提款\"\r\n          >\r\n            <i className=\"fas fa-money-bill-transfer\" />\r\n            <span style={{ marginLeft: '4px', fontSize: '12px' }}>提款</span>\r\n          </div>\r\n          <div\r\n            className=\"clientCustomizeDepositButton\"\r\n            onclick={this.handleDepositClick.bind(this)}\r\n            title=\"存款\"\r\n            style={{ marginLeft: '8px' }}\r\n          >\r\n            <i className=\"fas fa-coins\" />\r\n            <span style={{ marginLeft: '4px', fontSize: '12px' }}>存款</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle withdrawal button click\r\n   */\r\n  private handleWithdrawalClick(e: Event): void {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    // Navigate to funds page with withdrawal tab\r\n    window.location.href = '/funds?tab=withdrawal';\r\n  }\r\n\r\n  /**\r\n   * Handle deposit button click\r\n   */\r\n  private handleDepositClick(e: Event): void {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    // Navigate to funds page with deposit tab\r\n    window.location.href = '/funds?tab=deposit';\r\n  }\r\n}","import Component, { ComponentAttrs } from 'flarum/common/Component';\nimport app from 'flarum/forum/app';\nimport type Mithril from 'mithril';\n\n/**\n * MobileMoneyDisplay component for mobile navigation bar\n * Shows user's money balance with withdrawal button in mobile navigation\n */\nexport default class MobileMoneyDisplay extends Component<ComponentAttrs> {\n  view(): Mithril.Children {\n    // Note: Mobile detection and user authentication are now handled in index.ts\n    // This component assumes it should render when called\n    const userMoney = app.session.user?.attribute('money') || 0;\n    const iconUrl: string | null = app.forum.attribute('wusong8899-withdrawal.moneyIconUrl');\n\n    return (\n      <div className=\"Navigation-mobileMoneyDisplay\">\n        <div \n          className=\"Navigation-moneySection\"\n          onclick={this.handleWithdrawalClick.bind(this)}\n          title={`余额: ${userMoney} - 点击提款`}\n        >\n          {/* 货币图标和金额显示 */}\n          <div className=\"Navigation-moneyText\">\n            {iconUrl && iconUrl.trim() && (\n              <span style={{  \n                borderRadius: '50%', \n                padding: '4px 6px', \n                marginRight: '6px',\n                display: 'inline-flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}>\n                <img \n                  src={iconUrl} \n                  alt=\"Money icon\" \n                  style={{ \n                    width: '18px', \n                    height: '18px'\n                  }}\n                  onError={(e: Event) => {\n                    // Hide image if it fails to load\n                    const target = e.target as HTMLImageElement;\n                    target.style.display = 'none';\n                  }}\n                />\n              </span>\n            )}\n            <span className=\"Navigation-moneyAmount\">{userMoney}</span>\n          </div>\n          \n          {/* 提款按钮 */}\n          <div className=\"Navigation-withdrawalButton\">\n            <i className=\"fas fa-money-bill-transfer\" />\n            <span>提款</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Handle withdrawal button click\n   */\n  private handleWithdrawalClick(e: Event): void {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log('MobileMoneyDisplay clicked!'); // 调试日志\n    \n    try {\n      // Navigate to unified funds page with withdrawal tab\n      window.location.href = '/funds?tab=withdrawal';\n    } catch (error) {\n      console.error('Navigation error:', error);\n      // 备用方案\n      window.location.href = '/funds?tab=withdrawal';\n    }\n  }\n}","import app from 'flarum/forum/app';\r\n\r\n/**\r\n * ConfigManager utility for flarum-withdrawal extension\r\n */\r\nexport class ConfigManager {\r\n  private static instance: ConfigManager;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): ConfigManager {\r\n    if (!ConfigManager.instance) {\r\n      ConfigManager.instance = new ConfigManager();\r\n    }\r\n    return ConfigManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Check if current page is the tags page (main forum page)\r\n   */\r\n  public isTagsPage(): boolean {\r\n    try {\r\n      const routeName = app.current?.get('routeName');\r\n      return routeName === 'index';\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}","/**\n * Check if the current device is mobile based on screen width\n */\nexport function isMobile(): boolean {\n  return window.innerWidth <= 767;\n}\n\n/**\n * Check if the current device is tablet\n */\nexport function isTablet(): boolean {\n  return window.innerWidth >= 768 && window.innerWidth <= 1024;\n}\n\n/**\n * Check if the current device is desktop\n */\nexport function isDesktop(): boolean {\n  return window.innerWidth > 1024;\n}\n\n/**\n * Check if the current device is mobile or tablet\n */\nexport function isMobileOrTablet(): boolean {\n  return isMobile() || isTablet();\n}\n\n/**\n * Get the current breakpoint\n */\nexport function getCurrentBreakpoint(): 'mobile' | 'tablet' | 'desktop' {\n  if (isMobile()) return 'mobile';\n  if (isTablet()) return 'tablet';\n  return 'desktop';\n}\n\n/**\n * Check if touch is supported\n */\nexport function isTouchDevice(): boolean {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n}\n\n// For backward compatibility\nexport const MobileDetector = {\n  isMobile,\n  isTablet,\n  isDesktop,\n  isMobileOrTablet,\n  getCurrentBreakpoint,\n  isTouchDevice\n};","import app from 'flarum/forum/app';\r\nimport { extend } from 'flarum/common/extend';\r\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\r\nimport Navigation from 'flarum/common/components/Navigation';\r\nimport FundsPage from './components/FundsPage';\r\nimport WithdrawalPlatform from '../common/models/WithdrawalPlatform';\r\nimport WithdrawalRequest from '../common/models/WithdrawalRequest';\r\nimport DepositPlatform from '../common/models/DepositPlatform';\r\nimport DepositRecord from '../common/models/DepositRecord';\r\nimport MoneyDisplay from './components/MoneyDisplay';\r\nimport MobileMoneyDisplay from './components/MobileMoneyDisplay';\r\nimport { ConfigManager } from './utils/ConfigManager';\r\nimport { MobileDetector } from './utils/MobileDetector';\r\n\r\napp.initializers.add('wusong8899-withdrawal', () => {\r\n  // Register models in store\r\n  app.store.models['withdrawal-platforms'] = WithdrawalPlatform;\r\n  app.store.models['withdrawal-requests'] = WithdrawalRequest;\r\n  app.store.models['deposit-platforms'] = DepositPlatform;\r\n  app.store.models['deposit-records'] = DepositRecord;\r\n\r\n  // New unified funds page\r\n  app.routes.funds = { path: '/funds', component: FundsPage };\r\n  \r\n  // Legacy routes for backward compatibility - redirect to funds page\r\n  app.routes.withdrawal = { path: '/withdrawal', component: FundsPage };\r\n  app.routes.deposit = { path: '/deposit', component: FundsPage };\r\n\r\n\r\n  // Add money display to header primary (desktop)\r\n  extend(HeaderPrimary.prototype, 'view', function (vnode) {\r\n    // Only add on tags page for logged-in users and on desktop\r\n    const configManager = ConfigManager.getInstance();\r\n    if (app.session.user && configManager.isTagsPage() && !MobileDetector.isMobile()) {\r\n      // Add money display to the header primary view\r\n      vnode.children.push(MoneyDisplay.component());\r\n    }\r\n  });\r\n\r\n  // Add mobile money display to navigation using component extension\r\n  extend(Navigation.prototype, 'view', function (vnode) {\r\n    // Only work on mobile devices (viewport width <= 768px)\r\n    if (window.innerWidth > 768) {\r\n      return;\r\n    }\r\n\r\n    // Only work on homepage\r\n    const routeName = app.current.get('routeName');\r\n    if (routeName !== 'tags') {\r\n      return;\r\n    }\r\n\r\n    // Only work for logged-in users\r\n    if (!app.session.user) {\r\n      return;\r\n    }\r\n\r\n    if (!vnode || !vnode.children || !Array.isArray(vnode.children)) {\r\n      return;\r\n    }\r\n\r\n    // Check if we already added the money display component to avoid duplication\r\n    const hasMoneyDisplay = vnode.children.some((child: any) =>\r\n      child && child.attrs && child.attrs.className &&\r\n      child.attrs.className.includes('Navigation-mobileMoneyDisplay')\r\n    );\r\n\r\n    if (!hasMoneyDisplay) {\r\n      // Add MobileMoneyDisplay component to navigation\r\n      vnode.children.push(MobileMoneyDisplay.component({\r\n        className: \"item-withdrawal Navigation-mobileMoneyDisplay\"\r\n      }));\r\n    }\r\n  });\r\n});"],"names":["getId","obj","getAttr","attr","getIdString","findPlatformById","platforms","platformId","platformIdStr","p","pId","getDateFromAttr","dateStr","STATUS_CLASS_MAP","DEFAULTS","ICONS","PlatformIcon","vnode","platform","className","size","icon","iconUrl","iconClass","name","symbol","sizeClass","e","target","fallbackIcon","fallbackIconClass","finalIconClass","finalSymbol","PlatformSelector","Component","selectedPlatform","showDropdown","validPlatforms","app","onPlatformSelect","onAmountChange","AmountInput","amount","loadingBalance","onFillAllAmount","minAmount","maxAmount","fee","Button","AddressInput","accountDetails","saveAddress","onAccountDetailsChange","onSaveAddressToggle","m","text","error","MessageInput","message","onMessageChange","SubmitButton","submitting","canSubmit","onSubmit","numericAmount","finalAmount","WithdrawalForm","formData","onFormDataChange","StatusBadge","status","statusClass","statusLabel","EmptyState","iconName","title","description","LoadingState","props","LoadingIndicator","TransactionHistory","transactions","loading","type","transaction","transactionId","statusColor","createdAt","platformAccount","realName","depositTime","screenshotUrl","userMessage","processedAt","adminNotes","creditedAmount","humanTime","hash","DepositPlatformDropdown","element","network","parts","groupedPlatforms","currency","currencyPlatforms","grouped","a","b","networkA","networkB","AddressDisplay","address","onCopy","ImageDisplay","DepositRecordForm","now","localDateTime","Stream","withAttr","ServiceErrorType","ServiceError","code","details","WithdrawalService","options","queryParams","results","id","attributes","model","data","userId","targetUserId","queryOptions","request","reason","currentUser","userBalance","totalRequired","required","field","defaultMessage","apiError","withdrawalService","DepositService","addressService","__vitePreload","AddressService$1","deposit","confirmedAmount","transactionHash","depositService","PlatformService","modelType","currentStatus","config","errors","requestType","records","recordArray","r","sum","sortBy","direction","sortString","_platform","platformService","AddressService","_userId","extractErrorMessage","fallback","firstError","response","FundsPage","Page","tabParam","pathTab","path","tab","titleKey","activeTab","warningText","allDepositHistory","dateA","url","availableAmount","amountNum","errorMessage","requests","forceRefresh","updatedUser","validateCommonFields","validateAmountFields","currentMinAmount","validateDepositFields","throwIfErrors","validateWithdrawalPlatform","validateDepositPlatform","WithdrawalPlatform","Model","min","max","cloned","totalCost","feeText","WITHDRAWAL_STATUS","WithdrawalRequest","DepositPlatform","_DepositRecord","DepositRecord","MoneyDisplay","userMoneyText","MobileMoneyDisplay","userMoney","ConfigManager","isMobile","isTablet","isDesktop","isMobileOrTablet","getCurrentBreakpoint","isTouchDevice","MobileDetector","extend","HeaderPrimary","configManager","Navigation","child"],"mappings":"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"}