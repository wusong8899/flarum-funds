{"version":3,"file":"forum.js","sources":["../src/forum/components/withdrawal/utils/constants.ts","../src/common/utils/IconResolver.ts","../src/forum/components/withdrawal/common/PlatformIcon.tsx","../src/forum/components/withdrawal/utils/modelHelpers.ts","../src/forum/components/withdrawal/forms/PlatformSelector.tsx","../src/forum/components/withdrawal/forms/AmountInput.tsx","../src/forum/components/withdrawal/forms/AddressInput.tsx","../src/forum/components/withdrawal/forms/MessageInput.tsx","../src/forum/components/withdrawal/forms/SubmitButton.tsx","../src/forum/components/withdrawal/forms/WithdrawalForm.tsx","../src/forum/components/withdrawal/common/StatusBadge.tsx","../src/forum/components/withdrawal/common/EmptyState.tsx","../src/forum/components/withdrawal/common/LoadingState.tsx","../src/forum/components/shared/TransactionHistory.tsx","../src/forum/components/deposit/selectors/DepositPlatformDropdown.tsx","../src/forum/components/deposit/components/AddressDisplay.tsx","../src/forum/components/deposit/components/ImageDisplay.tsx","../src/forum/components/deposit/forms/DepositForm.tsx","../src/common/services/DepositService.ts","../src/common/types/services.ts","../src/common/services/WithdrawalService.ts","../src/common/services/PlatformService.ts","../src/common/types/api.ts","../src/forum/components/FundsPage.tsx","../src/common/utils/PlatformValidation.ts","../src/common/models/WithdrawalPlatform.ts","../src/common/types/index.ts","../src/common/models/WithdrawalRequest.ts","../src/common/models/DepositPlatform.ts","../src/common/models/DepositRecord.ts","../src/forum/components/MoneyDisplay.tsx","../src/forum/components/MobileMoneyDisplay.tsx","../src/forum/utils/ConfigManager.ts","../src/forum/utils/MobileDetector.ts","../src/forum/index.ts"],"sourcesContent":["import type { StatusType, StatusClass } from '../types/interfaces';\r\n\r\n/**\r\n * Withdrawal request status constants\r\n */\r\nexport const WITHDRAWAL_STATUS: Record<string, StatusType> = {\r\n  PENDING: 'pending',\r\n  APPROVED: 'approved',\r\n  REJECTED: 'rejected',\r\n} as const;\r\n\r\n/**\r\n * Status class mapping for UI styling\r\n */\r\nexport const STATUS_CLASS_MAP: Record<StatusType, StatusClass> = {\r\n  pending: 'warning',\r\n  approved: 'success',\r\n  rejected: 'danger',\r\n} as const;\r\n\r\n/**\r\n * Tab types\r\n */\r\nexport const TABS = {\r\n  WITHDRAWAL: 'funds',\r\n  HISTORY: 'history',\r\n} as const;\r\n\r\n/**\r\n * Default values\r\n */\r\nexport const DEFAULTS = {\r\n  MIN_AMOUNT: 0.001,\r\n  MAX_AMOUNT: 10,\r\n  FEE: 0.0005,\r\n  BALANCE_PRECISION: 8,\r\n} as const;\r\n\r\n/**\r\n * CSS class names\r\n */\r\nexport const CSS_CLASSES = {\r\n  FUNDS_PAGE: 'FundsPage',\r\n  MODAL: 'FundsPage-modal',\r\n  HEADER: 'FundsPage-header',\r\n  TABS: 'FundsPage-tabs',\r\n  TAB: 'FundsPage-tab',\r\n  TAB_ACTIVE: 'active',\r\n  CONTENT: 'FundsPage-content',\r\n  LOADING: 'FundsPage-loading',\r\n  EMPTY_STATE: 'FundsPage-emptyState',\r\n} as const;\r\n\r\n/**\r\n * Icon names\r\n */\r\nexport const ICONS = {\r\n  CLOSE: 'fas fa-times',\r\n  COINS: 'fas fa-coins',\r\n  HISTORY: 'fas fa-history',\r\n  BITCOIN: 'fas fa-bitcoin',\r\n  CHEVRON_DOWN: 'fas fa-chevron-down',\r\n  PASTE: 'fas fa-paste',\r\n  BOOKMARK: 'fas fa-bookmark',\r\n} as const;","import type Mithril from \"mithril\";\r\nimport type DepositPlatform from \"../models/DepositPlatform\";\r\nimport type WithdrawalPlatform from \"../models/WithdrawalPlatform\";\r\n\r\ndeclare const m: Mithril.Static;\r\n\r\n/**\r\n * Simple icon representation interface\r\n */\r\nexport interface IconRepresentation {\r\n  type: \"url\" | \"class\" | \"fallback\";\r\n  value: string;\r\n  alt?: string;\r\n}\r\n\r\n/**\r\n * Helper function to get the platform icon\r\n */\r\nexport function getBestPlatformIcon(\r\n  platform: DepositPlatform | WithdrawalPlatform\r\n): IconRepresentation {\r\n  const platformIconUrl = platform.platformIconUrl();\r\n  if (platformIconUrl) {\r\n    return {\r\n      type: \"url\",\r\n      value: platformIconUrl,\r\n      alt: platform.name() || \"Platform icon\",\r\n    };\r\n  } else {\r\n    console.log(\"No platform icon URL found\");\r\n  }\r\n\r\n  const platformIconClass = platform.platformIconClass();\r\n  if (platformIconClass) {\r\n    return {\r\n      type: \"class\",\r\n      value: platformIconClass,\r\n    };\r\n  } else {\r\n    console.log(\"No platform icon class found\");\r\n  }\r\n\r\n  // Fallback\r\n  return {\r\n    type: \"fallback\",\r\n    value: \"fas fa-coins\",\r\n  };\r\n}\r\n\r\n/**\r\n * Render an icon representation as a Mithril element\r\n */\r\nexport function renderIcon(\r\n  iconRep: IconRepresentation,\r\n  additionalClasses: string = \"\"\r\n): Mithril.Children {\r\n  const baseClasses = \"icon\";\r\n  const classes = additionalClasses\r\n    ? `${baseClasses} ${additionalClasses}`\r\n    : baseClasses;\r\n\r\n  switch (iconRep.type) {\r\n    case \"url\":\r\n      return m(\"img\", {\r\n        src: iconRep.value,\r\n        alt: iconRep.alt || \"Icon\",\r\n        className: `${classes} icon--image`,\r\n        style: {\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          objectFit: \"contain\",\r\n        },\r\n      });\r\n\r\n    case \"class\":\r\n      return m(\"i\", {\r\n        className: `${classes} ${iconRep.value}`,\r\n        \"aria-hidden\": \"true\",\r\n      });\r\n\r\n    case \"fallback\":\r\n    default:\r\n      return m(\"i\", {\r\n        className: `${classes} ${iconRep.value}`,\r\n        \"aria-hidden\": \"true\",\r\n      });\r\n  }\r\n}\r\n","import icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport { ICONS } from '../utils/constants';\nimport { getBestPlatformIcon, renderIcon } from '../../../../common/utils/IconResolver';\n\ninterface PlatformIconProps {\n  platform: WithdrawalPlatform | null;\n  className?: string;\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport default class PlatformIcon {\n  view(vnode: Mithril.Vnode<PlatformIconProps>): Mithril.Children {\n    const { platform, className = '', size = 'medium' } = vnode.attrs;\n\n    // Add null checks to prevent errors\n    if (!platform) {\n      return icon(ICONS.COINS, { className: `crypto-icon default ${className}` });\n    }\n\n    // Size classes\n    const sizeClass = `platform-icon-${size}`;\n    const finalClasses = `crypto-icon ${sizeClass} ${className}`;\n\n    // Use the new three-tier icon system\n    const bestIcon = getBestPlatformIcon(platform);\n    \n    return renderIcon(bestIcon, finalClasses);\n  }\n}","/**\n * Helper functions for accessing Flarum model data\n * These handle both Model instances and plain object data\n */\n\n/**\n * Get ID from Flarum model or plain object\n */\nexport const getId = (obj: any): string | number => {\n  return typeof obj.id === 'function' ? obj.id() : obj.id;\n};\n\n/**\n * Get attribute value from Flarum model or plain object\n */\nexport const getAttr = (obj: any, attr: string): any => {\n  if (typeof obj[attr] === 'function') {\n    return obj[attr]();\n  }\n  return obj.attributes ? obj.attributes[attr] : obj[attr];\n};\n\n/**\n * Get string representation of ID for comparison\n */\nexport const getIdString = (obj: any): string => {\n  return String(getId(obj));\n};\n\n/**\n * Find platform by ID with proper type handling\n */\nexport const findPlatformById = (platforms: any[], platformId: string | number): any => {\n  const platformIdStr = String(platformId);\n  return platforms.find(p => {\n    const pId = getId(p);\n    return String(pId) === platformIdStr;\n  });\n};\n\n/**\n * Safely extract and convert date attribute to Date object\n */\nexport const getDateFromAttr = (obj: any, attr: string): Date => {\n  const dateStr = getAttr(obj, attr);\n  return dateStr ? new Date(dateStr) : new Date();\n};","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\r\nimport PlatformIcon from '../common/PlatformIcon';\r\nimport { getAttr } from '../utils/modelHelpers';\r\nimport { ICONS } from '../utils/constants';\r\n\r\ninterface PlatformSelectorProps {\r\n  platforms: WithdrawalPlatform[];\r\n  selectedPlatform: WithdrawalPlatform | null;\r\n  onPlatformSelect: (platform: WithdrawalPlatform) => void;\r\n  onAmountChange?: () => void; // Callback when platform changes to clear amount\r\n}\r\n\r\ninterface PlatformSelectorState {\r\n  showDropdown: boolean;\r\n}\r\n\r\nexport default class PlatformSelector extends Component<PlatformSelectorProps, PlatformSelectorState> {\r\n  oninit(vnode: Mithril.Vnode<PlatformSelectorProps, PlatformSelectorState>) {\r\n    super.oninit(vnode);\r\n    this.state = {\r\n      showDropdown: false,\r\n    };\r\n  }\r\n\r\n  view(): Mithril.Children {\r\n    const { selectedPlatform } = this.attrs;\r\n    const { showDropdown } = this.state;\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawal-PlatformSelector\">\r\n        <div className=\"FundsPage-withdrawal-Label\">提取平台</div>\r\n        <div \r\n          className=\"FundsPage-withdrawal-PlatformDropdown\" \r\n          onclick={() => this.toggleDropdown()}\r\n        >\r\n          <div className=\"FundsPage-withdrawal-PlatformSelected\">\r\n            <div className=\"FundsPage-withdrawal-PlatformInfo\">\r\n              <div className=\"FundsPage-withdrawal-PlatformIcon\">\r\n                <PlatformIcon \r\n                  platform={selectedPlatform} \r\n                  size=\"medium\"\r\n                />\r\n              </div>\r\n              <div className=\"FundsPage-withdrawal-PlatformDetails\">\r\n                <div className=\"FundsPage-withdrawal-PlatformName\">\r\n                  {this.getPlatformName(selectedPlatform)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {icon(ICONS.CHEVRON_DOWN, { className: 'FundsPage-withdrawal-DropdownIcon' })}\r\n        </div>\r\n\r\n        {showDropdown && this.renderPlatformDropdown()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private toggleDropdown(): void {\r\n    this.state.showDropdown = !this.state.showDropdown;\r\n  }\r\n\r\n  private getPlatformName(platform: WithdrawalPlatform | null): string {\r\n    if (!platform) {\r\n      return '请选择平台';\r\n    }\r\n    return getAttr(platform, 'displayName') || getAttr(platform, 'name') || '请选择平台';\r\n  }\r\n\r\n  private renderPlatformDropdown(): Mithril.Children {\r\n    const { platforms } = this.attrs;\r\n\r\n    // Ensure platforms array is valid and filter out invalid items\r\n    const validPlatforms = (platforms || []).filter(platform => !!platform);\r\n\r\n    if (validPlatforms.length === 0) {\r\n      return (\r\n        <div className=\"FundsPage-withdrawal-DropdownMenu\">\r\n          <div className=\"FundsPage-withdrawal-DropdownItem FundsPage-withdrawal-NoData\">\r\n            {app.translator.trans('funds.forum.no_platforms')}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawal-DropdownMenu\">\r\n        {validPlatforms.map(platform => (\r\n          <div \r\n            key={platform.id()}\r\n            className=\"FundsPage-withdrawal-DropdownItem\"\r\n            onclick={() => this.selectPlatform(platform)}\r\n          >\r\n            <div className=\"FundsPage-withdrawal-PlatformIcon\">\r\n              <PlatformIcon platform={platform} size=\"small\" />\r\n            </div>\r\n            <div className=\"FundsPage-withdrawal-PlatformName\">\r\n              {getAttr(platform, 'displayName') || getAttr(platform, 'name')}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private selectPlatform(platform: WithdrawalPlatform): void {\r\n    const { onPlatformSelect, onAmountChange } = this.attrs;\r\n    \r\n    onPlatformSelect(platform);\r\n    this.state.showDropdown = false;\r\n    \r\n    // Clear amount when switching platforms\r\n    if (onAmountChange) {\r\n      onAmountChange();\r\n    }\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\r\nimport { getAttr } from '../utils/modelHelpers';\r\nimport { DEFAULTS, ICONS } from '../utils/constants';\r\n\r\ninterface AmountInputProps {\r\n  amount: string;\r\n  selectedPlatform: WithdrawalPlatform | null;\r\n  loadingBalance: boolean;\r\n  onAmountChange: (amount: string) => void;\r\n  onFillAllAmount: () => void;\r\n}\r\n\r\nexport default class AmountInput extends Component<AmountInputProps> {\r\n  view(): Mithril.Children {\r\n    const { \r\n      amount, \r\n      selectedPlatform, \r\n      loadingBalance,\r\n      onAmountChange,\r\n      onFillAllAmount \r\n    } = this.attrs;\r\n\r\n    const minAmount = this.getMinAmount(selectedPlatform);\r\n    const maxAmount = this.getMaxAmount(selectedPlatform);\r\n    const fee = this.getFee(selectedPlatform);\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawal-AmountSection\">\r\n        <div className=\"FundsPage-withdrawal-FormGroup\">\r\n          <div className=\"FundsPage-withdrawal-Label\">\r\n            {app.translator.trans('funds.forum.form.amount')}\r\n          </div>\r\n\r\n          <div className=\"FundsPage-withdrawal-AmountInput\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"FundsPage-withdrawal-Input\"\r\n              placeholder=\"0.00000000\"\r\n              value={amount}\r\n              oninput={(e: Event) => onAmountChange((e.target as HTMLInputElement).value)}\r\n            />\r\n            <Button\r\n              className=\"FundsPage-withdrawal-AllButton\"\r\n              onclick={onFillAllAmount}\r\n              disabled={loadingBalance}\r\n            >\r\n              {app.translator.trans('funds.forum.form.all_button')}\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"FundsPage-withdrawal-AmountLimits\">\r\n            <div className=\"FundsPage-withdrawal-LimitRow\">\r\n              <span className=\"FundsPage-withdrawal-LimitLabel\">\r\n                {app.translator.trans('funds.forum.limits.min_max')}\r\n              </span>\r\n              <span className=\"FundsPage-withdrawal-LimitValue\">\r\n                {icon(ICONS.COINS)} {minAmount} ~ {maxAmount}\r\n              </span>\r\n            </div>\r\n            <div className=\"FundsPage-withdrawal-LimitRow\">\r\n              <span className=\"FundsPage-withdrawal-LimitLabel\">\r\n                {app.translator.trans('funds.forum.limits.fee')}\r\n              </span>\r\n              <span className=\"FundsPage-withdrawal-LimitValue\">\r\n                {icon(ICONS.COINS)} {fee}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getMinAmount(platform: WithdrawalPlatform | null): number {\r\n    if (!platform) return DEFAULTS.MIN_AMOUNT;\r\n    return getAttr(platform, 'minAmount') || DEFAULTS.MIN_AMOUNT;\r\n  }\r\n\r\n  private getMaxAmount(platform: WithdrawalPlatform | null): number {\r\n    if (!platform) return DEFAULTS.MAX_AMOUNT;\r\n    return getAttr(platform, 'maxAmount') || DEFAULTS.MAX_AMOUNT;\r\n  }\r\n\r\n  private getFee(platform: WithdrawalPlatform | null): number {\r\n    if (!platform) return DEFAULTS.FEE;\r\n    return getAttr(platform, 'fee') || DEFAULTS.FEE;\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\r\nimport { getAttr } from '../utils/modelHelpers';\r\nimport { ICONS } from '../utils/constants';\r\nimport m from 'mithril';\r\n\r\ninterface AddressInputProps {\r\n  accountDetails: string;\r\n  selectedPlatform: WithdrawalPlatform | null;\r\n  onAccountDetailsChange: (details: string) => void;\r\n}\r\n\r\nexport default class AddressInput extends Component<AddressInputProps> {\r\n  view(): Mithril.Children {\r\n    const { \r\n      accountDetails, \r\n      selectedPlatform, \r\n      onAccountDetailsChange\r\n    } = this.attrs;\r\n\r\n    const symbol = this.getSymbol(selectedPlatform);\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawal-AddressSection\">\r\n        <div className=\"FundsPage-withdrawal-FormGroup\">\r\n          <div className=\"FundsPage-withdrawal-AddressHeader\">\r\n            <span className=\"FundsPage-withdrawal-Label\">\r\n              {app.translator.trans('funds.forum.form.address', { symbol })}\r\n              <span className=\"FundsPage-withdrawal-Required\">*</span>\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"FundsPage-withdrawal-AddressInput\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"FundsPage-withdrawal-Input\"\r\n              placeholder={app.translator.trans('funds.forum.form.address_placeholder')}\r\n              value={accountDetails}\r\n              oninput={(e: Event) => onAccountDetailsChange((e.target as HTMLInputElement).value)}\r\n            />\r\n            <button \r\n              className=\"FundsPage-withdrawal-PasteButton\" \r\n              onclick={() => this.pasteFromClipboard()}\r\n            >\r\n              {icon(ICONS.PASTE)}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getSymbol(platform: WithdrawalPlatform | null): string {\r\n    if (!platform) return '';\r\n    return getAttr(platform, 'symbol') || '';\r\n  }\r\n\r\n  private async pasteFromClipboard(): Promise<void> {\r\n    const { onAccountDetailsChange } = this.attrs;\r\n    \r\n    try {\r\n      if (navigator.clipboard && navigator.clipboard.readText) {\r\n        const text = await navigator.clipboard.readText();\r\n        onAccountDetailsChange(text.trim());\r\n        m.redraw();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to read from clipboard:', error);\r\n      app.alerts.show({\r\n        type: 'error',\r\n        dismissible: true\r\n      }, app.translator.trans('funds.forum.clipboard_error'));\r\n    }\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport type Mithril from 'mithril';\r\n\r\ninterface MessageInputProps {\r\n  message: string;\r\n  onMessageChange: (message: string) => void;\r\n}\r\n\r\nexport default class MessageInput extends Component<MessageInputProps> {\r\n  view(): Mithril.Children {\r\n    const { \r\n      message,\r\n      onMessageChange\r\n    } = this.attrs;\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawal-MessageSection\">\r\n        <div className=\"FundsPage-withdrawal-FormGroup\">\r\n          <span className=\"FundsPage-withdrawal-Label\">\r\n            {app.translator.trans('funds.forum.form.message')}\r\n          </span>\r\n          <textarea\r\n            className=\"FundsPage-withdrawal-Textarea\"\r\n            placeholder={app.translator.trans('funds.forum.form.message_placeholder')}\r\n            value={message}\r\n            rows={3}\r\n            maxlength={500}\r\n            oninput={(e: Event) => onMessageChange((e.target as HTMLTextAreaElement).value)}\r\n          />\r\n          <div className=\"FundsPage-withdrawal-HelperText\">\r\n            {app.translator.trans('funds.forum.form.message_helper')} ({message.length}/500)\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\r\nimport { getAttr } from '../utils/modelHelpers';\r\nimport { DEFAULTS } from '../utils/constants';\r\n\r\ninterface SubmitButtonProps {\r\n  amount: string;\r\n  selectedPlatform: WithdrawalPlatform | null;\r\n  accountDetails: string;\r\n  submitting: boolean;\r\n  canSubmit: boolean;\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport default class SubmitButton extends Component<SubmitButtonProps> {\r\n  view(): Mithril.Children {\r\n    const { \r\n      amount, \r\n      selectedPlatform, \r\n      submitting, \r\n      canSubmit, \r\n      onSubmit \r\n    } = this.attrs;\r\n\r\n    const numericAmount = parseFloat(amount) || 0;\r\n    const fee = this.getFee(selectedPlatform);\r\n    const finalAmount = Math.max(0, numericAmount - fee);\r\n    const symbol = this.getSymbol(selectedPlatform);\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawal-SubmitSection\">\r\n        <Button\r\n          className=\"FundsPage-withdrawal-SubmitButton\"\r\n          loading={submitting}\r\n          disabled={!canSubmit}\r\n          onclick={onSubmit}\r\n        >\r\n          {app.translator.trans('funds.forum.form.submit')}\r\n        </Button>\r\n\r\n        {numericAmount > 0 && (\r\n          <div className=\"FundsPage-withdrawal-FinalAmount\">\r\n            {app.translator.trans('funds.forum.final_amount', { \r\n              amount: finalAmount.toFixed(DEFAULTS.BALANCE_PRECISION), \r\n              symbol \r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getFee(platform: WithdrawalPlatform | null): number {\r\n    if (!platform) return DEFAULTS.FEE;\r\n    return getAttr(platform, 'fee') || DEFAULTS.FEE;\r\n  }\r\n\r\n  private getSymbol(platform: WithdrawalPlatform | null): string {\r\n    if (!platform) return '';\r\n    return getAttr(platform, 'symbol') || '';\r\n  }\r\n}","import Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\nimport type { WithdrawalFormData } from '../types/interfaces';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport PlatformSelector from './PlatformSelector';\nimport AmountInput from './AmountInput';\nimport AddressInput from './AddressInput';\nimport MessageInput from './MessageInput';\nimport SubmitButton from './SubmitButton';\n\ninterface WithdrawalFormProps {\n  platforms: WithdrawalPlatform[];\n  formData: WithdrawalFormData;\n  loadingBalance: boolean;\n  submitting: boolean;\n  onFormDataChange: (data: Partial<WithdrawalFormData>) => void;\n  onFillAllAmount: () => void;\n  onSubmit: () => void;\n}\n\nexport default class WithdrawalForm extends Component<WithdrawalFormProps> {\n  view(): Mithril.Children {\n    const { \n      platforms, \n      formData, \n      loadingBalance,\n      submitting,\n      onFormDataChange,\n      onFillAllAmount,\n      onSubmit \n    } = this.attrs;\n\n    return [\n      <PlatformSelector \n        platforms={platforms}\n        selectedPlatform={formData.selectedPlatform}\n        onPlatformSelect={(platform: any) => onFormDataChange({ selectedPlatform: platform })}\n        onAmountChange={() => onFormDataChange({ amount: '' })}\n      />,\n      \n      <AmountInput \n        amount={formData.amount}\n        selectedPlatform={formData.selectedPlatform}\n        loadingBalance={loadingBalance}\n        onAmountChange={(amount: any) => onFormDataChange({ amount })}\n        onFillAllAmount={onFillAllAmount}\n      />,\n      \n      <AddressInput \n        accountDetails={formData.accountDetails}\n        selectedPlatform={formData.selectedPlatform}\n        onAccountDetailsChange={(accountDetails: any) => onFormDataChange({ accountDetails })}\n      />,\n      \n      <MessageInput \n        message={formData.message}\n        onMessageChange={(message: any) => onFormDataChange({ message })}\n      />,\n      \n      <SubmitButton \n        amount={formData.amount}\n        selectedPlatform={formData.selectedPlatform}\n        accountDetails={formData.accountDetails}\n        submitting={submitting}\n        canSubmit={this.canSubmit()}\n        onSubmit={onSubmit}\n      />\n    ];\n  }\n\n  private canSubmit(): boolean {\n    const { formData, submitting } = this.attrs;\n    const { selectedPlatform, amount, accountDetails } = formData;\n\n    return !!(\n      selectedPlatform &&\n      amount &&\n      accountDetails &&\n      !submitting &&\n      parseFloat(amount) > 0\n    );\n  }\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport type Mithril from 'mithril';\r\nimport type { StatusType } from '../types/interfaces';\r\nimport { STATUS_CLASS_MAP } from '../utils/constants';\r\n\r\ninterface StatusBadgeProps {\r\n  status: StatusType;\r\n  className?: string;\r\n}\r\n\r\nexport default class StatusBadge extends Component<StatusBadgeProps> {\r\n  view(): Mithril.Children {\r\n    const { status, className = '' } = this.attrs;\r\n    \r\n    const statusClass = this.getStatusClass(status);\r\n    const statusLabel = this.getStatusLabel(status);\r\n\r\n    return (\r\n      <div className={`FundsPage-withdrawal-HistoryStatus ${statusClass} ${className}`}>\r\n        {statusLabel}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getStatusClass(status: StatusType): string {\r\n    return STATUS_CLASS_MAP[status] || STATUS_CLASS_MAP.pending;\r\n  }\r\n\r\n  private getStatusLabel(status: StatusType): string {\r\n    return app.translator.trans(`funds.forum.status.${status}`).toString();\r\n  }\r\n}","import Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\n\r\ninterface EmptyStateProps {\r\n  iconName: string;\r\n  title: string;\r\n  description: string;\r\n  className?: string;\r\n}\r\n\r\nexport default class EmptyState extends Component<EmptyStateProps> {\r\n  view(): Mithril.Children {\r\n    const { iconName, title, description, className = '' } = this.attrs;\r\n    \r\n    return (\r\n      <div className={`FundsPage-emptyState ${className}`}>\r\n        <div className=\"FundsPage-emptyIcon\">\r\n          {icon(iconName)}\r\n        </div>\r\n        <h3 className=\"FundsPage-emptyTitle\">\r\n          {title}\r\n        </h3>\r\n        <p className=\"FundsPage-emptyDescription\">\r\n          {description}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}","import LoadingIndicator from 'flarum/common/components/LoadingIndicator';\r\n\r\ninterface LoadingStateProps {\r\n  className?: string;\r\n}\r\n\r\nexport default function LoadingState(props: LoadingStateProps): JSX.Element {\r\n  const { className = '' } = props;\r\n  \r\n  return (\r\n    <div className={`FundsPage-loading ${className}`}>\r\n      <LoadingIndicator />\r\n    </div>\r\n  );\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalRequest from '../../../common/models/WithdrawalRequest';\r\nimport WithdrawalPlatform from '../../../common/models/WithdrawalPlatform';\r\nimport type DepositPlatform from '../../../common/models/DepositPlatform';\r\nimport type DepositRecord from '../../../common/models/DepositRecord';\r\nimport { getAttr, findPlatformById, getDateFromAttr, getIdString } from '../withdrawal/utils/modelHelpers';\r\nimport PlatformIcon from '../withdrawal/common/PlatformIcon';\r\nimport StatusBadge from '../withdrawal/common/StatusBadge';\r\nimport EmptyState from '../withdrawal/common/EmptyState';\r\nimport LoadingState from '../withdrawal/common/LoadingState';\r\n\r\n// Generic transaction type that can represent withdrawal requests or deposit records\r\ninterface Transaction {\r\n  id?: () => string | number;\r\n  amount?: () => number;\r\n  status?: () => string;\r\n  createdAt?: () => Date;\r\n  platform?: () => any;\r\n  platformId?: () => string | number;\r\n  // Withdrawal request specific fields\r\n  accountDetails?: () => string;\r\n  // Deposit record specific fields\r\n  depositTime?: () => Date;\r\n  screenshotUrl?: () => string;\r\n  userMessage?: () => string;\r\n  processedAt?: () => Date;\r\n  adminNotes?: () => string;\r\n  creditedAmount?: () => number;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface TransactionHistoryAttrs {\r\n  transactions: (WithdrawalRequest | DepositRecord)[];\r\n  platforms: (WithdrawalPlatform | DepositPlatform)[];\r\n  loading: boolean;\r\n  type: 'withdrawal' | 'deposit';\r\n}\r\n\r\nexport default class TransactionHistory extends Component<TransactionHistoryAttrs> {\r\n  view(vnode: Mithril.Vnode<TransactionHistoryAttrs>): Mithril.Children {\r\n    const { transactions, platforms, loading, type } = vnode.attrs;\r\n\r\n    if (loading) {\r\n      return <LoadingState className={`${type}History-loading`} />;\r\n    }\r\n\r\n    if (!transactions || transactions.length === 0) {\r\n      return (\r\n        <EmptyState\r\n          iconName={type === 'withdrawal' ? 'fas fa-history' : 'fas fa-inbox'}\r\n          title={app.translator.trans('funds.forum.history.empty.title')}\r\n          description={app.translator.trans('funds.forum.history.empty.description')}\r\n          className={`${type}History-empty`}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={`${type}History`}>\r\n        <div\r\n          className={`${type}History-header`}\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center'\r\n          }}\r\n        >\r\n          <h3>{type === 'withdrawal' ? '提款历史' : '存款历史'}</h3>\r\n          <span \r\n            className={`${type}History-count`}\r\n            style={{\r\n              color: '#888',\r\n              fontSize: '14px',\r\n              fontWeight: '500'\r\n            }}\r\n          >\r\n            {transactions.length} {type === 'withdrawal' ? '次提款' : '次存款'}\r\n          </span>\r\n        </div>\r\n        \r\n        <div className={`${type}History-list`}>\r\n          {transactions.map(transaction => this.renderTransaction(transaction as Transaction, platforms, type))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderTransaction(transaction: Transaction, platforms: any[], type: string): Mithril.Children {\r\n    const transactionId = this.getTransactionId(transaction);\r\n    const platform = this.getPlatform(transaction, platforms);\r\n    const amount = getAttr(transaction, 'amount') || 0;\r\n    const status = getAttr(transaction, 'status') || 'pending';\r\n    const statusColor = getAttr(transaction, 'statusColor') || this.getStatusColor(status);\r\n    const createdAt = getDateFromAttr(transaction, 'createdAt');\r\n\r\n    if (type === 'deposit') {\r\n      // Only deposit records now\r\n      return this.renderDepositRecord(transaction, platform, amount, status, statusColor, createdAt, transactionId);\r\n    } else {\r\n      return this.renderWithdrawalTransaction(transaction, platform, amount, status, createdAt, transactionId);\r\n    }\r\n  }\r\n\r\n  private renderWithdrawalTransaction(\r\n    transaction: Transaction, \r\n    platform: any, \r\n    amount: number, \r\n    status: string, \r\n    createdAt: Date, \r\n    transactionId: string\r\n  ): Mithril.Children {\r\n    const accountDetails = getAttr(transaction, 'accountDetails') || '';\r\n\r\n    return (\r\n      <div key={transactionId} className=\"FundsPage-withdrawal-HistoryItem\">\r\n        <div className=\"FundsPage-withdrawal-HistoryHeader\">\r\n          <div className=\"FundsPage-withdrawal-HistoryPlatform\">\r\n            <div className=\"FundsPage-withdrawal-PlatformIcon\">\r\n              <PlatformIcon platform={platform} size=\"small\" />\r\n            </div>\r\n            <div className=\"FundsPage-withdrawal-HistoryInfo\">\r\n              <div className=\"FundsPage-withdrawal-HistoryPlatformName\">\r\n                {this.getPlatformName(platform)}\r\n              </div>\r\n              <div className=\"FundsPage-withdrawal-HistoryDate\">\r\n                {createdAt.toLocaleDateString()} {createdAt.toLocaleTimeString()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <StatusBadge status={status as any} />\r\n        </div>\r\n        <div className=\"FundsPage-withdrawal-HistoryDetails\">\r\n          <div className=\"FundsPage-withdrawal-HistoryAmount\">\r\n            <span className=\"FundsPage-withdrawal-HistoryLabel\">\r\n              {app.translator.trans('funds.forum.history.amount')}:\r\n            </span>\r\n            <span className=\"FundsPage-withdrawal-HistoryValue\">\r\n              {amount} {this.getPlatformSymbol(platform)}\r\n            </span>\r\n          </div>\r\n          <div className=\"FundsPage-withdrawal-HistoryAddress\">\r\n            <span className=\"FundsPage-withdrawal-HistoryLabel\">\r\n              {app.translator.trans('funds.forum.history.address')}:\r\n            </span>\r\n            <span className=\"FundsPage-withdrawal-HistoryValue\">\r\n              {accountDetails}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositRecord(\r\n    transaction: Transaction,\r\n    platform: any,\r\n    amount: number,\r\n    status: string,\r\n    statusColor: string,\r\n    createdAt: Date,\r\n    transactionId: string\r\n  ): Mithril.Children {\r\n    const depositTime = getDateFromAttr(transaction, 'depositTime');\r\n    const screenshotUrl = getAttr(transaction, 'screenshotUrl');\r\n    const userMessage = getAttr(transaction, 'userMessage');\r\n    const processedAt = getDateFromAttr(transaction, 'processedAt');\r\n    const adminNotes = getAttr(transaction, 'adminNotes');\r\n    const creditedAmount = getAttr(transaction, 'creditedAmount');\r\n\r\n    return (\r\n      <div key={transactionId} className=\"DepositRecord-item\">\r\n        <div className=\"DepositRecord-itemHeader\">\r\n          <div className=\"DepositRecord-itemPlatform\">\r\n            {platform && (\r\n              <>\r\n                <div className=\"DepositRecord-itemIcon\">\r\n                  {this.renderPlatformIcon(platform)}\r\n                </div>\r\n                <div className=\"DepositRecord-itemInfo\">\r\n                  <span className=\"DepositRecord-itemCurrency\">\r\n                    {getAttr(platform, 'symbol')} {getAttr(platform, 'network') && `(${getAttr(platform, 'network')})`}\r\n                  </span>\r\n                  <span className=\"DepositRecord-itemType\">\r\n                    Manual Deposit\r\n                  </span>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"DepositRecord-itemAmount\">\r\n            <span className=\"DepositRecord-itemAmountValue\">\r\n              +{amount} {platform ? getAttr(platform, 'symbol') : ''}\r\n            </span>\r\n            <div className={`DepositRecord-itemStatus status-${statusColor}`}>\r\n              {this.getStatusIcon(status)}\r\n              {this.getStatusText(status)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"DepositRecord-itemDetails\">\r\n          <div className=\"DepositRecord-itemMeta\">\r\n            <span className=\"DepositRecord-itemTime\">\r\n              Submitted: {createdAt ? humanTime(createdAt) : 'Unknown time'}\r\n            </span>\r\n            \r\n            {depositTime && (\r\n              <span className=\"DepositRecord-itemDepositTime\">\r\n                Deposit Time: {depositTime.toLocaleDateString()} {depositTime.toLocaleTimeString()}\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"DepositRecord-itemInfo\">\r\n            \r\n            \r\n            {userMessage && (\r\n              <div className=\"DepositRecord-itemRow\">\r\n                <span className=\"DepositRecord-itemLabel\">Message:</span>\r\n                <span className=\"DepositRecord-itemValue\">{userMessage}</span>\r\n              </div>\r\n            )}\r\n            \r\n            {screenshotUrl && (\r\n              <div className=\"DepositRecord-itemRow\">\r\n                <span className=\"DepositRecord-itemLabel\">Screenshot:</span>\r\n                <a href={screenshotUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"DepositRecord-itemLink\">\r\n                  View Screenshot {icon('fas fa-external-link-alt')}\r\n                </a>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {processedAt && (\r\n            <div className=\"DepositRecord-itemProcessed\">\r\n              <div className=\"DepositRecord-itemProcessedTime\">\r\n                Processed: {humanTime(processedAt)}\r\n              </div>\r\n              \r\n              {creditedAmount && creditedAmount !== amount && (\r\n                <div className=\"DepositRecord-itemCredited\">\r\n                  Credited Amount: {creditedAmount} {platform ? getAttr(platform, 'symbol') : ''}\r\n                </div>\r\n              )}\r\n              \r\n              {adminNotes && (\r\n                <div className=\"DepositRecord-itemNotes\">\r\n                  <span className=\"DepositRecord-itemLabel\">Admin Notes:</span>\r\n                  <span className=\"DepositRecord-itemValue\">{adminNotes}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  private getTransactionId(transaction: Transaction): string {\r\n    if (typeof transaction.id === 'function') {\r\n      return `transaction-${transaction.id()}`;\r\n    }\r\n    return `transaction-${getIdString(transaction) || Math.random()}`;\r\n  }\r\n\r\n  private getPlatform(transaction: Transaction, platforms: any[]): any {\r\n    const platformId = this.getPlatformId(transaction);\r\n    return findPlatformById(platforms, platformId);\r\n  }\r\n\r\n  private getPlatformId(transaction: Transaction): string | number {\r\n    return getAttr(transaction, 'platformId') || \r\n           (transaction.relationships?.platform?.data?.id) || '';\r\n  }\r\n\r\n  private getPlatformName(platform: any): string {\r\n    if (!platform) return 'Unknown Platform';\r\n    return getAttr(platform, 'name') || 'Unknown Platform';\r\n  }\r\n\r\n  private getPlatformSymbol(platform: any): string {\r\n    if (!platform) return '';\r\n    return getAttr(platform, 'symbol') || '';\r\n  }\r\n\r\n  private getStatusColor(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'warning';\r\n      case 'approved':\r\n      case 'confirmed':\r\n      case 'completed':\r\n        return 'success';\r\n      case 'rejected':\r\n      case 'failed':\r\n      case 'cancelled':\r\n        return 'danger';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  private renderPlatformIcon(platform: any): Mithril.Children {\r\n    const iconUrl = getAttr(platform, 'iconUrl');\r\n    const iconClass = getAttr(platform, 'iconClass');\r\n    const symbol = getAttr(platform, 'symbol');\r\n\r\n    if (iconUrl) {\r\n      return <img src={iconUrl} alt={symbol} className=\"DepositHistory-platformImg\" />;\r\n    }\r\n\r\n    if (iconClass) {\r\n      return icon(iconClass);\r\n    }\r\n\r\n    // Fallback to generic icon - use platform-configurable icons only\r\n    return icon('fas fa-coins');\r\n  }\r\n\r\n  private getStatusIcon(status: string): Mithril.Children {\r\n    switch (status) {\r\n      case 'pending':\r\n        return icon('fas fa-clock');\r\n      case 'approved':\r\n      case 'confirmed':\r\n        return icon('fas fa-check-circle');\r\n      case 'completed':\r\n        return icon('fas fa-check-double');\r\n      case 'rejected':\r\n      case 'failed':\r\n        return icon('fas fa-times-circle');\r\n      case 'cancelled':\r\n        return icon('fas fa-ban');\r\n      default:\r\n        return icon('fas fa-question-circle');\r\n    }\r\n  }\r\n\r\n  private getStatusText(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'Pending';\r\n      case 'approved':\r\n        return 'Approved';\r\n      case 'confirmed':\r\n        return 'Confirmed';\r\n      case 'completed':\r\n        return 'Completed';\r\n      case 'rejected':\r\n        return 'Rejected';\r\n      case 'failed':\r\n        return 'Failed';\r\n      case 'cancelled':\r\n        return 'Cancelled';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  }\r\n\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport { getAttr } from '../../withdrawal/utils/modelHelpers';\r\nimport { ICONS } from '../../withdrawal/utils/constants';\r\nimport { getBestPlatformIcon, renderIcon } from '../../../../common/utils/IconResolver';\r\nimport m from 'mithril';\r\n\r\ninterface DepositPlatformDropdownProps {\r\n  platforms: DepositPlatform[];\r\n  selectedPlatform: DepositPlatform | null;\r\n  onPlatformSelect: (platform: DepositPlatform) => void;\r\n}\r\n\r\ninterface DepositPlatformDropdownState {\r\n  showDropdown: boolean;\r\n}\r\n\r\nexport default class DepositPlatformDropdown extends Component<DepositPlatformDropdownProps, DepositPlatformDropdownState> {\r\n  oninit(vnode: Mithril.Vnode<DepositPlatformDropdownProps, DepositPlatformDropdownState>) {\r\n    super.oninit(vnode);\r\n    this.state = {\r\n      showDropdown: false,\r\n    };\r\n  }\r\n\r\n  view(): Mithril.Children {\r\n    const { selectedPlatform } = this.attrs;\r\n    const { showDropdown } = this.state;\r\n\r\n    return (\r\n      <div className=\"DepositForm-platformSelector\">\r\n        <div className=\"DepositForm-label\">{app.translator.trans('funds.forum.deposit.platform_label')}</div>\r\n        <div \r\n          className=\"DepositForm-platformDropdown\" \r\n          onclick={() => this.toggleDropdown()}\r\n        >\r\n          <div className=\"DepositForm-platformSelected\">\r\n            <div className=\"DepositForm-platformInfo\">\r\n              <div className=\"DepositForm-platformIcon\">\r\n                {this.renderPlatformIcon(selectedPlatform)}\r\n              </div>\r\n              <div className=\"DepositForm-platformDetails\">\r\n                <div className=\"DepositForm-platformName\">\r\n                  {this.getPlatformDisplayName(selectedPlatform)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {icon(ICONS.CHEVRON_DOWN, { className: 'DepositForm-dropdownIcon' })}\r\n        </div>\r\n\r\n        {showDropdown && this.renderPlatformDropdown()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  oncreate(vnode: Mithril.VnodeDOM) {\r\n    super.oncreate(vnode);\r\n    \r\n    // Close dropdown when clicking outside\r\n    document.addEventListener('click', this.handleOutsideClick);\r\n  }\r\n\r\n  onremove(vnode: Mithril.VnodeDOM) {\r\n    super.onremove(vnode);\r\n    document.removeEventListener('click', this.handleOutsideClick);\r\n  }\r\n\r\n  private handleOutsideClick = (e: MouseEvent) => {\r\n    const element = this.element;\r\n    if (element && !element.contains(e.target as Node)) {\r\n      this.state.showDropdown = false;\r\n      m.redraw();\r\n    }\r\n  };\r\n\r\n  private toggleDropdown(): void {\r\n    this.state.showDropdown = !this.state.showDropdown;\r\n  }\r\n\r\n  private getPlatformDisplayName(platform: DepositPlatform | null): string {\r\n    if (!platform) {\r\n      return app.translator.trans('funds.forum.deposit.select_platform').toString();\r\n    }\r\n    \r\n    const name = getAttr(platform, 'name') || '';\r\n    const network = getAttr(platform, 'network');\r\n    \r\n    if (network) {\r\n      return `${name} (${network})`;\r\n    }\r\n    \r\n    return name;\r\n  }\r\n\r\n  private renderPlatformIcon(platform: DepositPlatform | null): Mithril.Children {\r\n    if (!platform) {\r\n      return icon('fas fa-coins');\r\n    }\r\n\r\n    const bestIcon = getBestPlatformIcon(platform);\r\n    return renderIcon(bestIcon, 'platform-icon-image');\r\n  }\r\n\r\n\r\n  private renderPlatformDropdown(): Mithril.Children {\r\n    const { platforms } = this.attrs;\r\n\r\n    // Filter active platforms\r\n    const validPlatforms = (platforms || []).filter(platform => \r\n      platform && getAttr(platform, 'isActive')\r\n    );\r\n    \r\n    if (validPlatforms.length === 0) {\r\n      return (\r\n        <div className=\"DepositForm-dropdownMenu\">\r\n          <div className=\"DepositForm-dropdownItem DepositForm-noData\">\r\n            {app.translator.trans('funds.forum.deposit.no_platforms')}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"DepositForm-dropdownMenu\">\r\n        {validPlatforms.map(platform => (\r\n          <div \r\n            key={platform.id()}\r\n            className=\"DepositForm-dropdownItem\"\r\n            onclick={() => this.selectPlatform(platform)}\r\n          >\r\n            <div className=\"DepositForm-platformIcon\">\r\n              {this.renderPlatformIcon(platform)}\r\n            </div>\r\n            <div className=\"DepositForm-platformName\">\r\n              {this.getPlatformDisplayName(platform)}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  private selectPlatform(platform: DepositPlatform): void {\r\n    const { onPlatformSelect } = this.attrs;\r\n    \r\n    onPlatformSelect(platform);\r\n    this.state.showDropdown = false;\r\n  }\r\n}","import Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\n\r\nexport interface AddressDisplayAttrs {\r\n  address: string;\r\n  loading: boolean;\r\n  onCopy: () => void;\r\n}\r\n\r\nexport default class AddressDisplay extends Component<AddressDisplayAttrs> {\r\n  view(vnode: Mithril.Vnode<AddressDisplayAttrs>) {\r\n    const { address, loading, onCopy } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"AddressDisplay\">\r\n        {loading ? (\r\n          <div className=\"AddressDisplay-loading\">\r\n            <i className=\"fas fa-spinner fa-spin\"></i>\r\n            <span>Generating address...</span>\r\n          </div>\r\n        ) : address ? (\r\n          <div className=\"AddressDisplay-content\">\r\n            <div className=\"AddressDisplay-address\" title={address}>\r\n              {address}\r\n            </div>\r\n            <div className=\"AddressDisplay-actions\">\r\n              <button\r\n                className=\"AddressDisplay-copyBtn\"\r\n                onclick={onCopy}\r\n                title=\"Copy address\"\r\n              >\r\n                {icon('fas fa-copy')}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"AddressDisplay-placeholder\">\r\n            <span>No address available</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import Component from 'flarum/common/Component';\r\nimport DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport type Mithril from 'mithril';\r\n\r\nexport interface ImageDisplayAttrs {\r\n  platform: DepositPlatform | null;\r\n  loading?: boolean;\r\n  size?: number;\r\n}\r\n\r\nexport default class ImageDisplay extends Component<ImageDisplayAttrs> {\r\n  view(vnode: Mithril.Vnode<ImageDisplayAttrs>) {\r\n    const { platform, loading } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"ImageDisplay\">\r\n        {loading ? (\r\n          <div className=\"ImageDisplay-loading\">\r\n            <i className=\"fas fa-spinner fa-spin\"></i>\r\n          </div>\r\n        ) : platform && platform.qrCodeImageUrl() ? (\r\n          <img \r\n            src={platform.qrCodeImageUrl()} \r\n            alt={`${platform.name()} Image`}\r\n            className=\"ImageDisplay-image\"\r\n            onerror=\"this.style.display='none'; this.nextElementSibling.style.display='block';\"\r\n          />\r\n        ) : (\r\n          <div className=\"ImageDisplay-placeholder\">\r\n            <i className=\"fas fa-image\"></i>\r\n            <div>No Image</div>\r\n          </div>\r\n        )}\r\n        <div className=\"ImageDisplay-error\" style={{ display: 'none' }}>\r\n          <i className=\"fas fa-exclamation-triangle\"></i>\r\n          <div>Image Load Failed</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport withAttr from 'flarum/common/utils/withAttr';\r\nimport type Mithril from 'mithril';\r\nimport DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport DepositPlatformDropdown from '../selectors/DepositPlatformDropdown';\r\nimport AddressDisplay from '../components/AddressDisplay';\r\nimport ImageDisplay from '../components/ImageDisplay';\r\nimport { getAttr } from '../../withdrawal/utils/modelHelpers';\r\n\r\nexport interface DepositFormData {\r\n  selectedPlatform: DepositPlatform | null;\r\n  amount: number;\r\n  depositTime: Date;\r\n  userMessage?: string;\r\n}\r\n\r\ninterface DepositFormProps {\r\n  platforms: DepositPlatform[];\r\n  onSubmit: (data: DepositFormData) => Promise<void>;\r\n  onCancel: () => void;\r\n  submitting: boolean;\r\n}\r\n\r\ninterface DepositFormState {\r\n  selectedPlatform: Stream<DepositPlatform | null>;\r\n  amount: Stream<string>;\r\n  depositTime: Stream<string>;\r\n  userMessage: Stream<string>;\r\n}\r\n\r\nexport default class DepositForm extends Component<DepositFormProps, DepositFormState> {\r\n  oninit(vnode: Mithril.Vnode<DepositFormProps>) {\r\n    super.oninit(vnode);\r\n    \r\n    // Initialize with current date/time for deposit time\r\n    const now = new Date();\r\n    const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000)\r\n      .toISOString()\r\n      .slice(0, 16); // Format: YYYY-MM-DDTHH:mm\r\n    \r\n    this.state = {\r\n      selectedPlatform: Stream(null),\r\n      amount: Stream(''),\r\n      depositTime: Stream(localDateTime),\r\n      userMessage: Stream('')\r\n    };\r\n  }\r\n\r\n  view(vnode: Mithril.Vnode<DepositFormProps>): Mithril.Children {\r\n    const { platforms, submitting } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"DepositForm\">\r\n        <form onsubmit={this.handleSubmit.bind(this)} className=\"DepositForm-form\">\r\n          {/* 平台选择字段 */}\r\n          <div className=\"DepositForm-field\">\r\n            <DepositPlatformDropdown\r\n              platforms={platforms}\r\n              selectedPlatform={this.state.selectedPlatform()}\r\n              onPlatformSelect={(platform: DepositPlatform) => {\r\n                this.state.selectedPlatform(platform);\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          {/* 显示选中平台的存款信息 */}\r\n          {this.state.selectedPlatform() && this.renderDepositInfo()}\r\n\r\n          {/* 存款金额字段 */}\r\n          {this.state.selectedPlatform() && (\r\n            <div className=\"DepositForm-field\">\r\n              <label className=\"DepositForm-label\">\r\n                {app.translator.trans('funds.forum.deposit.record.amount')}\r\n                <span className=\"DepositForm-required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                min=\"0.01\"\r\n                className=\"DepositForm-input\"\r\n                placeholder={app.translator.trans('funds.forum.deposit.record.amount_placeholder')}\r\n                value={this.state.amount()}\r\n                oninput={withAttr('value', this.state.amount)}\r\n                required\r\n                disabled={submitting}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {/* 存款时间字段 */}\r\n          {this.state.selectedPlatform() && (\r\n            <div className=\"DepositForm-field\">\r\n              <label className=\"DepositForm-label\">\r\n                {app.translator.trans('funds.forum.deposit.record.deposit_time')}\r\n                <span className=\"DepositForm-required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                className=\"DepositForm-input\"\r\n                value={this.state.depositTime()}\r\n                oninput={withAttr('value', this.state.depositTime)}\r\n                required\r\n                disabled={submitting}\r\n              />\r\n              <div className=\"DepositForm-help\">\r\n                {app.translator.trans('funds.forum.deposit.record.deposit_time_help')}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* 留言字段 */}\r\n          <div className=\"DepositForm-field\">\r\n            <label className=\"DepositForm-label\">\r\n              {app.translator.trans('funds.forum.deposit.form.user_message')}\r\n              <span className=\"DepositForm-optional\">\r\n                ({app.translator.trans('funds.forum.deposit.form.optional')})\r\n              </span>\r\n            </label>\r\n            <textarea\r\n              className=\"DepositForm-textarea\"\r\n              placeholder={app.translator.trans('funds.forum.deposit.form.user_message_placeholder')}\r\n              value={this.state.userMessage()}\r\n              oninput={withAttr('value', this.state.userMessage)}\r\n              rows={4}\r\n              disabled={submitting}\r\n            ></textarea>\r\n            <div className=\"DepositForm-help\">\r\n              {app.translator.trans('funds.forum.deposit.form.user_message_help')}\r\n            </div>\r\n          </div>\r\n\r\n          {/* 表单操作按钮 */}\r\n          <div className=\"DepositForm-actions\">\r\n            <Button\r\n              type=\"button\"\r\n              className=\"Button Button--secondary DepositForm-cancelButton\"\r\n              onclick={() => app.modal.close()}\r\n              disabled={submitting}\r\n            >\r\n              {app.translator.trans('funds.forum.deposit.form.cancel')}\r\n            </Button>\r\n            \r\n            <Button\r\n              type=\"submit\"\r\n              className=\"Button Button--primary DepositForm-submitButton\"\r\n              loading={submitting}\r\n              disabled={submitting}\r\n            >\r\n              { app.translator.trans('funds.forum.deposit.form.submit') }\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositInfo(): Mithril.Children {\r\n    const platform = this.state.selectedPlatform();\r\n    if (!platform) return null;\r\n\r\n    const address = getAttr(platform, 'address');\r\n    const minAmount = getAttr(platform, 'minAmount') || 0;\r\n    const symbol = getAttr(platform, 'symbol');\r\n    const warningText = getAttr(platform, 'warningText');\r\n\r\n    return (\r\n      <div className=\"DepositForm-depositInfo\">\r\n        <div className=\"DepositForm-field\">\r\n          <label className=\"DepositForm-label\">\r\n            {app.translator.trans('funds.forum.deposit.form.deposit_address')}\r\n          </label>\r\n          <AddressDisplay\r\n            address={address || ''}\r\n            loading={false}\r\n            onCopy={() => {\r\n              if (address) {\r\n                navigator.clipboard.writeText(address).then(() => {\r\n                  app.alerts.show(\r\n                    { type: 'success', dismissible: true },\r\n                    app.translator.trans('funds.forum.deposit.address_copied')\r\n                  );\r\n                }).catch(() => {\r\n                  app.alerts.show(\r\n                    { type: 'error', dismissible: true },\r\n                    app.translator.trans('funds.forum.deposit.copy_failed')\r\n                  );\r\n                });\r\n              }\r\n            }}\r\n          />\r\n          <div className=\"DepositForm-help\">\r\n            {app.translator.trans('funds.forum.deposit.form.deposit_address_help')}\r\n          </div>\r\n        </div>\r\n\r\n        {minAmount > 0 && (\r\n          <div className=\"DepositForm-field\">\r\n            <div className=\"DepositForm-minAmount\">\r\n              最少存款金额：{minAmount} {symbol}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"DepositForm-field\">\r\n          <ImageDisplay\r\n            platform={platform}\r\n            loading={false}\r\n          />\r\n        </div>\r\n\r\n        {warningText && (\r\n        <div className=\"DepositForm-field\">\r\n          <div className=\"DepositForm-warning\">\r\n            <i className=\"fas fa-info-circle\"></i>\r\n            <span>{warningText}</span>\r\n          </div>\r\n        </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleSubmit(e: Event): void {\r\n    e.preventDefault();\r\n\r\n    const { onSubmit } = this.attrs;\r\n    \r\n    // 验证必选字段\r\n    if (!this.state.selectedPlatform()) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.form.validation.platform_required')\r\n      );\r\n      return;\r\n    }\r\n\r\n    // 验证金额\r\n    const amount = parseFloat(this.state.amount());\r\n    if (!this.state.amount() || isNaN(amount) || amount <= 0) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.record.validation.invalid_amount')\r\n      );\r\n      return;\r\n    }\r\n\r\n    // 验证存款时间\r\n    if (!this.state.depositTime()) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.record.validation.deposit_time_required')\r\n      );\r\n      return;\r\n    }\r\n\r\n    // 检查平台最小金额限制\r\n    const platform = this.state.selectedPlatform();\r\n    const minAmount = getAttr(platform, 'minAmount') || 0;\r\n    if (minAmount > 0 && amount < minAmount) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.record.validation.amount_too_low', {\r\n          amount: amount,\r\n          min: minAmount,\r\n          symbol: getAttr(platform, 'symbol')\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    // 准备表单数据\r\n    const formData: DepositFormData = {\r\n      selectedPlatform: this.state.selectedPlatform(),\r\n      amount: amount,\r\n      depositTime: new Date(this.state.depositTime()),\r\n      userMessage: this.state.userMessage() || undefined\r\n    };\r\n\r\n    onSubmit(formData);\r\n  }\r\n\r\n  // 清空表单\r\n  resetForm(): void {\r\n    this.state.selectedPlatform(null);\r\n    this.state.amount('');\r\n    \r\n    // Reset deposit time to current time\r\n    const now = new Date();\r\n    const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000)\r\n      .toISOString()\r\n      .slice(0, 16);\r\n    this.state.depositTime(localDateTime);\r\n    \r\n    this.state.userMessage('');\r\n  }\r\n}","import app from \"flarum/common/app\";\r\nimport DepositRecord from \"../models/DepositRecord\";\r\nimport { DepositFormData } from \"../../forum/components/deposit/forms/DepositForm\";\r\nimport { ApiPayloadSingle } from \"flarum/common/Store\";\r\n\r\nexport interface DepositService {\r\n  /**\r\n   * 创建新的存款记录\r\n   */\r\n  create(data: DepositFormData): Promise<DepositRecord>;\r\n\r\n  /**\r\n   * 获取用户的存款历史记录\r\n   */\r\n  getUserHistory(): Promise<DepositRecord[]>;\r\n\r\n  /**\r\n   * 获取所有存款记录（管理员）\r\n   */\r\n  getAll(filters?: DepositFilters): Promise<DepositRecord[]>;\r\n\r\n  /**\r\n   * 查找存款记录\r\n   */\r\n  find(params?: any): Promise<DepositRecord[]>;\r\n\r\n  /**\r\n   * 更新存款记录\r\n   */\r\n  update(\r\n    recordId: number,\r\n    data: Partial<DepositUpdateData>\r\n  ): Promise<DepositRecord>;\r\n\r\n  /**\r\n   * 删除存款记录\r\n   */\r\n  delete(record: DepositRecord): Promise<void>;\r\n\r\n  /**\r\n   * 审核存款记录（管理员）\r\n   */\r\n  approve(recordId: number, adminNotes?: string): Promise<DepositRecord>;\r\n\r\n  /**\r\n   * 拒绝存款记录（管理员）\r\n   */\r\n  reject(recordId: number, adminNotes?: string): Promise<DepositRecord>;\r\n}\r\n\r\nexport interface DepositFilters {\r\n  status?: string;\r\n  user?: number;\r\n  search?: string;\r\n  createdAfter?: string;\r\n  createdBefore?: string;\r\n}\r\n\r\nexport interface DepositUpdateData {\r\n  platformId?: number;\r\n  userMessage?: string;\r\n  status?: string;\r\n  adminNotes?: string;\r\n}\r\n\r\nclass DepositServiceImpl implements DepositService {\r\n  async create(data: DepositFormData): Promise<DepositRecord> {\r\n    // Extract platformId from the selected platform\r\n    if (!data.selectedPlatform) {\r\n      throw new Error('Selected platform is required');\r\n    }\r\n\r\n    const platformId = parseInt(data.selectedPlatform.id() as string);\r\n    if (!platformId) {\r\n      throw new Error('Platform ID is required');\r\n    }\r\n\r\n    if (!data.amount || data.amount <= 0) {\r\n      throw new Error('Amount is required and must be greater than 0');\r\n    }\r\n\r\n    if (!data.depositTime) {\r\n      throw new Error('Deposit time is required');\r\n    }\r\n\r\n    const response = await app.request({\r\n      method: \"POST\",\r\n      url: app.forum.attribute(\"apiUrl\") + \"/deposit-records\",\r\n      body: {\r\n        data: {\r\n          type: \"deposit-records\",\r\n          attributes: {\r\n            platformId: platformId,\r\n            amount: data.amount,\r\n            depositTime: data.depositTime.toISOString(),\r\n            userMessage: data.userMessage,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    const record = app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as DepositRecord;\r\n    return Array.isArray(record) ? record[0] : record;\r\n  }\r\n\r\n  async getUserHistory(): Promise<DepositRecord[]> {\r\n    const response = await app.request({\r\n      method: \"GET\",\r\n      url: app.forum.attribute(\"apiUrl\") + \"/deposit-records\",\r\n      params: {\r\n        include: \"user,processedByUser\",\r\n      },\r\n    });\r\n\r\n    return app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as unknown as DepositRecord[];\r\n  }\r\n\r\n  async getAll(filters: DepositFilters = {}): Promise<DepositRecord[]> {\r\n    const params: any = {\r\n      include: \"user,processedByUser\",\r\n    };\r\n\r\n    // 应用过滤器\r\n    if (Object.keys(filters).length > 0) {\r\n      params.filter = filters;\r\n    }\r\n\r\n    const response = await app.request({\r\n      method: \"GET\",\r\n      url: app.forum.attribute(\"apiUrl\") + \"/deposit-records\",\r\n      params,\r\n    });\r\n\r\n    return app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as unknown as DepositRecord[];\r\n  }\r\n\r\n  async update(\r\n    recordId: number,\r\n    data: Partial<DepositUpdateData>\r\n  ): Promise<DepositRecord> {\r\n    const response = await app.request({\r\n      method: \"PATCH\",\r\n      url: `${app.forum.attribute(\"apiUrl\")}/deposit-records/${recordId}`,\r\n      body: {\r\n        data: {\r\n          type: \"deposit-records\",\r\n          id: recordId,\r\n          attributes: data,\r\n        },\r\n      },\r\n    });\r\n\r\n    const record = app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as DepositRecord;\r\n    return Array.isArray(record) ? record[0] : record;\r\n  }\r\n\r\n  async approve(recordId: number, adminNotes?: string): Promise<DepositRecord> {\r\n    return this.update(recordId, {\r\n      status: \"approved\",\r\n      adminNotes,\r\n    });\r\n  }\r\n\r\n  async reject(recordId: number, adminNotes?: string): Promise<DepositRecord> {\r\n    return this.update(recordId, {\r\n      status: \"rejected\",\r\n      adminNotes,\r\n    });\r\n  }\r\n\r\n  async find(params: any = {}): Promise<DepositRecord[]> {\r\n    // Ensure we only include valid relationships for DepositRecord\r\n    const validParams = { ...params };\r\n    if (validParams.include) {\r\n      // Filter out 'platform' from include since DepositRecord doesn't have platform relationship\r\n      validParams.include = validParams.include\r\n        .split(',')\r\n        .filter((rel: string) => rel.trim() !== 'platform')\r\n        .join(',');\r\n      \r\n      // If no valid includes remain, remove the include parameter\r\n      if (!validParams.include) {\r\n        delete validParams.include;\r\n      }\r\n    }\r\n\r\n    const response = await app.request({\r\n      method: \"GET\",\r\n      url: app.forum.attribute(\"apiUrl\") + \"/deposit-records\",\r\n      params: validParams,\r\n    });\r\n\r\n    return app.store.pushPayload(\r\n      response as ApiPayloadSingle\r\n    ) as unknown as DepositRecord[];\r\n  }\r\n\r\n  async delete(record: DepositRecord): Promise<void> {\r\n    await app.request({\r\n      method: \"DELETE\",\r\n      url: `${app.forum.attribute(\"apiUrl\")}/deposit-records/${record.id()}`,\r\n    });\r\n\r\n    app.store.remove(record);\r\n  }\r\n}\r\n\r\n// 导出单例服务实例\r\nexport const depositService: DepositService = new DepositServiceImpl();\r\nexport default depositService;\r\n","import Model from 'flarum/common/Model';\r\n\r\n/**\r\n * Standard pagination parameters for Flarum API requests\r\n */\r\nexport interface PaginationOptions {\r\n  limit?: number;\r\n  offset?: number;\r\n  page?: {\r\n    limit?: number;\r\n    offset?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Standard filter options for API requests\r\n */\r\nexport interface FilterOptions {\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Standard sort options for API requests\r\n */\r\nexport interface SortOptions {\r\n  field: string;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n/**\r\n * Standard query options for finding records\r\n */\r\nexport interface QueryOptions {\r\n  include?: string | string[];\r\n  filter?: FilterOptions;\r\n  sort?: string | SortOptions | SortOptions[];\r\n  page?: PaginationOptions;\r\n}\r\n\r\n/**\r\n * Service response wrapper for better error handling\r\n */\r\nexport interface ServiceResponse<T> {\r\n  data: T;\r\n  meta?: {\r\n    total?: number;\r\n    count?: number;\r\n    hasMore?: boolean;\r\n  };\r\n  errors?: Array<{\r\n    detail: string;\r\n    source?: any;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Base service interface that all services should implement\r\n */\r\nexport interface BaseService<TModel extends Model> {\r\n  /**\r\n   * Find multiple records\r\n   */\r\n  find(options?: QueryOptions): Promise<TModel[]>;\r\n\r\n  /**\r\n   * Find a single record by ID\r\n   */\r\n  findById(id: string | number, options?: QueryOptions): Promise<TModel | null>;\r\n\r\n  /**\r\n   * Create a new record\r\n   */\r\n  create(attributes: Record<string, any>): Promise<TModel>;\r\n\r\n  /**\r\n   * Update an existing record\r\n   */\r\n  update(model: TModel, attributes: Record<string, any>): Promise<TModel>;\r\n\r\n  /**\r\n   * Delete a record\r\n   */\r\n  delete(model: TModel): Promise<void>;\r\n\r\n  /**\r\n   * Check if a record can be modified by current user\r\n   */\r\n  canModify(model: TModel): boolean;\r\n\r\n  /**\r\n   * Check if current user can create new records\r\n   */\r\n  canCreate(): boolean;\r\n\r\n  /**\r\n   * Check if current user can delete a record\r\n   */\r\n  canDelete(model: TModel): boolean;\r\n}\r\n\r\n/**\r\n * Withdrawal-specific service interface\r\n */\r\nexport interface WithdrawalServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Submit a funds request\r\n   */\r\n  submitRequest(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    accountDetails: string;\r\n    message?: string;\r\n  }): Promise<any>;\r\n\r\n  /**\r\n   * Get user's funds history\r\n   */\r\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Get pending requests (admin only)\r\n   */\r\n  getPendingRequests(options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Approve a funds request (admin only)\r\n   */\r\n  approve(request: any, message?: string): Promise<any>;\r\n\r\n  /**\r\n   * Reject a funds request (admin only)\r\n   */\r\n  reject(request: any, reason?: string): Promise<any>;\r\n\r\n  /**\r\n   * Cancel a pending request (user only)\r\n   */\r\n  cancel(request: any): Promise<any>;\r\n}\r\n\r\n/**\r\n * Deposit-specific service interface\r\n */\r\nexport interface DepositServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Get user's deposit history\r\n   */\r\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Create deposit record\r\n   */\r\n  createRecord(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    note?: string;\r\n  }): Promise<any>;\r\n\r\n  /**\r\n   * Get pending deposits (admin only)\r\n   */\r\n  getPendingDeposits(options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Confirm a deposit (admin only)\r\n   */\r\n  confirm(deposit: any, confirmedAmount?: number): Promise<any>;\r\n}\r\n\r\n/**\r\n * Platform service interface for both funds and deposit platforms\r\n */\r\nexport interface PlatformServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Get active platforms only\r\n   */\r\n  getActive(type: 'funds' | 'deposit', options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Toggle platform status (admin only)\r\n   */\r\n  toggleStatus(platform: any): Promise<any>;\r\n\r\n  /**\r\n   * Update platform configuration (admin only)\r\n   */\r\n  updateConfig(platform: any, config: Record<string, any>): Promise<any>;\r\n\r\n  /**\r\n   * Get platforms by symbol\r\n   */\r\n  getBySymbol(symbol: string, type: 'funds' | 'deposit'): Promise<any[]>;\r\n}\r\n\r\n/**\r\n * Settings service interface for managing Flarum admin settings\r\n */\r\nexport interface SettingsServiceInterface {\r\n  getSetting(key: string, defaultValue?: any): Promise<any>;\r\n  saveSetting(key: string, value: any): Promise<void>;\r\n  saveSettings(settings: Record<string, any>): Promise<void>;\r\n  deleteSetting(key: string): Promise<void>;\r\n  getSettingsWithPrefix(prefix: string): Promise<Record<string, any>>;\r\n  canManageSettings(): boolean;\r\n  getExtensionSetting(extension: string, key: string, defaultValue?: any): Promise<any>;\r\n  saveExtensionSetting(extension: string, key: string, value: any): Promise<void>;\r\n  getWithdrawalSetting(key: string, defaultValue?: any): Promise<any>;\r\n  saveWithdrawalSetting(key: string, value: any): Promise<void>;\r\n  getAllWithdrawalSettings(): Promise<Record<string, any>>;\r\n}\r\n\r\n\r\n/**\r\n * Cache service for managing local data storage\r\n */\r\nexport interface CacheOptions {\r\n  ttl?: number; // Time to live in milliseconds\r\n  key?: string; // Custom cache key\r\n  refresh?: boolean; // Force refresh from server\r\n}\r\n\r\n/**\r\n * Common service configuration\r\n */\r\nexport interface ServiceConfig {\r\n  apiUrl?: string;\r\n  timeout?: number;\r\n  retries?: number;\r\n  cache?: boolean;\r\n  defaultPageSize?: number;\r\n}\r\n\r\n/**\r\n * Service error types\r\n */\r\nexport enum ServiceErrorType {\r\n  NETWORK_ERROR = 'network_error',\r\n  PERMISSION_DENIED = 'permission_denied',\r\n  VALIDATION_ERROR = 'validation_error',\r\n  NOT_FOUND = 'not_found',\r\n  SERVER_ERROR = 'server_error',\r\n  TIMEOUT = 'timeout'\r\n}\r\n\r\n/**\r\n * Service error class\r\n */\r\nexport class ServiceError extends Error {\r\n  public type: ServiceErrorType;\r\n  public code?: string;\r\n  public details?: any;\r\n\r\n  constructor(\r\n    message: string, \r\n    type: ServiceErrorType = ServiceErrorType.SERVER_ERROR, \r\n    code?: string, \r\n    details?: any\r\n  ) {\r\n    super(message);\r\n    this.name = 'ServiceError';\r\n    this.type = type;\r\n    this.code = code;\r\n    this.details = details;\r\n  }\r\n}","import app from \"flarum/common/app\";\r\nimport WithdrawalRequest from \"../models/WithdrawalRequest\";\r\nimport WithdrawalPlatform from \"../models/WithdrawalPlatform\";\r\nimport {\r\n  WithdrawalServiceInterface,\r\n  QueryOptions,\r\n  ServiceError,\r\n  ServiceErrorType,\r\n} from \"../types/services\";\r\n\r\n/**\r\n * Service for managing funds requests with proper CRUD operations\r\n */\r\nexport default class WithdrawalService implements WithdrawalServiceInterface {\r\n  private readonly modelType = \"withdrawal-requests\";\r\n  private readonly platformModelType = \"withdrawal-platforms\";\r\n\r\n  /**\r\n   * Find multiple funds requests\r\n   */\r\n  async find(options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\r\n    try {\r\n      const queryParams: any = {\r\n        include: options.include || \"user,platform\",\r\n        sort: options.sort || \"-created_at\",\r\n        ...options,\r\n      };\r\n\r\n      // Add pagination if specified\r\n      if (options.page) {\r\n        queryParams.page = options.page;\r\n      }\r\n\r\n      // Add filters if specified\r\n      if (options.filter) {\r\n        queryParams.filter = options.filter;\r\n      }\r\n\r\n      const results = await app.store.find(this.modelType, queryParams);\r\n      return results as unknown as WithdrawalRequest[];\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to fetch funds requests\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find a single funds request by ID\r\n   */\r\n  async findById(\r\n    id: string | number,\r\n    options: QueryOptions = {}\r\n  ): Promise<WithdrawalRequest | null> {\r\n    try {\r\n      const queryParams: any = {\r\n        include: options.include || \"user,platform\",\r\n      };\r\n\r\n      const result = await app.store.find(\r\n        this.modelType,\r\n        String(id),\r\n        queryParams\r\n      );\r\n      return result as unknown as WithdrawalRequest;\r\n    } catch (error) {\r\n      if (this.isNotFoundError(error)) {\r\n        return null;\r\n      }\r\n      throw this.handleError(error, `Failed to fetch funds request ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new funds request\r\n   */\r\n  async create(attributes: Record<string, any>): Promise<WithdrawalRequest> {\r\n    try {\r\n      // Validate required fields\r\n      this.validateCreateAttributes(attributes);\r\n\r\n      const request = app.store.createRecord(\r\n        this.modelType\r\n      ) as WithdrawalRequest;\r\n\r\n      const savedRequest = await request.save(attributes);\r\n      return savedRequest as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to create funds request\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing funds request\r\n   */\r\n  async update(\r\n    model: WithdrawalRequest,\r\n    attributes: Record<string, any>\r\n  ): Promise<WithdrawalRequest> {\r\n    try {\r\n      if (!this.canModify(model)) {\r\n        throw new ServiceError(\r\n          \"You do not have permission to modify this funds request\",\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      const updatedModel = await model.save(attributes);\r\n      return updatedModel as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to update funds request\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a funds request\r\n   */\r\n  async delete(model: WithdrawalRequest): Promise<void> {\r\n    try {\r\n      if (!this.canDelete(model)) {\r\n        throw new ServiceError(\r\n          \"You do not have permission to delete this funds request\",\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      await model.delete();\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to delete funds request\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Submit a new funds request with validation\r\n   */\r\n  async submitRequest(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    accountDetails: string;\r\n    message?: string;\r\n  }): Promise<WithdrawalRequest> {\r\n    try {\r\n      // Validate user balance and platform limits\r\n      await this.validateWithdrawalRequest(data);\r\n\r\n      const attributes = {\r\n        platformId: data.platformId,\r\n        amount: data.amount,\r\n        accountDetails: data.accountDetails,\r\n        message: data.message || \"\",\r\n        status: \"pending\",\r\n      };\r\n\r\n      return await this.create(attributes);\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to submit funds request\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user's funds history\r\n   */\r\n  async getUserHistory(\r\n    userId?: number,\r\n    options: QueryOptions = {}\r\n  ): Promise<WithdrawalRequest[]> {\r\n    const targetUserId = userId || app.session.user?.id();\r\n\r\n    if (!targetUserId) {\r\n      throw new ServiceError(\r\n        \"User not authenticated\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        user: targetUserId,\r\n        ...options.filter,\r\n      },\r\n      include: options.include || \"platform\",\r\n      sort: options.sort || \"-created_at\",\r\n    };\r\n\r\n    return await this.find(queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Get pending requests (admin only)\r\n   */\r\n  async getPendingRequests(\r\n    options: QueryOptions = {}\r\n  ): Promise<WithdrawalRequest[]> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        status: \"pending\",\r\n        ...options.filter,\r\n      },\r\n      include: options.include || \"user,platform\",\r\n      sort: options.sort || \"created_at\",\r\n    };\r\n\r\n    return await this.find(queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Approve a funds request (admin only)\r\n   */\r\n  async approve(\r\n    request: WithdrawalRequest,\r\n    message?: string\r\n  ): Promise<WithdrawalRequest> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    if (!request.isPending()) {\r\n      throw new ServiceError(\r\n        \"Only pending requests can be approved\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: \"approved\",\r\n    };\r\n\r\n    if (message) {\r\n      attributes.adminNote = message;\r\n    }\r\n\r\n    return await this.update(request, attributes);\r\n  }\r\n\r\n  /**\r\n   * Reject a funds request (admin only)\r\n   */\r\n  async reject(\r\n    request: WithdrawalRequest,\r\n    reason?: string\r\n  ): Promise<WithdrawalRequest> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    if (!request.isPending()) {\r\n      throw new ServiceError(\r\n        \"Only pending requests can be rejected\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: \"rejected\",\r\n    };\r\n\r\n    if (reason) {\r\n      attributes.adminNote = reason;\r\n    }\r\n\r\n    return await this.update(request, attributes);\r\n  }\r\n\r\n  /**\r\n   * Cancel a pending request (user only)\r\n   */\r\n  async cancel(request: WithdrawalRequest): Promise<any> {\r\n    if (!request.canBeModified()) {\r\n      throw new ServiceError(\r\n        \"This request cannot be cancelled\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const currentUser = app.session.user;\r\n    if (\r\n      !currentUser ||\r\n      (String(request.userId()) !== currentUser.id() && !currentUser.isAdmin())\r\n    ) {\r\n      throw new ServiceError(\r\n        \"You can only cancel your own requests\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.delete(request);\r\n  }\r\n\r\n  /**\r\n   * Check if current user can modify a funds request\r\n   */\r\n  canModify(model: WithdrawalRequest): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending requests\r\n    return String(model.userId()) === currentUser.id() && model.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can create new funds requests\r\n   */\r\n  canCreate(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!currentUser;\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete a funds request\r\n   */\r\n  canDelete(model: WithdrawalRequest): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending requests\r\n    return String(model.userId()) === currentUser.id() && model.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Get available funds platforms\r\n   */\r\n  async getPlatforms(): Promise<WithdrawalPlatform[]> {\r\n    try {\r\n      const platforms = await app.store.find(this.platformModelType);\r\n\r\n      return platforms as unknown as WithdrawalPlatform[];\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to fetch funds platforms\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate funds request data\r\n   */\r\n  private async validateWithdrawalRequest(data: any): Promise<void> {\r\n    const { platformId, amount } = data;\r\n\r\n    // Get platform details\r\n    const platform = (await app.store.find(\r\n      this.platformModelType,\r\n      String(platformId)\r\n    )) as unknown as WithdrawalPlatform;\r\n    if (!platform) {\r\n      throw new ServiceError(\r\n        \"Invalid platform selected\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Check if platform is active\r\n    if (!platform.isActive?.()) {\r\n      throw new ServiceError(\r\n        \"Selected platform is not available\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Validate amount limits\r\n    const minAmount = platform.minAmount?.() || 0;\r\n    const maxAmount = platform.maxAmount?.();\r\n\r\n    if (amount < minAmount) {\r\n      throw new ServiceError(\r\n        `Minimum funds amount is ${minAmount}`,\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    if (maxAmount && amount > maxAmount) {\r\n      throw new ServiceError(\r\n        `Maximum funds amount is ${maxAmount}`,\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Check user balance\r\n    const currentUser = app.session.user;\r\n    if (currentUser) {\r\n      const userBalance = parseFloat(currentUser.attribute(\"money\") || \"0\");\r\n      const fee = platform.fee?.() || 0;\r\n      const totalRequired = amount + fee;\r\n\r\n      if (userBalance < totalRequired) {\r\n        throw new ServiceError(\r\n          `Insufficient balance. Required: ${totalRequired}, Available: ${userBalance}`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate create attributes\r\n   */\r\n  private validateCreateAttributes(attributes: any): void {\r\n    const required = [\"platformId\", \"amount\", \"accountDetails\"];\r\n\r\n    for (const field of required) {\r\n      if (!attributes[field]) {\r\n        throw new ServiceError(\r\n          `${field} is required`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (typeof attributes.amount !== \"number\" || attributes.amount <= 0) {\r\n      throw new ServiceError(\r\n        \"Amount must be a positive number\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === \"TypeError\" || error.message?.includes(\"fetch\")) {\r\n      return new ServiceError(\r\n        \"Network error occurred\",\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if error is a not found error\r\n   */\r\n  private isNotFoundError(error: any): boolean {\r\n    return (\r\n      error.status === 404 ||\r\n      error.response?.status === 404 ||\r\n      error.message?.includes(\"not found\")\r\n    );\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const withdrawalService = new WithdrawalService();\r\n","import app from \"flarum/common/app\";\r\nimport {\r\n  QueryOptions,\r\n  ServiceError,\r\n  ServiceErrorType,\r\n} from \"../types/services\";\r\nimport WithdrawalRequest from \"../models/WithdrawalRequest\";\r\nimport DepositRecord from \"../models/DepositRecord\";\r\n\r\n/**\r\n * Service for managing both funds and deposit platforms\r\n */\r\nexport default class PlatformService {\r\n  private readonly withdrawalModelType = \"withdrawal-platforms\";\r\n  private readonly depositModelType = \"deposit-platforms\";\r\n\r\n  /**\r\n   * Find multiple platforms of specified type\r\n   */\r\n  async find(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    options: QueryOptions = {}\r\n  ): Promise<any[]> {\r\n    const modelType =\r\n      type === \"withdrawal\" ? this.withdrawalModelType : this.depositModelType;\r\n\r\n    try {\r\n      const queryParams: any = {\r\n        sort: options.sort || \"name\",\r\n        ...options,\r\n      };\r\n\r\n      // Add pagination if specified\r\n      if (options.page) {\r\n        queryParams.page = options.page;\r\n      }\r\n\r\n      // Add filters if specified\r\n      if (options.filter) {\r\n        queryParams.filter = options.filter;\r\n      }\r\n\r\n      // Include relationships if specified\r\n      if (options.include) {\r\n        queryParams.include = options.include;\r\n      }\r\n\r\n      const results = await app.store.find(modelType, queryParams);\r\n      return Array.isArray(results) ? results : [results];\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to fetch ${type} platforms`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find a single platform by ID\r\n   */\r\n  async findById(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    id: string | number,\r\n    options: QueryOptions = {}\r\n  ): Promise<any | null> {\r\n    const modelType =\r\n      type === \"withdrawal\" ? this.withdrawalModelType : this.depositModelType;\r\n\r\n    try {\r\n      const queryParams: any = {};\r\n\r\n      // Include relationships if specified\r\n      if (options.include) {\r\n        queryParams.include = options.include;\r\n      }\r\n\r\n      const result = await app.store.find(modelType, String(id), queryParams);\r\n      return result;\r\n    } catch (error) {\r\n      if (this.isNotFoundError(error)) {\r\n        return null;\r\n      }\r\n      throw this.handleError(error, `Failed to fetch ${type} platform ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new platform\r\n   */\r\n  async create(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    attributes: Record<string, any>\r\n  ): Promise<any> {\r\n    const modelType =\r\n      type === \"withdrawal\" ? this.withdrawalModelType : this.depositModelType;\r\n\r\n    try {\r\n      // Validate required fields based on platform type\r\n      this.validateCreateAttributes(type, attributes);\r\n\r\n      const platform = app.store.createRecord(modelType);\r\n\r\n      const savedPlatform = await platform.save(attributes);\r\n      return savedPlatform;\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to create ${type} platform`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing platform\r\n   */\r\n  async update(platform: any, attributes: Record<string, any>): Promise<any> {\r\n    try {\r\n      if (!this.canModify(platform)) {\r\n        throw new ServiceError(\r\n          \"You do not have permission to modify this platform\",\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      const updatedPlatform = await platform.save(attributes);\r\n      return updatedPlatform;\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to update platform\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a platform\r\n   */\r\n  async delete(platform: any): Promise<void> {\r\n    try {\r\n      if (!this.canDelete(platform)) {\r\n        throw new ServiceError(\r\n          \"You do not have permission to delete this platform\",\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      await platform.delete();\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to delete platform\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active platforms only\r\n   */\r\n  async getActive(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    options: QueryOptions = {}\r\n  ): Promise<any[]> {\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        isActive: true,\r\n        ...options.filter,\r\n      },\r\n    };\r\n\r\n    return await this.find(type, queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status (admin only)\r\n   */\r\n  async toggleStatus(platform: any): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const currentStatus = platform.isActive();\r\n    return await this.update(platform, { isActive: !currentStatus });\r\n  }\r\n\r\n  /**\r\n   * Update platform configuration (admin only)\r\n   */\r\n  async updateConfig(platform: any, config: Record<string, any>): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.update(platform, config);\r\n  }\r\n\r\n  /**\r\n   * Get platforms by symbol\r\n   */\r\n  async getBySymbol(\r\n    symbol: string,\r\n    type: \"withdrawal\" | \"deposit\"\r\n  ): Promise<any[]> {\r\n    return await this.find(type, {\r\n      filter: { symbol: symbol },\r\n      sort: \"name\",\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate platform limits for an amount\r\n   */\r\n  validateAmount(\r\n    platform: any,\r\n    amount: number\r\n  ): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      errors.push(\"Amount must be a positive number\");\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const minAmount = platform.minAmount ? platform.minAmount() : 0;\r\n    const maxAmount = platform.maxAmount ? platform.maxAmount() : null;\r\n\r\n    if (amount < minAmount) {\r\n      errors.push(`Amount must be at least ${minAmount}`);\r\n    }\r\n\r\n    if (maxAmount && amount > maxAmount) {\r\n      errors.push(`Amount cannot exceed ${maxAmount}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Get platform statistics (admin only)\r\n   */\r\n  async getPlatformStats(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    platformId: number\r\n  ): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        \"Admin permissions required\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const requestType =\r\n      type === \"withdrawal\" ? \"withdrawal-requests\" : \"deposit-records\";\r\n\r\n    try {\r\n      // Get all requests/records for this platform\r\n      const includeParams = type === \"withdrawal\" ? \"platform\" : \"user,processedByUser\";\r\n      const records = await app.store.find(requestType, {\r\n        filter: { platform: platformId.toString() },\r\n        include: includeParams,\r\n      });\r\n\r\n      const recordArray = Array.isArray(records) ? records : [records];\r\n\r\n      // Calculate statistics with proper typing\r\n      const stats = {\r\n        total: recordArray.length,\r\n        pending: recordArray.filter((r) => {\r\n          if (type === \"withdrawal\") {\r\n            return (r as WithdrawalRequest).status() === \"pending\";\r\n          } else {\r\n            return (r as DepositRecord).status() === \"pending\";\r\n          }\r\n        }).length,\r\n        approved: recordArray.filter((r) => {\r\n          if (type === \"withdrawal\") {\r\n            return (r as WithdrawalRequest).status() === \"approved\";\r\n          } else {\r\n            const status = (r as DepositRecord).status();\r\n            return status === \"approved\" || status === \"confirmed\";\r\n          }\r\n        }).length,\r\n        rejected: recordArray.filter((r) => {\r\n          if (type === \"withdrawal\") {\r\n            return (r as WithdrawalRequest).status() === \"rejected\";\r\n          } else {\r\n            return (r as DepositRecord).status() === \"rejected\";\r\n          }\r\n        }).length,\r\n        totalAmount: recordArray.reduce((sum, r) => {\r\n          if (type === \"withdrawal\") {\r\n            return sum + ((r as WithdrawalRequest).amount() || 0);\r\n          } else {\r\n            // DepositRecord might not have amount field, return sum as is\r\n            return sum;\r\n          }\r\n        }, 0),\r\n      };\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      throw this.handleError(error, \"Failed to fetch platform statistics\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get platforms grouped by symbol\r\n   */\r\n  async getPlatformsBySymbolGrouped(\r\n    type: \"withdrawal\" | \"deposit\"\r\n  ): Promise<Record<string, any[]>> {\r\n    const platforms = await this.getActive(type);\r\n    const grouped: Record<string, any[]> = {};\r\n\r\n    for (const platform of platforms) {\r\n      const symbol = platform.symbol();\r\n      if (!grouped[symbol]) {\r\n        grouped[symbol] = [];\r\n      }\r\n      grouped[symbol].push(platform);\r\n    }\r\n\r\n    return grouped;\r\n  }\r\n\r\n  /**\r\n   * Sort platforms by criteria\r\n   */\r\n  async getSortedPlatforms(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    sortBy: \"name\" | \"symbol\" | \"createdAt\" | \"fee\" = \"name\",\r\n    direction: \"asc\" | \"desc\" = \"asc\"\r\n  ): Promise<any[]> {\r\n    const sortString = direction === \"desc\" ? `-${sortBy}` : sortBy;\r\n\r\n    return await this.getActive(type, {\r\n      sort: sortString,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if current user can modify platforms\r\n   */\r\n  canModify(_platform: any): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can create new platforms\r\n   */\r\n  canCreate(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete platforms\r\n   */\r\n  canDelete(_platform: any): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Validate create attributes based on platform type\r\n   */\r\n  private validateCreateAttributes(\r\n    type: \"withdrawal\" | \"deposit\",\r\n    attributes: any\r\n  ): void {\r\n    const commonRequired = [\"name\", \"symbol\", \"minAmount\"];\r\n\r\n    // Only common fields are required (removed address requirement)\r\n    const required = commonRequired;\r\n\r\n    for (const field of required) {\r\n      if (!attributes[field]) {\r\n        throw new ServiceError(\r\n          `${field} is required for ${type} platforms`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (typeof attributes.minAmount !== \"number\" || attributes.minAmount < 0) {\r\n      throw new ServiceError(\r\n        \"minAmount must be a non-negative number\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    if (attributes.maxAmount !== undefined) {\r\n      if (\r\n        typeof attributes.maxAmount !== \"number\" ||\r\n        attributes.maxAmount < attributes.minAmount\r\n      ) {\r\n        throw new ServiceError(\r\n          \"maxAmount must be a number greater than or equal to minAmount\",\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (attributes.fee !== undefined) {\r\n      if (typeof attributes.fee !== \"number\" || attributes.fee < 0) {\r\n        throw new ServiceError(\r\n          \"fee must be a non-negative number\",\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    // Validate symbol format (basic validation)\r\n    if (typeof attributes.symbol !== \"string\" || !attributes.symbol.trim()) {\r\n      throw new ServiceError(\r\n        \"Symbol is required\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === \"TypeError\" || error.message?.includes(\"fetch\")) {\r\n      return new ServiceError(\r\n        \"Network error occurred\",\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if error is a not found error\r\n   */\r\n  private isNotFoundError(error: any): boolean {\r\n    return (\r\n      error.status === 404 ||\r\n      error.response?.status === 404 ||\r\n      error.message?.includes(\"not found\")\r\n    );\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const platformService = new PlatformService();\r\n","/**\r\n * Flarum API error interface for proper error handling\r\n */\r\nexport interface FlarumApiError {\r\n  response?: {\r\n    status?: number;\r\n    errors?: Array<{\r\n      detail?: string;\r\n      code?: string;\r\n    }>;\r\n  };\r\n  responseText?: string;\r\n  status?: number;\r\n}\r\n\r\n/**\r\n * Helper function to extract error message from Flarum API error\r\n */\r\nexport function extractErrorMessage(error: any, fallback = 'An error occurred'): string {\r\n  if (!error) return fallback;\r\n\r\n  // Check for JSON:API error format\r\n  if (error.response && error.response.errors && Array.isArray(error.response.errors)) {\r\n    const firstError = error.response.errors[0];\r\n    if (firstError && firstError.detail) {\r\n      return firstError.detail;\r\n    }\r\n  }\r\n\r\n  // Check for HTML error responses (PHP Fatal Errors)\r\n  if (error.responseText) {\r\n    if (error.responseText.includes('<b>Fatal error</b>') || error.responseText.includes('<!DOCTYPE')) {\r\n      return 'Server error occurred. Please try again later.';\r\n    }\r\n    \r\n    // Try to parse JSON response\r\n    try {\r\n      const response = JSON.parse(error.responseText);\r\n      if (response.errors && Array.isArray(response.errors)) {\r\n        return response.errors[0].detail || fallback;\r\n      }\r\n    } catch {\r\n      // Not valid JSON, return server error message\r\n      return 'Server error occurred. Please try again later.';\r\n    }\r\n  }\r\n\r\n  return fallback;\r\n}\r\n\r\n/**\r\n * Type guard to check if error is a Flarum API error\r\n */\r\nexport function isFlarumApiError(error: any): error is FlarumApiError {\r\n  return error && (\r\n    (error.response && error.response.errors) ||\r\n    error.responseText ||\r\n    error.status\r\n  );\r\n}\r\n\r\n/**\r\n * Type assertion helper for API responses\r\n * This is a temporary solution until better typing is available\r\n */\r\nexport function assertApiPayload(response: unknown): any {\r\n  // In a production environment, you would add runtime validation here\r\n  return response as any;\r\n}","import app from \"flarum/forum/app\";\r\nimport Page from \"flarum/common/components/Page\";\r\nimport Button from \"flarum/common/components/Button\";\r\nimport LoadingIndicator from \"flarum/common/components/LoadingIndicator\";\r\nimport Stream from \"flarum/common/utils/Stream\";\r\nimport icon from \"flarum/common/helpers/icon\";\r\nimport m from \"mithril\";\r\nimport type Mithril from \"mithril\";\r\n\r\n// Withdrawal imports\r\nimport type { WithdrawalFormData } from \"./withdrawal/types/interfaces\";\r\nimport WithdrawalPlatform from \"../../common/models/WithdrawalPlatform\";\r\nimport WithdrawalForm from \"./withdrawal/forms/WithdrawalForm\";\r\nimport TransactionHistory from \"./shared/TransactionHistory\";\r\n\r\n// Deposit imports\r\nimport type { DepositFormData } from \"./deposit/forms/DepositForm\";\r\nimport DepositForm from \"./deposit/forms/DepositForm\";\r\nimport DepositRecord from \"../../common/models/DepositRecord\";\r\nimport depositService from \"../../common/services/DepositService\";\r\n\r\n// Services\r\nimport { withdrawalService, platformService } from \"../../common/services\";\r\nimport { ServiceError } from \"../../common/types/services\";\r\n\r\n// Utilities\r\nimport { getAttr, getIdString } from \"./withdrawal/utils/modelHelpers\";\r\nimport {\r\n  extractErrorMessage,\r\n  type FlarumApiError,\r\n} from \"../../common/types/api\";\r\n\r\ntype TabType = \"withdrawal\" | \"deposit\" | \"history\";\r\n\r\ninterface FundsPageState {\r\n  // Withdrawal state\r\n  withdrawalPlatforms: WithdrawalPlatform[];\r\n  withdrawalRequests: any[];\r\n  userBalance: number;\r\n  loadingBalance: boolean;\r\n  submitting: boolean;\r\n\r\n  // Deposit state - 存款状态\r\n  depositPlatforms: any[]; // DepositPlatform[]\r\n  depositRecords: DepositRecord[];\r\n  submittingDeposit: boolean;\r\n\r\n  // Shared state\r\n  loading: boolean;\r\n  activeTab: Stream<TabType>;\r\n}\r\n\r\nexport default class FundsPage extends Page<any, FundsPageState> {\r\n  state: FundsPageState = {\r\n    withdrawalPlatforms: [],\r\n    withdrawalRequests: [],\r\n    userBalance: 0,\r\n    loadingBalance: true,\r\n    submitting: false,\r\n    depositPlatforms: [],\r\n    depositRecords: [],\r\n    submittingDeposit: false,\r\n    loading: true,\r\n    activeTab: Stream(\"deposit\"),\r\n  };\r\n\r\n  // Withdrawal form data\r\n  private withdrawalFormData: WithdrawalFormData = {\r\n    amount: Stream(\"\"),\r\n    selectedPlatform: Stream<WithdrawalPlatform | null>(null),\r\n    accountDetails: Stream(\"\"),\r\n    message: Stream(\"\"),\r\n  };\r\n\r\n  // 简化的存款表单数据不需要复杂的状态管理\r\n\r\n  oninit(vnode: Mithril.VnodeDOM) {\r\n    super.oninit(vnode);\r\n\r\n    // Parse URL to determine initial tab and sub-tab\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const tabParam = urlParams.get(\"tab\");\r\n\r\n    // Handle URL parameters to set appropriate tab\r\n    if (tabParam) {\r\n      // Handle legacy sub-tab URLs by redirecting to main tabs\r\n      if (tabParam === \"withdrawal-history\" || tabParam === \"deposit-history\") {\r\n        this.state.activeTab(\"history\");\r\n      } else if (this.isValidTab(tabParam)) {\r\n        this.state.activeTab(tabParam as TabType);\r\n      }\r\n    }\r\n\r\n    // Set page title based on active tab\r\n    this.updatePageTitle();\r\n\r\n    // Load data for both systems\r\n    this.loadAllData();\r\n  }\r\n\r\n  private isValidTab(tab: string): boolean {\r\n    return [\"withdrawal\", \"deposit\", \"history\"].includes(tab);\r\n  }\r\n\r\n  private updateUrl(): void {\r\n    const currentTab = this.state.activeTab();\r\n    const params = new URLSearchParams();\r\n\r\n    params.set(\"tab\", currentTab);\r\n\r\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\r\n    window.history.replaceState({}, \"\", newUrl);\r\n  }\r\n\r\n  private updatePageTitle(): void {\r\n    const tab = this.state.activeTab();\r\n    let titleKey = \"资金\"; // default\r\n\r\n    switch (tab) {\r\n      case \"withdrawal\":\r\n        titleKey = \"提款\";\r\n        break;\r\n      case \"deposit\":\r\n        titleKey = \"存款\";\r\n        break;\r\n      case \"history\":\r\n        titleKey = \"历史\";\r\n        break;\r\n    }\r\n\r\n    app.setTitle(titleKey);\r\n  }\r\n\r\n  view() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"FundsPage\">\r\n          <div className=\"FundsPage-loading\">\r\n            <LoadingIndicator />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage\">\r\n        <div className=\"FundsPage-modal\">\r\n          {this.renderHeader()}\r\n          <div className=\"FundsPage-content\">{this.renderActiveTab()}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderHeader(): Mithril.Children {\r\n    const activeTab = this.state.activeTab();\r\n\r\n    return (\r\n      <div className=\"FundsPage-header\">\r\n        <div className=\"FundsPage-tabs\">\r\n          <div\r\n            className={`FundsPage-tab ${\r\n              activeTab === \"deposit\" ? \"active\" : \"\"\r\n            }`}\r\n            onclick={() => this.handleTabChange(\"deposit\")}\r\n          >\r\n            {app.translator.trans(\"funds.forum.deposit.tabs.deposit\")}\r\n          </div>\r\n          <div\r\n            className={`FundsPage-tab ${\r\n              activeTab === \"withdrawal\" ? \"active\" : \"\"\r\n            }`}\r\n            onclick={() => this.handleTabChange(\"withdrawal\")}\r\n          >\r\n            {app.translator.trans(\"funds.forum.tabs.funds\")}\r\n          </div>\r\n          <div\r\n            className={`FundsPage-tab ${\r\n              activeTab === \"history\" ? \"active\" : \"\"\r\n            }`}\r\n            onclick={() => this.handleTabChange(\"history\")}\r\n          >\r\n            {app.translator.trans(\"funds.forum.tabs.history\")}\r\n          </div>\r\n        </div>\r\n        <Button\r\n          className=\"FundsPage-close\"\r\n          icon=\"fas fa-times\"\r\n          onclick={() => app.history.back()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderActiveTab(): Mithril.Children {\r\n    const activeTab = this.state.activeTab();\r\n\r\n    switch (activeTab) {\r\n      case \"withdrawal\":\r\n        return this.renderWithdrawalTab();\r\n      case \"deposit\":\r\n        return this.renderDepositTab();\r\n      case \"history\":\r\n        return this.renderHistoryTab();\r\n      default:\r\n        return this.renderWithdrawalTab();\r\n    }\r\n  }\r\n\r\n  private renderWithdrawalTab(): Mithril.Children {\r\n    return this.renderWithdrawalForm();\r\n  }\r\n\r\n  private renderWithdrawalForm(): Mithril.Children {\r\n    const validPlatforms = (this.state.withdrawalPlatforms || []).filter(\r\n      (platform) => !!platform\r\n    );\r\n\r\n    if (validPlatforms.length === 0) {\r\n      return (\r\n        <div className=\"FundsPage-withdrawalContent\">\r\n          <div className=\"FundsPage-emptyState\">\r\n            <div className=\"FundsPage-emptyIcon\">\r\n              {icon(\"fas fa-coins\")}\r\n            </div>\r\n            <h3 className=\"FundsPage-emptyTitle\">\r\n              {app.translator.trans(\"funds.forum.no_platforms\")}\r\n            </h3>\r\n            <p className=\"FundsPage-emptyDescription\">\r\n              {app.translator.trans(\"funds.forum.no_platforms_description\")}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawalContent\">\r\n        <WithdrawalForm\r\n          platforms={this.state.withdrawalPlatforms}\r\n          formData={this.getWithdrawalFormDataForComponent()}\r\n          loadingBalance={this.state.loadingBalance}\r\n          submitting={this.state.submitting}\r\n          onFormDataChange={this.handleWithdrawalFormDataChange.bind(this)}\r\n          onFillAllAmount={this.handleFillAllAmount.bind(this)}\r\n          onSubmit={this.handleWithdrawalSubmit.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderWithdrawalHistory(): Mithril.Children {\r\n    return (\r\n      <div className=\"FundsPage-withdrawalContent\">\r\n        <TransactionHistory\r\n          transactions={this.state.withdrawalRequests}\r\n          platforms={this.state.withdrawalPlatforms}\r\n          loading={false}\r\n          type=\"withdrawal\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositTab(): Mithril.Children {\r\n    return this.renderDepositForm();\r\n  }\r\n\r\n  private renderDepositForm(): Mithril.Children {\r\n    return (\r\n      <div className=\"FundsPage-depositContent\">\r\n        <DepositForm\r\n          platforms={this.state.depositPlatforms}\r\n          onSubmit={this.handleDepositSubmit.bind(this)}\r\n          onCancel={this.handleCancelDepositForm.bind(this)}\r\n          submitting={this.state.submittingDeposit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositHistory(): Mithril.Children {\r\n    return (\r\n      <div className=\"FundsPage-depositContent\">\r\n        <TransactionHistory\r\n          transactions={this.state.depositRecords}\r\n          platforms={this.state.depositPlatforms}\r\n          loading={false}\r\n          type=\"deposit\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderHistoryTab(): Mithril.Children {\r\n    const withdrawalRequests = this.state.withdrawalRequests || [];\r\n    const depositRecords = this.state.depositRecords || [];\r\n    const hasWithdrawals = withdrawalRequests.length > 0;\r\n    const hasDeposits = depositRecords.length > 0;\r\n\r\n    if (!hasWithdrawals && !hasDeposits) {\r\n      return (\r\n        <div className=\"FundsPage-historyContent\">\r\n          <div className=\"FundsPage-emptyState\">\r\n            <div className=\"FundsPage-emptyIcon\">{icon(\"fas fa-history\")}</div>\r\n            <h3 className=\"FundsPage-emptyTitle\">\r\n              {app.translator.trans(\"funds.forum.history.empty.title\")}\r\n            </h3>\r\n            <p className=\"FundsPage-emptyDescription\">\r\n              {app.translator.trans(\"funds.forum.history.empty.description\")}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-historyContent\">\r\n        {hasWithdrawals && (\r\n          <div className=\"FundsPage-historySection\">\r\n            <TransactionHistory\r\n              transactions={withdrawalRequests}\r\n              platforms={this.state.withdrawalPlatforms}\r\n              loading={false}\r\n              type=\"withdrawal\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {hasDeposits && (\r\n          <div className=\"FundsPage-historySection\">\r\n            <TransactionHistory\r\n              transactions={depositRecords}\r\n              platforms={this.state.depositPlatforms}\r\n              loading={false}\r\n              type=\"deposit\"\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleTabChange(tab: TabType): void {\r\n    this.state.activeTab(tab);\r\n    this.updatePageTitle();\r\n    this.updateUrl();\r\n  }\r\n\r\n  private getWithdrawalFormDataForComponent() {\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    return {\r\n      selectedPlatform: selectedPlatform,\r\n      amount: this.withdrawalFormData.amount(),\r\n      accountDetails: this.withdrawalFormData.accountDetails(),\r\n      message: this.withdrawalFormData.message(),\r\n    };\r\n  }\r\n\r\n  private handleWithdrawalFormDataChange(\r\n    data: Partial<WithdrawalFormData>\r\n  ): void {\r\n    if (data.selectedPlatform !== undefined) {\r\n      this.withdrawalFormData.selectedPlatform(data.selectedPlatform);\r\n    }\r\n    if (data.amount !== undefined) {\r\n      this.withdrawalFormData.amount(data.amount);\r\n    }\r\n    if (data.accountDetails !== undefined) {\r\n      this.withdrawalFormData.accountDetails(data.accountDetails);\r\n    }\r\n    if (data.message !== undefined) {\r\n      this.withdrawalFormData.message(data.message);\r\n    }\r\n  }\r\n\r\n  private async handleFillAllAmount(): Promise<void> {\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    if (!selectedPlatform) return;\r\n\r\n    if (this.state.loadingBalance) return;\r\n\r\n    try {\r\n      await this.loadUserBalance(true);\r\n\r\n      const fee = getAttr(selectedPlatform, \"fee\") || 0;\r\n      const maxAmount = getAttr(selectedPlatform, \"maxAmount\") || Infinity;\r\n      let availableAmount = this.state.userBalance - fee;\r\n\r\n      if (maxAmount < Infinity && availableAmount > maxAmount) {\r\n        availableAmount = maxAmount;\r\n      }\r\n\r\n      if (availableAmount > 0) {\r\n        this.withdrawalFormData.amount(availableAmount.toString());\r\n      } else {\r\n        app.alerts.show(\r\n          { type: \"warning\", dismissible: true },\r\n          app.translator.trans(\"funds.forum.insufficient_balance\")\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error refreshing balance:\", error);\r\n      app.alerts.show(\r\n        { type: \"error\", dismissible: true },\r\n        app.translator.trans(\"funds.forum.balance_refresh_error\")\r\n      );\r\n    }\r\n  }\r\n\r\n  private async handleWithdrawalSubmit(): Promise<void> {\r\n    if (this.state.submitting) return;\r\n\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    const amount = this.withdrawalFormData.amount();\r\n    const accountDetails = this.withdrawalFormData.accountDetails();\r\n\r\n    if (!selectedPlatform || !amount || !accountDetails) {\r\n      return;\r\n    }\r\n\r\n    // Basic validation\r\n    const amountNum = parseFloat(amount);\r\n    if (isNaN(amountNum) || amountNum <= 0) {\r\n      app.alerts.show(\r\n        { type: \"warning\", dismissible: true },\r\n        app.translator.trans(\"funds.forum.invalid_amount\")\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.state.submitting = true;\r\n\r\n    try {\r\n      await withdrawalService.submitRequest({\r\n        platformId: parseInt(getIdString(selectedPlatform), 10),\r\n        amount: amountNum,\r\n        accountDetails,\r\n        message: this.withdrawalFormData.message(),\r\n      });\r\n\r\n      // Clear form\r\n      this.withdrawalFormData.amount(\"\");\r\n      this.withdrawalFormData.accountDetails(\"\");\r\n      this.withdrawalFormData.message(\"\");\r\n      this.withdrawalFormData.selectedPlatform(null);\r\n\r\n      // Refresh data\r\n      await Promise.all([\r\n        this.loadUserBalance(true),\r\n        this.loadWithdrawalRequests(),\r\n      ]);\r\n\r\n      app.alerts.show(\r\n        { type: \"success\", dismissible: true },\r\n        app.translator.trans(\"funds.forum.submit_success\")\r\n      );\r\n    } catch (error: unknown) {\r\n      console.error(\"Withdrawal request failed:\", error);\r\n\r\n      let errorMessage = app.translator.trans(\"funds.forum.error\").toString();\r\n\r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      } else {\r\n        errorMessage = extractErrorMessage(\r\n          error as FlarumApiError,\r\n          errorMessage\r\n        );\r\n      }\r\n\r\n      app.alerts.show({ type: \"error\", dismissible: true }, errorMessage);\r\n    } finally {\r\n      this.state.submitting = false;\r\n    }\r\n  }\r\n\r\n  // Deposit methods - simplified platform selection\r\n\r\n  // 简化的存款处理方法\r\n  private handleCancelDepositForm(): void {\r\n    // 简单的取消操作，可以添加清空表单逻辑\r\n    m.redraw();\r\n  }\r\n\r\n  private async handleDepositSubmit(data: DepositFormData): Promise<void> {\r\n    if (this.state.submittingDeposit) return;\r\n\r\n    this.state.submittingDeposit = true;\r\n    m.redraw();\r\n\r\n    try {\r\n      await depositService.create(data);\r\n\r\n      app.alerts.show(\r\n        { type: \"success\", dismissible: true },\r\n        app.translator.trans(\"funds.forum.deposit.form.submit_success\")\r\n      );\r\n\r\n      // 重新加载存款记录\r\n      await this.loadDepositRecords();\r\n\r\n      // 切换到历史标签页显示刚提交的记录\r\n      this.state.activeTab(\"history\");\r\n    } catch (error: unknown) {\r\n      console.error(\"Deposit submission failed:\", error);\r\n\r\n      let errorMessage = app.translator\r\n        .trans(\"funds.forum.deposit.form.submit_error\")\r\n        .toString();\r\n\r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      } else {\r\n        errorMessage = extractErrorMessage(\r\n          error as FlarumApiError,\r\n          errorMessage\r\n        );\r\n      }\r\n\r\n      app.alerts.show({ type: \"error\", dismissible: true }, errorMessage);\r\n    } finally {\r\n      this.state.submittingDeposit = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  // Data loading methods\r\n  private async loadAllData(): Promise<void> {\r\n    try {\r\n      await Promise.all([\r\n        this.loadWithdrawalData(),\r\n        this.loadDepositData(),\r\n        this.loadUserBalance(),\r\n      ]);\r\n\r\n      this.state.loading = false;\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error(\"Error loading data:\", error);\r\n      this.state.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load withdrawal platforms and user requests using service layer\r\n   */\r\n  private async loadWithdrawalData(): Promise<void> {\r\n    try {\r\n      const [platforms, requests] = await Promise.all([\r\n        platformService.getActive(\"withdrawal\"),\r\n        withdrawalService.getUserHistory(),\r\n      ]);\r\n\r\n      this.state.withdrawalPlatforms = platforms as WithdrawalPlatform[];\r\n      this.state.withdrawalRequests = requests;\r\n    } catch (error) {\r\n      console.error(\"Error loading withdrawal data:\", error);\r\n      // Fallback to empty arrays\r\n      this.state.withdrawalPlatforms = [];\r\n      this.state.withdrawalRequests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load deposit platforms and user records using service layer\r\n   */\r\n  private async loadDepositData(): Promise<void> {\r\n    try {\r\n      const [platforms, records] = await Promise.all([\r\n        platformService.getActive(\"deposit\"),\r\n        depositService.getUserHistory(),\r\n      ]);\r\n\r\n      this.state.depositPlatforms = platforms;\r\n      this.state.depositRecords = records;\r\n    } catch (error) {\r\n      console.error(\"Error loading deposit data:\", error);\r\n      // Fallback to empty arrays\r\n      this.state.depositPlatforms = [];\r\n      this.state.depositRecords = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载简化的存款记录（用于表单提交后刷新）\r\n   */\r\n  private async loadDepositRecords(): Promise<void> {\r\n    try {\r\n      const records = await depositService.getUserHistory();\r\n      this.state.depositRecords = records;\r\n    } catch (error) {\r\n      console.error(\"Error loading deposit records:\", error);\r\n      this.state.depositRecords = [];\r\n    }\r\n  }\r\n\r\n  private async loadUserBalance(forceRefresh = false): Promise<void> {\r\n    try {\r\n      this.state.loadingBalance = true;\r\n\r\n      if (forceRefresh && app.session.user) {\r\n        const userId = app.session.user.id();\r\n        if (!userId) {\r\n          throw new Error(\"User ID not available\");\r\n        }\r\n\r\n        // Refresh user data through the store\r\n        const updatedUser = await app.store.find(\"users\", userId);\r\n\r\n        if (updatedUser) {\r\n          this.state.userBalance =\r\n            parseFloat(updatedUser.attribute(\"money\")) || 0;\r\n        } else {\r\n          this.state.userBalance = 0;\r\n        }\r\n      } else {\r\n        this.state.userBalance = parseFloat(\r\n          app.session.user?.attribute(\"money\") || \"0\"\r\n        );\r\n      }\r\n\r\n      this.state.loadingBalance = false;\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error(\"Error loading user balance:\", error);\r\n      this.state.loadingBalance = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private async loadWithdrawalRequests(): Promise<void> {\r\n    try {\r\n      const requests = await withdrawalService.getUserHistory();\r\n      this.state.withdrawalRequests = requests;\r\n    } catch (error) {\r\n      console.error(\"Error loading withdrawal requests:\", error);\r\n      this.state.withdrawalRequests = [];\r\n    }\r\n  }\r\n}\r\n","import { ServiceError, ServiceErrorType } from '../types/services';\r\n\r\n/**\r\n * Validate common platform fields\r\n */\r\nexport function validateCommonFields(attributes: Record<string, any>): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Name validation\r\n  if (attributes.name !== undefined) {\r\n    if (!attributes.name || typeof attributes.name !== 'string') {\r\n      errors.push('Platform name is required');\r\n    }\r\n  }\r\n\r\n  // Symbol validation\r\n  if (attributes.symbol !== undefined) {\r\n    if (!attributes.symbol || typeof attributes.symbol !== 'string') {\r\n      errors.push('Symbol is required');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Validate amount fields (min/max/fee)\r\n */\r\nexport function validateAmountFields(attributes: Record<string, any>, currentMinAmount?: number): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Min amount validation\r\n  if (attributes.minAmount !== undefined) {\r\n    if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\r\n      errors.push('Minimum amount must be a non-negative number');\r\n    }\r\n  }\r\n\r\n  // Max amount validation\r\n  if (attributes.maxAmount !== undefined && attributes.maxAmount !== null) {\r\n    if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < 0) {\r\n      errors.push('Maximum amount must be a non-negative number');\r\n    }\r\n    \r\n    const minAmount = attributes.minAmount ?? currentMinAmount ?? 0;\r\n    if (attributes.maxAmount < minAmount) {\r\n      errors.push('Maximum amount must be greater than or equal to minimum amount');\r\n    }\r\n  }\r\n\r\n  // Fee validation\r\n  if (attributes.fee !== undefined && attributes.fee !== null) {\r\n    if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\r\n      errors.push('Fee must be a non-negative number');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Validate deposit-specific fields\r\n */\r\nexport function validateDepositFields(attributes: Record<string, any>): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Network validation (for deposit platforms) - only validate if provided\r\n  if (attributes.network !== undefined && attributes.network !== null && attributes.network !== '') {\r\n    if (typeof attributes.network !== 'string') {\r\n      errors.push('Network must be a string');\r\n    }\r\n  }\r\n\r\n  // Address validation (for deposit platforms) - only validate if provided\r\n  if (attributes.address !== undefined && attributes.address !== null && attributes.address !== '') {\r\n    if (typeof attributes.address !== 'string') {\r\n      errors.push('Deposit address must be a string');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Throw validation error if there are any errors\r\n */\r\nexport function throwIfErrors(errors: string[]): void {\r\n  if (errors.length > 0) {\r\n    throw new ServiceError(\r\n      errors.join(', '),\r\n      ServiceErrorType.VALIDATION_ERROR\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Complete validation for funds platforms\r\n */\r\nexport function validateWithdrawalPlatform(attributes: Record<string, any>, currentMinAmount?: number): void {\r\n  const errors = [\r\n    ...validateCommonFields(attributes),\r\n    ...validateAmountFields(attributes, currentMinAmount)\r\n  ];\r\n  \r\n  throwIfErrors(errors);\r\n}\r\n\r\n/**\r\n * Complete validation for deposit platforms\r\n */\r\nexport function validateDepositPlatform(attributes: Record<string, any>, currentMinAmount?: number): void {\r\n  const errors = [\r\n    ...validateCommonFields(attributes),\r\n    ...validateAmountFields(attributes, currentMinAmount),\r\n    ...validateDepositFields(attributes)\r\n  ];\r\n  \r\n  throwIfErrors(errors);\r\n}","import Model from \"flarum/common/Model\";\r\nimport { ServiceError, ServiceErrorType } from \"../types/services\";\r\nimport { validateWithdrawalPlatform } from \"../utils/PlatformValidation\";\r\nimport { IconRepresentation } from \"../utils/IconResolver\";\r\nimport app from \"flarum/common/app\";\r\n\r\n/**\r\n * WithdrawalPlatform model for Flarum\r\n *\r\n * This model represents a funds platform that users can use\r\n * to withdraw their virtual currency with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalPlatform extends Model {\r\n  // Basic attributes\r\n  name = Model.attribute<string>(\"name\");\r\n  symbol = Model.attribute<string>(\"symbol\");\r\n  network = Model.attribute<string | null>(\"network\");\r\n  displayName = Model.attribute<string>(\"displayName\");\r\n  minAmount = Model.attribute<number>(\"minAmount\");\r\n  maxAmount = Model.attribute<number>(\"maxAmount\");\r\n  fee = Model.attribute<number>(\"fee\");\r\n\r\n  // Platform icon system\r\n  platformIconUrl = Model.attribute<string>(\"platformIconUrl\");\r\n  platformIconClass = Model.attribute<string>(\"platformIconClass\");\r\n\r\n  // Status\r\n  isActive = Model.attribute<boolean>(\"isActive\");\r\n\r\n  // Timestamps\r\n  createdAt = Model.attribute(\"createdAt\", Model.transformDate);\r\n  updatedAt = Model.attribute(\"updatedAt\", Model.transformDate);\r\n\r\n  // Icon representation from serializer\r\n  bestIcon = Model.attribute<IconRepresentation>(\"bestIcon\");\r\n\r\n  // Computed properties\r\n  apiEndpoint() {\r\n    const id = this.id();\r\n    return id ? `/withdrawal-platforms/${id}` : \"/withdrawal-platforms\";\r\n  }\r\n\r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n\r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    return amount >= min && amount <= max;\r\n  }\r\n\r\n  getTotalCost(amount: number): number {\r\n    return amount + this.fee();\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<any> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes || {});\r\n      return result;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to delete this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        \"Cannot delete platform that has pending funds requests\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<WithdrawalPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to modify this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): WithdrawalPlatform {\r\n    const cloned = app.store.createRecord(\r\n      \"withdrawal-platforms\"\r\n    ) as WithdrawalPlatform;\r\n\r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + \" (Copy)\",\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      // Copy platform icon fields\r\n      platformIconUrl: this.platformIconUrl(),\r\n      platformIconClass: this.platformIconClass(),\r\n      isActive: false, // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      errors.push(\"Amount must be a positive number\");\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    if (amount < this.minAmount()) {\r\n      errors.push(\r\n        `Amount must be at least ${this.minAmount()} ${this.symbol()}`\r\n      );\r\n    }\r\n\r\n    if (this.maxAmount() && amount > this.maxAmount()) {\r\n      errors.push(`Amount cannot exceed ${this.maxAmount()} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Check if user has sufficient balance for funds\r\n   */\r\n  validateUserBalance(\r\n    amount: number,\r\n    userBalance: number\r\n  ): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n    const totalCost = this.getTotalCost(amount);\r\n\r\n    if (userBalance < totalCost) {\r\n      const feeText =\r\n        this.fee() > 0 ? ` (including ${this.fee()} ${this.symbol()} fee)` : \"\";\r\n      errors.push(\r\n        `Insufficient balance. Required: ${totalCost} ${this.symbol()}${feeText}, Available: ${userBalance} ${this.symbol()}`\r\n      );\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n\r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const id = this.id();\r\n      if (!id) {\r\n        return false;\r\n      }\r\n      const requests = await app.store.find(\"withdrawal-requests\", {\r\n        filter: { platform: id, status: \"pending\" },\r\n      });\r\n\r\n      const requestsArray = Array.isArray(requests) ? requests : [requests];\r\n      return requestsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee();\r\n    if (fee === 0) {\r\n      return \"Free\";\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    validateWithdrawalPlatform(attributes, this.minAmount());\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || \"Failed to save withdrawal platform\",\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to save withdrawal platform\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        \"You do not have permission to delete this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to delete withdrawal platform\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Shared type definitions for the Withdrawal extension\r\n */\r\n\r\n/**\r\n * Withdrawal platform data structure\r\n */\r\nexport interface WithdrawalPlatformData {\r\n  id: string | number;\r\n  name: string;\r\n  symbol: string;\r\n  minAmount: number;\r\n  maxAmount: number;\r\n  fee: number;\r\n  iconUrl?: string | null;\r\n  iconClass?: string | null;\r\n  isActive: boolean;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * Withdrawal request data structure\r\n */\r\nexport interface WithdrawalRequestData {\r\n  id: string | number;\r\n  amount: number;\r\n  accountDetails: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  platformId: number;\r\n  userId: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * User funds data extension\r\n */\r\nexport interface UserWithdrawalData {\r\n  money?: number;\r\n  withdrawalRequests?: WithdrawalRequestData[];\r\n}\r\n\r\n/**\r\n * API response structures\r\n */\r\nexport interface ApiSuccessResponse<T = any> {\r\n  data: T;\r\n}\r\n\r\nexport interface ApiErrorResponse {\r\n  errors: Array<{\r\n    status: string;\r\n    code: string;\r\n    title: string;\r\n    detail?: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Form validation errors\r\n */\r\nexport interface ValidationErrors {\r\n  [field: string]: string[];\r\n}\r\n\r\n/**\r\n * Configuration constants\r\n */\r\nexport const WITHDRAWAL_STATUS = {\r\n  PENDING: 'pending',\r\n  APPROVED: 'approved',\r\n  REJECTED: 'rejected',\r\n} as const;\r\n\r\nexport type WithdrawalStatus = typeof WITHDRAWAL_STATUS[keyof typeof WITHDRAWAL_STATUS];\r\n\r\n/**\r\n * Default values\r\n */\r\nexport const DEFAULT_MIN_AMOUNT = 0.001;\r\nexport const DEFAULT_MAX_AMOUNT = 10;\r\nexport const DEFAULT_FEE = 0.0005;\r\n\r\n/**\r\n * Helper type guards\r\n */\r\nexport function isWithdrawalPlatform(obj: any): obj is WithdrawalPlatformData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'name' in obj &&\r\n    'symbol' in obj &&\r\n    'minAmount' in obj &&\r\n    'maxAmount' in obj;\r\n}\r\n\r\nexport function isWithdrawalRequest(obj: any): obj is WithdrawalRequestData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'amount' in obj &&\r\n    'accountDetails' in obj &&\r\n    'status' in obj &&\r\n    'platformId' in obj &&\r\n    'userId' in obj;\r\n}","import Model from \"flarum/common/Model\";\r\nimport User from \"flarum/common/models/User\";\r\nimport WithdrawalPlatform from \"./WithdrawalPlatform\";\r\nimport { WithdrawalStatus, WITHDRAWAL_STATUS } from \"../types\";\r\nimport { ServiceError, ServiceErrorType } from \"../types/services\";\r\nimport app from \"flarum/common/app\";\r\n\r\n/**\r\n * WithdrawalRequest model for Flarum\r\n *\r\n * This model represents a user's funds request with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalRequest extends Model {\r\n  // Basic attributes\r\n  amount = Model.attribute<number>(\"amount\");\r\n  accountDetails = Model.attribute<string>(\"accountDetails\");\r\n  message = Model.attribute<string>(\"message\");\r\n  status = Model.attribute<WithdrawalStatus>(\"status\");\r\n\r\n  // Foreign keys\r\n  platformId = Model.attribute<number>(\"platformId\");\r\n  userId = Model.attribute<number>(\"userId\");\r\n\r\n  // Timestamps\r\n  createdAt = Model.attribute<Date>(\"createdAt\", (attr: unknown) =>\r\n    Model.transformDate(attr as string)\r\n  );\r\n  updatedAt = Model.attribute<Date>(\"updatedAt\", (attr: unknown) =>\r\n    Model.transformDate(attr as string)\r\n  );\r\n\r\n  // Relationships\r\n  user = Model.hasOne<User>(\"user\");\r\n  platform = Model.hasOne<WithdrawalPlatform>(\"platform\");\r\n\r\n  // Computed properties\r\n  apiEndpoint() {\r\n    const id = this.id();\r\n    return id ? `/withdrawal-requests/${id}` : \"/withdrawal-requests\";\r\n  }\r\n\r\n  // Status helpers\r\n  isPending(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.PENDING;\r\n  }\r\n\r\n  isApproved(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.APPROVED;\r\n  }\r\n\r\n  isRejected(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.REJECTED;\r\n  }\r\n\r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n\r\n  // Display helpers\r\n  statusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`funds.forum.status.${status}`).toString();\r\n  }\r\n\r\n  statusColor(): string {\r\n    const status = this.status();\r\n    switch (status) {\r\n      case WITHDRAWAL_STATUS.APPROVED:\r\n        return \"success\";\r\n      case WITHDRAWAL_STATUS.REJECTED:\r\n        return \"danger\";\r\n      case WITHDRAWAL_STATUS.PENDING:\r\n      default:\r\n        return \"warning\";\r\n    }\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this funds request with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<any> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes || {});\r\n      return result;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this funds request with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to delete this request\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Only check if request can be modified for non-admin users\r\n    const currentUser = app.session.user;\r\n    if (currentUser && !currentUser.isAdmin() && !this.canBeModified()) {\r\n      throw new ServiceError(\r\n        \"This request cannot be deleted as it has already been processed\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this request for resubmission\r\n   */\r\n  clone(): WithdrawalRequest {\r\n    const cloned = app.store.createRecord(\r\n      \"withdrawal-requests\"\r\n    ) as WithdrawalRequest;\r\n\r\n    // Copy relevant attributes but not status/timestamps\r\n    cloned.pushAttributes({\r\n      platformId: this.platformId(),\r\n      amount: this.amount(),\r\n      accountDetails: this.accountDetails(),\r\n      message: this.message(),\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Get total cost including fees\r\n   */\r\n  getTotalCost(): number {\r\n    const platform = this.platform();\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n    return this.amount() + fee;\r\n  }\r\n\r\n  /**\r\n   * Get formatted amount string\r\n   */\r\n  getFormattedAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : \"\";\r\n    return `${this.amount()} ${symbol}`.trim();\r\n  }\r\n\r\n  /**\r\n   * Get formatted total cost string including fees\r\n   */\r\n  getFormattedTotalCost(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : \"\";\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n\r\n    if (fee > 0) {\r\n      return `${this.amount()} + ${fee} (fee) = ${this.getTotalCost()} ${symbol}`.trim();\r\n    }\r\n\r\n    return this.getFormattedAmount();\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this request\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending requests\r\n    return String(this.userId()) === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this request\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending requests\r\n    return String(this.userId()) === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this request's details\r\n   */\r\n  canView(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own requests\r\n    return String(this.userId()) === currentUser.id();\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.amount !== undefined) {\r\n      if (typeof attributes.amount !== \"number\" || attributes.amount <= 0) {\r\n        errors.push(\"Amount must be a positive number\");\r\n      }\r\n    }\r\n\r\n    if (attributes.accountDetails !== undefined) {\r\n      if (\r\n        !attributes.accountDetails ||\r\n        typeof attributes.accountDetails !== \"string\"\r\n      ) {\r\n        errors.push(\"Account details are required\");\r\n      }\r\n    }\r\n\r\n    if (attributes.platformId !== undefined) {\r\n      if (!attributes.platformId || typeof attributes.platformId !== \"number\") {\r\n        errors.push(\"Platform selection is required\");\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(\", \"),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || \"Failed to save funds request\",\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to save funds request\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        \"You do not have permission to delete this request\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to delete funds request\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n","import Model from \"flarum/common/Model\";\r\nimport { ServiceError, ServiceErrorType } from \"../types/services\";\r\nimport { validateDepositPlatform } from \"../utils/PlatformValidation\";\r\nimport { IconRepresentation } from \"../utils/IconResolver\";\r\nimport app from \"flarum/common/app\";\r\n\r\n/**\r\n * DepositPlatform model for Flarum\r\n *\r\n * Uses the unified platform structure defined in PlatformStructure.ts\r\n */\r\nexport default class DepositPlatform extends Model {\r\n  name = Model.attribute<string>(\"name\");\r\n  symbol = Model.attribute<string>(\"symbol\");\r\n  network = Model.attribute<string>(\"network\");\r\n  networkTypeId = Model.attribute<number>(\"networkTypeId\");\r\n  displayName = Model.attribute<string>(\"displayName\");\r\n  minAmount = Model.attribute<number>(\"minAmount\");\r\n  maxAmount = Model.attribute<number>(\"maxAmount\");\r\n  fee = Model.attribute<number>(\"fee\");\r\n  address = Model.attribute<string>(\"address\");\r\n  qrCodeImageUrl = Model.attribute<string>(\"qrCodeImageUrl\");\r\n  // Platform icon system\r\n  platformIconUrl = Model.attribute<string>(\"platformIconUrl\");\r\n  platformIconClass = Model.attribute<string>(\"platformIconClass\");\r\n  warningText = Model.attribute<string>(\"warningText\");\r\n  networkConfig = Model.attribute<any>(\"networkConfig\");\r\n  isActive = Model.attribute<boolean>(\"isActive\");\r\n  createdAt = Model.attribute<Date>(\"createdAt\", (attr: unknown) =>\r\n    Model.transformDate(attr as string)\r\n  );\r\n  updatedAt = Model.attribute<Date>(\"updatedAt\", (attr: unknown) =>\r\n    Model.transformDate(attr as string)\r\n  );\r\n\r\n  // Relationships\r\n  networkType = Model.hasOne(\"networkType\");\r\n\r\n  // Icon representations from serializer\r\n  bestIcon = Model.attribute<IconRepresentation>(\"bestIcon\");\r\n\r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n\r\n  getFullDisplayName(): string {\r\n    const name = this.getDisplayName();\r\n    const network = this.network();\r\n    return network ? `${name} (${network})` : name;\r\n  }\r\n\r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    return amount >= min && (!max || amount <= max);\r\n  }\r\n\r\n  getTotalCost(amount: number): number {\r\n    return amount + (this.fee() || 0);\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<any> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes || {});\r\n      return result;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to delete this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        \"Cannot delete platform that has pending deposit records\",\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<DepositPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        \"You do not have permission to modify this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): DepositPlatform {\r\n    const cloned = app.store.createRecord(\r\n      \"deposit-platforms\"\r\n    ) as DepositPlatform;\r\n\r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + \" (Copy)\",\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      networkTypeId: this.networkTypeId(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      address: this.address(),\r\n      qrCodeImageUrl: this.qrCodeImageUrl(),\r\n      platformIconUrl: this.platformIconUrl(),\r\n      platformIconClass: this.platformIconClass(),\r\n      warningText: this.warningText(),\r\n      isActive: false, // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      errors.push(\"Amount must be a positive number\");\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const min = this.minAmount() || 0;\r\n    if (amount < min) {\r\n      errors.push(`Amount must be at least ${min} ${this.symbol()}`);\r\n    }\r\n\r\n    const max = this.maxAmount();\r\n    if (max && amount > max) {\r\n      errors.push(`Amount cannot exceed ${max} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n\r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return !!(currentUser && currentUser.isAdmin());\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const id = this.id();\r\n      if (!id) {\r\n        return false;\r\n      }\r\n      const records = await app.store.find(\"deposit-records\", {\r\n        filter: { platform: id.toString(), status: \"pending\" },\r\n      });\r\n\r\n      const recordsArray = Array.isArray(records) ? records : [records];\r\n      return recordsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee() || 0;\r\n    if (fee === 0) {\r\n      return \"Free\";\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  /**\r\n   * Generate deposit address for user\r\n   */\r\n  generateDepositAddress(_userId?: number): string {\r\n    const address = this.address();\r\n\r\n    // For now, we return the static address\r\n    // In the future, this could be enhanced to support dynamic address generation\r\n    if (address && typeof address === \"string\") {\r\n      return address;\r\n    }\r\n\r\n    throw new ServiceError(\r\n      \"No deposit address configured for this platform\",\r\n      ServiceErrorType.VALIDATION_ERROR\r\n    );\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    validateDepositPlatform(attributes, this.minAmount() || undefined);\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || \"Failed to save deposit platform\",\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to save deposit platform\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        \"You do not have permission to delete this platform\",\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || \"Failed to delete deposit platform\",\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n","import Model from \"flarum/common/Model\";\r\nimport User from \"flarum/common/models/User\";\r\n\r\nexport default class DepositRecord extends Model {\r\n  // 属性\r\n  userId = Model.attribute<number>(\"userId\");\r\n  platformId = Model.attribute<number>(\"platformId\");\r\n  amount = Model.attribute<number>(\"amount\");\r\n  depositTime = Model.attribute(\"depositTime\", Model.transformDate);\r\n  userMessage = Model.attribute<string>(\"userMessage\");\r\n  status = Model.attribute<string>(\"status\");\r\n  statusText = Model.attribute<string>(\"statusText\");\r\n  processedAt = Model.attribute(\"processedAt\", Model.transformDate);\r\n  processedBy = Model.attribute<number>(\"processedBy\");\r\n  adminNotes = Model.attribute<string>(\"adminNotes\");\r\n  createdAt = Model.attribute(\"createdAt\", Model.transformDate);\r\n  updatedAt = Model.attribute(\"updatedAt\", Model.transformDate);\r\n  formattedCreatedAt = Model.attribute<string>(\"formattedCreatedAt\");\r\n  formattedProcessedAt = Model.attribute<string>(\"formattedProcessedAt\");\r\n  isPending = Model.attribute<boolean>(\"isPending\");\r\n  isApproved = Model.attribute<boolean>(\"isApproved\");\r\n  isRejected = Model.attribute<boolean>(\"isRejected\");\r\n\r\n  // 关联\r\n  user = Model.hasOne<User>(\"user\");\r\n  processedByUser = Model.hasOne<User>(\"processedByUser\");\r\n  platform = Model.hasOne(\"platform\");\r\n\r\n  // 辅助方法\r\n  getStatusColor(): string {\r\n    switch (this.status()) {\r\n      case \"pending\":\r\n        return \"warning\";\r\n      case \"approved\":\r\n        return \"success\";\r\n      case \"rejected\":\r\n        return \"danger\";\r\n      default:\r\n        return \"secondary\";\r\n    }\r\n  }\r\n\r\n  getStatusIcon(): string {\r\n    switch (this.status()) {\r\n      case \"pending\":\r\n        return \"fas fa-clock\";\r\n      case \"approved\":\r\n        return \"fas fa-check-circle\";\r\n      case \"rejected\":\r\n        return \"fas fa-times-circle\";\r\n      default:\r\n        return \"fas fa-question-circle\";\r\n    }\r\n  }\r\n\r\n  canEdit(currentUser?: User): boolean {\r\n    if (!currentUser) return false;\r\n\r\n    // 管理员可以编辑任何记录\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // 用户只能编辑自己的待处理记录\r\n    return this.userId().toString() === currentUser.id() && this.isPending();\r\n  }\r\n\r\n  canDelete(currentUser?: User): boolean {\r\n    if (!currentUser) return false;\r\n\r\n    // 只有管理员可以删除\r\n    return currentUser.isAdmin() || false;\r\n  }\r\n\r\n  getFormattedAmount(): string {\r\n    const amount = this.amount();\r\n    return amount ? amount.toFixed(2) : \"0.00\";\r\n  }\r\n\r\n  getFormattedDepositTime(): string {\r\n    const time = this.depositTime();\r\n    return time\r\n      ? time.toLocaleDateString() + \" \" + time.toLocaleTimeString()\r\n      : \"\";\r\n  }\r\n}\r\n","import Component, { ComponentAttrs } from \"flarum/common/Component\";\r\nimport app from \"flarum/forum/app\";\r\nimport type Mithril from \"mithril\";\r\n\r\n/**\r\n * MoneyDisplay component shows the user's money balance with funds button\r\n */\r\nexport default class MoneyDisplay extends Component<ComponentAttrs> {\r\n  view(): Mithril.Children {\r\n    if (!app.session.user) {\r\n      return null;\r\n    }\r\n\r\n    const moneyName: string =\r\n      app.forum.attribute(\"antoinefr-money.moneyname\") || \"[money]\";\r\n    const userMoneyText: string = moneyName.replace(\r\n      \"[money]\",\r\n      app.session.user.attribute(\"money\")\r\n    );\r\n    const iconUrl: string | null = app.forum.attribute(\r\n      \"wusong8899-funds.moneyIconUrl\"\r\n    );\r\n\r\n    return (\r\n      <div\r\n        id=\"moneyDisplayContainer\"\r\n        className=\"client1-header-adv-wrapper clientCustomizeWithdrawalHeaderTotalMoney\"\r\n      >\r\n        <div className=\"clientCustomizeWithdrawalHeaderText\">\r\n          {iconUrl && iconUrl.trim() && (\r\n            <span\r\n              style={{\r\n                borderRadius: \"50%\",\r\n                padding: \"6px 8px\",\r\n                marginRight: \"8px\",\r\n                display: \"inline-flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <img\r\n                src={iconUrl}\r\n                alt=\"Money icon\"\r\n                style={{\r\n                  width: \"20px\",\r\n                  height: \"20px\",\r\n                }}\r\n                onError={(e: Event) => {\r\n                  // Hide image if it fails to load\r\n                  const target = e.target as HTMLImageElement;\r\n                  target.style.display = \"none\";\r\n                }}\r\n              />\r\n            </span>\r\n          )}\r\n          {userMoneyText}\r\n        </div>\r\n\r\n        <div className=\"clientCustomizeWithdrawalHeaderIcon\">\r\n          <i className=\"fas fa-wallet\" />\r\n        </div>\r\n\r\n        <div className=\"clientCustomizeWithdrawalButtons\">\r\n          <div\r\n            className=\"clientCustomizeWithdrawalButton\"\r\n            onclick={this.handleWithdrawalClick.bind(this)}\r\n            title=\"提款\"\r\n          >\r\n            <i className=\"fas fa-money-bill-transfer\" />\r\n            <span style={{ marginLeft: \"4px\", fontSize: \"12px\" }}>提款</span>\r\n          </div>\r\n          <div\r\n            className=\"clientCustomizeDepositButton\"\r\n            onclick={this.handleDepositClick.bind(this)}\r\n            title=\"存款\"\r\n            style={{ marginLeft: \"8px\" }}\r\n          >\r\n            <i className=\"fas fa-coins\" />\r\n            <span style={{ marginLeft: \"4px\", fontSize: \"12px\" }}>存款</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle funds button click\r\n   */\r\n  private handleWithdrawalClick(e: Event): void {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    // Navigate to funds page with funds tab\r\n    window.location.href = \"/funds?tab=funds\";\r\n  }\r\n\r\n  /**\r\n   * Handle deposit button click\r\n   */\r\n  private handleDepositClick(e: Event): void {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    // Navigate to funds page with deposit tab\r\n    window.location.href = \"/funds?tab=deposit\";\r\n  }\r\n}\r\n","import Component, { ComponentAttrs } from 'flarum/common/Component';\r\nimport app from 'flarum/forum/app';\r\nimport type Mithril from 'mithril';\r\n\r\n/**\r\n * MobileMoneyDisplay component for mobile navigation bar\r\n * Shows user's money balance with funds button in mobile navigation\r\n */\r\nexport default class MobileMoneyDisplay extends Component<ComponentAttrs> {\r\n  view(): Mithril.Children {\r\n    // Note: Mobile detection and user authentication are now handled in index.ts\r\n    // This component assumes it should render when called\r\n    const userMoney = app.session.user?.attribute('money') || 0;\r\n    const iconUrl: string | null = app.forum.attribute('wusong8899-funds.moneyIconUrl');\r\n\r\n    return (\r\n      <div className=\"Navigation-mobileMoneyDisplay\">\r\n        <div \r\n          className=\"Navigation-moneySection\"\r\n          onclick={this.handleWithdrawalClick.bind(this)}\r\n          title={`余额: ${userMoney} - 点击提款`}\r\n        >\r\n          {/* 货币图标和金额显示 */}\r\n          <div className=\"Navigation-moneyText\">\r\n            {iconUrl && iconUrl.trim() && (\r\n              <span style={{  \r\n                borderRadius: '50%', \r\n                padding: '4px 6px', \r\n                marginRight: '6px',\r\n                display: 'inline-flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <img \r\n                  src={iconUrl} \r\n                  alt=\"Money icon\" \r\n                  style={{ \r\n                    width: '18px', \r\n                    height: '18px'\r\n                  }}\r\n                  onError={(e: Event) => {\r\n                    // Hide image if it fails to load\r\n                    const target = e.target as HTMLImageElement;\r\n                    target.style.display = 'none';\r\n                  }}\r\n                />\r\n              </span>\r\n            )}\r\n            <span className=\"Navigation-moneyAmount\">{userMoney}</span>\r\n          </div>\r\n          \r\n          {/* 提款按钮 */}\r\n          <div className=\"Navigation-withdrawalButton\">\r\n            <i className=\"fas fa-money-bill-transfer\" />\r\n            <span>提款</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle funds button click\r\n   */\r\n  private handleWithdrawalClick(e: Event): void {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    console.log('MobileMoneyDisplay clicked!'); // 调试日志\r\n    \r\n    try {\r\n      // Navigate to unified funds page with funds tab\r\n      window.location.href = '/funds?tab=funds';\r\n    } catch (error) {\r\n      console.error('Navigation error:', error);\r\n      // 备用方案\r\n      window.location.href = '/funds?tab=funds';\r\n    }\r\n  }\r\n}","import app from 'flarum/forum/app';\r\n\r\n/**\r\n * ConfigManager utility for flarum-funds extension\r\n */\r\nexport class ConfigManager {\r\n  private static instance: ConfigManager;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): ConfigManager {\r\n    if (!ConfigManager.instance) {\r\n      ConfigManager.instance = new ConfigManager();\r\n    }\r\n    return ConfigManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Check if current page is the tags page (main forum page)\r\n   */\r\n  public isTagsPage(): boolean {\r\n    try {\r\n      const routeName = app.current?.get('routeName');\r\n      return routeName === 'index';\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}","/**\n * Check if the current device is mobile based on screen width\n */\nexport function isMobile(): boolean {\n  return window.innerWidth <= 767;\n}\n\n/**\n * Check if the current device is tablet\n */\nexport function isTablet(): boolean {\n  return window.innerWidth >= 768 && window.innerWidth <= 1024;\n}\n\n/**\n * Check if the current device is desktop\n */\nexport function isDesktop(): boolean {\n  return window.innerWidth > 1024;\n}\n\n/**\n * Check if the current device is mobile or tablet\n */\nexport function isMobileOrTablet(): boolean {\n  return isMobile() || isTablet();\n}\n\n/**\n * Get the current breakpoint\n */\nexport function getCurrentBreakpoint(): 'mobile' | 'tablet' | 'desktop' {\n  if (isMobile()) return 'mobile';\n  if (isTablet()) return 'tablet';\n  return 'desktop';\n}\n\n/**\n * Check if touch is supported\n */\nexport function isTouchDevice(): boolean {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n}\n\n// For backward compatibility\nexport const MobileDetector = {\n  isMobile,\n  isTablet,\n  isDesktop,\n  isMobileOrTablet,\n  getCurrentBreakpoint,\n  isTouchDevice\n};","import app from 'flarum/forum/app';\r\nimport { extend } from 'flarum/common/extend';\r\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\r\nimport Navigation from 'flarum/common/components/Navigation';\r\nimport FundsPage from './components/FundsPage';\r\nimport WithdrawalPlatform from '../common/models/WithdrawalPlatform';\r\nimport WithdrawalRequest from '../common/models/WithdrawalRequest';\r\nimport DepositPlatform from '../common/models/DepositPlatform';\r\nimport DepositRecord from '../common/models/DepositRecord';\r\nimport MoneyDisplay from './components/MoneyDisplay';\r\nimport MobileMoneyDisplay from './components/MobileMoneyDisplay';\r\nimport { ConfigManager } from './utils/ConfigManager';\r\nimport { MobileDetector } from './utils/MobileDetector';\r\n\r\napp.initializers.add('wusong8899-funds', () => {\r\n  // Register models in store\r\n  app.store.models['withdrawal-platforms'] = WithdrawalPlatform as any;\r\n  app.store.models['withdrawal-requests'] = WithdrawalRequest as any;\r\n  app.store.models['deposit-platforms'] = DepositPlatform as any;\r\n  app.store.models['deposit-records'] = DepositRecord as any;\r\n\r\n  // New unified funds page\r\n  app.routes.funds = { path: '/funds', component: FundsPage };\r\n  \r\n  // Legacy routes for backward compatibility - redirect to funds page\r\n  app.routes.funds = { path: '/funds', component: FundsPage };\r\n  app.routes.deposit = { path: '/deposit', component: FundsPage };\r\n\r\n\r\n  // Add money display to header primary (desktop)\r\n  extend(HeaderPrimary.prototype, 'view', function (vnode) {\r\n    // Only add on tags page for logged-in users and on desktop\r\n    const configManager = ConfigManager.getInstance();\r\n    if (app.session.user && configManager.isTagsPage() && !MobileDetector.isMobile()) {\r\n      // Add money display to the header primary view\r\n      vnode.children.push(MoneyDisplay.component());\r\n    }\r\n  });\r\n\r\n  // Add mobile money display to navigation using component extension\r\n  extend(Navigation.prototype, 'view', function (vnode) {\r\n    // Only work on mobile devices (viewport width <= 768px)\r\n    if (window.innerWidth > 768) {\r\n      return;\r\n    }\r\n\r\n    // Only work on homepage\r\n    const routeName = app.current.get('routeName');\r\n    if (routeName !== 'tags') {\r\n      return;\r\n    }\r\n\r\n    // Only work for logged-in users\r\n    if (!app.session.user) {\r\n      return;\r\n    }\r\n\r\n    if (!vnode || !vnode.children || !Array.isArray(vnode.children)) {\r\n      return;\r\n    }\r\n\r\n    // Check if we already added the money display component to avoid duplication\r\n    const hasMoneyDisplay = vnode.children.some((child: any) =>\r\n      child && child.attrs && child.attrs.className &&\r\n      child.attrs.className.includes('Navigation-mobileMoneyDisplay')\r\n    );\r\n\r\n    if (!hasMoneyDisplay) {\r\n      // Add MobileMoneyDisplay component to navigation\r\n      vnode.children.push(MobileMoneyDisplay.component({\r\n        className: \"item-funds Navigation-mobileMoneyDisplay\"\r\n      }));\r\n    }\r\n  });\r\n});"],"names":["STATUS_CLASS_MAP","DEFAULTS","ICONS","getBestPlatformIcon","platform","platformIconUrl","platformIconClass","renderIcon","iconRep","additionalClasses","baseClasses","classes","PlatformIcon","vnode","className","size","icon","finalClasses","bestIcon","getId","obj","getAttr","attr","getIdString","findPlatformById","platforms","platformId","platformIdStr","p","pId","getDateFromAttr","dateStr","PlatformSelector","Component","selectedPlatform","showDropdown","validPlatforms","app","onPlatformSelect","onAmountChange","AmountInput","amount","loadingBalance","onFillAllAmount","minAmount","maxAmount","fee","e","Button","AddressInput","accountDetails","onAccountDetailsChange","symbol","m","text","error","MessageInput","message","onMessageChange","SubmitButton","submitting","canSubmit","onSubmit","numericAmount","finalAmount","WithdrawalForm","formData","onFormDataChange","StatusBadge","status","statusClass","statusLabel","EmptyState","iconName","title","description","LoadingState","props","LoadingIndicator","TransactionHistory","transactions","loading","type","transaction","transactionId","statusColor","createdAt","depositTime","screenshotUrl","userMessage","processedAt","adminNotes","creditedAmount","humanTime","iconUrl","iconClass","DepositPlatformDropdown","element","name","network","AddressDisplay","address","onCopy","ImageDisplay","DepositForm","now","localDateTime","Stream","withAttr","warningText","DepositServiceImpl","data","response","record","filters","params","recordId","validParams","rel","depositService","ServiceErrorType","ServiceError","code","details","WithdrawalService","options","queryParams","id","attributes","model","userId","targetUserId","queryOptions","request","reason","currentUser","userBalance","totalRequired","required","field","defaultMessage","apiError","withdrawalService","PlatformService","modelType","results","currentStatus","config","errors","requestType","includeParams","records","recordArray","r","sum","grouped","sortBy","direction","sortString","_platform","platformService","extractErrorMessage","fallback","firstError","FundsPage","Page","tabParam","tab","currentTab","newUrl","titleKey","activeTab","withdrawalRequests","depositRecords","hasWithdrawals","hasDeposits","availableAmount","amountNum","errorMessage","requests","forceRefresh","updatedUser","validateCommonFields","validateAmountFields","currentMinAmount","validateDepositFields","throwIfErrors","validateWithdrawalPlatform","validateDepositPlatform","WithdrawalPlatform","Model","min","max","cloned","totalCost","feeText","WITHDRAWAL_STATUS","WithdrawalRequest","DepositPlatform","_userId","DepositRecord","time","MoneyDisplay","userMoneyText","target","MobileMoneyDisplay","userMoney","ConfigManager","isMobile","isTablet","isDesktop","isMobileOrTablet","getCurrentBreakpoint","isTouchDevice","MobileDetector","extend","HeaderPrimary","configManager","Navigation","child"],"mappings":"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"}