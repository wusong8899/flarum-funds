{"version":3,"file":"forum.js","sources":["../src/forum/components/withdrawal/utils/constants.ts","../src/common/utils/IconResolver.ts","../src/forum/components/withdrawal/common/PlatformIcon.tsx","../src/forum/components/withdrawal/utils/modelHelpers.ts","../src/forum/components/withdrawal/forms/PlatformSelector.tsx","../src/forum/components/withdrawal/forms/AmountInput.tsx","../src/forum/components/withdrawal/forms/AddressInput.tsx","../src/forum/components/withdrawal/forms/MessageInput.tsx","../src/forum/components/withdrawal/forms/SubmitButton.tsx","../src/forum/components/withdrawal/forms/WithdrawalForm.tsx","../src/forum/components/withdrawal/common/StatusBadge.tsx","../src/forum/components/withdrawal/common/EmptyState.tsx","../src/forum/components/withdrawal/common/LoadingState.tsx","../src/forum/components/shared/TransactionHistory.tsx","../src/forum/components/deposit/selectors/DepositPlatformDropdown.tsx","../src/forum/components/deposit/components/AddressDisplay.tsx","../src/forum/components/deposit/components/ImageDisplay.tsx","../src/forum/components/deposit/forms/DepositRecordForm.tsx","../src/common/types/services.ts","../src/common/services/WithdrawalService.ts","../src/common/services/DepositService.ts","../src/common/services/PlatformService.ts","../src/common/services/AddressService.ts","../src/common/types/api.ts","../src/forum/components/FundsPage.tsx","../src/common/utils/PlatformValidation.ts","../src/common/models/WithdrawalPlatform.ts","../src/common/types/index.ts","../src/common/models/WithdrawalRequest.ts","../src/common/models/DepositPlatform.ts","../src/common/models/DepositRecord.ts","../src/forum/components/MoneyDisplay.tsx","../src/forum/components/MobileMoneyDisplay.tsx","../src/forum/utils/ConfigManager.ts","../src/forum/utils/MobileDetector.ts","../src/forum/index.ts"],"sourcesContent":["import type { StatusType, StatusClass } from '../types/interfaces';\r\n\r\n/**\r\n * Withdrawal request status constants\r\n */\r\nexport const WITHDRAWAL_STATUS: Record<string, StatusType> = {\r\n  PENDING: 'pending',\r\n  APPROVED: 'approved',\r\n  REJECTED: 'rejected',\r\n} as const;\r\n\r\n/**\r\n * Status class mapping for UI styling\r\n */\r\nexport const STATUS_CLASS_MAP: Record<StatusType, StatusClass> = {\r\n  pending: 'warning',\r\n  approved: 'success',\r\n  rejected: 'danger',\r\n} as const;\r\n\r\n/**\r\n * Tab types\r\n */\r\nexport const TABS = {\r\n  WITHDRAWAL: 'funds',\r\n  HISTORY: 'history',\r\n} as const;\r\n\r\n/**\r\n * Default values\r\n */\r\nexport const DEFAULTS = {\r\n  MIN_AMOUNT: 0.001,\r\n  MAX_AMOUNT: 10,\r\n  FEE: 0.0005,\r\n  BALANCE_PRECISION: 8,\r\n} as const;\r\n\r\n/**\r\n * CSS class names\r\n */\r\nexport const CSS_CLASSES = {\r\n  WITHDRAWAL_PAGE: 'WithdrawalPage',\r\n  MODAL: 'WithdrawalPage-modal',\r\n  HEADER: 'WithdrawalPage-header',\r\n  TABS: 'WithdrawalPage-tabs',\r\n  TAB: 'WithdrawalPage-tab',\r\n  TAB_ACTIVE: 'active',\r\n  CONTENT: 'WithdrawalPage-content',\r\n  LOADING: 'WithdrawalPage-loading',\r\n  EMPTY_STATE: 'WithdrawalPage-emptyState',\r\n} as const;\r\n\r\n/**\r\n * Icon names\r\n */\r\nexport const ICONS = {\r\n  CLOSE: 'fas fa-times',\r\n  COINS: 'fas fa-coins',\r\n  HISTORY: 'fas fa-history',\r\n  BITCOIN: 'fas fa-bitcoin',\r\n  CHEVRON_DOWN: 'fas fa-chevron-down',\r\n  PASTE: 'fas fa-paste',\r\n  BOOKMARK: 'fas fa-bookmark',\r\n} as const;","import { IconRepresentation } from '../models/CurrencyIcon';\n\ndeclare const m: any;\n\n/**\n * Icon priority order for display resolution\n */\nexport enum IconPriority {\n  PLATFORM_SPECIFIC = 1,\n  NETWORK = 2,\n  CURRENCY = 3,\n  FALLBACK = 4\n}\n\n/**\n * Helper function to get the best available icon from a platform\n */\nexport function getBestPlatformIcon(platform: any): IconRepresentation {\n  // Priority 1: Platform-specific icons\n  const platformIconUrl = platform.platformSpecificIconUrl?.();\n  if (platformIconUrl) {\n    return {\n      type: 'currency_url',\n      value: platformIconUrl,\n      alt: platform.name?.() || 'Platform icon'\n    };\n  }\n\n  const platformIconClass = platform.platformSpecificIconClass?.();\n  if (platformIconClass) {\n    return {\n      type: 'currency_class',\n      value: platformIconClass\n    };\n  }\n\n  // Priority 2: Network icons\n  const networkIconUrl = platform.networkIconUrl?.();\n  if (networkIconUrl) {\n    return {\n      type: 'currency_url',\n      value: networkIconUrl,\n      alt: platform.network?.() || 'Network icon'\n    };\n  }\n\n  const networkIconClass = platform.networkIconClass?.();\n  if (networkIconClass) {\n    return {\n      type: 'currency_class',\n      value: networkIconClass\n    };\n  }\n\n  // Priority 3: Currency icons\n  const currencyIconUrl = platform.currencyIconUrl?.();\n  if (currencyIconUrl) {\n    return {\n      type: 'currency_url',\n      value: currencyIconUrl,\n      alt: platform.symbol?.() || 'Currency icon'\n    };\n  }\n\n  const currencyIconClass = platform.currencyIconClass?.();\n  if (currencyIconClass) {\n    return {\n      type: 'currency_class',\n      value: currencyIconClass\n    };\n  }\n\n  const currencyUnicodeSymbol = platform.currencyUnicodeSymbol?.();\n  if (currencyUnicodeSymbol) {\n    return {\n      type: 'currency_unicode',\n      value: currencyUnicodeSymbol\n    };\n  }\n\n  // Priority 4: Fallback\n  return {\n    type: 'fallback',\n    value: 'fas fa-coins'\n  };\n}\n\n/**\n * Helper function to get currency icon specifically\n */\nexport function getCurrencyIcon(platform: any): IconRepresentation {\n  // Check currency icon override fields first\n  const currencyIconOverrideUrl = platform.currencyIconOverrideUrl?.();\n  if (currencyIconOverrideUrl) {\n    return {\n      type: 'currency_url',\n      value: currencyIconOverrideUrl,\n      alt: platform.symbol?.() || 'Currency icon'\n    };\n  }\n\n  const currencyIconOverrideClass = platform.currencyIconOverrideClass?.();\n  if (currencyIconOverrideClass) {\n    return {\n      type: 'currency_class',\n      value: currencyIconOverrideClass\n    };\n  }\n\n  // Fall back to computed currency icon\n  const currencyIcon = platform.currencyIcon?.();\n  if (currencyIcon) {\n    return currencyIcon;\n  }\n\n  // Direct currency icon fields\n  const currencyIconUrl = platform.currencyIconUrl?.();\n  if (currencyIconUrl) {\n    return {\n      type: 'currency_url',\n      value: currencyIconUrl,\n      alt: platform.symbol?.() || 'Currency icon'\n    };\n  }\n\n  const currencyIconClass = platform.currencyIconClass?.();\n  if (currencyIconClass) {\n    return {\n      type: 'currency_class',\n      value: currencyIconClass\n    };\n  }\n\n  const currencyUnicodeSymbol = platform.currencyUnicodeSymbol?.();\n  if (currencyUnicodeSymbol) {\n    return {\n      type: 'currency_unicode',\n      value: currencyUnicodeSymbol\n    };\n  }\n\n  return {\n    type: 'fallback',\n    value: 'fas fa-coins'\n  };\n}\n\n/**\n * Helper function to get network icon specifically\n */\nexport function getNetworkIcon(platform: any): IconRepresentation {\n  // Check network icon override fields first\n  const networkIconOverrideUrl = platform.networkIconOverrideUrl?.();\n  if (networkIconOverrideUrl) {\n    return {\n      type: 'currency_url',\n      value: networkIconOverrideUrl,\n      alt: platform.network?.() || 'Network icon'\n    };\n  }\n\n  const networkIconOverrideClass = platform.networkIconOverrideClass?.();\n  if (networkIconOverrideClass) {\n    return {\n      type: 'currency_class',\n      value: networkIconOverrideClass\n    };\n  }\n\n  // Fall back to computed network icon\n  const networkIcon = platform.networkIcon?.();\n  if (networkIcon) {\n    return networkIcon;\n  }\n\n  // Direct network icon fields\n  const networkIconUrl = platform.networkIconUrl?.();\n  if (networkIconUrl) {\n    return {\n      type: 'currency_url',\n      value: networkIconUrl,\n      alt: platform.network?.() || 'Network icon'\n    };\n  }\n\n  const networkIconClass = platform.networkIconClass?.();\n  if (networkIconClass) {\n    return {\n      type: 'currency_class',\n      value: networkIconClass\n    };\n  }\n\n  return {\n    type: 'fallback',\n    value: 'fas fa-network-wired'\n  };\n}\n\n/**\n * Render an icon representation as a Mithril element\n */\nexport function renderIcon(iconRep: IconRepresentation, additionalClasses: string = ''): Mithril.Children {\n  const baseClasses = 'icon';\n  const classes = additionalClasses ? `${baseClasses} ${additionalClasses}` : baseClasses;\n\n  switch (iconRep.type) {\n    case 'currency_url':\n      return m('img', {\n        src: iconRep.value,\n        alt: iconRep.alt || 'Icon',\n        className: `${classes} icon--image`,\n        style: {\n          width: '1em',\n          height: '1em',\n          objectFit: 'contain',\n          display: 'inline-block',\n          verticalAlign: 'middle'\n        }\n      });\n\n    case 'currency_class':\n      return m('i', {\n        className: `${classes} ${iconRep.value}`,\n        'aria-hidden': 'true'\n      });\n\n    case 'currency_unicode':\n      return m('span', {\n        className: `${classes} icon--unicode`,\n        'aria-hidden': 'true'\n      }, iconRep.value);\n\n    case 'fallback':\n    default:\n      return m('i', {\n        className: `${classes} ${iconRep.value}`,\n        'aria-hidden': 'true'\n      });\n  }\n}\n\n/**\n * Get icon priority level for sorting/comparison\n */\nexport function getIconPriority(platform: any): IconPriority {\n  if (platform.platformSpecificIconUrl?.() || platform.platformSpecificIconClass?.()) {\n    return IconPriority.PLATFORM_SPECIFIC;\n  }\n\n  if (platform.networkIconUrl?.() || platform.networkIconClass?.()) {\n    return IconPriority.NETWORK;\n  }\n\n  if (platform.currencyIconUrl?.() || platform.currencyIconClass?.() || platform.currencyUnicodeSymbol?.()) {\n    return IconPriority.CURRENCY;\n  }\n\n  return IconPriority.FALLBACK;\n}","import icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport { ICONS } from '../utils/constants';\nimport { getBestPlatformIcon, renderIcon } from '../../../../common/utils/IconResolver';\n\ninterface PlatformIconProps {\n  platform: WithdrawalPlatform | null;\n  className?: string;\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport default class PlatformIcon {\n  view(vnode: Mithril.Vnode<PlatformIconProps>): Mithril.Children {\n    const { platform, className = '', size = 'medium' } = vnode.attrs;\n\n    // Add null checks to prevent errors\n    if (!platform) {\n      return icon(ICONS.COINS, { className: `crypto-icon default ${className}` });\n    }\n\n    // Size classes\n    const sizeClass = `platform-icon-${size}`;\n    const finalClasses = `crypto-icon ${sizeClass} ${className}`;\n\n    // Use the new three-tier icon system\n    const bestIcon = getBestPlatformIcon(platform);\n    \n    return renderIcon(bestIcon, finalClasses);\n  }\n}","/**\n * Helper functions for accessing Flarum model data\n * These handle both Model instances and plain object data\n */\n\n/**\n * Get ID from Flarum model or plain object\n */\nexport const getId = (obj: any): string | number => {\n  return typeof obj.id === 'function' ? obj.id() : obj.id;\n};\n\n/**\n * Get attribute value from Flarum model or plain object\n */\nexport const getAttr = (obj: any, attr: string): any => {\n  if (typeof obj[attr] === 'function') {\n    return obj[attr]();\n  }\n  return obj.attributes ? obj.attributes[attr] : obj[attr];\n};\n\n/**\n * Get string representation of ID for comparison\n */\nexport const getIdString = (obj: any): string => {\n  return String(getId(obj));\n};\n\n/**\n * Find platform by ID with proper type handling\n */\nexport const findPlatformById = (platforms: any[], platformId: string | number): any => {\n  const platformIdStr = String(platformId);\n  return platforms.find(p => {\n    const pId = getId(p);\n    return String(pId) === platformIdStr;\n  });\n};\n\n/**\n * Safely extract and convert date attribute to Date object\n */\nexport const getDateFromAttr = (obj: any, attr: string): Date => {\n  const dateStr = getAttr(obj, attr);\n  return dateStr ? new Date(dateStr) : new Date();\n};","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\r\nimport PlatformIcon from '../common/PlatformIcon';\r\nimport { getAttr } from '../utils/modelHelpers';\r\nimport { ICONS } from '../utils/constants';\r\n\r\ninterface PlatformSelectorProps {\r\n  platforms: WithdrawalPlatform[];\r\n  selectedPlatform: WithdrawalPlatform | null;\r\n  onPlatformSelect: (platform: WithdrawalPlatform) => void;\r\n  onAmountChange?: () => void; // Callback when platform changes to clear amount\r\n}\r\n\r\ninterface PlatformSelectorState {\r\n  showDropdown: boolean;\r\n}\r\n\r\nexport default class PlatformSelector extends Component<PlatformSelectorProps, PlatformSelectorState> {\r\n  oninit(vnode: Mithril.Vnode<PlatformSelectorProps, PlatformSelectorState>) {\r\n    super.oninit(vnode);\r\n    this.state = {\r\n      showDropdown: false,\r\n    };\r\n  }\r\n\r\n  view(): Mithril.Children {\r\n    const { selectedPlatform } = this.attrs;\r\n    const { showDropdown } = this.state;\r\n\r\n    return (\r\n      <div className=\"WithdrawalPage-platformSelector\">\r\n        <div className=\"WithdrawalPage-label\">提取平台</div>\r\n        <div \r\n          className=\"WithdrawalPage-platformDropdown\" \r\n          onclick={() => this.toggleDropdown()}\r\n        >\r\n          <div className=\"WithdrawalPage-platformSelected\">\r\n            <div className=\"WithdrawalPage-platformInfo\">\r\n              <div className=\"WithdrawalPage-platformIcon\">\r\n                <PlatformIcon \r\n                  platform={selectedPlatform} \r\n                  size=\"medium\"\r\n                />\r\n              </div>\r\n              <div className=\"WithdrawalPage-platformDetails\">\r\n                <div className=\"WithdrawalPage-platformName\">\r\n                  {this.getPlatformName(selectedPlatform)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {icon(ICONS.CHEVRON_DOWN, { className: 'WithdrawalPage-dropdownIcon' })}\r\n        </div>\r\n\r\n        {showDropdown && this.renderPlatformDropdown()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private toggleDropdown(): void {\r\n    this.state.showDropdown = !this.state.showDropdown;\r\n  }\r\n\r\n  private getPlatformName(platform: WithdrawalPlatform | null): string {\r\n    if (!platform) {\r\n      return '请选择平台';\r\n    }\r\n    return getAttr(platform, 'displayName') || getAttr(platform, 'name') || '请选择平台';\r\n  }\r\n\r\n  private renderPlatformDropdown(): Mithril.Children {\r\n    const { platforms } = this.attrs;\r\n\r\n    // Ensure platforms array is valid and filter out invalid items\r\n    const validPlatforms = (platforms || []).filter(platform => !!platform);\r\n\r\n    if (validPlatforms.length === 0) {\r\n      return (\r\n        <div className=\"WithdrawalPage-dropdownMenu\">\r\n          <div className=\"WithdrawalPage-dropdownItem WithdrawalPage-noData\">\r\n            {app.translator.trans('funds.forum.no_platforms')}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"WithdrawalPage-dropdownMenu\">\r\n        {validPlatforms.map(platform => (\r\n          <div \r\n            key={platform.id()}\r\n            className=\"WithdrawalPage-dropdownItem\"\r\n            onclick={() => this.selectPlatform(platform)}\r\n          >\r\n            <div className=\"WithdrawalPage-platformIcon\">\r\n              <PlatformIcon platform={platform} size=\"small\" />\r\n            </div>\r\n            <div className=\"WithdrawalPage-platformName\">\r\n              {getAttr(platform, 'displayName') || getAttr(platform, 'name')}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private selectPlatform(platform: WithdrawalPlatform): void {\r\n    const { onPlatformSelect, onAmountChange } = this.attrs;\r\n    \r\n    onPlatformSelect(platform);\r\n    this.state.showDropdown = false;\r\n    \r\n    // Clear amount when switching platforms\r\n    if (onAmountChange) {\r\n      onAmountChange();\r\n    }\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\r\nimport { getAttr } from '../utils/modelHelpers';\r\nimport { DEFAULTS, ICONS } from '../utils/constants';\r\n\r\ninterface AmountInputProps {\r\n  amount: string;\r\n  selectedPlatform: WithdrawalPlatform | null;\r\n  loadingBalance: boolean;\r\n  onAmountChange: (amount: string) => void;\r\n  onFillAllAmount: () => void;\r\n}\r\n\r\nexport default class AmountInput extends Component<AmountInputProps> {\r\n  view(): Mithril.Children {\r\n    const { \r\n      amount, \r\n      selectedPlatform, \r\n      loadingBalance,\r\n      onAmountChange,\r\n      onFillAllAmount \r\n    } = this.attrs;\r\n\r\n    const minAmount = this.getMinAmount(selectedPlatform);\r\n    const maxAmount = this.getMaxAmount(selectedPlatform);\r\n    const fee = this.getFee(selectedPlatform);\r\n\r\n    return (\r\n      <div className=\"WithdrawalPage-amountSection\">\r\n        <div className=\"WithdrawalPage-formGroup\">\r\n          <div className=\"WithdrawalPage-label\">\r\n            {app.translator.trans('funds.forum.form.amount')}\r\n          </div>\r\n\r\n          <div className=\"WithdrawalPage-amountInput\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"WithdrawalPage-input\"\r\n              placeholder=\"0.00000000\"\r\n              value={amount}\r\n              oninput={(e: Event) => onAmountChange((e.target as HTMLInputElement).value)}\r\n            />\r\n            <Button\r\n              className=\"WithdrawalPage-allButton\"\r\n              onclick={onFillAllAmount}\r\n              disabled={loadingBalance}\r\n            >\r\n              {app.translator.trans('funds.forum.form.all_button')}\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"WithdrawalPage-amountLimits\">\r\n            <div className=\"WithdrawalPage-limitRow\">\r\n              <span className=\"WithdrawalPage-limitLabel\">\r\n                {app.translator.trans('funds.forum.limits.min_max')}\r\n              </span>\r\n              <span className=\"WithdrawalPage-limitValue\">\r\n                {icon(ICONS.COINS)} {minAmount} ~ {maxAmount}\r\n              </span>\r\n            </div>\r\n            <div className=\"WithdrawalPage-limitRow\">\r\n              <span className=\"WithdrawalPage-limitLabel\">\r\n                {app.translator.trans('funds.forum.limits.fee')}\r\n              </span>\r\n              <span className=\"WithdrawalPage-limitValue\">\r\n                {icon(ICONS.COINS)} {fee}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getMinAmount(platform: WithdrawalPlatform | null): number {\r\n    if (!platform) return DEFAULTS.MIN_AMOUNT;\r\n    return getAttr(platform, 'minAmount') || DEFAULTS.MIN_AMOUNT;\r\n  }\r\n\r\n  private getMaxAmount(platform: WithdrawalPlatform | null): number {\r\n    if (!platform) return DEFAULTS.MAX_AMOUNT;\r\n    return getAttr(platform, 'maxAmount') || DEFAULTS.MAX_AMOUNT;\r\n  }\r\n\r\n  private getFee(platform: WithdrawalPlatform | null): number {\r\n    if (!platform) return DEFAULTS.FEE;\r\n    return getAttr(platform, 'fee') || DEFAULTS.FEE;\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\r\nimport { getAttr } from '../utils/modelHelpers';\r\nimport { ICONS } from '../utils/constants';\r\nimport m from 'mithril';\r\n\r\ninterface AddressInputProps {\r\n  accountDetails: string;\r\n  selectedPlatform: WithdrawalPlatform | null;\r\n  onAccountDetailsChange: (details: string) => void;\r\n}\r\n\r\nexport default class AddressInput extends Component<AddressInputProps> {\r\n  view(): Mithril.Children {\r\n    const { \r\n      accountDetails, \r\n      selectedPlatform, \r\n      onAccountDetailsChange\r\n    } = this.attrs;\r\n\r\n    const symbol = this.getSymbol(selectedPlatform);\r\n\r\n    return (\r\n      <div className=\"WithdrawalPage-addressSection\">\r\n        <div className=\"WithdrawalPage-formGroup\">\r\n          <div className=\"WithdrawalPage-addressHeader\">\r\n            <span className=\"WithdrawalPage-label\">\r\n              {app.translator.trans('funds.forum.form.address', { symbol })}\r\n              <span className=\"WithdrawalPage-required\">*</span>\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"WithdrawalPage-addressInput\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"WithdrawalPage-input\"\r\n              placeholder={app.translator.trans('funds.forum.form.address_placeholder')}\r\n              value={accountDetails}\r\n              oninput={(e: Event) => onAccountDetailsChange((e.target as HTMLInputElement).value)}\r\n            />\r\n            <button \r\n              className=\"WithdrawalPage-pasteButton\" \r\n              onclick={() => this.pasteFromClipboard()}\r\n            >\r\n              {icon(ICONS.PASTE)}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getSymbol(platform: WithdrawalPlatform | null): string {\r\n    if (!platform) return '';\r\n    return getAttr(platform, 'symbol') || '';\r\n  }\r\n\r\n  private async pasteFromClipboard(): Promise<void> {\r\n    const { onAccountDetailsChange } = this.attrs;\r\n    \r\n    try {\r\n      if (navigator.clipboard && navigator.clipboard.readText) {\r\n        const text = await navigator.clipboard.readText();\r\n        onAccountDetailsChange(text.trim());\r\n        m.redraw();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to read from clipboard:', error);\r\n      app.alerts.show({\r\n        type: 'error',\r\n        dismissible: true\r\n      }, app.translator.trans('funds.forum.clipboard_error'));\r\n    }\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport type Mithril from 'mithril';\r\n\r\ninterface MessageInputProps {\r\n  message: string;\r\n  onMessageChange: (message: string) => void;\r\n}\r\n\r\nexport default class MessageInput extends Component<MessageInputProps> {\r\n  view(): Mithril.Children {\r\n    const { \r\n      message,\r\n      onMessageChange\r\n    } = this.attrs;\r\n\r\n    return (\r\n      <div className=\"WithdrawalPage-messageSection\">\r\n        <div className=\"WithdrawalPage-formGroup\">\r\n          <span className=\"WithdrawalPage-label\">\r\n            {app.translator.trans('funds.forum.form.message')}\r\n          </span>\r\n          <textarea\r\n            className=\"WithdrawalPage-textarea\"\r\n            placeholder={app.translator.trans('funds.forum.form.message_placeholder')}\r\n            value={message}\r\n            rows={3}\r\n            maxlength={500}\r\n            oninput={(e: Event) => onMessageChange((e.target as HTMLTextAreaElement).value)}\r\n          />\r\n          <div className=\"WithdrawalPage-helperText\">\r\n            {app.translator.trans('funds.forum.form.message_helper')} ({message.length}/500)\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\r\nimport { getAttr } from '../utils/modelHelpers';\r\nimport { DEFAULTS } from '../utils/constants';\r\n\r\ninterface SubmitButtonProps {\r\n  amount: string;\r\n  selectedPlatform: WithdrawalPlatform | null;\r\n  accountDetails: string;\r\n  submitting: boolean;\r\n  canSubmit: boolean;\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport default class SubmitButton extends Component<SubmitButtonProps> {\r\n  view(): Mithril.Children {\r\n    const { \r\n      amount, \r\n      selectedPlatform, \r\n      submitting, \r\n      canSubmit, \r\n      onSubmit \r\n    } = this.attrs;\r\n\r\n    const numericAmount = parseFloat(amount) || 0;\r\n    const fee = this.getFee(selectedPlatform);\r\n    const finalAmount = Math.max(0, numericAmount - fee);\r\n    const symbol = this.getSymbol(selectedPlatform);\r\n\r\n    return (\r\n      <div className=\"WithdrawalPage-submitSection\">\r\n        <Button\r\n          className=\"WithdrawalPage-submitButton\"\r\n          loading={submitting}\r\n          disabled={!canSubmit}\r\n          onclick={onSubmit}\r\n        >\r\n          {app.translator.trans('funds.forum.form.submit')}\r\n        </Button>\r\n\r\n        {numericAmount > 0 && (\r\n          <div className=\"WithdrawalPage-finalAmount\">\r\n            {app.translator.trans('funds.forum.final_amount', { \r\n              amount: finalAmount.toFixed(DEFAULTS.BALANCE_PRECISION), \r\n              symbol \r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getFee(platform: WithdrawalPlatform | null): number {\r\n    if (!platform) return DEFAULTS.FEE;\r\n    return getAttr(platform, 'fee') || DEFAULTS.FEE;\r\n  }\r\n\r\n  private getSymbol(platform: WithdrawalPlatform | null): string {\r\n    if (!platform) return '';\r\n    return getAttr(platform, 'symbol') || '';\r\n  }\r\n}","import Component from 'flarum/common/Component';\nimport type Mithril from 'mithril';\nimport type { WithdrawalFormData } from '../types/interfaces';\nimport WithdrawalPlatform from '../../../../common/models/WithdrawalPlatform';\nimport PlatformSelector from './PlatformSelector';\nimport AmountInput from './AmountInput';\nimport AddressInput from './AddressInput';\nimport MessageInput from './MessageInput';\nimport SubmitButton from './SubmitButton';\n\ninterface WithdrawalFormProps {\n  platforms: WithdrawalPlatform[];\n  formData: WithdrawalFormData;\n  loadingBalance: boolean;\n  submitting: boolean;\n  onFormDataChange: (data: Partial<WithdrawalFormData>) => void;\n  onFillAllAmount: () => void;\n  onSubmit: () => void;\n}\n\nexport default class WithdrawalForm extends Component<WithdrawalFormProps> {\n  view(): Mithril.Children {\n    const { \n      platforms, \n      formData, \n      loadingBalance,\n      submitting,\n      onFormDataChange,\n      onFillAllAmount,\n      onSubmit \n    } = this.attrs;\n\n    return [\n      <PlatformSelector \n        platforms={platforms}\n        selectedPlatform={formData.selectedPlatform}\n        onPlatformSelect={(platform: any) => onFormDataChange({ selectedPlatform: platform })}\n        onAmountChange={() => onFormDataChange({ amount: '' })}\n      />,\n      \n      <AmountInput \n        amount={formData.amount}\n        selectedPlatform={formData.selectedPlatform}\n        loadingBalance={loadingBalance}\n        onAmountChange={(amount: any) => onFormDataChange({ amount })}\n        onFillAllAmount={onFillAllAmount}\n      />,\n      \n      <AddressInput \n        accountDetails={formData.accountDetails}\n        selectedPlatform={formData.selectedPlatform}\n        onAccountDetailsChange={(accountDetails: any) => onFormDataChange({ accountDetails })}\n      />,\n      \n      <MessageInput \n        message={formData.message}\n        onMessageChange={(message: any) => onFormDataChange({ message })}\n      />,\n      \n      <SubmitButton \n        amount={formData.amount}\n        selectedPlatform={formData.selectedPlatform}\n        accountDetails={formData.accountDetails}\n        submitting={submitting}\n        canSubmit={this.canSubmit()}\n        onSubmit={onSubmit}\n      />\n    ];\n  }\n\n  private canSubmit(): boolean {\n    const { formData, submitting } = this.attrs;\n    const { selectedPlatform, amount, accountDetails } = formData;\n\n    return !!(\n      selectedPlatform &&\n      amount &&\n      accountDetails &&\n      !submitting &&\n      parseFloat(amount) > 0\n    );\n  }\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport type Mithril from 'mithril';\r\nimport type { StatusType } from '../types/interfaces';\r\nimport { STATUS_CLASS_MAP } from '../utils/constants';\r\n\r\ninterface StatusBadgeProps {\r\n  status: StatusType;\r\n  className?: string;\r\n}\r\n\r\nexport default class StatusBadge extends Component<StatusBadgeProps> {\r\n  view(): Mithril.Children {\r\n    const { status, className = '' } = this.attrs;\r\n    \r\n    const statusClass = this.getStatusClass(status);\r\n    const statusLabel = this.getStatusLabel(status);\r\n\r\n    return (\r\n      <div className={`WithdrawalPage-historyStatus ${statusClass} ${className}`}>\r\n        {statusLabel}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getStatusClass(status: StatusType): string {\r\n    return STATUS_CLASS_MAP[status] || STATUS_CLASS_MAP.pending;\r\n  }\r\n\r\n  private getStatusLabel(status: StatusType): string {\r\n    return app.translator.trans(`funds.forum.status.${status}`).toString();\r\n  }\r\n}","import Component from 'flarum/common/Component';\nimport icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\n\ninterface EmptyStateProps {\n  iconName: string;\n  title: string;\n  description: string;\n  className?: string;\n}\n\nexport default class EmptyState extends Component<EmptyStateProps> {\n  view(): Mithril.Children {\n    const { iconName, title, description, className = '' } = this.attrs;\n    \n    return (\n      <div className={`WithdrawalPage-emptyState ${className}`}>\n        <div className=\"WithdrawalPage-emptyIcon\">\n          {icon(iconName)}\n        </div>\n        <h3 className=\"WithdrawalPage-emptyTitle\">\n          {title}\n        </h3>\n        <p className=\"WithdrawalPage-emptyDescription\">\n          {description}\n        </p>\n      </div>\n    );\n  }\n}","import LoadingIndicator from 'flarum/common/components/LoadingIndicator';\n\ninterface LoadingStateProps {\n  className?: string;\n}\n\nexport default function LoadingState(props: LoadingStateProps): JSX.Element {\n  const { className = '' } = props;\n  \n  return (\n    <div className={`WithdrawalPage-loading ${className}`}>\n      <LoadingIndicator />\n    </div>\n  );\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport humanTime from 'flarum/common/helpers/humanTime';\r\nimport type Mithril from 'mithril';\r\nimport WithdrawalRequest from '../../../common/models/WithdrawalRequest';\r\nimport WithdrawalPlatform from '../../../common/models/WithdrawalPlatform';\r\nimport type DepositPlatform from '../../../common/models/DepositPlatform';\r\nimport type DepositRecord from '../../../common/models/DepositRecord';\r\nimport { getAttr, findPlatformById, getDateFromAttr, getIdString } from '../withdrawal/utils/modelHelpers';\r\nimport PlatformIcon from '../withdrawal/common/PlatformIcon';\r\nimport StatusBadge from '../withdrawal/common/StatusBadge';\r\nimport EmptyState from '../withdrawal/common/EmptyState';\r\nimport LoadingState from '../withdrawal/common/LoadingState';\r\n\r\n// Generic transaction type that can represent withdrawal requests or deposit records\r\ninterface Transaction {\r\n  id?: () => string | number;\r\n  amount?: () => number;\r\n  status?: () => string;\r\n  createdAt?: () => Date;\r\n  platform?: () => any;\r\n  platformId?: () => string | number;\r\n  // Withdrawal request specific fields\r\n  accountDetails?: () => string;\r\n  // Deposit record specific fields\r\n  platformAccount?: () => string;\r\n  realName?: () => string;\r\n  depositTime?: () => Date;\r\n  screenshotUrl?: () => string;\r\n  userMessage?: () => string;\r\n  processedAt?: () => Date;\r\n  adminNotes?: () => string;\r\n  creditedAmount?: () => number;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface TransactionHistoryAttrs {\r\n  transactions: (WithdrawalRequest | DepositRecord)[];\r\n  platforms: (WithdrawalPlatform | DepositPlatform)[];\r\n  loading: boolean;\r\n  type: 'funds' | 'deposit';\r\n}\r\n\r\nexport default class TransactionHistory extends Component<TransactionHistoryAttrs> {\r\n  view(vnode: Mithril.Vnode<TransactionHistoryAttrs>): Mithril.Children {\r\n    const { transactions, platforms, loading, type } = vnode.attrs;\r\n\r\n    if (loading) {\r\n      return <LoadingState className={`${type}History-loading`} />;\r\n    }\r\n\r\n    if (!transactions || transactions.length === 0) {\r\n      return (\r\n        <EmptyState\r\n          iconName={type === 'funds' ? 'fas fa-history' : 'fas fa-inbox'}\r\n          title={app.translator.trans(`${type}.forum.history.empty.title`)}\r\n          description={app.translator.trans(`${type}.forum.history.empty.description`)}\r\n          className={`${type}History-empty`}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={`${type}History`}>\r\n        <div className={`${type}History-header`}>\r\n          <h3>{app.translator.trans(`${type}.forum.history.title`)}</h3>\r\n          <span className={`${type}History-count`}>{transactions.length} {app.translator.trans(`${type}.forum.history.transactions`)}</span>\r\n        </div>\r\n        \r\n        <div className={`${type}History-list`}>\r\n          {transactions.map(transaction => this.renderTransaction(transaction as Transaction, platforms, type))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderTransaction(transaction: Transaction, platforms: any[], type: string): Mithril.Children {\r\n    const transactionId = this.getTransactionId(transaction);\r\n    const platform = this.getPlatform(transaction, platforms);\r\n    const amount = getAttr(transaction, 'amount') || 0;\r\n    const status = getAttr(transaction, 'status') || 'pending';\r\n    const statusColor = getAttr(transaction, 'statusColor') || this.getStatusColor(status);\r\n    const createdAt = getDateFromAttr(transaction, 'createdAt');\r\n\r\n    if (type === 'deposit') {\r\n      // Only deposit records now\r\n      return this.renderDepositRecord(transaction, platform, amount, status, statusColor, createdAt, transactionId);\r\n    } else {\r\n      return this.renderWithdrawalTransaction(transaction, platform, amount, status, createdAt, transactionId);\r\n    }\r\n  }\r\n\r\n  private renderWithdrawalTransaction(\r\n    transaction: Transaction, \r\n    platform: any, \r\n    amount: number, \r\n    status: string, \r\n    createdAt: Date, \r\n    transactionId: string\r\n  ): Mithril.Children {\r\n    const accountDetails = getAttr(transaction, 'accountDetails') || '';\r\n\r\n    return (\r\n      <div key={transactionId} className=\"WithdrawalPage-historyItem\">\r\n        <div className=\"WithdrawalPage-historyHeader\">\r\n          <div className=\"WithdrawalPage-historyPlatform\">\r\n            <div className=\"WithdrawalPage-platformIcon\">\r\n              <PlatformIcon platform={platform} size=\"small\" />\r\n            </div>\r\n            <div className=\"WithdrawalPage-historyInfo\">\r\n              <div className=\"WithdrawalPage-historyPlatformName\">\r\n                {this.getPlatformName(platform)}\r\n              </div>\r\n              <div className=\"WithdrawalPage-historyDate\">\r\n                {createdAt.toLocaleDateString()} {createdAt.toLocaleTimeString()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <StatusBadge status={status as any} />\r\n        </div>\r\n        <div className=\"WithdrawalPage-historyDetails\">\r\n          <div className=\"WithdrawalPage-historyAmount\">\r\n            <span className=\"WithdrawalPage-historyLabel\">\r\n              {app.translator.trans('funds.forum.history.amount')}:\r\n            </span>\r\n            <span className=\"WithdrawalPage-historyValue\">\r\n              {amount} {this.getPlatformSymbol(platform)}\r\n            </span>\r\n          </div>\r\n          <div className=\"WithdrawalPage-historyAddress\">\r\n            <span className=\"WithdrawalPage-historyLabel\">\r\n              {app.translator.trans('funds.forum.history.address')}:\r\n            </span>\r\n            <span className=\"WithdrawalPage-historyValue\">\r\n              {accountDetails}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositRecord(\r\n    transaction: Transaction,\r\n    platform: any,\r\n    amount: number,\r\n    status: string,\r\n    statusColor: string,\r\n    createdAt: Date,\r\n    transactionId: string\r\n  ): Mithril.Children {\r\n    const platformAccount = getAttr(transaction, 'platformAccount');\r\n    const realName = getAttr(transaction, 'realName');\r\n    const depositTime = getDateFromAttr(transaction, 'depositTime');\r\n    const screenshotUrl = getAttr(transaction, 'screenshotUrl');\r\n    const userMessage = getAttr(transaction, 'userMessage');\r\n    const processedAt = getDateFromAttr(transaction, 'processedAt');\r\n    const adminNotes = getAttr(transaction, 'adminNotes');\r\n    const creditedAmount = getAttr(transaction, 'creditedAmount');\r\n\r\n    return (\r\n      <div key={transactionId} className=\"DepositRecord-item\">\r\n        <div className=\"DepositRecord-itemHeader\">\r\n          <div className=\"DepositRecord-itemPlatform\">\r\n            {platform && (\r\n              <>\r\n                <div className=\"DepositRecord-itemIcon\">\r\n                  {this.renderPlatformIcon(platform)}\r\n                </div>\r\n                <div className=\"DepositRecord-itemInfo\">\r\n                  <span className=\"DepositRecord-itemCurrency\">\r\n                    {getAttr(platform, 'symbol')} {getAttr(platform, 'network') && `(${getAttr(platform, 'network')})`}\r\n                  </span>\r\n                  <span className=\"DepositRecord-itemType\">\r\n                    Manual Deposit\r\n                  </span>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"DepositRecord-itemAmount\">\r\n            <span className=\"DepositRecord-itemAmountValue\">\r\n              +{amount} {platform ? getAttr(platform, 'symbol') : ''}\r\n            </span>\r\n            <div className={`DepositRecord-itemStatus status-${statusColor}`}>\r\n              {this.getStatusIcon(status)}\r\n              {this.getStatusText(status)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"DepositRecord-itemDetails\">\r\n          <div className=\"DepositRecord-itemMeta\">\r\n            <span className=\"DepositRecord-itemTime\">\r\n              Submitted: {createdAt ? humanTime(createdAt) : 'Unknown time'}\r\n            </span>\r\n            \r\n            {depositTime && (\r\n              <span className=\"DepositRecord-itemDepositTime\">\r\n                Deposit Time: {depositTime.toLocaleDateString()} {depositTime.toLocaleTimeString()}\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"DepositRecord-itemInfo\">\r\n            <div className=\"DepositRecord-itemRow\">\r\n              <span className=\"DepositRecord-itemLabel\">Platform Account:</span>\r\n              <span className=\"DepositRecord-itemValue\">{platformAccount}</span>\r\n            </div>\r\n            \r\n            {realName && (\r\n              <div className=\"DepositRecord-itemRow\">\r\n                <span className=\"DepositRecord-itemLabel\">Real Name:</span>\r\n                <span className=\"DepositRecord-itemValue\">{realName}</span>\r\n              </div>\r\n            )}\r\n            \r\n            {userMessage && (\r\n              <div className=\"DepositRecord-itemRow\">\r\n                <span className=\"DepositRecord-itemLabel\">Message:</span>\r\n                <span className=\"DepositRecord-itemValue\">{userMessage}</span>\r\n              </div>\r\n            )}\r\n            \r\n            {screenshotUrl && (\r\n              <div className=\"DepositRecord-itemRow\">\r\n                <span className=\"DepositRecord-itemLabel\">Screenshot:</span>\r\n                <a href={screenshotUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"DepositRecord-itemLink\">\r\n                  View Screenshot {icon('fas fa-external-link-alt')}\r\n                </a>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {processedAt && (\r\n            <div className=\"DepositRecord-itemProcessed\">\r\n              <div className=\"DepositRecord-itemProcessedTime\">\r\n                Processed: {humanTime(processedAt)}\r\n              </div>\r\n              \r\n              {creditedAmount && creditedAmount !== amount && (\r\n                <div className=\"DepositRecord-itemCredited\">\r\n                  Credited Amount: {creditedAmount} {platform ? getAttr(platform, 'symbol') : ''}\r\n                </div>\r\n              )}\r\n              \r\n              {adminNotes && (\r\n                <div className=\"DepositRecord-itemNotes\">\r\n                  <span className=\"DepositRecord-itemLabel\">Admin Notes:</span>\r\n                  <span className=\"DepositRecord-itemValue\">{adminNotes}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  private getTransactionId(transaction: Transaction): string {\r\n    if (typeof transaction.id === 'function') {\r\n      return `transaction-${transaction.id()}`;\r\n    }\r\n    return `transaction-${getIdString(transaction) || Math.random()}`;\r\n  }\r\n\r\n  private getPlatform(transaction: Transaction, platforms: any[]): any {\r\n    const platformId = this.getPlatformId(transaction);\r\n    return findPlatformById(platforms, platformId);\r\n  }\r\n\r\n  private getPlatformId(transaction: Transaction): string | number {\r\n    return getAttr(transaction, 'platformId') || \r\n           (transaction.relationships?.platform?.data?.id) || '';\r\n  }\r\n\r\n  private getPlatformName(platform: any): string {\r\n    if (!platform) return 'Unknown Platform';\r\n    return getAttr(platform, 'name') || 'Unknown Platform';\r\n  }\r\n\r\n  private getPlatformSymbol(platform: any): string {\r\n    if (!platform) return '';\r\n    return getAttr(platform, 'symbol') || '';\r\n  }\r\n\r\n  private getStatusColor(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'warning';\r\n      case 'approved':\r\n      case 'confirmed':\r\n      case 'completed':\r\n        return 'success';\r\n      case 'rejected':\r\n      case 'failed':\r\n      case 'cancelled':\r\n        return 'danger';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  private renderPlatformIcon(platform: any): Mithril.Children {\r\n    const iconUrl = getAttr(platform, 'iconUrl');\r\n    const iconClass = getAttr(platform, 'iconClass');\r\n    const symbol = getAttr(platform, 'symbol');\r\n\r\n    if (iconUrl) {\r\n      return <img src={iconUrl} alt={symbol} className=\"DepositHistory-platformImg\" />;\r\n    }\r\n\r\n    if (iconClass) {\r\n      return icon(iconClass);\r\n    }\r\n\r\n    // Fallback to generic icon - use platform-configurable icons only\r\n    return icon('fas fa-coins');\r\n  }\r\n\r\n  private getStatusIcon(status: string): Mithril.Children {\r\n    switch (status) {\r\n      case 'pending':\r\n        return icon('fas fa-clock');\r\n      case 'approved':\r\n      case 'confirmed':\r\n        return icon('fas fa-check-circle');\r\n      case 'completed':\r\n        return icon('fas fa-check-double');\r\n      case 'rejected':\r\n      case 'failed':\r\n        return icon('fas fa-times-circle');\r\n      case 'cancelled':\r\n        return icon('fas fa-ban');\r\n      default:\r\n        return icon('fas fa-question-circle');\r\n    }\r\n  }\r\n\r\n  private getStatusText(status: string): string {\r\n    switch (status) {\r\n      case 'pending':\r\n        return 'Pending';\r\n      case 'approved':\r\n        return 'Approved';\r\n      case 'confirmed':\r\n        return 'Confirmed';\r\n      case 'completed':\r\n        return 'Completed';\r\n      case 'rejected':\r\n        return 'Rejected';\r\n      case 'failed':\r\n        return 'Failed';\r\n      case 'cancelled':\r\n        return 'Cancelled';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  }\r\n\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\nimport DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport { getAttr } from '../../withdrawal/utils/modelHelpers';\r\nimport { ICONS } from '../../withdrawal/utils/constants';\r\nimport { getBestPlatformIcon, getCurrencyIcon, renderIcon } from '../../../../common/utils/IconResolver';\r\nimport m from 'mithril';\r\n\r\ninterface DepositPlatformDropdownProps {\r\n  platforms: DepositPlatform[];\r\n  selectedPlatform: DepositPlatform | null;\r\n  onPlatformSelect: (platform: DepositPlatform) => void;\r\n}\r\n\r\ninterface DepositPlatformDropdownState {\r\n  showDropdown: boolean;\r\n}\r\n\r\nexport default class DepositPlatformDropdown extends Component<DepositPlatformDropdownProps, DepositPlatformDropdownState> {\r\n  oninit(vnode: Mithril.Vnode<DepositPlatformDropdownProps, DepositPlatformDropdownState>) {\r\n    super.oninit(vnode);\r\n    this.state = {\r\n      showDropdown: false,\r\n    };\r\n  }\r\n\r\n  view(): Mithril.Children {\r\n    const { selectedPlatform } = this.attrs;\r\n    const { showDropdown } = this.state;\r\n\r\n    return (\r\n      <div className=\"FundsPage-platformSelector\">\r\n        <div className=\"FundsPage-label\">{app.translator.trans('funds.forum.deposit.platform_label')}</div>\r\n        <div \r\n          className=\"FundsPage-platformDropdown\" \r\n          onclick={() => this.toggleDropdown()}\r\n        >\r\n          <div className=\"FundsPage-platformSelected\">\r\n            <div className=\"FundsPage-platformInfo\">\r\n              <div className=\"FundsPage-platformIcon\">\r\n                {this.renderPlatformIcon(selectedPlatform)}\r\n              </div>\r\n              <div className=\"FundsPage-platformDetails\">\r\n                <div className=\"FundsPage-platformName\">\r\n                  {this.getPlatformDisplayName(selectedPlatform)}\r\n                </div>\r\n                {selectedPlatform && this.renderPlatformSubtext(selectedPlatform)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {icon(ICONS.CHEVRON_DOWN, { className: 'FundsPage-dropdownIcon' })}\r\n        </div>\r\n\r\n        {showDropdown && this.renderPlatformDropdown()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  oncreate(vnode: Mithril.VnodeDOM) {\r\n    super.oncreate(vnode);\r\n    \r\n    // Close dropdown when clicking outside\r\n    document.addEventListener('click', this.handleOutsideClick);\r\n  }\r\n\r\n  onremove(vnode: Mithril.VnodeDOM) {\r\n    super.onremove(vnode);\r\n    document.removeEventListener('click', this.handleOutsideClick);\r\n  }\r\n\r\n  private handleOutsideClick = (e: MouseEvent) => {\r\n    const element = this.element;\r\n    if (element && !element.contains(e.target as Node)) {\r\n      this.state.showDropdown = false;\r\n      m.redraw();\r\n    }\r\n  };\r\n\r\n  private toggleDropdown(): void {\r\n    this.state.showDropdown = !this.state.showDropdown;\r\n  }\r\n\r\n  private getPlatformDisplayName(platform: DepositPlatform | null): string {\r\n    if (!platform) {\r\n      return app.translator.trans('funds.forum.deposit.select_platform').toString();\r\n    }\r\n    \r\n    const name = getAttr(platform, 'name') || '';\r\n    const network = getAttr(platform, 'network');\r\n    \r\n    if (network) {\r\n      return `${name} (${network})`;\r\n    }\r\n    \r\n    return name;\r\n  }\r\n\r\n  private renderPlatformIcon(platform: DepositPlatform | null): Mithril.Children {\r\n    if (!platform) {\r\n      return icon('fas fa-coins');\r\n    }\r\n\r\n    const bestIcon = getBestPlatformIcon(platform);\r\n    return renderIcon(bestIcon, 'FundsPage-platformIconImage');\r\n  }\r\n\r\n  private getCurrencyIconForSymbol(symbol: string, platforms: DepositPlatform[]): Mithril.Children {\r\n    // Find the first platform with this symbol to get currency icon\r\n    const platformWithSymbol = platforms.find(platform => getAttr(platform, 'symbol') === symbol);\r\n    \r\n    if (platformWithSymbol) {\r\n      const currencyIconRep = getCurrencyIcon(platformWithSymbol);\r\n      return renderIcon(currencyIconRep, 'FundsPage-currencyIcon');\r\n    }\r\n    \r\n    return icon('fas fa-coins');\r\n  }\r\n\r\n  private renderPlatformSubtext(platform: DepositPlatform): Mithril.Children {\r\n    const minAmount = getAttr(platform, 'minAmount');\r\n    const fee = getAttr(platform, 'fee');\r\n    const symbol = getAttr(platform, 'symbol');\r\n    \r\n    const parts: string[] = [];\r\n    \r\n    if (minAmount && minAmount > 0) {\r\n      parts.push(app.translator.trans('funds.forum.deposit.min_amount_short', {\r\n        amount: minAmount,\r\n        symbol: symbol\r\n      }).toString());\r\n    }\r\n    \r\n    if (fee && fee > 0) {\r\n      parts.push(app.translator.trans('funds.forum.deposit.fee_short', {\r\n        fee: fee,\r\n        symbol: symbol\r\n      }).toString());\r\n    }\r\n    \r\n    if (parts.length > 0) {\r\n      return (\r\n        <div className=\"FundsPage-platformSubtext\">\r\n          {parts.join(' • ')}\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  private renderPlatformDropdown(): Mithril.Children {\r\n    const { platforms } = this.attrs;\r\n\r\n    // Group platforms by currency and sort\r\n    const groupedPlatforms = this.groupPlatformsByCurrency(platforms);\r\n    \r\n    if (Object.keys(groupedPlatforms).length === 0) {\r\n      return (\r\n        <div className=\"FundsPage-dropdownMenu\">\r\n          <div className=\"FundsPage-dropdownItem FundsPage-noData\">\r\n            {app.translator.trans('funds.forum.deposit.no_platforms')}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-dropdownMenu\">\r\n        {Object.entries(groupedPlatforms).flatMap(([currency, currencyPlatforms]) => [\r\n          // Currency header\r\n          <div key={`${currency}-header`} className=\"FundsPage-dropdownHeader\">\r\n            <div className=\"FundsPage-currencyHeader\">\r\n              <div className=\"FundsPage-currencyIcon\">\r\n                {this.getCurrencyIconForSymbol(currency, platforms)}\r\n              </div>\r\n              <span className=\"FundsPage-currencyName\">{currency}</span>\r\n            </div>\r\n          </div>,\r\n          // Platforms for this currency\r\n          ...currencyPlatforms.map(platform => (\r\n            <div \r\n              key={platform.id()}\r\n              className=\"FundsPage-dropdownItem\"\r\n              onclick={() => this.selectPlatform(platform)}\r\n            >\r\n              <div className=\"FundsPage-platformIcon\">\r\n                {this.renderPlatformIcon(platform)}\r\n              </div>\r\n              <div className=\"FundsPage-platformInfo\">\r\n                <div className=\"FundsPage-platformName\">\r\n                  {this.getPlatformDisplayName(platform)}\r\n                </div>\r\n                {this.renderPlatformSubtext(platform)}\r\n              </div>\r\n            </div>\r\n          ))\r\n        ])}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private groupPlatformsByCurrency(platforms: DepositPlatform[]): { [currency: string]: DepositPlatform[] } {\r\n    const grouped: { [currency: string]: DepositPlatform[] } = {};\r\n    \r\n    // Filter active platforms and group by currency\r\n    const validPlatforms = (platforms || []).filter(platform => \r\n      platform && getAttr(platform, 'isActive')\r\n    );\r\n\r\n    validPlatforms.forEach(platform => {\r\n      const symbol = getAttr(platform, 'symbol');\r\n      if (!grouped[symbol]) {\r\n        grouped[symbol] = [];\r\n      }\r\n      grouped[symbol].push(platform);\r\n    });\r\n\r\n    // Sort platforms within each currency group by network\r\n    Object.keys(grouped).forEach(currency => {\r\n      grouped[currency].sort((a, b) => {\r\n        const networkA = getAttr(a, 'network') || '';\r\n        const networkB = getAttr(b, 'network') || '';\r\n        return networkA.localeCompare(networkB);\r\n      });\r\n    });\r\n\r\n    return grouped;\r\n  }\r\n\r\n  private selectPlatform(platform: DepositPlatform): void {\r\n    const { onPlatformSelect } = this.attrs;\r\n    \r\n    onPlatformSelect(platform);\r\n    this.state.showDropdown = false;\r\n  }\r\n}","import Component from 'flarum/common/Component';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport type Mithril from 'mithril';\r\n\r\nexport interface AddressDisplayAttrs {\r\n  address: string;\r\n  loading: boolean;\r\n  onCopy: () => void;\r\n}\r\n\r\nexport default class AddressDisplay extends Component<AddressDisplayAttrs> {\r\n  view(vnode: Mithril.Vnode<AddressDisplayAttrs>) {\r\n    const { address, loading, onCopy } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"AddressDisplay\">\r\n        {loading ? (\r\n          <div className=\"AddressDisplay-loading\">\r\n            <i className=\"fas fa-spinner fa-spin\"></i>\r\n            <span>Generating address...</span>\r\n          </div>\r\n        ) : address ? (\r\n          <div className=\"AddressDisplay-content\">\r\n            <div className=\"AddressDisplay-address\" title={address}>\r\n              {address}\r\n            </div>\r\n            <div className=\"AddressDisplay-actions\">\r\n              <button\r\n                className=\"AddressDisplay-copyBtn\"\r\n                onclick={onCopy}\r\n                title=\"Copy address\"\r\n              >\r\n                {icon('fas fa-copy')}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"AddressDisplay-placeholder\">\r\n            <span>No address available</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import Component from 'flarum/common/Component';\r\nimport DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport type Mithril from 'mithril';\r\n\r\nexport interface ImageDisplayAttrs {\r\n  platform: DepositPlatform | null;\r\n  loading?: boolean;\r\n  size?: number;\r\n}\r\n\r\nexport default class ImageDisplay extends Component<ImageDisplayAttrs> {\r\n  view(vnode: Mithril.Vnode<ImageDisplayAttrs>) {\r\n    const { platform, loading, size = 160 } = vnode.attrs;\r\n\r\n    return (\r\n      <div className=\"ImageDisplay\" style={{ width: `${size}px`, height: `${size}px` }}>\r\n        {loading ? (\r\n          <div className=\"ImageDisplay-loading\">\r\n            <i className=\"fas fa-spinner fa-spin\"></i>\r\n          </div>\r\n        ) : platform && platform.qrCodeImageUrl() ? (\r\n          <img \r\n            src={platform.qrCodeImageUrl()} \r\n            alt={`${platform.name()} Image`}\r\n            className=\"ImageDisplay-image\"\r\n            onerror=\"this.style.display='none'; this.nextElementSibling.style.display='block';\"\r\n          />\r\n        ) : (\r\n          <div className=\"ImageDisplay-placeholder\">\r\n            <i className=\"fas fa-image\"></i>\r\n            <div>No Image</div>\r\n          </div>\r\n        )}\r\n        <div className=\"ImageDisplay-error\" style={{ display: 'none' }}>\r\n          <i className=\"fas fa-exclamation-triangle\"></i>\r\n          <div>Image Load Failed</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport withAttr from 'flarum/common/utils/withAttr';\r\nimport type Mithril from 'mithril';\r\nimport type DepositPlatform from '../../../../common/models/DepositPlatform';\r\nimport { getAttr, getIdString } from '../../withdrawal/utils/modelHelpers';\r\n\r\nexport interface DepositRecordFormData {\r\n  platformId: number;\r\n  platformAccount: string;\r\n  realName?: string;\r\n  amount: number;\r\n  depositTime: Date;\r\n  screenshotUrl?: string;\r\n  userMessage?: string;\r\n}\r\n\r\ninterface DepositRecordFormProps {\r\n  platform: DepositPlatform;\r\n  onSubmit: (data: DepositRecordFormData) => Promise<void>;\r\n  onCancel: () => void;\r\n  submitting: boolean;\r\n}\r\n\r\ninterface DepositRecordFormState {\r\n  platformAccount: Stream<string>;\r\n  realName: Stream<string>;\r\n  amount: Stream<string>;\r\n  depositTime: Stream<string>;\r\n  screenshotUrl: Stream<string>;\r\n  userMessage: Stream<string>;\r\n}\r\n\r\nexport default class DepositRecordForm extends Component<DepositRecordFormProps, DepositRecordFormState> {\r\n  oninit(vnode: Mithril.Vnode<DepositRecordFormProps>) {\r\n    super.oninit(vnode);\r\n    \r\n    // Initialize form data with current date/time\r\n    const now = new Date();\r\n    const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000)\r\n      .toISOString()\r\n      .slice(0, 16); // Format: YYYY-MM-DDTHH:mm\r\n    \r\n    this.state = {\r\n      platformAccount: Stream(''),\r\n      realName: Stream(''),\r\n      amount: Stream(''),\r\n      depositTime: Stream(localDateTime),\r\n      screenshotUrl: Stream(''),\r\n      userMessage: Stream('')\r\n    };\r\n  }\r\n\r\n  view(vnode: Mithril.Vnode<DepositRecordFormProps>): Mithril.Children {\r\n    const { platform, submitting } = vnode.attrs;\r\n    const minAmount = getAttr(platform, 'minAmount') || 0;\r\n    const maxAmount = getAttr(platform, 'maxAmount');\r\n    const symbol = getAttr(platform, 'symbol') || '';\r\n\r\n    return (\r\n      <div className=\"DepositRecordForm\">\r\n        <div className=\"DepositRecordForm-header\">\r\n          <div className=\"DepositRecordForm-title\">\r\n            <i className=\"fas fa-plus-circle\"></i>\r\n            {app.translator.trans('funds.forum.deposit.record.form_title')}\r\n          </div>\r\n          <div className=\"DepositRecordForm-platformInfo\">\r\n            {app.translator.trans('funds.forum.deposit.record.selected_platform', {\r\n              platform: getAttr(platform, 'name'),\r\n              symbol: symbol\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <form onsubmit={this.handleSubmit.bind(this)} className=\"DepositRecordForm-form\">\r\n          {/* Platform Account Field */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('funds.forum.deposit.record.platform_account')}\r\n              <span className=\"DepositRecordForm-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"DepositRecordForm-input\"\r\n              placeholder={app.translator.trans('funds.forum.deposit.record.platform_account_placeholder')}\r\n              value={this.state.platformAccount()}\r\n              oninput={withAttr('value', this.state.platformAccount)}\r\n              required\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"DepositRecordForm-help\">\r\n              {app.translator.trans('funds.forum.deposit.record.platform_account_help')}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Real Name Field (Optional) */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('funds.forum.deposit.record.real_name')}\r\n              <span className=\"DepositRecordForm-optional\">\r\n                ({app.translator.trans('funds.forum.deposit.record.optional')})\r\n              </span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"DepositRecordForm-input\"\r\n              placeholder={app.translator.trans('funds.forum.deposit.record.real_name_placeholder')}\r\n              value={this.state.realName()}\r\n              oninput={withAttr('value', this.state.realName)}\r\n              disabled={submitting}\r\n            />\r\n          </div>\r\n\r\n          {/* Amount Field */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('funds.forum.deposit.record.amount')} ({symbol})\r\n              <span className=\"DepositRecordForm-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              min={minAmount}\r\n              max={maxAmount}\r\n              className=\"DepositRecordForm-input\"\r\n              placeholder={app.translator.trans('funds.forum.deposit.record.amount_placeholder')}\r\n              value={this.state.amount()}\r\n              oninput={withAttr('value', this.state.amount)}\r\n              required\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"DepositRecordForm-limits\">\r\n              {minAmount > 0 && (\r\n                <span className=\"DepositRecordForm-limit\">\r\n                  {app.translator.trans('funds.forum.deposit.record.min_amount', {\r\n                    amount: minAmount,\r\n                    symbol: symbol\r\n                  })}\r\n                </span>\r\n              )}\r\n              {maxAmount && (\r\n                <span className=\"DepositRecordForm-limit\">\r\n                  {app.translator.trans('funds.forum.deposit.record.max_amount', {\r\n                    amount: maxAmount,\r\n                    symbol: symbol\r\n                  })}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Deposit Time Field */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('funds.forum.deposit.record.deposit_time')}\r\n              <span className=\"DepositRecordForm-required\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"datetime-local\"\r\n              className=\"DepositRecordForm-input\"\r\n              value={this.state.depositTime()}\r\n              oninput={withAttr('value', this.state.depositTime)}\r\n              required\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"DepositRecordForm-help\">\r\n              {app.translator.trans('funds.forum.deposit.record.deposit_time_help')}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Screenshot URL Field (Optional) */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('funds.forum.deposit.record.screenshot_url')}\r\n              <span className=\"DepositRecordForm-optional\">\r\n                ({app.translator.trans('funds.forum.deposit.record.optional')})\r\n              </span>\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              className=\"DepositRecordForm-input\"\r\n              placeholder={app.translator.trans('funds.forum.deposit.record.screenshot_url_placeholder')}\r\n              value={this.state.screenshotUrl()}\r\n              oninput={withAttr('value', this.state.screenshotUrl)}\r\n              disabled={submitting}\r\n            />\r\n            <div className=\"DepositRecordForm-help\">\r\n              {app.translator.trans('funds.forum.deposit.record.screenshot_url_help')}\r\n            </div>\r\n          </div>\r\n\r\n          {/* User Message Field (Optional) */}\r\n          <div className=\"DepositRecordForm-field\">\r\n            <label className=\"DepositRecordForm-label\">\r\n              {app.translator.trans('funds.forum.deposit.record.user_message')}\r\n              <span className=\"DepositRecordForm-optional\">\r\n                ({app.translator.trans('funds.forum.deposit.record.optional')})\r\n              </span>\r\n            </label>\r\n            <textarea\r\n              className=\"DepositRecordForm-textarea\"\r\n              placeholder={app.translator.trans('funds.forum.deposit.record.user_message_placeholder')}\r\n              value={this.state.userMessage()}\r\n              oninput={withAttr('value', this.state.userMessage)}\r\n              rows={3}\r\n              disabled={submitting}\r\n            ></textarea>\r\n          </div>\r\n\r\n          {/* Form Actions */}\r\n          <div className=\"DepositRecordForm-actions\">\r\n            <Button\r\n              type=\"button\"\r\n              className=\"Button Button--secondary DepositRecordForm-cancelButton\"\r\n              onclick={vnode.attrs.onCancel}\r\n              disabled={submitting}\r\n            >\r\n              {app.translator.trans('funds.forum.deposit.record.cancel')}\r\n            </Button>\r\n            \r\n            <Button\r\n              type=\"submit\"\r\n              className=\"Button Button--primary DepositRecordForm-submitButton\"\r\n              loading={submitting}\r\n              disabled={submitting}\r\n            >\r\n              {app.translator.trans('funds.forum.deposit.record.submit')}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleSubmit(e: Event): void {\r\n    e.preventDefault();\r\n\r\n    const { platform, onSubmit } = this.attrs;\r\n    \r\n    // Basic validation\r\n    if (!this.state.platformAccount() || !this.state.amount() || !this.state.depositTime()) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.record.validation.required_fields')\r\n      );\r\n      return;\r\n    }\r\n\r\n    const amount = parseFloat(this.state.amount());\r\n    if (isNaN(amount) || amount <= 0) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.record.validation.invalid_amount')\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Check platform limits\r\n    const minAmount = getAttr(platform, 'minAmount') || 0;\r\n    const maxAmount = getAttr(platform, 'maxAmount');\r\n\r\n    if (amount < minAmount) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.record.validation.amount_too_low', {\r\n          amount: amount,\r\n          min: minAmount,\r\n          symbol: getAttr(platform, 'symbol')\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (maxAmount && amount > maxAmount) {\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.record.validation.amount_too_high', {\r\n          amount: amount,\r\n          max: maxAmount,\r\n          symbol: getAttr(platform, 'symbol')\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Prepare form data\r\n    const formData: DepositRecordFormData = {\r\n      platformId: parseInt(getIdString(platform)),\r\n      platformAccount: this.state.platformAccount(),\r\n      realName: this.state.realName() || undefined,\r\n      amount: amount,\r\n      depositTime: new Date(this.state.depositTime()),\r\n      screenshotUrl: this.state.screenshotUrl() || undefined,\r\n      userMessage: this.state.userMessage() || undefined\r\n    };\r\n\r\n    onSubmit(formData);\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\n\r\n/**\r\n * Standard pagination parameters for Flarum API requests\r\n */\r\nexport interface PaginationOptions {\r\n  limit?: number;\r\n  offset?: number;\r\n  page?: {\r\n    limit?: number;\r\n    offset?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Standard filter options for API requests\r\n */\r\nexport interface FilterOptions {\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Standard sort options for API requests\r\n */\r\nexport interface SortOptions {\r\n  field: string;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n/**\r\n * Standard query options for finding records\r\n */\r\nexport interface QueryOptions {\r\n  include?: string | string[];\r\n  filter?: FilterOptions;\r\n  sort?: string | SortOptions | SortOptions[];\r\n  page?: PaginationOptions;\r\n}\r\n\r\n/**\r\n * Service response wrapper for better error handling\r\n */\r\nexport interface ServiceResponse<T> {\r\n  data: T;\r\n  meta?: {\r\n    total?: number;\r\n    count?: number;\r\n    hasMore?: boolean;\r\n  };\r\n  errors?: Array<{\r\n    detail: string;\r\n    source?: any;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Base service interface that all services should implement\r\n */\r\nexport interface BaseService<TModel extends Model> {\r\n  /**\r\n   * Find multiple records\r\n   */\r\n  find(options?: QueryOptions): Promise<TModel[]>;\r\n\r\n  /**\r\n   * Find a single record by ID\r\n   */\r\n  findById(id: string | number, options?: QueryOptions): Promise<TModel | null>;\r\n\r\n  /**\r\n   * Create a new record\r\n   */\r\n  create(attributes: Record<string, any>): Promise<TModel>;\r\n\r\n  /**\r\n   * Update an existing record\r\n   */\r\n  update(model: TModel, attributes: Record<string, any>): Promise<TModel>;\r\n\r\n  /**\r\n   * Delete a record\r\n   */\r\n  delete(model: TModel): Promise<void>;\r\n\r\n  /**\r\n   * Check if a record can be modified by current user\r\n   */\r\n  canModify(model: TModel): boolean;\r\n\r\n  /**\r\n   * Check if current user can create new records\r\n   */\r\n  canCreate(): boolean;\r\n\r\n  /**\r\n   * Check if current user can delete a record\r\n   */\r\n  canDelete(model: TModel): boolean;\r\n}\r\n\r\n/**\r\n * Withdrawal-specific service interface\r\n */\r\nexport interface WithdrawalServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Submit a funds request\r\n   */\r\n  submitRequest(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    accountDetails: string;\r\n    message?: string;\r\n  }): Promise<any>;\r\n\r\n  /**\r\n   * Get user's funds history\r\n   */\r\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Get pending requests (admin only)\r\n   */\r\n  getPendingRequests(options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Approve a funds request (admin only)\r\n   */\r\n  approve(request: any, message?: string): Promise<any>;\r\n\r\n  /**\r\n   * Reject a funds request (admin only)\r\n   */\r\n  reject(request: any, reason?: string): Promise<any>;\r\n\r\n  /**\r\n   * Cancel a pending request (user only)\r\n   */\r\n  cancel(request: any): Promise<any>;\r\n}\r\n\r\n/**\r\n * Deposit-specific service interface\r\n */\r\nexport interface DepositServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Generate deposit address for user\r\n   */\r\n  generateAddress(platformId: number): Promise<string>;\r\n\r\n  /**\r\n   * Get user's deposit history\r\n   */\r\n  getUserHistory(userId?: number, options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Create deposit record\r\n   */\r\n  createRecord(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    note?: string;\r\n  }): Promise<any>;\r\n\r\n  /**\r\n   * Get pending deposits (admin only)\r\n   */\r\n  getPendingDeposits(options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Confirm a deposit (admin only)\r\n   */\r\n  confirm(deposit: any, confirmedAmount?: number): Promise<any>;\r\n}\r\n\r\n/**\r\n * Platform service interface for both funds and deposit platforms\r\n */\r\nexport interface PlatformServiceInterface extends BaseService<any> {\r\n  /**\r\n   * Get active platforms only\r\n   */\r\n  getActive(type: 'funds' | 'deposit', options?: QueryOptions): Promise<any[]>;\r\n\r\n  /**\r\n   * Toggle platform status (admin only)\r\n   */\r\n  toggleStatus(platform: any): Promise<any>;\r\n\r\n  /**\r\n   * Update platform configuration (admin only)\r\n   */\r\n  updateConfig(platform: any, config: Record<string, any>): Promise<any>;\r\n\r\n  /**\r\n   * Get platforms by symbol\r\n   */\r\n  getBySymbol(symbol: string, type: 'funds' | 'deposit'): Promise<any[]>;\r\n}\r\n\r\n/**\r\n * Settings service interface for managing Flarum admin settings\r\n */\r\nexport interface SettingsServiceInterface {\r\n  getSetting(key: string, defaultValue?: any): Promise<any>;\r\n  saveSetting(key: string, value: any): Promise<void>;\r\n  saveSettings(settings: Record<string, any>): Promise<void>;\r\n  deleteSetting(key: string): Promise<void>;\r\n  getSettingsWithPrefix(prefix: string): Promise<Record<string, any>>;\r\n  canManageSettings(): boolean;\r\n  getExtensionSetting(extension: string, key: string, defaultValue?: any): Promise<any>;\r\n  saveExtensionSetting(extension: string, key: string, value: any): Promise<void>;\r\n  getWithdrawalSetting(key: string, defaultValue?: any): Promise<any>;\r\n  saveWithdrawalSetting(key: string, value: any): Promise<void>;\r\n  getAllWithdrawalSettings(): Promise<Record<string, any>>;\r\n}\r\n\r\n/**\r\n * Address service interface for managing deposit addresses\r\n */\r\nexport interface AddressServiceInterface {\r\n  generateAddress(platformId: number, userId?: number): Promise<string>;\r\n  canGenerateAddress(): boolean;\r\n}\r\n\r\n/**\r\n * Cache service for managing local data storage\r\n */\r\nexport interface CacheOptions {\r\n  ttl?: number; // Time to live in milliseconds\r\n  key?: string; // Custom cache key\r\n  refresh?: boolean; // Force refresh from server\r\n}\r\n\r\n/**\r\n * Common service configuration\r\n */\r\nexport interface ServiceConfig {\r\n  apiUrl?: string;\r\n  timeout?: number;\r\n  retries?: number;\r\n  cache?: boolean;\r\n  defaultPageSize?: number;\r\n}\r\n\r\n/**\r\n * Service error types\r\n */\r\nexport enum ServiceErrorType {\r\n  NETWORK_ERROR = 'network_error',\r\n  PERMISSION_DENIED = 'permission_denied',\r\n  VALIDATION_ERROR = 'validation_error',\r\n  NOT_FOUND = 'not_found',\r\n  SERVER_ERROR = 'server_error',\r\n  TIMEOUT = 'timeout'\r\n}\r\n\r\n/**\r\n * Service error class\r\n */\r\nexport class ServiceError extends Error {\r\n  public type: ServiceErrorType;\r\n  public code?: string;\r\n  public details?: any;\r\n\r\n  constructor(\r\n    message: string, \r\n    type: ServiceErrorType = ServiceErrorType.SERVER_ERROR, \r\n    code?: string, \r\n    details?: any\r\n  ) {\r\n    super(message);\r\n    this.name = 'ServiceError';\r\n    this.type = type;\r\n    this.code = code;\r\n    this.details = details;\r\n  }\r\n}","import app from 'flarum/common/app';\r\nimport WithdrawalRequest from '../models/WithdrawalRequest';\r\nimport WithdrawalPlatform from '../models/WithdrawalPlatform';\r\nimport { \r\n  WithdrawalServiceInterface, \r\n  QueryOptions, \r\n  ServiceError, \r\n  ServiceErrorType\r\n} from '../types/services';\r\n\r\n/**\r\n * Service for managing funds requests with proper CRUD operations\r\n */\r\nexport default class WithdrawalService implements WithdrawalServiceInterface {\r\n  private readonly modelType = 'funds-requests';\r\n  private readonly platformModelType = 'funds-platforms';\r\n\r\n  /**\r\n   * Find multiple funds requests\r\n   */\r\n  async find(options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\r\n    try {\r\n      const queryParams: any = {\r\n        include: options.include || 'user,platform',\r\n        sort: options.sort || '-created_at',\r\n        ...options\r\n      };\r\n\r\n      // Add pagination if specified\r\n      if (options.page) {\r\n        queryParams.page = options.page;\r\n      }\r\n\r\n      // Add filters if specified\r\n      if (options.filter) {\r\n        queryParams.filter = options.filter;\r\n      }\r\n\r\n      const results = await app.store.find(this.modelType, queryParams);\r\n      return Array.isArray(results) ? results : [results];\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to fetch funds requests');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find a single funds request by ID\r\n   */\r\n  async findById(id: string | number, options: QueryOptions = {}): Promise<WithdrawalRequest | null> {\r\n    try {\r\n      const queryParams: any = {\r\n        include: options.include || 'user,platform'\r\n      };\r\n\r\n      const result = await app.store.find(this.modelType, id, queryParams);\r\n      return result as WithdrawalRequest;\r\n    } catch (error) {\r\n      if (this.isNotFoundError(error)) {\r\n        return null;\r\n      }\r\n      throw this.handleError(error, `Failed to fetch funds request ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new funds request\r\n   */\r\n  async create(attributes: Record<string, any>): Promise<WithdrawalRequest> {\r\n    try {\r\n      // Validate required fields\r\n      this.validateCreateAttributes(attributes);\r\n\r\n      const request = app.store.createRecord(this.modelType) as WithdrawalRequest;\r\n      \r\n      const savedRequest = await request.save(attributes);\r\n      return savedRequest as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to create funds request');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing funds request\r\n   */\r\n  async update(model: WithdrawalRequest, attributes: Record<string, any>): Promise<WithdrawalRequest> {\r\n    try {\r\n      if (!this.canModify(model)) {\r\n        throw new ServiceError(\r\n          'You do not have permission to modify this funds request',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      const updatedModel = await model.save(attributes);\r\n      return updatedModel as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to update funds request');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a funds request\r\n   */\r\n  async delete(model: WithdrawalRequest): Promise<void> {\r\n    try {\r\n      if (!this.canDelete(model)) {\r\n        throw new ServiceError(\r\n          'You do not have permission to delete this funds request',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      await model.delete();\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to delete funds request');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Submit a new funds request with validation\r\n   */\r\n  async submitRequest(data: {\r\n    platformId: number;\r\n    amount: number;\r\n    accountDetails: string;\r\n    message?: string;\r\n  }): Promise<WithdrawalRequest> {\r\n    try {\r\n      // Validate user balance and platform limits\r\n      await this.validateWithdrawalRequest(data);\r\n\r\n      const attributes = {\r\n        platformId: data.platformId,\r\n        amount: data.amount,\r\n        accountDetails: data.accountDetails,\r\n        message: data.message || '',\r\n        status: 'pending'\r\n      };\r\n\r\n      return await this.create(attributes);\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to submit funds request');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user's funds history\r\n   */\r\n  async getUserHistory(userId?: number, options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\r\n    const targetUserId = userId || app.session.user?.id();\r\n    \r\n    if (!targetUserId) {\r\n      throw new ServiceError(\r\n        'User not authenticated',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        user: targetUserId,\r\n        ...options.filter\r\n      },\r\n      include: options.include || 'platform',\r\n      sort: options.sort || '-created_at'\r\n    };\r\n\r\n    return await this.find(queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Get pending requests (admin only)\r\n   */\r\n  async getPendingRequests(options: QueryOptions = {}): Promise<WithdrawalRequest[]> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        'Admin permissions required',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        status: 'pending',\r\n        ...options.filter\r\n      },\r\n      include: options.include || 'user,platform',\r\n      sort: options.sort || 'created_at'\r\n    };\r\n\r\n    return await this.find(queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Approve a funds request (admin only)\r\n   */\r\n  async approve(request: WithdrawalRequest, message?: string): Promise<WithdrawalRequest> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        'Admin permissions required',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    if (!request.isPending()) {\r\n      throw new ServiceError(\r\n        'Only pending requests can be approved',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: 'approved'\r\n    };\r\n\r\n    if (message) {\r\n      attributes.adminNote = message;\r\n    }\r\n\r\n    return await this.update(request, attributes);\r\n  }\r\n\r\n  /**\r\n   * Reject a funds request (admin only)\r\n   */\r\n  async reject(request: WithdrawalRequest, reason?: string): Promise<WithdrawalRequest> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        'Admin permissions required',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    if (!request.isPending()) {\r\n      throw new ServiceError(\r\n        'Only pending requests can be rejected',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: 'rejected'\r\n    };\r\n\r\n    if (reason) {\r\n      attributes.adminNote = reason;\r\n    }\r\n\r\n    return await this.update(request, attributes);\r\n  }\r\n\r\n  /**\r\n   * Cancel a pending request (user only)\r\n   */\r\n  async cancel(request: WithdrawalRequest): Promise<any> {\r\n    if (!request.canBeModified()) {\r\n      throw new ServiceError(\r\n        'This request cannot be cancelled',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    const currentUser = app.session.user;\r\n    if (!currentUser || (request.userId() !== currentUser.id() && !currentUser.isAdmin())) {\r\n      throw new ServiceError(\r\n        'You can only cancel your own requests',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.delete(request);\r\n  }\r\n\r\n  /**\r\n   * Check if current user can modify a funds request\r\n   */\r\n  canModify(model: WithdrawalRequest): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending requests\r\n    return model.userId() === currentUser.id() && model.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can create new funds requests\r\n   */\r\n  canCreate(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && !currentUser.isGuest();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete a funds request\r\n   */\r\n  canDelete(model: WithdrawalRequest): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending requests\r\n    return model.userId() === currentUser.id() && model.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Get available funds platforms\r\n   */\r\n  async getPlatforms(): Promise<WithdrawalPlatform[]> {\r\n    try {\r\n      const platforms = await app.store.find(this.platformModelType, {\r\n        filter: { isActive: true },\r\n        sort: 'name'\r\n      });\r\n      \r\n      return Array.isArray(platforms) ? platforms : [platforms];\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to fetch funds platforms');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate funds request data\r\n   */\r\n  private async validateWithdrawalRequest(data: any): Promise<void> {\r\n    const { platformId, amount } = data;\r\n\r\n    // Get platform details\r\n    const platform = await app.store.find(this.platformModelType, platformId);\r\n    if (!platform) {\r\n      throw new ServiceError(\r\n        'Invalid platform selected',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Check if platform is active\r\n    if (!platform.isActive()) {\r\n      throw new ServiceError(\r\n        'Selected platform is not available',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Validate amount limits\r\n    const minAmount = platform.minAmount();\r\n    const maxAmount = platform.maxAmount();\r\n    \r\n    if (amount < minAmount) {\r\n      throw new ServiceError(\r\n        `Minimum funds amount is ${minAmount}`,\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    if (maxAmount && amount > maxAmount) {\r\n      throw new ServiceError(\r\n        `Maximum funds amount is ${maxAmount}`,\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    // Check user balance\r\n    const currentUser = app.session.user;\r\n    if (currentUser) {\r\n      const userBalance = parseFloat(currentUser.attribute('money') || '0');\r\n      const fee = platform.fee ? platform.fee() : 0;\r\n      const totalRequired = amount + fee;\r\n\r\n      if (userBalance < totalRequired) {\r\n        throw new ServiceError(\r\n          `Insufficient balance. Required: ${totalRequired}, Available: ${userBalance}`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate create attributes\r\n   */\r\n  private validateCreateAttributes(attributes: any): void {\r\n    const required = ['platformId', 'amount', 'accountDetails'];\r\n    \r\n    for (const field of required) {\r\n      if (!attributes[field]) {\r\n        throw new ServiceError(\r\n          `${field} is required`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\r\n      throw new ServiceError(\r\n        'Amount must be a positive number',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\r\n      return new ServiceError(\r\n        'Network error occurred',\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if error is a not found error\r\n   */\r\n  private isNotFoundError(error: any): boolean {\r\n    return error.status === 404 || \r\n           error.response?.status === 404 ||\r\n           error.message?.includes('not found');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const withdrawalService = new WithdrawalService();","import app from 'flarum/common/app';\nimport DepositRecord from '../models/DepositRecord';\nimport DepositPlatform from '../models/DepositPlatform';\nimport { \n  DepositServiceInterface, \n  QueryOptions, \n  ServiceError, \n  ServiceErrorType\n} from '../types/services';\n\n/**\n * Service for managing deposit records and addresses with proper CRUD operations\n */\nexport default class DepositService implements DepositServiceInterface {\n  private readonly recordModelType = 'deposit-records';\n  private readonly platformModelType = 'deposit-platforms';\n  private readonly addressModelType = 'deposit-addresses';\n\n  /**\n   * Find multiple deposit records\n   */\n  async find(options: QueryOptions = {}): Promise<any[]> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform',\n        sort: options.sort || '-created_at',\n        ...options\n      };\n\n      // Add pagination if specified\n      if (options.page) {\n        queryParams.page = options.page;\n      }\n\n      // Add filters if specified\n      if (options.filter) {\n        queryParams.filter = options.filter;\n      }\n\n      const results = await app.store.find(this.recordModelType, queryParams);\n      return Array.isArray(results) ? results : [results];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch deposit records');\n    }\n  }\n\n  /**\n   * Find a single deposit record by ID\n   */\n  async findById(id: string | number, options: QueryOptions = {}): Promise<any | null> {\n    try {\n      const queryParams: any = {\n        include: options.include || 'user,platform'\n      };\n\n      const result = await app.store.find(this.recordModelType, String(id), queryParams);\n      return result;\n    } catch (error) {\n      if (this.isNotFoundError(error)) {\n        return null;\n      }\n      throw this.handleError(error, `Failed to fetch deposit record ${id}`);\n    }\n  }\n\n  /**\n   * Create a new deposit record\n   */\n  async create(attributes: Record<string, any>): Promise<any> {\n    try {\n      // Validate required fields\n      this.validateCreateAttributes(attributes);\n\n      const record = app.store.createRecord(this.recordModelType);\n      \n      const savedRecord = await record.save(attributes);\n      return savedRecord;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to create deposit record');\n    }\n  }\n\n  /**\n   * Update an existing deposit record\n   */\n  async update(model: DepositRecord, attributes: Record<string, any>): Promise<DepositRecord> {\n    try {\n      if (!this.canModify(model)) {\n        throw new ServiceError(\n          'You do not have permission to modify this deposit record',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      const updatedModel = await model.save(attributes);\n      return updatedModel as DepositRecord;\n    } catch (error) {\n      throw this.handleError(error, 'Failed to update deposit record');\n    }\n  }\n\n  /**\n   * Delete a deposit record\n   */\n  async delete(model: DepositRecord): Promise<void> {\n    try {\n      if (!this.canDelete(model)) {\n        throw new ServiceError(\n          'You do not have permission to delete this deposit record',\n          ServiceErrorType.PERMISSION_DENIED\n        );\n      }\n\n      await model.delete();\n    } catch (error) {\n      throw this.handleError(error, 'Failed to delete deposit record');\n    }\n  }\n\n  /**\n   * Generate deposit address for user - delegates to AddressService\n   */\n  async generateAddress(platformId: number): Promise<string> {\n    try {\n      // Import AddressService dynamically to avoid circular dependencies\n      const { addressService } = await import('./AddressService') as any;\n      return await addressService.generateAddress(platformId);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to generate deposit address');\n    }\n  }\n\n  /**\n   * Get user's deposit history\n   */\n  async getUserHistory(userId?: number, options: QueryOptions = {}): Promise<DepositRecord[]> {\n    const targetUserId = userId || app.session.user?.id();\n    \n    if (!targetUserId) {\n      throw new ServiceError(\n        'User not authenticated',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        user: targetUserId,\n        ...options.filter\n      },\n      include: options.include || 'platform',\n      sort: options.sort || '-created_at'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Create deposit record\n   */\n  async createRecord(data: {\n    platformId: number;\n    amount: number;\n    note?: string;\n  }): Promise<DepositRecord> {\n    try {\n      // Validate platform and amount\n      await this.validateDepositRecord(data);\n\n      const attributes = {\n        platformId: data.platformId,\n        amount: data.amount,\n        note: data.note || '',\n        status: 'pending'\n      };\n\n      return await this.create(attributes);\n    } catch (error) {\n      throw this.handleError(error, 'Failed to create deposit record');\n    }\n  }\n\n  /**\n   * Get pending deposits (admin only)\n   */\n  async getPendingDeposits(options: QueryOptions = {}): Promise<DepositRecord[]> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const queryOptions = {\n      ...options,\n      filter: {\n        status: 'pending',\n        ...options.filter\n      },\n      include: options.include || 'user,platform',\n      sort: options.sort || 'created_at'\n    };\n\n    return await this.find(queryOptions);\n  }\n\n  /**\n   * Confirm a deposit (admin only)\n   */\n  async confirm(deposit: DepositRecord, confirmedAmount?: number): Promise<DepositRecord> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const attributes: any = {\n      status: 'confirmed'\n    };\n\n    if (confirmedAmount && confirmedAmount !== deposit.amount()) {\n      attributes.confirmedAmount = confirmedAmount;\n    }\n\n    return await this.update(deposit, attributes);\n  }\n\n  /**\n   * Reject a deposit (admin only)\n   */\n  async reject(deposit: DepositRecord, reason?: string): Promise<DepositRecord> {\n    if (!app.session.user?.isAdmin()) {\n      throw new ServiceError(\n        'Admin permissions required',\n        ServiceErrorType.PERMISSION_DENIED\n      );\n    }\n\n    const attributes: any = {\n      status: 'rejected'\n    };\n\n    if (reason) {\n      attributes.adminNote = reason;\n    }\n\n    return await this.update(deposit, attributes);\n  }\n\n  /**\n   * Check if current user can modify a deposit record\n   */\n  canModify(model: DepositRecord): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can modify any record\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only modify their own pending records\n    return String((model as any).userId()) === String(currentUser.id()) && (model as any).status() === 'pending';\n  }\n\n  /**\n   * Check if current user can create new deposit records\n   */\n  canCreate(): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n    const isGuest = (currentUser as any).isGuest();\n    return !isGuest;\n  }\n\n  /**\n   * Check if current user can delete a deposit record\n   */\n  canDelete(model: DepositRecord): boolean {\n    const currentUser = app.session.user;\n    if (!currentUser) return false;\n\n    // Admin can delete any record\n    if (currentUser.isAdmin()) return true;\n\n    // Users can only delete their own pending records\n    return String((model as any).userId()) === String(currentUser.id()) && (model as any).status() === 'pending';\n  }\n\n  /**\n   * Get available deposit platforms\n   */\n  async getPlatforms(): Promise<any[]> {\n    try {\n      const platforms = await app.store.find(this.platformModelType, {\n        sort: 'name'\n      });\n      \n      return Array.isArray(platforms) ? platforms : [platforms];\n    } catch (error) {\n      throw this.handleError(error, 'Failed to fetch deposit platforms');\n    }\n  }\n\n  /**\n   * Get platforms grouped by symbol\n   */\n  async getPlatformsBySymbol(): Promise<Record<string, DepositPlatform[]>> {\n    const platforms = await this.getPlatforms();\n    const grouped: Record<string, DepositPlatform[]> = {};\n\n    for (const platform of platforms) {\n      const symbol = platform.symbol();\n      if (!grouped[symbol]) {\n        grouped[symbol] = [];\n      }\n      grouped[symbol].push(platform);\n    }\n\n    return grouped;\n  }\n\n\n  /**\n   * Validate deposit record data\n   */\n  private async validateDepositRecord(data: any): Promise<void> {\n    const { platformId, amount } = data;\n\n    // Get platform details\n    const platform = await app.store.find(this.platformModelType, platformId);\n    if (!platform) {\n      throw new ServiceError(\n        'Invalid platform selected',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Check if platform is active\n    if (!(platform as any).isActive()) {\n      throw new ServiceError(\n        'Selected platform is not available',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n    // Validate amount limits\n    const minAmount = (platform as any).minAmount();\n    \n    if (amount < minAmount) {\n      throw new ServiceError(\n        `Minimum deposit amount is ${minAmount}`,\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n\n  }\n\n  /**\n   * Validate create attributes\n   */\n  private validateCreateAttributes(attributes: any): void {\n    const required = ['platformId', 'amount'];\n    \n    for (const field of required) {\n      if (!attributes[field]) {\n        throw new ServiceError(\n          `${field} is required`,\n          ServiceErrorType.VALIDATION_ERROR\n        );\n      }\n    }\n\n    if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\n      throw new ServiceError(\n        'Amount must be a positive number',\n        ServiceErrorType.VALIDATION_ERROR\n      );\n    }\n  }\n\n  /**\n   * Handle service errors with proper typing\n   */\n  private handleError(error: any, defaultMessage: string): ServiceError {\n    if (error instanceof ServiceError) {\n      return error;\n    }\n\n    // Handle Flarum API errors\n    if (error.response && error.response.errors) {\n      const apiError = error.response.errors[0];\n      return new ServiceError(\n        apiError.detail || defaultMessage,\n        ServiceErrorType.VALIDATION_ERROR,\n        apiError.code,\n        apiError\n      );\n    }\n\n    // Handle network errors\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\n      return new ServiceError(\n        'Network error occurred',\n        ServiceErrorType.NETWORK_ERROR\n      );\n    }\n\n    // Default error handling\n    return new ServiceError(\n      error.message || defaultMessage,\n      ServiceErrorType.SERVER_ERROR\n    );\n  }\n\n  /**\n   * Check if error is a not found error\n   */\n  private isNotFoundError(error: any): boolean {\n    return error.status === 404 || \n           error.response?.status === 404 ||\n           error.message?.includes('not found');\n  }\n}\n\n// Export singleton instance\nexport const depositService = new DepositService();","import app from 'flarum/common/app';\r\nimport { \r\n  PlatformServiceInterface, \r\n  QueryOptions, \r\n  ServiceError, \r\n  ServiceErrorType \r\n} from '../types/services';\r\n\r\n/**\r\n * Service for managing both funds and deposit platforms\r\n */\r\nexport default class PlatformService implements PlatformServiceInterface {\r\n  private readonly withdrawalModelType = 'funds-platforms';\r\n  private readonly depositModelType = 'deposit-platforms';\r\n\r\n  /**\r\n   * Find multiple platforms of specified type\r\n   */\r\n  async find(type: 'funds' | 'deposit', options: QueryOptions = {}): Promise<any[]> {\r\n    const modelType = type === 'funds' ? this.withdrawalModelType : this.depositModelType;\r\n    \r\n    try {\r\n      const queryParams: any = {\r\n        sort: options.sort || 'name',\r\n        ...options\r\n      };\r\n\r\n      // Add pagination if specified\r\n      if (options.page) {\r\n        queryParams.page = options.page;\r\n      }\r\n\r\n      // Add filters if specified\r\n      if (options.filter) {\r\n        queryParams.filter = options.filter;\r\n      }\r\n\r\n      // Include relationships if specified\r\n      if (options.include) {\r\n        queryParams.include = options.include;\r\n      }\r\n\r\n      const results = await app.store.find(modelType, queryParams);\r\n      return Array.isArray(results) ? results : [results];\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to fetch ${type} platforms`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find a single platform by ID\r\n   */\r\n  async findById(\r\n    type: 'funds' | 'deposit', \r\n    id: string | number, \r\n    options: QueryOptions = {}\r\n  ): Promise<any | null> {\r\n    const modelType = type === 'funds' ? this.withdrawalModelType : this.depositModelType;\r\n    \r\n    try {\r\n      const queryParams: any = {};\r\n      \r\n      // Include relationships if specified\r\n      if (options.include) {\r\n        queryParams.include = options.include;\r\n      }\r\n\r\n      const result = await app.store.find(modelType, id, queryParams);\r\n      return result;\r\n    } catch (error) {\r\n      if (this.isNotFoundError(error)) {\r\n        return null;\r\n      }\r\n      throw this.handleError(error, `Failed to fetch ${type} platform ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new platform\r\n   */\r\n  async create(type: 'funds' | 'deposit', attributes: Record<string, any>): Promise<any> {\r\n    const modelType = type === 'funds' ? this.withdrawalModelType : this.depositModelType;\r\n    \r\n    try {\r\n      // Validate required fields based on platform type\r\n      this.validateCreateAttributes(type, attributes);\r\n\r\n      const platform = app.store.createRecord(modelType);\r\n      \r\n      const savedPlatform = await platform.save(attributes);\r\n      return savedPlatform;\r\n    } catch (error) {\r\n      throw this.handleError(error, `Failed to create ${type} platform`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing platform\r\n   */\r\n  async update(platform: any, attributes: Record<string, any>): Promise<any> {\r\n    try {\r\n      if (!this.canModify(platform)) {\r\n        throw new ServiceError(\r\n          'You do not have permission to modify this platform',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      const updatedPlatform = await platform.save(attributes);\r\n      return updatedPlatform;\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to update platform');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a platform\r\n   */\r\n  async delete(platform: any): Promise<void> {\r\n    try {\r\n      if (!this.canDelete(platform)) {\r\n        throw new ServiceError(\r\n          'You do not have permission to delete this platform',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      await platform.delete();\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to delete platform');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active platforms only\r\n   */\r\n  async getActive(type: 'funds' | 'deposit', options: QueryOptions = {}): Promise<any[]> {\r\n    const queryOptions = {\r\n      ...options,\r\n      filter: {\r\n        isActive: true,\r\n        ...options.filter\r\n      }\r\n    };\r\n\r\n    return await this.find(type, queryOptions);\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status (admin only)\r\n   */\r\n  async toggleStatus(platform: any): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        'Admin permissions required',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const currentStatus = platform.isActive();\r\n    return await this.update(platform, { isActive: !currentStatus });\r\n  }\r\n\r\n  /**\r\n   * Update platform configuration (admin only)\r\n   */\r\n  async updateConfig(platform: any, config: Record<string, any>): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        'Admin permissions required',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.update(platform, config);\r\n  }\r\n\r\n  /**\r\n   * Get platforms by symbol\r\n   */\r\n  async getBySymbol(symbol: string, type: 'funds' | 'deposit'): Promise<any[]> {\r\n    return await this.find(type, {\r\n      filter: { symbol: symbol },\r\n      sort: 'name'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate platform limits for an amount\r\n   */\r\n  validateAmount(platform: any, amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== 'number' || amount <= 0) {\r\n      errors.push('Amount must be a positive number');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const minAmount = platform.minAmount ? platform.minAmount() : 0;\r\n    const maxAmount = platform.maxAmount ? platform.maxAmount() : null;\r\n\r\n    if (amount < minAmount) {\r\n      errors.push(`Amount must be at least ${minAmount}`);\r\n    }\r\n\r\n    if (maxAmount && amount > maxAmount) {\r\n      errors.push(`Amount cannot exceed ${maxAmount}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Get platform statistics (admin only)\r\n   */\r\n  async getPlatformStats(type: 'funds' | 'deposit', platformId: number): Promise<any> {\r\n    if (!app.session.user?.isAdmin()) {\r\n      throw new ServiceError(\r\n        'Admin permissions required',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const requestType = type === 'funds' ? 'funds-requests' : 'deposit-records';\r\n    \r\n    try {\r\n      // Get all requests/records for this platform\r\n      const records = await app.store.find(requestType, {\r\n        filter: { platform: platformId },\r\n        include: 'platform'\r\n      });\r\n\r\n      const recordArray = Array.isArray(records) ? records : [records];\r\n\r\n      // Calculate statistics\r\n      const stats = {\r\n        total: recordArray.length,\r\n        pending: recordArray.filter(r => r.status() === 'pending').length,\r\n        approved: recordArray.filter(r => r.status() === 'approved' || r.status() === 'confirmed').length,\r\n        rejected: recordArray.filter(r => r.status() === 'rejected').length,\r\n        totalAmount: recordArray.reduce((sum, r) => sum + (r.amount() || 0), 0)\r\n      };\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to fetch platform statistics');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get platforms grouped by symbol\r\n   */\r\n  async getPlatformsBySymbolGrouped(type: 'funds' | 'deposit'): Promise<Record<string, any[]>> {\r\n    const platforms = await this.getActive(type);\r\n    const grouped: Record<string, any[]> = {};\r\n\r\n    for (const platform of platforms) {\r\n      const symbol = platform.symbol();\r\n      if (!grouped[symbol]) {\r\n        grouped[symbol] = [];\r\n      }\r\n      grouped[symbol].push(platform);\r\n    }\r\n\r\n    return grouped;\r\n  }\r\n\r\n  /**\r\n   * Sort platforms by criteria\r\n   */\r\n  async getSortedPlatforms(\r\n    type: 'funds' | 'deposit', \r\n    sortBy: 'name' | 'symbol' | 'createdAt' | 'fee' = 'name',\r\n    direction: 'asc' | 'desc' = 'asc'\r\n  ): Promise<any[]> {\r\n    const sortString = direction === 'desc' ? `-${sortBy}` : sortBy;\r\n    \r\n    return await this.getActive(type, {\r\n      sort: sortString\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if current user can modify platforms\r\n   */\r\n  canModify(_platform: any): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can create new platforms\r\n   */\r\n  canCreate(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete platforms\r\n   */\r\n  canDelete(_platform: any): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Validate create attributes based on platform type\r\n   */\r\n  private validateCreateAttributes(type: 'funds' | 'deposit', attributes: any): void {\r\n    const commonRequired = ['name', 'symbol', 'minAmount'];\r\n    \r\n    // Only common fields are required (removed address requirement)\r\n    const required = commonRequired;\r\n\r\n    for (const field of required) {\r\n      if (!attributes[field]) {\r\n        throw new ServiceError(\r\n          `${field} is required for ${type} platforms`,\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\r\n      throw new ServiceError(\r\n        'minAmount must be a non-negative number',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    if (attributes.maxAmount !== undefined) {\r\n      if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < attributes.minAmount) {\r\n        throw new ServiceError(\r\n          'maxAmount must be a number greater than or equal to minAmount',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    if (attributes.fee !== undefined) {\r\n      if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\r\n        throw new ServiceError(\r\n          'fee must be a non-negative number',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n    }\r\n\r\n    // Validate symbol format (basic validation)\r\n    if (typeof attributes.symbol !== 'string' || !attributes.symbol.trim()) {\r\n      throw new ServiceError(\r\n        'Symbol is required',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\r\n      return new ServiceError(\r\n        'Network error occurred',\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if error is a not found error\r\n   */\r\n  private isNotFoundError(error: any): boolean {\r\n    return error.status === 404 || \r\n           error.response?.status === 404 ||\r\n           error.message?.includes('not found');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const platformService = new PlatformService();","import app from 'flarum/common/app';\r\nimport DepositPlatform from '../models/DepositPlatform';\r\nimport { \r\n  AddressServiceInterface, \r\n  ServiceError, \r\n  ServiceErrorType\r\n} from '../types/services';\r\n\r\n/**\r\n * Simplified service for getting deposit addresses from platform configuration\r\n */\r\nexport default class AddressService implements AddressServiceInterface {\r\n\r\n  /**\r\n   * Get deposit address for platform (from platform configuration)\r\n   */\r\n  async generateAddress(platformId: number, _userId?: number): Promise<string> {\r\n    try {\r\n      const currentUser = app.session.user;\r\n      if (!currentUser) {\r\n        throw new ServiceError(\r\n          'User not authenticated',\r\n          ServiceErrorType.PERMISSION_DENIED\r\n        );\r\n      }\r\n\r\n      // Get platform details\r\n      const platform = await app.store.find('deposit-platforms', platformId) as unknown as DepositPlatform;\r\n      if (!platform) {\r\n        throw new ServiceError(\r\n          'Invalid platform selected',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      if (!platform.isActive()) {\r\n        throw new ServiceError(\r\n          'Platform is not currently active',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      // Since platforms have pre-configured addresses, just return the platform's address\r\n      if (!platform.address()) {\r\n        throw new ServiceError(\r\n          'Platform does not have a configured deposit address',\r\n          ServiceErrorType.VALIDATION_ERROR\r\n        );\r\n      }\r\n\r\n      return platform.address();\r\n\r\n    } catch (error) {\r\n      throw this.handleError(error, 'Failed to get deposit address');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if current user can generate addresses\r\n   */\r\n  canGenerateAddress(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && !currentUser.isGuest();\r\n  }\r\n\r\n  /**\r\n   * Handle service errors with proper typing\r\n   */\r\n  private handleError(error: any, defaultMessage: string): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || defaultMessage,\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    // Handle network errors\r\n    if (error.name === 'TypeError' || error.message?.includes('fetch')) {\r\n      return new ServiceError(\r\n        'Network error occurred',\r\n        ServiceErrorType.NETWORK_ERROR\r\n      );\r\n    }\r\n\r\n    // Default error handling\r\n    return new ServiceError(\r\n      error.message || defaultMessage,\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const addressService = new AddressService();","/**\r\n * Flarum API error interface for proper error handling\r\n */\r\nexport interface FlarumApiError {\r\n  response?: {\r\n    status?: number;\r\n    errors?: Array<{\r\n      detail?: string;\r\n      code?: string;\r\n    }>;\r\n  };\r\n  responseText?: string;\r\n  status?: number;\r\n}\r\n\r\n/**\r\n * Helper function to extract error message from Flarum API error\r\n */\r\nexport function extractErrorMessage(error: any, fallback = 'An error occurred'): string {\r\n  if (!error) return fallback;\r\n\r\n  // Check for JSON:API error format\r\n  if (error.response && error.response.errors && Array.isArray(error.response.errors)) {\r\n    const firstError = error.response.errors[0];\r\n    if (firstError && firstError.detail) {\r\n      return firstError.detail;\r\n    }\r\n  }\r\n\r\n  // Check for HTML error responses (PHP Fatal Errors)\r\n  if (error.responseText) {\r\n    if (error.responseText.includes('<b>Fatal error</b>') || error.responseText.includes('<!DOCTYPE')) {\r\n      return 'Server error occurred. Please try again later.';\r\n    }\r\n    \r\n    // Try to parse JSON response\r\n    try {\r\n      const response = JSON.parse(error.responseText);\r\n      if (response.errors && Array.isArray(response.errors)) {\r\n        return response.errors[0].detail || fallback;\r\n      }\r\n    } catch {\r\n      // Not valid JSON, return server error message\r\n      return 'Server error occurred. Please try again later.';\r\n    }\r\n  }\r\n\r\n  return fallback;\r\n}\r\n\r\n/**\r\n * Type guard to check if error is a Flarum API error\r\n */\r\nexport function isFlarumApiError(error: any): error is FlarumApiError {\r\n  return error && (\r\n    (error.response && error.response.errors) ||\r\n    error.responseText ||\r\n    error.status\r\n  );\r\n}\r\n\r\n/**\r\n * Type assertion helper for API responses\r\n * This is a temporary solution until better typing is available\r\n */\r\nexport function assertApiPayload(response: unknown): any {\r\n  // In a production environment, you would add runtime validation here\r\n  return response as any;\r\n}","import app from 'flarum/forum/app';\r\nimport Page from 'flarum/common/components/Page';\r\nimport Button from 'flarum/common/components/Button';\r\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport m from 'mithril';\r\nimport type Mithril from 'mithril';\r\n\r\n// Withdrawal imports\r\nimport type { WithdrawalFormData } from './withdrawal/types/interfaces';\r\nimport WithdrawalPlatform from '../../common/models/WithdrawalPlatform';\r\nimport WithdrawalForm from './withdrawal/forms/WithdrawalForm';\r\nimport TransactionHistory from './shared/TransactionHistory';\r\n\r\n// Deposit imports\r\nimport type { DepositFormData, DepositAddressData } from './deposit/types/interfaces';\r\nimport type DepositPlatform from '../../common/models/DepositPlatform';\r\nimport DepositPlatformDropdown from './deposit/selectors/DepositPlatformDropdown';\r\nimport AddressDisplay from './deposit/components/AddressDisplay';\r\nimport ImageDisplay from './deposit/components/ImageDisplay';\r\nimport DepositRecordForm from './deposit/forms/DepositRecordForm';\r\nimport type { DepositRecordFormData } from './deposit/forms/DepositRecordForm';\r\n\r\n// Services\r\nimport { withdrawalService, depositService, platformService } from '../../common/services';\r\nimport { ServiceError } from '../../common/types/services';\r\n\r\n// Utilities\r\nimport { getAttr, getIdString, getDateFromAttr } from './withdrawal/utils/modelHelpers';\r\nimport { extractErrorMessage, type FlarumApiError } from '../../common/types/api';\r\n\r\ntype TabType = 'withdrawal' | 'deposit';\r\ntype SubTabType = 'form' | 'history';\r\n\r\ninterface FundsPageState {\r\n  // Withdrawal state\r\n  withdrawalPlatforms: WithdrawalPlatform[];\r\n  withdrawalRequests: any[];\r\n  userBalance: number;\r\n  loadingBalance: boolean;\r\n  submitting: boolean;\r\n  \r\n  // Deposit state\r\n  depositPlatforms: DepositPlatform[];\r\n  depositRecords: any[];\r\n  submittingDepositRecord: boolean;\r\n  \r\n  // Shared state\r\n  loading: boolean;\r\n  activeTab: Stream<TabType>;\r\n  withdrawalSubTab: Stream<SubTabType>;\r\n  depositSubTab: Stream<SubTabType>;\r\n}\r\n\r\nexport default class FundsPage extends Page<any, FundsPageState> {\r\n  state: FundsPageState = {\r\n    withdrawalPlatforms: [],\r\n    withdrawalRequests: [],\r\n    userBalance: 0,\r\n    loadingBalance: true,\r\n    submitting: false,\r\n    depositPlatforms: [],\r\n    depositRecords: [],\r\n    submittingDepositRecord: false,\r\n    loading: true,\r\n    activeTab: Stream('withdrawal'),\r\n    withdrawalSubTab: Stream('form'),\r\n    depositSubTab: Stream('form')\r\n  };\r\n\r\n  // Withdrawal form data\r\n  private withdrawalFormData: WithdrawalFormData = {\r\n    amount: Stream(''),\r\n    selectedPlatform: Stream<WithdrawalPlatform | null>(null),\r\n    accountDetails: Stream(''),\r\n    message: Stream('')\r\n  };\r\n\r\n  // Deposit form data and address - Fixed: Added missing userMessage property\r\n  private depositFormData: DepositFormData = {\r\n    selectedPlatform: Stream<DepositPlatform | null>(null),\r\n    userMessage: Stream('')\r\n  };\r\n\r\n  private depositAddressData: DepositAddressData = {\r\n    address: '',\r\n    platform: null as any,\r\n    loading: false\r\n  };\r\n\r\n  // Platform-based selection for deposits  \r\n  private availablePlatforms: DepositPlatform[] = [];\r\n\r\n  oninit(vnode: Mithril.VnodeDOM) {\r\n    super.oninit(vnode);\r\n\r\n    // Parse URL to determine initial tab and sub-tab\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const tabParam = urlParams.get('tab');\r\n    \r\n    // Handle legacy URL parameters and set appropriate tab/subtab\r\n    if (tabParam) {\r\n      if (tabParam === 'withdrawal' || tabParam === 'withdrawal-history') {\r\n        this.state.activeTab('withdrawal');\r\n        this.state.withdrawalSubTab(tabParam === 'withdrawal-history' ? 'history' : 'form');\r\n      } else if (tabParam === 'deposit' || tabParam === 'deposit-history') {\r\n        this.state.activeTab('deposit');\r\n        this.state.depositSubTab(tabParam === 'deposit-history' ? 'history' : 'form');\r\n      } else if (this.isValidTab(tabParam)) {\r\n        this.state.activeTab(tabParam as TabType);\r\n      }\r\n    }\r\n\r\n    // Set page title based on active tab\r\n    this.updatePageTitle();\r\n\r\n    // Load data for both systems\r\n    this.loadAllData();\r\n  }\r\n\r\n\r\n  private isValidTab(tab: string): boolean {\r\n    return ['withdrawal', 'deposit'].includes(tab);\r\n  }\r\n\r\n  private isValidSubTab(subTab: string): boolean {\r\n    return ['form', 'history'].includes(subTab);\r\n  }\r\n\r\n  private handleSubTabChange(mainTab: TabType, subTab: SubTabType): void {\r\n    if (mainTab === 'withdrawal') {\r\n      this.state.withdrawalSubTab(subTab);\r\n    } else if (mainTab === 'deposit') {\r\n      this.state.depositSubTab(subTab);\r\n    }\r\n    this.updateUrl();\r\n    m.redraw();\r\n  }\r\n\r\n  private updateUrl(): void {\r\n    const currentTab = this.state.activeTab();\r\n    const params = new URLSearchParams();\r\n    \r\n    if (currentTab === 'withdrawal') {\r\n      const subTab = this.state.withdrawalSubTab();\r\n      if (subTab === 'history') {\r\n        params.set('tab', 'withdrawal-history');\r\n      } else {\r\n        params.set('tab', 'withdrawal');\r\n      }\r\n    } else if (currentTab === 'deposit') {\r\n      const subTab = this.state.depositSubTab();\r\n      if (subTab === 'history') {\r\n        params.set('tab', 'deposit-history');\r\n      } else {\r\n        params.set('tab', 'deposit');\r\n      }\r\n    }\r\n\r\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\r\n    window.history.replaceState({}, '', newUrl);\r\n  }\r\n\r\n  private updatePageTitle(): void {\r\n    const tab = this.state.activeTab();\r\n    let titleKey = 'funds.forum.page.title'; // default\r\n    \r\n    switch (tab) {\r\n      case 'withdrawal':\r\n      case 'withdrawal-history':\r\n        titleKey = 'funds.forum.page.title';\r\n        break;\r\n      case 'deposit':\r\n      case 'deposit-history':\r\n        titleKey = 'funds.forum.deposit.page.title';\r\n        break;\r\n    }\r\n    \r\n    // Fixed: Convert NestedStringArray to string using toString()\r\n    const title = app.translator.trans(titleKey);\r\n    app.setTitle(typeof title === 'string' ? title : title.toString());\r\n  }\r\n\r\n  view() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"FundsPage\">\r\n          <div className=\"FundsPage-loading\">\r\n            <LoadingIndicator />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage\">\r\n        <div className=\"FundsPage-modal\">\r\n          {this.renderHeader()}\r\n          <div className=\"FundsPage-content\">\r\n            {this.renderActiveTab()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderHeader(): Mithril.Children {\r\n    const activeTab = this.state.activeTab();\r\n    \r\n    return (\r\n      <div className=\"FundsPage-header\">\r\n        <div className=\"FundsPage-tabs\">\r\n          <div \r\n            className={`FundsPage-tab ${activeTab === 'withdrawal' ? 'active' : ''}`}\r\n            onclick={() => this.handleTabChange('withdrawal')}\r\n          >\r\n            {app.translator.trans('funds.forum.tabs.funds')}\r\n          </div>\r\n          <div \r\n            className={`FundsPage-tab ${activeTab === 'deposit' ? 'active' : ''}`}\r\n            onclick={() => this.handleTabChange('deposit')}\r\n          >\r\n            {app.translator.trans('funds.forum.deposit.tabs.deposit')}\r\n          </div>\r\n        </div>\r\n        <Button\r\n          className=\"FundsPage-close\"\r\n          icon=\"fas fa-times\"\r\n          onclick={() => app.history.back()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderActiveTab(): Mithril.Children {\r\n    const activeTab = this.state.activeTab();\r\n    \r\n    switch (activeTab) {\r\n      case 'withdrawal':\r\n        return this.renderWithdrawalTab();\r\n      case 'deposit':\r\n        return this.renderDepositTab();\r\n      default:\r\n        return this.renderWithdrawalTab();\r\n    }\r\n  }\r\n\r\n  private renderWithdrawalTab(): Mithril.Children {\r\n    const activeSubTab = this.state.withdrawalSubTab();\r\n    \r\n    return (\r\n      <div className=\"FundsPage-withdrawalTab\">\r\n        {/* Sub-tab navigation */}\r\n        <div className=\"FundsPage-subTabs\">\r\n          <div \r\n            className={`FundsPage-subTab ${activeSubTab === 'form' ? 'active' : ''}`}\r\n            onclick={() => this.handleSubTabChange('withdrawal', 'form')}\r\n          >\r\n            {app.translator.trans('funds.forum.tabs.funds')}\r\n          </div>\r\n          <div \r\n            className={`FundsPage-subTab ${activeSubTab === 'history' ? 'active' : ''}`}\r\n            onclick={() => this.handleSubTabChange('withdrawal', 'history')}\r\n          >\r\n            {app.translator.trans('funds.forum.tabs.history')}\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Sub-tab content */}\r\n        {activeSubTab === 'form' ? this.renderWithdrawalForm() : this.renderWithdrawalHistory()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderWithdrawalForm(): Mithril.Children {\r\n    const validPlatforms = (this.state.withdrawalPlatforms || []).filter(platform => !!platform);\r\n\r\n    if (validPlatforms.length === 0) {\r\n      return (\r\n        <div className=\"FundsPage-withdrawalContent\">\r\n          <div className=\"WithdrawalPage-emptyState\">\r\n            <div className=\"WithdrawalPage-emptyIcon\">\r\n              {icon('fas fa-coins')}\r\n            </div>\r\n            <h3 className=\"WithdrawalPage-emptyTitle\">\r\n              {app.translator.trans('funds.forum.no_platforms')}\r\n            </h3>\r\n            <p className=\"WithdrawalPage-emptyDescription\">\r\n              {app.translator.trans('funds.forum.no_platforms_description')}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-withdrawalContent\">\r\n        <WithdrawalForm\r\n          platforms={this.state.withdrawalPlatforms}\r\n          formData={this.getWithdrawalFormDataForComponent()}\r\n          loadingBalance={this.state.loadingBalance}\r\n          submitting={this.state.submitting}\r\n          onFormDataChange={this.handleWithdrawalFormDataChange.bind(this)}\r\n          onFillAllAmount={this.handleFillAllAmount.bind(this)}\r\n          onSubmit={this.handleWithdrawalSubmit.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderWithdrawalHistory(): Mithril.Children {\r\n    return (\r\n      <div className=\"FundsPage-withdrawalContent\">\r\n        <TransactionHistory\r\n          transactions={this.state.withdrawalRequests}\r\n          platforms={this.state.withdrawalPlatforms}\r\n          loading={false}\r\n          type=\"withdrawal\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositTab(): Mithril.Children {\r\n    const activeSubTab = this.state.depositSubTab();\r\n    \r\n    return (\r\n      <div className=\"FundsPage-depositTab\">\r\n        {/* Sub-tab navigation */}\r\n        <div className=\"FundsPage-subTabs\">\r\n          <div \r\n            className={`FundsPage-subTab ${activeSubTab === 'form' ? 'active' : ''}`}\r\n            onclick={() => this.handleSubTabChange('deposit', 'form')}\r\n          >\r\n            {app.translator.trans('funds.forum.deposit.tabs.deposit')}\r\n          </div>\r\n          <div \r\n            className={`FundsPage-subTab ${activeSubTab === 'history' ? 'active' : ''}`}\r\n            onclick={() => this.handleSubTabChange('deposit', 'history')}\r\n          >\r\n            {app.translator.trans('funds.forum.deposit.tabs.history')}\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Sub-tab content */}\r\n        {activeSubTab === 'form' ? this.renderDepositForm() : this.renderDepositHistory()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositForm(): Mithril.Children {\r\n    const availablePlatforms = (this.state.depositPlatforms || []).filter(platform => \r\n      platform && getAttr(platform, 'isActive')\r\n    );\r\n\r\n    if (availablePlatforms.length === 0) {\r\n      return (\r\n        <div className=\"FundsPage-depositContent\">\r\n          <div className=\"FundsPage-emptyState\">\r\n            <div className=\"FundsPage-emptyIcon\">\r\n              {icon('fas fa-coins')}\r\n            </div>\r\n            <h3 className=\"FundsPage-emptyTitle\">\r\n              {app.translator.trans('funds.forum.deposit.no_platforms')}\r\n            </h3>\r\n            <p className=\"FundsPage-emptyDescription\">\r\n              {app.translator.trans('funds.forum.deposit.no_platforms_description')}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"FundsPage-depositContent\">\r\n        {this.renderDepositSelectors()}\r\n        {this.renderDepositInfo()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositHistory(): Mithril.Children {\r\n    // Use only deposit records for history\r\n    const allDepositHistory = [...this.state.depositRecords];\r\n    \r\n    // Sort by creation date (newest first)\r\n    allDepositHistory.sort((a, b) => {\r\n      const dateA = getDateFromAttr(a, 'createdAt') || new Date(0);\r\n      const dateB = getDateFromAttr(b, 'createdAt') || new Date(0);\r\n      return dateB.getTime() - dateA.getTime();\r\n    });\r\n\r\n    return (\r\n      <div className=\"FundsPage-depositContent\">\r\n        <TransactionHistory\r\n          transactions={allDepositHistory}\r\n          platforms={this.state.depositPlatforms}\r\n          loading={false}\r\n          type=\"deposit\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositSelectors(): Mithril.Children {\r\n    return (\r\n      <div className=\"FundsPage-selectors\">\r\n        <DepositPlatformDropdown\r\n          platforms={this.availablePlatforms}\r\n          selectedPlatform={this.depositFormData.selectedPlatform()}\r\n          onPlatformSelect={(platform: DepositPlatform) => this.handlePlatformSelect(platform)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderDepositInfo(): Mithril.Children {\r\n    const platform = this.depositFormData.selectedPlatform();\r\n    \r\n    if (!platform) {\r\n      return (\r\n        <div className=\"FundsPage-selectPrompt\">\r\n          <p>{app.translator.trans('funds.forum.deposit.select_platform')}</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const minAmount = getAttr(platform, 'minAmount') || 0;\r\n    const warningText = getAttr(platform, 'warningText') || \r\n      app.translator.trans('funds.forum.deposit.default_warning', {\r\n        currency: getAttr(platform, 'symbol'),\r\n        network: getAttr(platform, 'network'),\r\n        minAmount\r\n      });\r\n\r\n    return (\r\n      <div className=\"FundsPage-depositInfo\">\r\n        <p className=\"FundsPage-instructionText\">\r\n          {app.translator.trans('funds.forum.deposit.scan_or_use_address')}\r\n        </p>\r\n        \r\n        <AddressDisplay\r\n          address={this.depositAddressData.address}\r\n          loading={this.depositAddressData.loading}\r\n          onCopy={this.handleCopyAddress.bind(this)}\r\n        />\r\n        \r\n        <p className=\"FundsPage-minAmountText\">\r\n          {app.translator.trans('funds.forum.deposit.min_amount', {\r\n            amount: minAmount,\r\n            currency: getAttr(platform, 'symbol')\r\n          })}\r\n        </p>\r\n        \r\n        {(() => {\r\n          const fee = getAttr(platform, 'fee') || 0;\r\n          if (fee > 0) {\r\n            return (\r\n              <p className=\"FundsPage-feeText\">\r\n                {app.translator.trans('funds.forum.deposit.fee', {\r\n                  fee: fee,\r\n                  currency: getAttr(platform, 'symbol')\r\n                })}\r\n              </p>\r\n            );\r\n          }\r\n          return null;\r\n        })()}\r\n        \r\n        {/* Only show image container if platform has qrCodeImageUrl */}\r\n        {this.depositAddressData.platform && this.depositAddressData.platform.qrCodeImageUrl && this.depositAddressData.platform.qrCodeImageUrl() && (\r\n          <div className=\"FundsPage-imageContainer\">\r\n            <ImageDisplay\r\n              platform={this.depositAddressData.platform}\r\n              loading={this.depositAddressData.loading}\r\n              size={160}\r\n            />\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"FundsPage-infoPanel\">\r\n          <i className=\"fas fa-info-circle\"></i>\r\n          <span>{warningText}</span>\r\n        </div>\r\n\r\n        {/* Deposit Record Submission Section */}\r\n        <div className=\"FundsPage-recordSection\">\r\n          <div className=\"FundsPage-recordHeader\">\r\n            <h4>{app.translator.trans('funds.forum.deposit.record.section_title')}</h4>\r\n          </div>\r\n          \r\n          <DepositRecordForm\r\n            platform={platform}\r\n            onSubmit={this.handleDepositRecordSubmit.bind(this)}\r\n            onCancel={this.handleCancelDepositRecordForm.bind(this)}\r\n            submitting={this.state.submittingDepositRecord}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  private handleTabChange(tab: TabType): void {\r\n    this.state.activeTab(tab);\r\n    this.updatePageTitle();\r\n    \r\n    // Update URL without page reload\r\n    const url = new URL(window.location.href);\r\n    url.searchParams.set('tab', tab);\r\n    \r\n    // Include current sub-tab in URL\r\n    const currentSubTab = tab === 'withdrawal' ? this.state.withdrawalSubTab() : this.state.depositSubTab();\r\n    url.searchParams.set('subtab', currentSubTab);\r\n    \r\n    window.history.replaceState({}, '', url.toString());\r\n  }\r\n\r\n\r\n  // Withdrawal methods (copied from WithdrawalPage)\r\n  private getWithdrawalFormDataForComponent() {\r\n    // Fixed: Added null check to prevent invoking null objects\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    return {\r\n      selectedPlatform: selectedPlatform,\r\n      amount: this.withdrawalFormData.amount(),\r\n      accountDetails: this.withdrawalFormData.accountDetails(),\r\n      message: this.withdrawalFormData.message()\r\n    };\r\n  }\r\n\r\n  private handleWithdrawalFormDataChange(data: Partial<WithdrawalFormData>): void {\r\n    if (data.selectedPlatform !== undefined) {\r\n      this.withdrawalFormData.selectedPlatform(data.selectedPlatform);\r\n    }\r\n    if (data.amount !== undefined) {\r\n      this.withdrawalFormData.amount(data.amount);\r\n    }\r\n    if (data.accountDetails !== undefined) {\r\n      this.withdrawalFormData.accountDetails(data.accountDetails);\r\n    }\r\n    if (data.message !== undefined) {\r\n      this.withdrawalFormData.message(data.message);\r\n    }\r\n  }\r\n\r\n  private async handleFillAllAmount(): Promise<void> {\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    if (!selectedPlatform) return;\r\n\r\n    if (this.state.loadingBalance) return;\r\n\r\n    try {\r\n      await this.loadUserBalance(true);\r\n\r\n      const fee = getAttr(selectedPlatform, 'fee') || 0;\r\n      const maxAmount = getAttr(selectedPlatform, 'maxAmount') || Infinity;\r\n      let availableAmount = this.state.userBalance - fee;\r\n      \r\n      if (maxAmount < Infinity && availableAmount > maxAmount) {\r\n        availableAmount = maxAmount;\r\n      }\r\n      \r\n      if (availableAmount > 0) {\r\n        this.withdrawalFormData.amount(availableAmount.toString());\r\n      } else {\r\n        app.alerts.show(\r\n          { type: 'warning', dismissible: true },\r\n          app.translator.trans('funds.forum.insufficient_balance')\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing balance:', error);\r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        app.translator.trans('funds.forum.balance_refresh_error')\r\n      );\r\n    }\r\n  }\r\n\r\n  private async handleWithdrawalSubmit(): Promise<void> {\r\n    if (this.state.submitting) return;\r\n\r\n    const selectedPlatform = this.withdrawalFormData.selectedPlatform();\r\n    const amount = this.withdrawalFormData.amount();\r\n    const accountDetails = this.withdrawalFormData.accountDetails();\r\n\r\n    if (!selectedPlatform || !amount || !accountDetails) {\r\n      return;\r\n    }\r\n\r\n    // Basic validation\r\n    const amountNum = parseFloat(amount);\r\n    if (isNaN(amountNum) || amountNum <= 0) {\r\n      app.alerts.show(\r\n        { type: 'warning', dismissible: true },\r\n        app.translator.trans('funds.forum.invalid_amount')\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.state.submitting = true;\r\n\r\n    try {\r\n      await withdrawalService.submitRequest({\r\n        platformId: parseInt(getIdString(selectedPlatform), 10),\r\n        amount: amountNum,\r\n        accountDetails,\r\n        message: this.withdrawalFormData.message()\r\n      });\r\n\r\n      // Clear form\r\n      this.withdrawalFormData.amount('');\r\n      this.withdrawalFormData.accountDetails('');\r\n      this.withdrawalFormData.message('');\r\n      this.withdrawalFormData.selectedPlatform(null);\r\n\r\n      // Refresh data\r\n      await Promise.all([\r\n        this.loadUserBalance(true),\r\n        this.loadWithdrawalRequests()\r\n      ]);\r\n\r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('funds.forum.submit_success')\r\n      );\r\n\r\n    } catch (error: unknown) {\r\n      console.error('Withdrawal request failed:', error);\r\n      \r\n      let errorMessage = app.translator.trans('funds.forum.error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      } else {\r\n        errorMessage = extractErrorMessage(\r\n          error as FlarumApiError, \r\n          errorMessage\r\n        );\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    } finally {\r\n      this.state.submitting = false;\r\n    }\r\n  }\r\n\r\n  // Deposit methods - simplified platform selection\r\n  \r\n  private handlePlatformSelect(platform: DepositPlatform): void {\r\n    this.depositFormData.selectedPlatform(platform);\r\n    this.loadDepositAddress(platform);\r\n  }\r\n\r\n  private handleCopyAddress(): void {\r\n    if (this.depositAddressData.address) {\r\n      navigator.clipboard.writeText(this.depositAddressData.address).then(() => {\r\n        app.alerts.show(\r\n          { type: 'success', dismissible: true },\r\n          app.translator.trans('funds.forum.deposit.address_copied')\r\n        );\r\n      }).catch(() => {\r\n        app.alerts.show(\r\n          { type: 'error', dismissible: true },\r\n          app.translator.trans('funds.forum.deposit.copy_failed')\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  private handleCancelDepositRecordForm(): void {\r\n    // Just clear the form - form remains visible\r\n    m.redraw();\r\n  }\r\n\r\n  private async handleDepositRecordSubmit(data: DepositRecordFormData): Promise<void> {\r\n    if (this.state.submittingDepositRecord) return;\r\n\r\n    this.state.submittingDepositRecord = true;\r\n    m.redraw();\r\n\r\n    try {\r\n      await depositService.create({\r\n        platformId: data.platformId,\r\n        platformAccount: data.platformAccount,\r\n        realName: data.realName,\r\n        amount: data.amount,\r\n        depositTime: data.depositTime.toISOString(),\r\n        screenshotUrl: data.screenshotUrl,\r\n        userMessage: data.userMessage,\r\n        status: 'pending'\r\n      });\r\n\r\n      // Show success message (form remains visible for new submissions)\r\n      \r\n      app.alerts.show(\r\n        { type: 'success', dismissible: true },\r\n        app.translator.trans('funds.forum.deposit.record.submit_success')\r\n      );\r\n\r\n      // Reload deposit history\r\n      await this.loadDepositRecords();\r\n\r\n    } catch (error: unknown) {\r\n      console.error('Deposit record submission failed:', error);\r\n      \r\n      let errorMessage = app.translator.trans('funds.forum.deposit.record.submit_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      } else {\r\n        errorMessage = extractErrorMessage(\r\n          error as FlarumApiError,\r\n          errorMessage\r\n        );\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n    } finally {\r\n      this.state.submittingDepositRecord = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n\r\n  // Data loading methods\r\n  private async loadAllData(): Promise<void> {\r\n    try {\r\n      await Promise.all([\r\n        this.loadWithdrawalData(),\r\n        this.loadDepositData(),\r\n        this.loadUserBalance()\r\n      ]);\r\n      \r\n      this.state.loading = false;\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n      this.state.loading = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load funds platforms and user requests using service layer\r\n   */\r\n  private async loadWithdrawalData(): Promise<void> {\r\n    try {\r\n      const [platforms, requests] = await Promise.all([\r\n        platformService.getActive('withdrawal'),\r\n        withdrawalService.getUserHistory()\r\n      ]);\r\n\r\n      this.state.withdrawalPlatforms = platforms as WithdrawalPlatform[];\r\n      this.state.withdrawalRequests = requests;\r\n    } catch (error) {\r\n      console.error('Error loading funds data:', error);\r\n      // Fallback to empty arrays\r\n      this.state.withdrawalPlatforms = [];\r\n      this.state.withdrawalRequests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load deposit platforms and user records using service layer\r\n   */\r\n  private async loadDepositData(): Promise<void> {\r\n    try {\r\n      const [platforms, records] = await Promise.all([\r\n        platformService.getActive('deposit'),\r\n        depositService.getUserHistory()\r\n      ]);\r\n\r\n      this.state.depositPlatforms = platforms as DepositPlatform[];\r\n      this.state.depositRecords = records;\r\n      \r\n      // Filter active platforms\r\n      this.availablePlatforms = platforms.filter(platform => getAttr(platform, 'isActive')) as DepositPlatform[];\r\n    } catch (error) {\r\n      console.error('Error loading deposit data:', error);\r\n      // Fallback to empty arrays\r\n      this.state.depositPlatforms = [];\r\n      this.state.depositRecords = [];\r\n      this.availablePlatforms = [];\r\n    }\r\n  }\r\n\r\n  private async loadDepositRecords(): Promise<void> {\r\n    try {\r\n      const records = await depositService.getUserHistory();\r\n      this.state.depositRecords = records;\r\n    } catch (error) {\r\n      console.error('Error loading deposit records:', error);\r\n      this.state.depositRecords = [];\r\n    }\r\n  }\r\n\r\n  private async loadUserBalance(forceRefresh = false): Promise<void> {\r\n    try {\r\n      this.state.loadingBalance = true;\r\n      \r\n      if (forceRefresh && app.session.user) {\r\n        const userId = app.session.user.id();\r\n        if (!userId) {\r\n          throw new Error('User ID not available');\r\n        }\r\n        \r\n        // Refresh user data through the store\r\n        const updatedUser = await app.store.find('users', userId);\r\n        \r\n        if (updatedUser) {\r\n          this.state.userBalance = parseFloat(updatedUser.attribute('money')) || 0;\r\n        } else {\r\n          this.state.userBalance = 0;\r\n        }\r\n      } else {\r\n        this.state.userBalance = parseFloat(app.session.user?.attribute('money') || '0');\r\n      }\r\n      \r\n      this.state.loadingBalance = false;\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error loading user balance:', error);\r\n      this.state.loadingBalance = false;\r\n      m.redraw();\r\n    }\r\n  }\r\n\r\n  private async loadWithdrawalRequests(): Promise<void> {\r\n    try {\r\n      const requests = await withdrawalService.getUserHistory();\r\n      this.state.withdrawalRequests = requests;\r\n    } catch (error) {\r\n      console.error('Error loading funds requests:', error);\r\n      this.state.withdrawalRequests = [];\r\n    }\r\n  }\r\n\r\n  private async loadDepositAddress(platform: DepositPlatform): Promise<void> {\r\n    this.depositAddressData.loading = true;\r\n    m.redraw();\r\n\r\n    try {\r\n      const address = await depositService.generateAddress(parseInt(getAttr(platform, 'id'), 10));\r\n      \r\n      this.depositAddressData = {\r\n        address,\r\n        platform,\r\n        loading: false\r\n      };\r\n\r\n      m.redraw();\r\n    } catch (error) {\r\n      console.error('Error loading deposit address:', error);\r\n      this.depositAddressData.loading = false;\r\n      \r\n      let errorMessage = app.translator.trans('funds.forum.deposit.address_load_error').toString();\r\n      \r\n      if (error instanceof ServiceError) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      app.alerts.show(\r\n        { type: 'error', dismissible: true },\r\n        errorMessage\r\n      );\r\n      \r\n      m.redraw();\r\n    }\r\n  }\r\n}","import { ServiceError, ServiceErrorType } from '../types/services';\r\n\r\n/**\r\n * Validate common platform fields\r\n */\r\nexport function validateCommonFields(attributes: Record<string, any>): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Name validation\r\n  if (attributes.name !== undefined) {\r\n    if (!attributes.name || typeof attributes.name !== 'string') {\r\n      errors.push('Platform name is required');\r\n    }\r\n  }\r\n\r\n  // Symbol validation\r\n  if (attributes.symbol !== undefined) {\r\n    if (!attributes.symbol || typeof attributes.symbol !== 'string') {\r\n      errors.push('Symbol is required');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Validate amount fields (min/max/fee)\r\n */\r\nexport function validateAmountFields(attributes: Record<string, any>, currentMinAmount?: number): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Min amount validation\r\n  if (attributes.minAmount !== undefined) {\r\n    if (typeof attributes.minAmount !== 'number' || attributes.minAmount < 0) {\r\n      errors.push('Minimum amount must be a non-negative number');\r\n    }\r\n  }\r\n\r\n  // Max amount validation\r\n  if (attributes.maxAmount !== undefined && attributes.maxAmount !== null) {\r\n    if (typeof attributes.maxAmount !== 'number' || attributes.maxAmount < 0) {\r\n      errors.push('Maximum amount must be a non-negative number');\r\n    }\r\n    \r\n    const minAmount = attributes.minAmount ?? currentMinAmount ?? 0;\r\n    if (attributes.maxAmount < minAmount) {\r\n      errors.push('Maximum amount must be greater than or equal to minimum amount');\r\n    }\r\n  }\r\n\r\n  // Fee validation\r\n  if (attributes.fee !== undefined && attributes.fee !== null) {\r\n    if (typeof attributes.fee !== 'number' || attributes.fee < 0) {\r\n      errors.push('Fee must be a non-negative number');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Validate deposit-specific fields\r\n */\r\nexport function validateDepositFields(attributes: Record<string, any>): string[] {\r\n  const errors: string[] = [];\r\n\r\n  // Network validation (for deposit platforms) - only validate if provided\r\n  if (attributes.network !== undefined && attributes.network !== null && attributes.network !== '') {\r\n    if (typeof attributes.network !== 'string') {\r\n      errors.push('Network must be a string');\r\n    }\r\n  }\r\n\r\n  // Address validation (for deposit platforms) - only validate if provided\r\n  if (attributes.address !== undefined && attributes.address !== null && attributes.address !== '') {\r\n    if (typeof attributes.address !== 'string') {\r\n      errors.push('Deposit address must be a string');\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Throw validation error if there are any errors\r\n */\r\nexport function throwIfErrors(errors: string[]): void {\r\n  if (errors.length > 0) {\r\n    throw new ServiceError(\r\n      errors.join(', '),\r\n      ServiceErrorType.VALIDATION_ERROR\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Complete validation for funds platforms\r\n */\r\nexport function validateWithdrawalPlatform(attributes: Record<string, any>, currentMinAmount?: number): void {\r\n  const errors = [\r\n    ...validateCommonFields(attributes),\r\n    ...validateAmountFields(attributes, currentMinAmount)\r\n  ];\r\n  \r\n  throwIfErrors(errors);\r\n}\r\n\r\n/**\r\n * Complete validation for deposit platforms\r\n */\r\nexport function validateDepositPlatform(attributes: Record<string, any>, currentMinAmount?: number): void {\r\n  const errors = [\r\n    ...validateCommonFields(attributes),\r\n    ...validateAmountFields(attributes, currentMinAmount),\r\n    ...validateDepositFields(attributes)\r\n  ];\r\n  \r\n  throwIfErrors(errors);\r\n}","import Model from 'flarum/common/Model';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport { validateWithdrawalPlatform } from '../utils/PlatformValidation';\r\nimport { IconRepresentation } from './CurrencyIcon';\r\nimport app from 'flarum/common/app';\r\n\r\n/**\r\n * WithdrawalPlatform model for Flarum\r\n * \r\n * This model represents a funds platform that users can use\r\n * to withdraw their virtual currency with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalPlatform extends Model {\r\n  // Basic attributes\r\n  name = Model.attribute<string>('name');\r\n  symbol = Model.attribute<string>('symbol');\r\n  network = Model.attribute<string | null>('network');\r\n  displayName = Model.attribute<string>('displayName');\r\n  minAmount = Model.attribute<number>('minAmount');\r\n  maxAmount = Model.attribute<number>('maxAmount');\r\n  fee = Model.attribute<number>('fee');\r\n  \r\n  // Three-tier icon system - computed properties\r\n  currencyIconUrl = Model.attribute<string>('currencyIconUrl');\r\n  currencyIconClass = Model.attribute<string>('currencyIconClass');\r\n  currencyUnicodeSymbol = Model.attribute<string>('currencyUnicodeSymbol');\r\n  networkIconUrl = Model.attribute<string>('networkIconUrl');\r\n  networkIconClass = Model.attribute<string>('networkIconClass');\r\n  platformSpecificIconUrl = Model.attribute<string>('platformSpecificIconUrl');\r\n  platformSpecificIconClass = Model.attribute<string>('platformSpecificIconClass');\r\n  \r\n  // Override fields for admin configuration\r\n  currencyIconOverrideUrl = Model.attribute<string>('currencyIconOverrideUrl');\r\n  currencyIconOverrideClass = Model.attribute<string>('currencyIconOverrideClass');\r\n  networkIconOverrideUrl = Model.attribute<string>('networkIconOverrideUrl');\r\n  networkIconOverrideClass = Model.attribute<string>('networkIconOverrideClass');\r\n  \r\n  // Status\r\n  isActive = Model.attribute<boolean>('isActive');\r\n  \r\n  // Timestamps\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n\r\n  // Icon representations from serializer\r\n  bestIcon = Model.attribute<IconRepresentation>('bestIcon');\r\n  currencyIcon = Model.attribute<IconRepresentation>('currencyIcon');\r\n  networkIcon = Model.attribute<IconRepresentation>('networkIcon');\r\n  \r\n  // Computed properties\r\n  apiEndpoint() {\r\n    const id = this.id();\r\n    return id ? `/funds-platforms/${id}` : '/funds-platforms';\r\n  }\r\n  \r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n  \r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    return amount >= min && amount <= max;\r\n  }\r\n  \r\n  getTotalCost(amount: number): number {\r\n    return amount + this.fee();\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<WithdrawalPlatform> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as WithdrawalPlatform;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        'Cannot delete platform that has pending funds requests',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<WithdrawalPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to modify this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): WithdrawalPlatform {\r\n    const cloned = app.store.createRecord('funds-platforms') as WithdrawalPlatform;\r\n    \r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + ' (Copy)',\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      // Copy three-tier icon fields\r\n      currencyIconOverrideUrl: this.currencyIconOverrideUrl(),\r\n      currencyIconOverrideClass: this.currencyIconOverrideClass(),\r\n      networkIconOverrideUrl: this.networkIconOverrideUrl(),\r\n      networkIconOverrideClass: this.networkIconOverrideClass(),\r\n      isActive: false // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== 'number' || amount <= 0) {\r\n      errors.push('Amount must be a positive number');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    if (amount < this.minAmount()) {\r\n      errors.push(`Amount must be at least ${this.minAmount()} ${this.symbol()}`);\r\n    }\r\n\r\n    if (this.maxAmount() && amount > this.maxAmount()) {\r\n      errors.push(`Amount cannot exceed ${this.maxAmount()} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  /**\r\n   * Check if user has sufficient balance for funds\r\n   */\r\n  validateUserBalance(amount: number, userBalance: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n    const totalCost = this.getTotalCost(amount);\r\n\r\n    if (userBalance < totalCost) {\r\n      const feeText = this.fee() > 0 ? ` (including ${this.fee()} ${this.symbol()} fee)` : '';\r\n      errors.push(`Insufficient balance. Required: ${totalCost} ${this.symbol()}${feeText}, Available: ${userBalance} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n    \r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const requests = await app.store.find('funds-requests', {\r\n        filter: { platform: this.id(), status: 'pending' }\r\n      });\r\n      \r\n      const requestsArray = Array.isArray(requests) ? requests : [requests];\r\n      return requestsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee();\r\n    if (fee === 0) {\r\n      return 'Free';\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount();\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    validateWithdrawalPlatform(attributes, this.minAmount());\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save funds platform',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save funds platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete funds platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","/**\r\n * Shared type definitions for the Withdrawal extension\r\n */\r\n\r\n/**\r\n * Withdrawal platform data structure\r\n */\r\nexport interface WithdrawalPlatformData {\r\n  id: string | number;\r\n  name: string;\r\n  symbol: string;\r\n  minAmount: number;\r\n  maxAmount: number;\r\n  fee: number;\r\n  iconUrl?: string | null;\r\n  iconClass?: string | null;\r\n  isActive: boolean;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * Withdrawal request data structure\r\n */\r\nexport interface WithdrawalRequestData {\r\n  id: string | number;\r\n  amount: number;\r\n  accountDetails: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  platformId: number;\r\n  userId: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n/**\r\n * User funds data extension\r\n */\r\nexport interface UserWithdrawalData {\r\n  money?: number;\r\n  withdrawalRequests?: WithdrawalRequestData[];\r\n}\r\n\r\n/**\r\n * API response structures\r\n */\r\nexport interface ApiSuccessResponse<T = any> {\r\n  data: T;\r\n}\r\n\r\nexport interface ApiErrorResponse {\r\n  errors: Array<{\r\n    status: string;\r\n    code: string;\r\n    title: string;\r\n    detail?: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Form validation errors\r\n */\r\nexport interface ValidationErrors {\r\n  [field: string]: string[];\r\n}\r\n\r\n/**\r\n * Configuration constants\r\n */\r\nexport const WITHDRAWAL_STATUS = {\r\n  PENDING: 'pending',\r\n  APPROVED: 'approved',\r\n  REJECTED: 'rejected',\r\n} as const;\r\n\r\nexport type WithdrawalStatus = typeof WITHDRAWAL_STATUS[keyof typeof WITHDRAWAL_STATUS];\r\n\r\n/**\r\n * Default values\r\n */\r\nexport const DEFAULT_MIN_AMOUNT = 0.001;\r\nexport const DEFAULT_MAX_AMOUNT = 10;\r\nexport const DEFAULT_FEE = 0.0005;\r\n\r\n/**\r\n * Helper type guards\r\n */\r\nexport function isWithdrawalPlatform(obj: any): obj is WithdrawalPlatformData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'name' in obj &&\r\n    'symbol' in obj &&\r\n    'minAmount' in obj &&\r\n    'maxAmount' in obj;\r\n}\r\n\r\nexport function isWithdrawalRequest(obj: any): obj is WithdrawalRequestData {\r\n  return obj &&\r\n    typeof obj === 'object' &&\r\n    'id' in obj &&\r\n    'amount' in obj &&\r\n    'accountDetails' in obj &&\r\n    'status' in obj &&\r\n    'platformId' in obj &&\r\n    'userId' in obj;\r\n}","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\nimport WithdrawalPlatform from './WithdrawalPlatform';\r\nimport { WithdrawalStatus, WITHDRAWAL_STATUS } from '../types';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport app from 'flarum/common/app';\r\n\r\n/**\r\n * WithdrawalRequest model for Flarum\r\n * \r\n * This model represents a user's funds request with enhanced CRUD capabilities.\r\n */\r\nexport default class WithdrawalRequest extends Model {\r\n  // Basic attributes\r\n  amount = Model.attribute<number>('amount');\r\n  accountDetails = Model.attribute<string>('accountDetails');\r\n  message = Model.attribute<string>('message');\r\n  status = Model.attribute<WithdrawalStatus>('status');\r\n  \r\n  // Foreign keys\r\n  platformId = Model.attribute<number>('platformId');\r\n  userId = Model.attribute<number>('userId');\r\n  \r\n  // Timestamps\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n  \r\n  // Relationships\r\n  user = Model.hasOne<User>('user');\r\n  platform = Model.hasOne<WithdrawalPlatform>('platform');\r\n  \r\n  // Computed properties\r\n  apiEndpoint() {\r\n    const id = this.id();\r\n    return id ? `/funds-requests/${id}` : '/funds-requests';\r\n  }\r\n  \r\n  // Status helpers\r\n  isPending(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.PENDING;\r\n  }\r\n  \r\n  isApproved(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.APPROVED;\r\n  }\r\n  \r\n  isRejected(): boolean {\r\n    return this.status() === WITHDRAWAL_STATUS.REJECTED;\r\n  }\r\n  \r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n  \r\n  // Display helpers\r\n  statusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`funds.forum.status.${status}`).toString();\r\n  }\r\n  \r\n  statusColor(): string {\r\n    const status = this.status();\r\n    switch (status) {\r\n      case WITHDRAWAL_STATUS.APPROVED:\r\n        return 'success';\r\n      case WITHDRAWAL_STATUS.REJECTED:\r\n        return 'danger';\r\n      case WITHDRAWAL_STATUS.PENDING:\r\n      default:\r\n        return 'warning';\r\n    }\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this funds request with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<WithdrawalRequest> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as WithdrawalRequest;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this funds request with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this request',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Only check if request can be modified for non-admin users\r\n    const currentUser = app.session.user;\r\n    if (currentUser && !currentUser.isAdmin() && !this.canBeModified()) {\r\n      throw new ServiceError(\r\n        'This request cannot be deleted as it has already been processed',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this request for resubmission\r\n   */\r\n  clone(): WithdrawalRequest {\r\n    const cloned = app.store.createRecord('funds-requests') as WithdrawalRequest;\r\n    \r\n    // Copy relevant attributes but not status/timestamps\r\n    cloned.pushAttributes({\r\n      platformId: this.platformId(),\r\n      amount: this.amount(),\r\n      accountDetails: this.accountDetails(),\r\n      message: this.message()\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Get total cost including fees\r\n   */\r\n  getTotalCost(): number {\r\n    const platform = this.platform();\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n    return this.amount() + fee;\r\n  }\r\n\r\n  /**\r\n   * Get formatted amount string\r\n   */\r\n  getFormattedAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    return `${this.amount()} ${symbol}`.trim();\r\n  }\r\n\r\n  /**\r\n   * Get formatted total cost string including fees\r\n   */\r\n  getFormattedTotalCost(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    const fee = platform ? platform.fee() || 0 : 0;\r\n    \r\n    if (fee > 0) {\r\n      return `${this.amount()} + ${fee} (fee) = ${this.getTotalCost()} ${symbol}`.trim();\r\n    }\r\n    \r\n    return this.getFormattedAmount();\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this request\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending requests\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this request\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending requests\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this request's details\r\n   */\r\n  canView(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view any request\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own requests\r\n    return this.userId() === currentUser.id();\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.amount !== undefined) {\r\n      if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\r\n        errors.push('Amount must be a positive number');\r\n      }\r\n    }\r\n\r\n    if (attributes.accountDetails !== undefined) {\r\n      if (!attributes.accountDetails || typeof attributes.accountDetails !== 'string') {\r\n        errors.push('Account details are required');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformId !== undefined) {\r\n      if (!attributes.platformId || typeof attributes.platformId !== 'number') {\r\n        errors.push('Platform selection is required');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(', '),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save funds request',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save funds request',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this request',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete funds request',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport { validateDepositPlatform } from '../utils/PlatformValidation';\r\nimport { IconRepresentation } from './CurrencyIcon';\r\nimport app from 'flarum/common/app';\r\n\r\nexport default class DepositPlatform extends Model {\r\n  name = Model.attribute<string>('name');\r\n  symbol = Model.attribute<string>('symbol');\r\n  network = Model.attribute<string>('network');\r\n  networkTypeId = Model.attribute('networkTypeId');\r\n  displayName = Model.attribute<string>('displayName');\r\n  minAmount = Model.attribute('minAmount');\r\n  maxAmount = Model.attribute('maxAmount');\r\n  fee = Model.attribute('fee');\r\n  address = Model.attribute('address');\r\n  qrCodeImageUrl = Model.attribute<string>('qrCodeImageUrl');\r\n  // Three-tier icon system - computed properties\r\n  currencyIconUrl = Model.attribute<string>('currencyIconUrl');\r\n  currencyIconClass = Model.attribute<string>('currencyIconClass');\r\n  currencyUnicodeSymbol = Model.attribute<string>('currencyUnicodeSymbol');\r\n  networkIconUrl = Model.attribute<string>('networkIconUrl');\r\n  networkIconClass = Model.attribute<string>('networkIconClass');\r\n  platformSpecificIconUrl = Model.attribute<string>('platformSpecificIconUrl');\r\n  platformSpecificIconClass = Model.attribute<string>('platformSpecificIconClass');\r\n  \r\n  // Override fields for admin configuration\r\n  currencyIconOverrideUrl = Model.attribute<string>('currencyIconOverrideUrl');\r\n  currencyIconOverrideClass = Model.attribute<string>('currencyIconOverrideClass');\r\n  networkIconOverrideUrl = Model.attribute<string>('networkIconOverrideUrl');\r\n  networkIconOverrideClass = Model.attribute<string>('networkIconOverrideClass');\r\n  warningText = Model.attribute<string>('warningText');\r\n  networkConfig = Model.attribute('networkConfig');\r\n  isActive = Model.attribute('isActive');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n\r\n  // Relationships\r\n  networkType = Model.hasOne('networkType');\r\n\r\n  // Icon representations from serializer\r\n  bestIcon = Model.attribute<IconRepresentation>('bestIcon');\r\n  currencyIcon = Model.attribute<IconRepresentation>('currencyIcon');\r\n  networkIcon = Model.attribute<IconRepresentation>('networkIcon');\r\n\r\n  // Helper methods\r\n  getDisplayName(): string {\r\n    return this.displayName() || this.name();\r\n  }\r\n\r\n  getFullDisplayName(): string {\r\n    const name = this.getDisplayName();\r\n    const network = this.network();\r\n    return network ? `${name} (${network})` : name;\r\n  }\r\n\r\n  isValidAmount(amount: number): boolean {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    return amount >= min && (max === null || amount <= max);\r\n  }\r\n\r\n  getTotalCost(amount: number): number {\r\n    return amount + (this.fee() || 0);\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this platform with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<DepositPlatform> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as DepositPlatform;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this platform with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    // Check if platform is in use\r\n    if (await this.isInUse()) {\r\n      throw new ServiceError(\r\n        'Cannot delete platform that has pending deposit records',\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle platform status\r\n   */\r\n  async toggleStatus(): Promise<DepositPlatform> {\r\n    if (!this.canModify()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to modify this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return await this.save({\r\n      isActive: !this.isActive()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone this platform for creating a similar one\r\n   */\r\n  clone(): DepositPlatform {\r\n    const cloned = app.store.createRecord('deposit-platforms') as DepositPlatform;\r\n    \r\n    // Copy relevant attributes but not id/timestamps\r\n    cloned.pushAttributes({\r\n      name: this.name() + ' (Copy)',\r\n      symbol: this.symbol(),\r\n      network: this.network(),\r\n      networkTypeId: this.networkTypeId(),\r\n      minAmount: this.minAmount(),\r\n      maxAmount: this.maxAmount(),\r\n      fee: this.fee(),\r\n      address: this.address(),\r\n      qrCodeImageUrl: this.qrCodeImageUrl(),\r\n      iconUrl: this.iconUrl(),\r\n      iconClass: this.iconClass(),\r\n      warningText: this.warningText(),\r\n      isActive: false // Clone as inactive by default\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate amount against platform limits\r\n   */\r\n  validateAmount(amount: number): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (typeof amount !== 'number' || amount <= 0) {\r\n      errors.push('Amount must be a positive number');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const min = this.minAmount() || 0;\r\n    if (amount < min) {\r\n      errors.push(`Amount must be at least ${min} ${this.symbol()}`);\r\n    }\r\n\r\n    const max = this.maxAmount();\r\n    if (max && amount > max) {\r\n      errors.push(`Amount cannot exceed ${max} ${this.symbol()}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this platform\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this platform\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this platform\r\n   */\r\n  canView(): boolean {\r\n    // All authenticated users can view active platforms\r\n    if (this.isActive()) return true;\r\n    \r\n    // Only admins can view inactive platforms\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin();\r\n  }\r\n\r\n  // Utility methods\r\n\r\n  /**\r\n   * Check if this platform is currently in use\r\n   */\r\n  async isInUse(): Promise<boolean> {\r\n    try {\r\n      const records = await app.store.find('deposit-records', {\r\n        filter: { platform: this.id(), status: 'pending' }\r\n      });\r\n      \r\n      const recordsArray = Array.isArray(records) ? records : [records];\r\n      return recordsArray.length > 0;\r\n    } catch {\r\n      // If we can't check, assume it's in use to be safe\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get formatted fee display\r\n   */\r\n  getFormattedFee(): string {\r\n    const fee = this.fee() || 0;\r\n    if (fee === 0) {\r\n      return 'Free';\r\n    }\r\n    return `${fee} ${this.symbol()}`;\r\n  }\r\n\r\n  /**\r\n   * Get formatted limits display\r\n   */\r\n  getFormattedLimits(): string {\r\n    const min = this.minAmount() || 0;\r\n    const max = this.maxAmount();\r\n    const symbol = this.symbol();\r\n\r\n    if (max) {\r\n      return `${min} - ${max} ${symbol}`;\r\n    }\r\n    return `Min: ${min} ${symbol}`;\r\n  }\r\n\r\n  /**\r\n   * Generate deposit address for user\r\n   */\r\n  generateDepositAddress(_userId?: number): string {\r\n    const address = this.address();\r\n    \r\n    // For now, we return the static address\r\n    // In the future, this could be enhanced to support dynamic address generation\r\n    if (address) {\r\n      return address;\r\n    }\r\n    \r\n    throw new ServiceError(\r\n      'No deposit address configured for this platform',\r\n      ServiceErrorType.VALIDATION_ERROR\r\n    );\r\n  }\r\n\r\n  // Private validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    validateDepositPlatform(attributes, this.minAmount());\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save deposit platform',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save deposit platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this platform',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete deposit platform',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import Model from 'flarum/common/Model';\r\nimport User from 'flarum/common/models/User';\r\nimport DepositPlatform from './DepositPlatform';\r\nimport { ServiceError, ServiceErrorType } from '../types/services';\r\nimport app from 'flarum/common/app';\r\n\r\nexport default class DepositRecord extends Model {\r\n  // Fixed: id() should return string to match Flarum's base Model interface\r\n  id = Model.attribute<string>('id');\r\n  userId = Model.attribute<number>('userId');\r\n  platformId = Model.attribute<number>('platformId');\r\n  platformAccount = Model.attribute<string>('platformAccount');\r\n  realName = Model.attribute<string>('realName');\r\n  amount = Model.attribute<number>('amount');\r\n  depositTime = Model.attribute('depositTime', Model.transformDate);\r\n  screenshotUrl = Model.attribute<string>('screenshotUrl');\r\n  userMessage = Model.attribute<string>('userMessage');\r\n  status = Model.attribute<string>('status');\r\n  processedAt = Model.attribute('processedAt', Model.transformDate);\r\n  processedBy = Model.attribute<number>('processedBy');\r\n  adminNotes = Model.attribute<string>('adminNotes');\r\n  creditedAmount = Model.attribute<number>('creditedAmount');\r\n  createdAt = Model.attribute('createdAt', Model.transformDate);\r\n  updatedAt = Model.attribute('updatedAt', Model.transformDate);\r\n\r\n  // Relationships\r\n  user = Model.hasOne<User>('user');\r\n  platform = Model.hasOne<DepositPlatform>('platform');\r\n  processedByUser = Model.hasOne<User>('processedByUser');\r\n\r\n  // Status constants\r\n  static STATUS_PENDING = 'pending';\r\n  static STATUS_APPROVED = 'approved';\r\n  static STATUS_REJECTED = 'rejected';\r\n\r\n  // Status check methods\r\n  isPending(): boolean {\r\n    return this.status() === DepositRecord.STATUS_PENDING;\r\n  }\r\n\r\n  isApproved(): boolean {\r\n    return this.status() === DepositRecord.STATUS_APPROVED;\r\n  }\r\n\r\n  isRejected(): boolean {\r\n    return this.status() === DepositRecord.STATUS_REJECTED;\r\n  }\r\n\r\n  getStatusColor(): string {\r\n    switch (this.status()) {\r\n      case DepositRecord.STATUS_PENDING:\r\n        return 'warning';\r\n      case DepositRecord.STATUS_APPROVED:\r\n        return 'success';\r\n      case DepositRecord.STATUS_REJECTED:\r\n        return 'error';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  // Display helpers\r\n  getStatusLabel(): string {\r\n    const status = this.status();\r\n    return app.translator.trans(`funds.forum.deposit.status.${status}`).toString();\r\n  }\r\n\r\n  canBeModified(): boolean {\r\n    return this.isPending();\r\n  }\r\n\r\n  // Enhanced CRUD methods\r\n\r\n  /**\r\n   * Save this deposit record with enhanced validation\r\n   */\r\n  async save(attributes?: Record<string, any>): Promise<DepositRecord> {\r\n    // Validate before saving if attributes provided\r\n    if (attributes) {\r\n      this.validateAttributes(attributes);\r\n    }\r\n\r\n    try {\r\n      const result = await super.save(attributes);\r\n      return result as DepositRecord;\r\n    } catch (error) {\r\n      throw this.handleSaveError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete this deposit record with permission check\r\n   */\r\n  async delete(): Promise<void> {\r\n    if (!this.canDelete()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to delete this deposit record',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n\r\n    try {\r\n      await super.delete();\r\n    } catch (error) {\r\n      throw this.handleDeleteError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this record for resubmission\r\n   */\r\n  clone(): DepositRecord {\r\n    const cloned = app.store.createRecord('deposit-records') as DepositRecord;\r\n    \r\n    // Copy relevant attributes but not status/timestamps\r\n    cloned.pushAttributes({\r\n      platformId: this.platformId(),\r\n      amount: this.amount(),\r\n      platformAccount: this.platformAccount(),\r\n      realName: this.realName(),\r\n      userMessage: this.userMessage(),\r\n      screenshotUrl: this.screenshotUrl()\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Get formatted amount string\r\n   */\r\n  getFormattedAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    return `${this.amount()} ${symbol}`.trim();\r\n  }\r\n\r\n  /**\r\n   * Get credited amount or original amount\r\n   */\r\n  getFinalAmount(): number {\r\n    return this.creditedAmount() || this.amount();\r\n  }\r\n\r\n  /**\r\n   * Get formatted credited amount\r\n   */\r\n  getFormattedFinalAmount(): string {\r\n    const platform = this.platform();\r\n    const symbol = platform ? platform.symbol() : '';\r\n    const amount = this.getFinalAmount();\r\n    \r\n    if (this.creditedAmount() && this.creditedAmount() !== this.amount()) {\r\n      return `${amount} ${symbol} (credited: ${this.creditedAmount()})`.trim();\r\n    }\r\n    \r\n    return `${amount} ${symbol}`.trim();\r\n  }\r\n\r\n  // Permission methods\r\n\r\n  /**\r\n   * Check if current user can modify this record\r\n   */\r\n  canModify(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can modify any record\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only modify their own pending records\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can delete this record\r\n   */\r\n  canDelete(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can delete any record (including processed ones)\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only delete their own pending records\r\n    return this.userId() === currentUser.id() && this.canBeModified();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can view this record's details\r\n   */\r\n  canView(): boolean {\r\n    const currentUser = app.session.user;\r\n    if (!currentUser) return false;\r\n\r\n    // Admin can view any record\r\n    if (currentUser.isAdmin()) return true;\r\n\r\n    // Users can only view their own records\r\n    return this.userId() === currentUser.id();\r\n  }\r\n\r\n  /**\r\n   * Check if current user can approve/reject this record\r\n   */\r\n  canProcess(): boolean {\r\n    const currentUser = app.session.user;\r\n    return currentUser && currentUser.isAdmin() && this.isPending();\r\n  }\r\n\r\n  // Workflow methods\r\n\r\n  /**\r\n   * Approve this deposit record\r\n   */\r\n  async approve(creditedAmount?: number, adminNotes?: string): Promise<DepositRecord> {\r\n    if (!this.canProcess()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to approve this deposit',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: DepositRecord.STATUS_APPROVED,\r\n      processedAt: new Date(),\r\n      processedBy: app.session.user?.id()\r\n    };\r\n\r\n    if (creditedAmount !== undefined) {\r\n      attributes.creditedAmount = creditedAmount;\r\n    }\r\n\r\n    if (adminNotes) {\r\n      attributes.adminNotes = adminNotes;\r\n    }\r\n\r\n    return await this.save(attributes);\r\n  }\r\n\r\n  /**\r\n   * Reject this deposit record\r\n   */\r\n  async reject(reason?: string): Promise<DepositRecord> {\r\n    if (!this.canProcess()) {\r\n      throw new ServiceError(\r\n        'You do not have permission to reject this deposit',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    const attributes: any = {\r\n      status: DepositRecord.STATUS_REJECTED,\r\n      processedAt: new Date(),\r\n      processedBy: app.session.user?.id()\r\n    };\r\n\r\n    if (reason) {\r\n      attributes.adminNotes = reason;\r\n    }\r\n\r\n    return await this.save(attributes);\r\n  }\r\n\r\n  // Validation methods\r\n\r\n  /**\r\n   * Validate attributes before saving\r\n   */\r\n  private validateAttributes(attributes: Record<string, any>): void {\r\n    const errors: string[] = [];\r\n\r\n    if (attributes.amount !== undefined) {\r\n      if (typeof attributes.amount !== 'number' || attributes.amount <= 0) {\r\n        errors.push('Amount must be a positive number');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformAccount !== undefined) {\r\n      if (!attributes.platformAccount || typeof attributes.platformAccount !== 'string') {\r\n        errors.push('Platform account is required');\r\n      }\r\n    }\r\n\r\n    if (attributes.realName !== undefined) {\r\n      if (!attributes.realName || typeof attributes.realName !== 'string') {\r\n        errors.push('Real name is required');\r\n      }\r\n    }\r\n\r\n    if (attributes.platformId !== undefined) {\r\n      if (!attributes.platformId || typeof attributes.platformId !== 'number') {\r\n        errors.push('Platform selection is required');\r\n      }\r\n    }\r\n\r\n    if (attributes.creditedAmount !== undefined) {\r\n      if (typeof attributes.creditedAmount !== 'number' || attributes.creditedAmount < 0) {\r\n        errors.push('Credited amount must be a non-negative number');\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new ServiceError(\r\n        errors.join(', '),\r\n        ServiceErrorType.VALIDATION_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save errors with proper typing\r\n   */\r\n  private handleSaveError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle Flarum API validation errors\r\n    if (error.response && error.response.errors) {\r\n      const apiError = error.response.errors[0];\r\n      return new ServiceError(\r\n        apiError.detail || 'Failed to save deposit record',\r\n        ServiceErrorType.VALIDATION_ERROR,\r\n        apiError.code,\r\n        apiError\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to save deposit record',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle delete errors with proper typing\r\n   */\r\n  private handleDeleteError(error: any): ServiceError {\r\n    if (error instanceof ServiceError) {\r\n      return error;\r\n    }\r\n\r\n    // Handle permission errors\r\n    if (error.status === 403 || error.response?.status === 403) {\r\n      return new ServiceError(\r\n        'You do not have permission to delete this record',\r\n        ServiceErrorType.PERMISSION_DENIED\r\n      );\r\n    }\r\n\r\n    return new ServiceError(\r\n      error.message || 'Failed to delete deposit record',\r\n      ServiceErrorType.SERVER_ERROR\r\n    );\r\n  }\r\n}","import Component, { ComponentAttrs } from 'flarum/common/Component';\r\nimport app from 'flarum/forum/app';\r\nimport type Mithril from 'mithril';\r\n\r\n/**\r\n * MoneyDisplay component shows the user's money balance with funds button\r\n */\r\nexport default class MoneyDisplay extends Component<ComponentAttrs> {\r\n  view(): Mithril.Children {\r\n    if (!app.session.user) {\r\n      return null;\r\n    }\r\n\r\n    const moneyName: string = app.forum.attribute('antoinefr-money.moneyname') || '[money]';\r\n    const userMoneyText: string = moneyName.replace('[money]', app.session.user.attribute(\"money\"));\r\n    const iconUrl: string | null = app.forum.attribute('wusong8899-funds.moneyIconUrl');\r\n\r\n    return (\r\n      <div\r\n        id=\"moneyDisplayContainer\"\r\n        className=\"client1-header-adv-wrapper clientCustomizeWithdrawalHeaderTotalMoney\"\r\n      >\r\n        <div className=\"clientCustomizeWithdrawalHeaderText\">\r\n          {iconUrl && iconUrl.trim() && (\r\n            <span style={{  \r\n              borderRadius: '50%', \r\n              padding: '6px 8px', \r\n              marginRight: '8px',\r\n              display: 'inline-flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}>\r\n              <img \r\n                src={iconUrl} \r\n                alt=\"Money icon\" \r\n                style={{ \r\n                  width: '20px', \r\n                  height: '20px'\r\n                }}\r\n                onError={(e: Event) => {\r\n                  // Hide image if it fails to load\r\n                  const target = e.target as HTMLImageElement;\r\n                  target.style.display = 'none';\r\n                }}\r\n              />\r\n            </span>\r\n          )}\r\n          {userMoneyText}\r\n        </div>\r\n        \r\n        <div className=\"clientCustomizeWithdrawalHeaderIcon\">\r\n          <i className=\"fas fa-wallet\" />\r\n        </div>\r\n\r\n        <div className=\"clientCustomizeWithdrawalButtons\">\r\n          <div\r\n            className=\"clientCustomizeWithdrawalButton\"\r\n            onclick={this.handleWithdrawalClick.bind(this)}\r\n            title=\"提款\"\r\n          >\r\n            <i className=\"fas fa-money-bill-transfer\" />\r\n            <span style={{ marginLeft: '4px', fontSize: '12px' }}>提款</span>\r\n          </div>\r\n          <div\r\n            className=\"clientCustomizeDepositButton\"\r\n            onclick={this.handleDepositClick.bind(this)}\r\n            title=\"存款\"\r\n            style={{ marginLeft: '8px' }}\r\n          >\r\n            <i className=\"fas fa-coins\" />\r\n            <span style={{ marginLeft: '4px', fontSize: '12px' }}>存款</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle funds button click\r\n   */\r\n  private handleWithdrawalClick(e: Event): void {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    // Navigate to funds page with funds tab\r\n    window.location.href = '/funds?tab=funds';\r\n  }\r\n\r\n  /**\r\n   * Handle deposit button click\r\n   */\r\n  private handleDepositClick(e: Event): void {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    // Navigate to funds page with deposit tab\r\n    window.location.href = '/funds?tab=deposit';\r\n  }\r\n}","import Component, { ComponentAttrs } from 'flarum/common/Component';\r\nimport app from 'flarum/forum/app';\r\nimport type Mithril from 'mithril';\r\n\r\n/**\r\n * MobileMoneyDisplay component for mobile navigation bar\r\n * Shows user's money balance with funds button in mobile navigation\r\n */\r\nexport default class MobileMoneyDisplay extends Component<ComponentAttrs> {\r\n  view(): Mithril.Children {\r\n    // Note: Mobile detection and user authentication are now handled in index.ts\r\n    // This component assumes it should render when called\r\n    const userMoney = app.session.user?.attribute('money') || 0;\r\n    const iconUrl: string | null = app.forum.attribute('wusong8899-funds.moneyIconUrl');\r\n\r\n    return (\r\n      <div className=\"Navigation-mobileMoneyDisplay\">\r\n        <div \r\n          className=\"Navigation-moneySection\"\r\n          onclick={this.handleWithdrawalClick.bind(this)}\r\n          title={`余额: ${userMoney} - 点击提款`}\r\n        >\r\n          {/* 货币图标和金额显示 */}\r\n          <div className=\"Navigation-moneyText\">\r\n            {iconUrl && iconUrl.trim() && (\r\n              <span style={{  \r\n                borderRadius: '50%', \r\n                padding: '4px 6px', \r\n                marginRight: '6px',\r\n                display: 'inline-flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <img \r\n                  src={iconUrl} \r\n                  alt=\"Money icon\" \r\n                  style={{ \r\n                    width: '18px', \r\n                    height: '18px'\r\n                  }}\r\n                  onError={(e: Event) => {\r\n                    // Hide image if it fails to load\r\n                    const target = e.target as HTMLImageElement;\r\n                    target.style.display = 'none';\r\n                  }}\r\n                />\r\n              </span>\r\n            )}\r\n            <span className=\"Navigation-moneyAmount\">{userMoney}</span>\r\n          </div>\r\n          \r\n          {/* 提款按钮 */}\r\n          <div className=\"Navigation-withdrawalButton\">\r\n            <i className=\"fas fa-money-bill-transfer\" />\r\n            <span>提款</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle funds button click\r\n   */\r\n  private handleWithdrawalClick(e: Event): void {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    console.log('MobileMoneyDisplay clicked!'); // 调试日志\r\n    \r\n    try {\r\n      // Navigate to unified funds page with funds tab\r\n      window.location.href = '/funds?tab=funds';\r\n    } catch (error) {\r\n      console.error('Navigation error:', error);\r\n      // 备用方案\r\n      window.location.href = '/funds?tab=funds';\r\n    }\r\n  }\r\n}","import app from 'flarum/forum/app';\r\n\r\n/**\r\n * ConfigManager utility for flarum-funds extension\r\n */\r\nexport class ConfigManager {\r\n  private static instance: ConfigManager;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): ConfigManager {\r\n    if (!ConfigManager.instance) {\r\n      ConfigManager.instance = new ConfigManager();\r\n    }\r\n    return ConfigManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Check if current page is the tags page (main forum page)\r\n   */\r\n  public isTagsPage(): boolean {\r\n    try {\r\n      const routeName = app.current?.get('routeName');\r\n      return routeName === 'index';\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}","/**\n * Check if the current device is mobile based on screen width\n */\nexport function isMobile(): boolean {\n  return window.innerWidth <= 767;\n}\n\n/**\n * Check if the current device is tablet\n */\nexport function isTablet(): boolean {\n  return window.innerWidth >= 768 && window.innerWidth <= 1024;\n}\n\n/**\n * Check if the current device is desktop\n */\nexport function isDesktop(): boolean {\n  return window.innerWidth > 1024;\n}\n\n/**\n * Check if the current device is mobile or tablet\n */\nexport function isMobileOrTablet(): boolean {\n  return isMobile() || isTablet();\n}\n\n/**\n * Get the current breakpoint\n */\nexport function getCurrentBreakpoint(): 'mobile' | 'tablet' | 'desktop' {\n  if (isMobile()) return 'mobile';\n  if (isTablet()) return 'tablet';\n  return 'desktop';\n}\n\n/**\n * Check if touch is supported\n */\nexport function isTouchDevice(): boolean {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n}\n\n// For backward compatibility\nexport const MobileDetector = {\n  isMobile,\n  isTablet,\n  isDesktop,\n  isMobileOrTablet,\n  getCurrentBreakpoint,\n  isTouchDevice\n};","import app from 'flarum/forum/app';\r\nimport { extend } from 'flarum/common/extend';\r\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\r\nimport Navigation from 'flarum/common/components/Navigation';\r\nimport FundsPage from './components/FundsPage';\r\nimport WithdrawalPlatform from '../common/models/WithdrawalPlatform';\r\nimport WithdrawalRequest from '../common/models/WithdrawalRequest';\r\nimport DepositPlatform from '../common/models/DepositPlatform';\r\nimport DepositRecord from '../common/models/DepositRecord';\r\nimport MoneyDisplay from './components/MoneyDisplay';\r\nimport MobileMoneyDisplay from './components/MobileMoneyDisplay';\r\nimport { ConfigManager } from './utils/ConfigManager';\r\nimport { MobileDetector } from './utils/MobileDetector';\r\n\r\napp.initializers.add('wusong8899-funds', () => {\r\n  // Register models in store\r\n  app.store.models['funds-platforms'] = WithdrawalPlatform;\r\n  app.store.models['funds-requests'] = WithdrawalRequest;\r\n  app.store.models['deposit-platforms'] = DepositPlatform;\r\n  app.store.models['deposit-records'] = DepositRecord;\r\n\r\n  // New unified funds page\r\n  app.routes.funds = { path: '/funds', component: FundsPage };\r\n  \r\n  // Legacy routes for backward compatibility - redirect to funds page\r\n  app.routes.funds = { path: '/funds', component: FundsPage };\r\n  app.routes.deposit = { path: '/deposit', component: FundsPage };\r\n\r\n\r\n  // Add money display to header primary (desktop)\r\n  extend(HeaderPrimary.prototype, 'view', function (vnode) {\r\n    // Only add on tags page for logged-in users and on desktop\r\n    const configManager = ConfigManager.getInstance();\r\n    if (app.session.user && configManager.isTagsPage() && !MobileDetector.isMobile()) {\r\n      // Add money display to the header primary view\r\n      vnode.children.push(MoneyDisplay.component());\r\n    }\r\n  });\r\n\r\n  // Add mobile money display to navigation using component extension\r\n  extend(Navigation.prototype, 'view', function (vnode) {\r\n    // Only work on mobile devices (viewport width <= 768px)\r\n    if (window.innerWidth > 768) {\r\n      return;\r\n    }\r\n\r\n    // Only work on homepage\r\n    const routeName = app.current.get('routeName');\r\n    if (routeName !== 'tags') {\r\n      return;\r\n    }\r\n\r\n    // Only work for logged-in users\r\n    if (!app.session.user) {\r\n      return;\r\n    }\r\n\r\n    if (!vnode || !vnode.children || !Array.isArray(vnode.children)) {\r\n      return;\r\n    }\r\n\r\n    // Check if we already added the money display component to avoid duplication\r\n    const hasMoneyDisplay = vnode.children.some((child: any) =>\r\n      child && child.attrs && child.attrs.className &&\r\n      child.attrs.className.includes('Navigation-mobileMoneyDisplay')\r\n    );\r\n\r\n    if (!hasMoneyDisplay) {\r\n      // Add MobileMoneyDisplay component to navigation\r\n      vnode.children.push(MobileMoneyDisplay.component({\r\n        className: \"item-funds Navigation-mobileMoneyDisplay\"\r\n      }));\r\n    }\r\n  });\r\n});"],"names":["STATUS_CLASS_MAP","DEFAULTS","ICONS","getBestPlatformIcon","platform","platformIconUrl","platformIconClass","networkIconUrl","networkIconClass","currencyIconUrl","currencyIconClass","currencyUnicodeSymbol","getCurrencyIcon","currencyIconOverrideUrl","currencyIconOverrideClass","currencyIcon","renderIcon","iconRep","additionalClasses","baseClasses","classes","PlatformIcon","vnode","className","size","icon","finalClasses","bestIcon","getId","obj","getAttr","attr","getIdString","findPlatformById","platforms","platformId","platformIdStr","p","pId","getDateFromAttr","dateStr","PlatformSelector","Component","selectedPlatform","showDropdown","validPlatforms","app","onPlatformSelect","onAmountChange","AmountInput","amount","loadingBalance","onFillAllAmount","minAmount","maxAmount","fee","e","Button","AddressInput","accountDetails","onAccountDetailsChange","symbol","m","text","error","MessageInput","message","onMessageChange","SubmitButton","submitting","canSubmit","onSubmit","numericAmount","finalAmount","WithdrawalForm","formData","onFormDataChange","StatusBadge","status","statusClass","statusLabel","EmptyState","iconName","title","description","LoadingState","props","LoadingIndicator","TransactionHistory","transactions","loading","type","transaction","transactionId","statusColor","createdAt","platformAccount","realName","depositTime","screenshotUrl","userMessage","processedAt","adminNotes","creditedAmount","humanTime","iconUrl","iconClass","DepositPlatformDropdown","element","name","network","platformWithSymbol","currencyIconRep","parts","groupedPlatforms","currency","currencyPlatforms","grouped","a","b","networkA","networkB","AddressDisplay","address","onCopy","ImageDisplay","DepositRecordForm","now","localDateTime","Stream","withAttr","ServiceErrorType","ServiceError","code","details","WithdrawalService","options","queryParams","results","id","attributes","model","data","userId","targetUserId","queryOptions","request","reason","currentUser","userBalance","totalRequired","required","field","defaultMessage","apiError","withdrawalService","DepositService","addressService","__vitePreload","AddressService$1","deposit","confirmedAmount","depositService","PlatformService","modelType","currentStatus","config","errors","requestType","records","recordArray","r","sum","sortBy","direction","sortString","_platform","platformService","AddressService","_userId","extractErrorMessage","fallback","firstError","response","FundsPage","Page","tabParam","tab","subTab","mainTab","currentTab","params","newUrl","titleKey","activeTab","activeSubTab","allDepositHistory","dateA","warningText","url","currentSubTab","availableAmount","amountNum","errorMessage","requests","forceRefresh","updatedUser","validateCommonFields","validateAmountFields","currentMinAmount","validateDepositFields","throwIfErrors","validateWithdrawalPlatform","validateDepositPlatform","WithdrawalPlatform","Model","min","max","cloned","totalCost","feeText","WITHDRAWAL_STATUS","WithdrawalRequest","DepositPlatform","_DepositRecord","DepositRecord","MoneyDisplay","userMoneyText","target","MobileMoneyDisplay","userMoney","ConfigManager","isMobile","isTablet","isDesktop","isMobileOrTablet","getCurrentBreakpoint","isTouchDevice","MobileDetector","extend","HeaderPrimary","configManager","Navigation","child"],"mappings":"yDAcO,MAAMA,EAAoD,CAC/D,QAAS,UACT,SAAU,UACV,SAAU,QACZ,EAaaC,EAAW,CACtB,WAAY,KACZ,WAAY,GACZ,IAAK,KACL,kBAAmB,CACrB,EAoBaC,EAAQ,CAEnB,MAAO,eAGP,aAAc,sBACd,MAAO,cAET,EC/CO,SAASC,EAAoBC,EAAmC,CAErE,MAAMC,EAAkBD,EAAS,0BAAA,EACjC,GAAIC,EACF,MAAO,CACL,KAAM,eACN,MAAOA,EACP,IAAKD,EAAS,UAAY,eAAA,EAI9B,MAAME,EAAoBF,EAAS,4BAAA,EACnC,GAAIE,EACF,MAAO,CACL,KAAM,iBACN,MAAOA,CAAA,EAKX,MAAMC,EAAiBH,EAAS,iBAAA,EAChC,GAAIG,EACF,MAAO,CACL,KAAM,eACN,MAAOA,EACP,IAAKH,EAAS,aAAe,cAAA,EAIjC,MAAMI,EAAmBJ,EAAS,mBAAA,EAClC,GAAII,EACF,MAAO,CACL,KAAM,iBACN,MAAOA,CAAA,EAKX,MAAMC,EAAkBL,EAAS,kBAAA,EACjC,GAAIK,EACF,MAAO,CACL,KAAM,eACN,MAAOA,EACP,IAAKL,EAAS,YAAc,eAAA,EAIhC,MAAMM,EAAoBN,EAAS,oBAAA,EACnC,GAAIM,EACF,MAAO,CACL,KAAM,iBACN,MAAOA,CAAA,EAIX,MAAMC,EAAwBP,EAAS,wBAAA,EACvC,OAAIO,EACK,CACL,KAAM,mBACN,MAAOA,CAAA,EAKJ,CACL,KAAM,WACN,MAAO,cAAA,CAEX,CAKO,SAASC,GAAgBR,EAAmC,CAEjE,MAAMS,EAA0BT,EAAS,0BAAA,EACzC,GAAIS,EACF,MAAO,CACL,KAAM,eACN,MAAOA,EACP,IAAKT,EAAS,YAAc,eAAA,EAIhC,MAAMU,EAA4BV,EAAS,4BAAA,EAC3C,GAAIU,EACF,MAAO,CACL,KAAM,iBACN,MAAOA,CAAA,EAKX,MAAMC,EAAeX,EAAS,eAAA,EAC9B,GAAIW,EACF,OAAOA,EAIT,MAAMN,EAAkBL,EAAS,kBAAA,EACjC,GAAIK,EACF,MAAO,CACL,KAAM,eACN,MAAOA,EACP,IAAKL,EAAS,YAAc,eAAA,EAIhC,MAAMM,EAAoBN,EAAS,oBAAA,EACnC,GAAIM,EACF,MAAO,CACL,KAAM,iBACN,MAAOA,CAAA,EAIX,MAAMC,EAAwBP,EAAS,wBAAA,EACvC,OAAIO,EACK,CACL,KAAM,mBACN,MAAOA,CAAA,EAIJ,CACL,KAAM,WACN,MAAO,cAAA,CAEX,CAyDO,SAASK,EAAWC,EAA6BC,EAA4B,GAAsB,CACxG,MAAMC,EAAc,OACdC,EAAUF,EAAoB,GAAGC,CAAW,IAAID,CAAiB,GAAKC,EAE5E,OAAQF,EAAQ,KAAA,CACd,IAAK,eACH,OAAO,EAAE,MAAO,CACd,IAAKA,EAAQ,MACb,IAAKA,EAAQ,KAAO,OACpB,UAAW,GAAGG,CAAO,eACrB,MAAO,CACL,MAAO,MACP,OAAQ,MACR,UAAW,UACX,QAAS,eACT,cAAe,QAAA,CACjB,CACD,EAEH,IAAK,iBACH,OAAO,EAAE,IAAK,CACZ,UAAW,GAAGA,CAAO,IAAIH,EAAQ,KAAK,GACtC,cAAe,MAAA,CAChB,EAEH,IAAK,mBACH,OAAO,EAAE,OAAQ,CACf,UAAW,GAAGG,CAAO,iBACrB,cAAe,MAAA,EACdH,EAAQ,KAAK,EAElB,IAAK,WACL,QACE,OAAO,EAAE,IAAK,CACZ,UAAW,GAAGG,CAAO,IAAIH,EAAQ,KAAK,GACtC,cAAe,MAAA,CAChB,CAAA,CAEP,CCpOA,MAAqBI,CAAa,CAChC,KAAKC,EAA2D,CAC9D,KAAM,CAAE,SAAAlB,EAAU,UAAAmB,EAAY,GAAI,KAAAC,EAAO,QAAA,EAAaF,EAAM,MAG5D,GAAI,CAAClB,EACH,OAAOqB,EAAKvB,EAAM,MAAO,CAAE,UAAW,uBAAuBqB,CAAS,GAAI,EAK5E,MAAMG,EAAe,eADH,iBAAiBF,CAAI,EACM,IAAID,CAAS,GAGpDI,EAAWxB,EAAoBC,CAAQ,EAE7C,OAAOY,EAAWW,EAAUD,CAAY,CAC1C,CACF,CCtBO,MAAME,EAASC,GACb,OAAOA,EAAI,IAAO,WAAaA,EAAI,GAAA,EAAOA,EAAI,GAM1CC,EAAU,CAACD,EAAUE,IAC5B,OAAOF,EAAIE,CAAI,GAAM,WAChBF,EAAIE,CAAI,EAAA,EAEVF,EAAI,WAAaA,EAAI,WAAWE,CAAI,EAAIF,EAAIE,CAAI,EAM5CC,EAAeH,GACnB,OAAOD,EAAMC,CAAG,CAAC,EAMbI,GAAmB,CAACC,EAAkBC,IAAqC,CACtF,MAAMC,EAAgB,OAAOD,CAAU,EACvC,OAAOD,EAAU,KAAKG,GAAK,CACzB,MAAMC,EAAMV,EAAMS,CAAC,EACnB,OAAO,OAAOC,CAAG,IAAMF,CACzB,CAAC,CACH,EAKaG,EAAkB,CAACV,EAAUE,IAAuB,CAC/D,MAAMS,EAAUV,EAAQD,EAAKE,CAAI,EACjC,OAAOS,EAAU,IAAI,KAAKA,CAAO,MAAQ,IAC3C,EC1BA,MAAqBC,WAAyBC,CAAwD,CACpG,OAAOpB,EAAoE,CACzE,MAAM,OAAOA,CAAK,EAClB,KAAK,MAAQ,CACX,aAAc,EAAA,CAElB,CAEA,MAAyB,CACvB,KAAM,CAAE,iBAAAqB,GAAqB,KAAK,MAC5B,CAAE,aAAAC,GAAiB,KAAK,MAE9B,OACE,EAAC,OAAI,UAAU,iCAAA,IACZ,MAAA,CAAI,UAAU,wBAAuB,MAAI,EAC1C,EAAC,MAAA,CACC,UAAU,kCACV,QAAS,IAAM,KAAK,eAAA,CAAe,EAEnC,EAAC,MAAA,CAAI,UAAU,iCAAA,EACb,EAAC,MAAA,CAAI,UAAU,6BAAA,EACb,EAAC,MAAA,CAAI,UAAU,6BAAA,EACb,EAACvB,EAAA,CACC,SAAUsB,EACV,KAAK,QAAA,CAAA,CAET,EACA,EAAC,MAAA,CAAI,UAAU,kCACb,EAAC,MAAA,CAAI,UAAU,6BAAA,EACZ,KAAK,gBAAgBA,CAAgB,CACxC,CACF,CACF,CACF,EACClB,EAAKvB,EAAM,aAAc,CAAE,UAAW,8BAA+B,CAAA,EAGvE0C,GAAgB,KAAK,wBACxB,CAEJ,CAEQ,gBAAuB,CAC7B,KAAK,MAAM,aAAe,CAAC,KAAK,MAAM,YACxC,CAEQ,gBAAgBxC,EAA6C,CACnE,OAAKA,IAGE0B,EAAQ1B,EAAU,aAAa,GAAK0B,EAAQ1B,EAAU,MAAM,IAAK,OAC1E,CAEQ,wBAA2C,CACjD,KAAM,CAAE,UAAA8B,GAAc,KAAK,MAGrBW,GAAkBX,GAAa,CAAA,GAAI,OAAO9B,GAAY,CAAC,CAACA,CAAQ,EAEtE,OAAIyC,EAAe,SAAW,EAE1B,EAAC,MAAA,CAAI,UAAU,6BAAA,EACb,EAAC,MAAA,CAAI,UAAU,mDAAA,EACZC,EAAI,WAAW,MAAM,0BAA0B,CAClD,CACF,IAKD,MAAA,CAAI,UAAU,6BAAA,EACZD,EAAe,IAAIzC,GAClB,EAAC,MAAA,CACC,IAAKA,EAAS,GAAA,EACd,UAAU,8BACV,QAAS,IAAM,KAAK,eAAeA,CAAQ,CAAA,EAE3C,EAAC,OAAI,UAAU,6BAAA,IACZiB,EAAA,CAAa,SAAAjB,EAAoB,KAAK,OAAA,CAAQ,CACjD,EACA,EAAC,MAAA,CAAI,UAAU,6BAAA,EACZ0B,EAAQ1B,EAAU,aAAa,GAAK0B,EAAQ1B,EAAU,MAAM,CAC/D,CAAA,CAEH,CACH,CAEJ,CAEQ,eAAeA,EAAoC,CACzD,KAAM,CAAE,iBAAA2C,EAAkB,eAAAC,CAAA,EAAmB,KAAK,MAElDD,EAAiB3C,CAAQ,EACzB,KAAK,MAAM,aAAe,GAGtB4C,GACFA,EAAA,CAEJ,CACF,CCvGA,MAAqBC,WAAoBP,CAA4B,CACnE,MAAyB,CACvB,KAAM,CACJ,OAAAQ,EACA,iBAAAP,EACA,eAAAQ,EACA,eAAAH,EACA,gBAAAI,CAAA,EACE,KAAK,MAEHC,EAAY,KAAK,aAAaV,CAAgB,EAC9CW,EAAY,KAAK,aAAaX,CAAgB,EAC9CY,EAAM,KAAK,OAAOZ,CAAgB,EAExC,OACE,EAAC,OAAI,UAAU,8BAAA,IACZ,MAAA,CAAI,UAAU,4BACb,EAAC,MAAA,CAAI,UAAU,sBAAA,EACZG,EAAI,WAAW,MAAM,yBAAyB,CACjD,EAEA,EAAC,MAAA,CAAI,UAAU,4BAAA,EACb,EAAC,QAAA,CACC,KAAK,OACL,UAAU,uBACV,YAAY,aACZ,MAAOI,EACP,QAAUM,GAAaR,EAAgBQ,EAAE,OAA4B,KAAK,CAAA,CAAA,EAE5E,EAACC,EAAA,CACC,UAAU,2BACV,QAASL,EACT,SAAUD,CAAA,EAETL,EAAI,WAAW,MAAM,6BAA6B,CAAA,CAEvD,EAEA,EAAC,MAAA,CAAI,UAAU,6BAAA,EACb,EAAC,MAAA,CAAI,UAAU,yBAAA,EACb,EAAC,OAAA,CAAK,UAAU,2BAAA,EACbA,EAAI,WAAW,MAAM,4BAA4B,CACpD,EACA,EAAC,OAAA,CAAK,UAAU,2BAAA,EACbrB,EAAKvB,EAAM,KAAK,EAAE,IAAEmD,EAAU,MAAIC,CACrC,CACF,EACA,EAAC,MAAA,CAAI,UAAU,yBAAA,EACb,EAAC,OAAA,CAAK,UAAU,2BAAA,EACbR,EAAI,WAAW,MAAM,wBAAwB,CAChD,EACA,EAAC,OAAA,CAAK,UAAU,2BAAA,EACbrB,EAAKvB,EAAM,KAAK,EAAE,IAAEqD,CACvB,CACF,CACF,CACF,CACF,CAEJ,CAEQ,aAAanD,EAA6C,CAChE,OAAKA,GACE0B,EAAQ1B,EAAU,WAAW,GAAKH,EAAS,UACpD,CAEQ,aAAaG,EAA6C,CAChE,OAAKA,GACE0B,EAAQ1B,EAAU,WAAW,GAAKH,EAAS,UACpD,CAEQ,OAAOG,EAA6C,CAC1D,OAAKA,GACE0B,EAAQ1B,EAAU,KAAK,GAAKH,EAAS,GAC9C,CACF,CC7EA,MAAqByD,WAAqBhB,CAA6B,CACrE,MAAyB,CACvB,KAAM,CACJ,eAAAiB,EACA,iBAAAhB,EACA,uBAAAiB,CAAA,EACE,KAAK,MAEHC,EAAS,KAAK,UAAUlB,CAAgB,EAE9C,OACEmB,EAAC,MAAA,CAAI,UAAU,+BAAA,IACZ,MAAA,CAAI,UAAU,0BAAA,EACbA,EAAC,OAAI,UAAU,8BAAA,EACbA,EAAC,OAAA,CAAK,UAAU,sBAAA,EACbhB,EAAI,WAAW,MAAM,2BAA4B,CAAE,OAAAe,EAAQ,IAC3D,OAAA,CAAK,UAAU,2BAA0B,GAAC,CAC7C,CACF,EAEAC,EAAC,MAAA,CAAI,UAAU,6BAAA,EACbA,EAAC,QAAA,CACC,KAAK,OACL,UAAU,uBACV,YAAahB,EAAI,WAAW,MAAM,sCAAsC,EACxE,MAAOa,EACP,QAAUH,GAAaI,EAAwBJ,EAAE,OAA4B,KAAK,CAAA,CAAA,EAEpFM,EAAC,SAAA,CACC,UAAU,6BACV,QAAS,IAAM,KAAK,mBAAA,CAAmB,EAEtCrC,EAAKvB,EAAM,KAAK,CAAA,CAErB,CACF,CACF,CAEJ,CAEQ,UAAUE,EAA6C,CAC7D,OAAKA,GACE0B,EAAQ1B,EAAU,QAAQ,GAAK,EACxC,CAEA,MAAc,oBAAoC,CAChD,KAAM,CAAE,uBAAAwD,GAA2B,KAAK,MAExC,GAAI,CACF,GAAI,UAAU,WAAa,UAAU,UAAU,SAAU,CACvD,MAAMG,EAAO,MAAM,UAAU,UAAU,SAAA,EACvCH,EAAuBG,EAAK,MAAM,EAClCD,EAAE,OAAA,CACJ,CACF,OAASE,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EACrDlB,EAAI,OAAO,KAAK,CACd,KAAM,QACN,YAAa,EAAA,EACZA,EAAI,WAAW,MAAM,6BAA6B,CAAC,CACxD,CACF,CACF,CCpEA,MAAqBmB,WAAqBvB,CAA6B,CACrE,MAAyB,CACvB,KAAM,CACJ,QAAAwB,EACA,gBAAAC,CAAA,EACE,KAAK,MAET,SACG,MAAA,CAAI,UAAU,+BAAA,EACb,EAAC,OAAI,UAAU,0BAAA,EACb,EAAC,OAAA,CAAK,UAAU,sBAAA,EACbrB,EAAI,WAAW,MAAM,0BAA0B,CAClD,EACA,EAAC,WAAA,CACC,UAAU,0BACV,YAAaA,EAAI,WAAW,MAAM,sCAAsC,EACxE,MAAOoB,EACP,KAAM,EACN,UAAW,IACX,QAAUV,GAAaW,EAAiBX,EAAE,OAA+B,KAAK,CAAA,CAAA,EAEhF,EAAC,MAAA,CAAI,UAAU,6BACZV,EAAI,WAAW,MAAM,iCAAiC,EAAE,KAAGoB,EAAQ,OAAO,OAC7E,CACF,CACF,CAEJ,CACF,CCpBA,MAAqBE,WAAqB1B,CAA6B,CACrE,MAAyB,CACvB,KAAM,CACJ,OAAAQ,EACA,iBAAAP,EACA,WAAA0B,EACA,UAAAC,EACA,SAAAC,CAAA,EACE,KAAK,MAEHC,EAAgB,WAAWtB,CAAM,GAAK,EACtCK,EAAM,KAAK,OAAOZ,CAAgB,EAClC8B,EAAc,KAAK,IAAI,EAAGD,EAAgBjB,CAAG,EAC7CM,EAAS,KAAK,UAAUlB,CAAgB,EAE9C,OACE,EAAC,MAAA,CAAI,UAAU,8BAAA,EACb,EAACc,EAAA,CACC,UAAU,8BACV,QAASY,EACT,SAAU,CAACC,EACX,QAASC,CAAA,EAERzB,EAAI,WAAW,MAAM,yBAAyB,CAAA,EAGhD0B,EAAgB,GACf,EAAC,MAAA,CAAI,UAAU,4BAAA,EACZ1B,EAAI,WAAW,MAAM,2BAA4B,CAChD,OAAQ2B,EAAY,QAAQxE,EAAS,iBAAiB,EACtD,OAAA4D,CAAA,CACD,CACH,CAEJ,CAEJ,CAEQ,OAAOzD,EAA6C,CAC1D,OAAKA,GACE0B,EAAQ1B,EAAU,KAAK,GAAKH,EAAS,GAC9C,CAEQ,UAAUG,EAA6C,CAC7D,OAAKA,GACE0B,EAAQ1B,EAAU,QAAQ,GAAK,EACxC,CACF,CC5CA,MAAqBsE,WAAuBhC,CAA+B,CACzE,MAAyB,CACvB,KAAM,CACJ,UAAAR,EACA,SAAAyC,EACA,eAAAxB,EACA,WAAAkB,EACA,iBAAAO,EACA,gBAAAxB,EACA,SAAAmB,CAAA,EACE,KAAK,MAET,MAAO,CACL,EAAC9B,GAAA,CACC,UAAAP,EACA,iBAAkByC,EAAS,iBAC3B,iBAAmBvE,GAAkBwE,EAAiB,CAAE,iBAAkBxE,EAAU,EACpF,eAAgB,IAAMwE,EAAiB,CAAE,OAAQ,GAAI,CAAA,CAAA,EAGvD,EAAC3B,GAAA,CACC,OAAQ0B,EAAS,OACjB,iBAAkBA,EAAS,iBAC3B,eAAAxB,EACA,eAAiBD,GAAgB0B,EAAiB,CAAE,OAAA1B,EAAQ,EAC5D,gBAAAE,CAAA,CAAA,EAGF,EAACM,GAAA,CACC,eAAgBiB,EAAS,eACzB,iBAAkBA,EAAS,iBAC3B,uBAAyBhB,GAAwBiB,EAAiB,CAAE,eAAAjB,EAAgB,CAAA,CAAA,EAGtF,EAACM,GAAA,CACC,QAASU,EAAS,QAClB,gBAAkBT,GAAiBU,EAAiB,CAAE,QAAAV,EAAS,CAAA,CAAA,EAGjE,EAACE,GAAA,CACC,OAAQO,EAAS,OACjB,iBAAkBA,EAAS,iBAC3B,eAAgBA,EAAS,eACzB,WAAAN,EACA,UAAW,KAAK,UAAA,EAChB,SAAAE,CAAA,CAAA,CACF,CAEJ,CAEQ,WAAqB,CAC3B,KAAM,CAAE,SAAAI,EAAU,WAAAN,CAAA,EAAe,KAAK,MAChC,CAAE,iBAAA1B,EAAkB,OAAAO,EAAQ,eAAAS,CAAA,EAAmBgB,EAErD,MAAO,CAAC,EACNhC,GACAO,GACAS,GACA,CAACU,GACD,WAAWnB,CAAM,EAAI,EAEzB,CACF,CCvEA,MAAqB2B,WAAoBnC,CAA4B,CACnE,MAAyB,CACvB,KAAM,CAAE,OAAAoC,EAAQ,UAAAvD,EAAY,EAAA,EAAO,KAAK,MAElCwD,EAAc,KAAK,eAAeD,CAAM,EACxCE,EAAc,KAAK,eAAeF,CAAM,EAE9C,OACE,EAAC,OAAI,UAAW,gCAAgCC,CAAW,IAAIxD,CAAS,IACrEyD,CACH,CAEJ,CAEQ,eAAeF,EAA4B,CACjD,OAAO9E,EAAiB8E,CAAM,GAAK9E,EAAiB,OACtD,CAEQ,eAAe8E,EAA4B,CACjD,OAAOhC,EAAI,WAAW,MAAM,sBAAsBgC,CAAM,EAAE,EAAE,SAAA,CAC9D,CACF,CCrBA,MAAqBG,WAAmBvC,CAA2B,CACjE,MAAyB,CACvB,KAAM,CAAE,SAAAwC,EAAU,MAAAC,EAAO,YAAAC,EAAa,UAAA7D,EAAY,EAAA,EAAO,KAAK,MAE9D,OACE,EAAC,MAAA,CAAI,UAAW,6BAA6BA,CAAS,IACpD,EAAC,MAAA,CAAI,UAAU,0BAAA,EACZE,EAAKyD,CAAQ,CAChB,EACA,EAAC,KAAA,CAAG,UAAU,2BAAA,EACXC,CACH,EACA,EAAC,IAAA,CAAE,UAAU,iCAAA,EACVC,CACH,CACF,CAEJ,CACF,CCvBA,SAAwBC,GAAaC,EAAuC,CAC1E,KAAM,CAAE,UAAA/D,EAAY,EAAA,EAAO+D,EAE3B,OACE,EAAC,OAAI,UAAW,0BAA0B/D,CAAS,IACjD,EAACgE,MAAiB,CACpB,CAEJ,CC8BA,MAAqBC,UAA2B9C,CAAmC,CACjF,KAAKpB,EAAiE,CACpE,KAAM,CAAE,aAAAmE,EAAc,UAAAvD,EAAW,QAAAwD,EAAS,KAAAC,CAAA,EAASrE,EAAM,MAEzD,OAAIoE,EACK,EAACL,GAAA,CAAa,UAAW,GAAGM,CAAI,kBAAmB,EAGxD,CAACF,GAAgBA,EAAa,SAAW,EAEzC,EAACR,GAAA,CACC,SAAUU,IAAS,QAAU,iBAAmB,eAChD,MAAO7C,EAAI,WAAW,MAAM,GAAG6C,CAAI,4BAA4B,EAC/D,YAAa7C,EAAI,WAAW,MAAM,GAAG6C,CAAI,kCAAkC,EAC3E,UAAW,GAAGA,CAAI,eAAA,CAAA,EAMtB,EAAC,MAAA,CAAI,UAAW,GAAGA,CAAI,SAAA,EACrB,EAAC,MAAA,CAAI,UAAW,GAAGA,CAAI,gBAAA,EACrB,EAAC,UAAI7C,EAAI,WAAW,MAAM,GAAG6C,CAAI,sBAAsB,CAAE,EACzD,EAAC,OAAA,CAAK,UAAW,GAAGA,CAAI,eAAA,EAAkBF,EAAa,OAAO,IAAE3C,EAAI,WAAW,MAAM,GAAG6C,CAAI,6BAA6B,CAAE,CAC7H,EAEA,EAAC,MAAA,CAAI,UAAW,GAAGA,CAAI,cAAA,EACpBF,EAAa,IAAIG,GAAe,KAAK,kBAAkBA,EAA4B1D,EAAWyD,CAAI,CAAC,CACtG,CACF,CAEJ,CAEQ,kBAAkBC,EAA0B1D,EAAkByD,EAAgC,CACpG,MAAME,EAAgB,KAAK,iBAAiBD,CAAW,EACjDxF,EAAW,KAAK,YAAYwF,EAAa1D,CAAS,EAClDgB,EAASpB,EAAQ8D,EAAa,QAAQ,GAAK,EAC3Cd,EAAShD,EAAQ8D,EAAa,QAAQ,GAAK,UAC3CE,EAAchE,EAAQ8D,EAAa,aAAa,GAAK,KAAK,eAAed,CAAM,EAC/EiB,EAAYxD,EAAgBqD,EAAa,WAAW,EAE1D,OAAID,IAAS,UAEJ,KAAK,oBAAoBC,EAAaxF,EAAU8C,EAAQ4B,EAAQgB,EAAaC,EAAWF,CAAa,EAErG,KAAK,4BAA4BD,EAAaxF,EAAU8C,EAAQ4B,EAAQiB,EAAWF,CAAa,CAE3G,CAEQ,4BACND,EACAxF,EACA8C,EACA4B,EACAiB,EACAF,EACkB,CAClB,MAAMlC,EAAiB7B,EAAQ8D,EAAa,gBAAgB,GAAK,GAEjE,OACE,EAAC,MAAA,CAAI,IAAKC,EAAe,UAAU,8BACjC,EAAC,MAAA,CAAI,UAAU,8BAAA,EACb,EAAC,MAAA,CAAI,UAAU,gCAAA,EACb,EAAC,MAAA,CAAI,UAAU,6BAAA,EACb,EAACxE,GAAa,SAAAjB,EAAoB,KAAK,OAAA,CAAQ,CACjD,EACA,EAAC,OAAI,UAAU,4BAAA,EACb,EAAC,MAAA,CAAI,UAAU,oCAAA,EACZ,KAAK,gBAAgBA,CAAQ,CAChC,EACA,EAAC,MAAA,CAAI,UAAU,4BAAA,EACZ2F,EAAU,mBAAA,EAAqB,IAAEA,EAAU,mBAAA,CAC9C,CACF,CACF,EACA,EAAClB,GAAA,CAAY,OAAAC,CAAA,CAAuB,CACtC,EACA,EAAC,MAAA,CAAI,UAAU,iCACb,EAAC,OAAI,UAAU,8BAAA,EACb,EAAC,OAAA,CAAK,UAAU,6BAAA,EACbhC,EAAI,WAAW,MAAM,4BAA4B,EAAE,GACtD,IACC,OAAA,CAAK,UAAU,6BAAA,EACbI,EAAO,IAAE,KAAK,kBAAkB9C,CAAQ,CAC3C,CACF,EACA,EAAC,MAAA,CAAI,UAAU,+BAAA,EACb,EAAC,OAAA,CAAK,UAAU,+BACb0C,EAAI,WAAW,MAAM,6BAA6B,EAAE,GACvD,EACA,EAAC,OAAA,CAAK,UAAU,6BAAA,EACba,CACH,CACF,CACF,CACF,CAEJ,CAEQ,oBACNiC,EACAxF,EACA8C,EACA4B,EACAgB,EACAC,EACAF,EACkB,CAClB,MAAMG,EAAkBlE,EAAQ8D,EAAa,iBAAiB,EACxDK,EAAWnE,EAAQ8D,EAAa,UAAU,EAC1CM,EAAc3D,EAAgBqD,EAAa,aAAa,EACxDO,EAAgBrE,EAAQ8D,EAAa,eAAe,EACpDQ,EAActE,EAAQ8D,EAAa,aAAa,EAChDS,EAAc9D,EAAgBqD,EAAa,aAAa,EACxDU,EAAaxE,EAAQ8D,EAAa,YAAY,EAC9CW,EAAiBzE,EAAQ8D,EAAa,gBAAgB,EAE5D,OACE,EAAC,MAAA,CAAI,IAAKC,EAAe,UAAU,oBAAA,EACjC,EAAC,MAAA,CAAI,UAAU,0BAAA,EACb,EAAC,MAAA,CAAI,UAAU,4BAAA,EACZzF,GACC,EAAA,IAAA,KACE,EAAC,MAAA,CAAI,UAAU,wBAAA,EACZ,KAAK,mBAAmBA,CAAQ,CACnC,EACA,EAAC,MAAA,CAAI,UAAU,0BACb,EAAC,OAAA,CAAK,UAAU,4BAAA,EACb0B,EAAQ1B,EAAU,QAAQ,EAAE,IAAE0B,EAAQ1B,EAAU,SAAS,GAAK,IAAI0B,EAAQ1B,EAAU,SAAS,CAAC,GACjG,EACA,EAAC,OAAA,CAAK,UAAU,wBAAA,EAAyB,gBAEzC,CACF,CACF,CAEJ,EAEA,EAAC,MAAA,CAAI,UAAU,4BACb,EAAC,OAAA,CAAK,UAAU,+BAAA,EAAgC,IAC5C8C,EAAO,IAAE9C,EAAW0B,EAAQ1B,EAAU,QAAQ,EAAI,EACtD,EACA,EAAC,MAAA,CAAI,UAAW,mCAAmC0F,CAAW,EAAA,EAC3D,KAAK,cAAchB,CAAM,EACzB,KAAK,cAAcA,CAAM,CAC5B,CACF,CACF,EAEA,EAAC,OAAI,UAAU,2BAAA,EACb,EAAC,MAAA,CAAI,UAAU,wBAAA,EACb,EAAC,OAAA,CAAK,UAAU,wBAAA,EAAyB,cAC3BiB,EAAYS,EAAUT,CAAS,EAAI,cACjD,EAECG,GACC,EAAC,OAAA,CAAK,UAAU,+BAAA,EAAgC,iBAC/BA,EAAY,mBAAA,EAAqB,IAAEA,EAAY,mBAAA,CAChE,CAEJ,EAEA,EAAC,OAAI,UAAU,wBAAA,EACb,EAAC,MAAA,CAAI,UAAU,uBAAA,EACb,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA0B,mBAAiB,EAC3D,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA2BF,CAAgB,CAC7D,EAECC,GACC,EAAC,MAAA,CAAI,UAAU,yBACb,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA0B,YAAU,EACpD,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA2BA,CAAS,CACtD,EAGDG,GACC,EAAC,MAAA,CAAI,UAAU,uBAAA,EACb,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA0B,UAAQ,EAClD,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA2BA,CAAY,CACzD,EAGDD,GACC,EAAC,MAAA,CAAI,UAAU,uBAAA,EACb,EAAC,OAAA,CAAK,UAAU,2BAA0B,aAAW,EACrD,EAAC,IAAA,CAAE,KAAMA,EAAe,OAAO,SAAS,IAAI,sBAAsB,UAAU,wBAAA,EAAyB,mBAClF1E,EAAK,0BAA0B,CAClD,CACF,CAEJ,EAEC4E,GACC,EAAC,MAAA,CAAI,UAAU,6BAAA,EACb,EAAC,MAAA,CAAI,UAAU,iCAAA,EAAkC,cACnCG,EAAUH,CAAW,CACnC,EAECE,GAAkBA,IAAmBrD,GACpC,EAAC,MAAA,CAAI,UAAU,4BAAA,EAA6B,oBACxBqD,EAAe,IAAEnG,EAAW0B,EAAQ1B,EAAU,QAAQ,EAAI,EAC9E,EAGDkG,KACE,MAAA,CAAI,UAAU,yBAAA,EACb,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA0B,cAAY,EACtD,EAAC,OAAA,CAAK,UAAU,yBAAA,EAA2BA,CAAW,CACxD,CAEJ,CAEJ,CACF,CAEJ,CAGQ,iBAAiBV,EAAkC,CACzD,OAAI,OAAOA,EAAY,IAAO,WACrB,eAAeA,EAAY,GAAA,CAAI,GAEjC,eAAe5D,EAAY4D,CAAW,GAAK,KAAK,QAAQ,EACjE,CAEQ,YAAYA,EAA0B1D,EAAuB,CACnE,MAAMC,EAAa,KAAK,cAAcyD,CAAW,EACjD,OAAO3D,GAAiBC,EAAWC,CAAU,CAC/C,CAEQ,cAAcyD,EAA2C,CAC/D,OAAO9D,EAAQ8D,EAAa,YAAY,GAChCA,EAAY,eAAe,UAAU,MAAM,IAAO,EAC5D,CAEQ,gBAAgBxF,EAAuB,CAC7C,OAAKA,GACE0B,EAAQ1B,EAAU,MAAM,GAAK,kBACtC,CAEQ,kBAAkBA,EAAuB,CAC/C,OAAKA,GACE0B,EAAQ1B,EAAU,QAAQ,GAAK,EACxC,CAEQ,eAAe0E,EAAwB,CAC7C,OAAQA,EAAA,CACN,IAAK,UACH,MAAO,UACT,IAAK,WACL,IAAK,YACL,IAAK,YACH,MAAO,UACT,IAAK,WACL,IAAK,SACL,IAAK,YACH,MAAO,SACT,QACE,MAAO,WAAA,CAEb,CAEQ,mBAAmB1E,EAAiC,CAC1D,MAAMqG,EAAU3E,EAAQ1B,EAAU,SAAS,EACrCsG,EAAY5E,EAAQ1B,EAAU,WAAW,EACzCyD,EAAS/B,EAAQ1B,EAAU,QAAQ,EAEzC,OAAIqG,IACM,MAAA,CAAI,IAAKA,EAAS,IAAK5C,EAAQ,UAAU,6BAA6B,EAIvEpC,EADLiF,GAKQ,cAJW,CAKzB,CAEQ,cAAc5B,EAAkC,CACtD,OAAQA,EAAA,CACN,IAAK,UACH,OAAOrD,EAAK,cAAc,EAC5B,IAAK,WACL,IAAK,YACH,OAAOA,EAAK,qBAAqB,EACnC,IAAK,YACH,OAAOA,EAAK,qBAAqB,EACnC,IAAK,WACL,IAAK,SACH,OAAOA,EAAK,qBAAqB,EACnC,IAAK,YACH,OAAOA,EAAK,YAAY,EAC1B,QACE,OAAOA,EAAK,wBAAwB,CAAA,CAE1C,CAEQ,cAAcqD,EAAwB,CAC5C,OAAQA,EAAA,CACN,IAAK,UACH,MAAO,UACT,IAAK,WACH,MAAO,WACT,IAAK,YACH,MAAO,YACT,IAAK,YACH,MAAO,YACT,IAAK,WACH,MAAO,WACT,IAAK,SACH,MAAO,SACT,IAAK,YACH,MAAO,YACT,QACE,MAAO,SAAA,CAEb,CAEF,CCvVA,MAAqB6B,WAAgCjE,CAAsE,CAA3H,aAAA,CAAA,MAAA,GAAA,SAAA,EAoDE,KAAQ,mBAAsB,GAAkB,CAC9C,MAAMkE,EAAU,KAAK,QACjBA,GAAW,CAACA,EAAQ,SAAS,EAAE,MAAc,IAC/C,KAAK,MAAM,aAAe,GAC1B9C,EAAE,OAAA,EAEN,CAAA,CAzDA,OAAOxC,EAAkF,CACvF,MAAM,OAAOA,CAAK,EAClB,KAAK,MAAQ,CACX,aAAc,EAAA,CAElB,CAEA,MAAyB,CACvB,KAAM,CAAE,iBAAAqB,GAAqB,KAAK,MAC5B,CAAE,aAAAC,GAAiB,KAAK,MAE9B,OACEkB,EAAC,MAAA,CAAI,UAAU,4BAAA,EACbA,EAAC,MAAA,CAAI,UAAU,iBAAA,EAAmBhB,EAAI,WAAW,MAAM,oCAAoC,CAAE,EAC7FgB,EAAC,MAAA,CACC,UAAU,6BACV,QAAS,IAAM,KAAK,eAAA,CAAe,IAElC,MAAA,CAAI,UAAU,4BAAA,EACbA,EAAC,OAAI,UAAU,wBAAA,EACbA,EAAC,MAAA,CAAI,UAAU,wBAAA,EACZ,KAAK,mBAAmBnB,CAAgB,CAC3C,EACAmB,EAAC,MAAA,CAAI,UAAU,6BACbA,EAAC,MAAA,CAAI,UAAU,wBAAA,EACZ,KAAK,uBAAuBnB,CAAgB,CAC/C,EACCA,GAAoB,KAAK,sBAAsBA,CAAgB,CAClE,CACF,CACF,EACClB,EAAKvB,EAAM,aAAc,CAAE,UAAW,yBAA0B,CAAA,EAGlE0C,GAAgB,KAAK,wBACxB,CAEJ,CAEA,SAAStB,EAAyB,CAChC,MAAM,SAASA,CAAK,EAGpB,SAAS,iBAAiB,QAAS,KAAK,kBAAkB,CAC5D,CAEA,SAASA,EAAyB,CAChC,MAAM,SAASA,CAAK,EACpB,SAAS,oBAAoB,QAAS,KAAK,kBAAkB,CAC/D,CAUQ,gBAAuB,CAC7B,KAAK,MAAM,aAAe,CAAC,KAAK,MAAM,YACxC,CAEQ,uBAAuBlB,EAA0C,CACvE,GAAI,CAACA,EACH,OAAO0C,EAAI,WAAW,MAAM,qCAAqC,EAAE,SAAA,EAGrE,MAAM+D,EAAO/E,EAAQ1B,EAAU,MAAM,GAAK,GACpC0G,EAAUhF,EAAQ1B,EAAU,SAAS,EAE3C,OAAI0G,EACK,GAAGD,CAAI,KAAKC,CAAO,IAGrBD,CACT,CAEQ,mBAAmBzG,EAAoD,CAC7E,GAAI,CAACA,EACH,OAAOqB,EAAK,cAAc,EAG5B,MAAME,EAAWxB,EAAoBC,CAAQ,EAC7C,OAAOY,EAAWW,EAAU,6BAA6B,CAC3D,CAEQ,yBAAyBkC,EAAgB3B,EAAgD,CAE/F,MAAM6E,EAAqB7E,EAAU,KAAK9B,GAAY0B,EAAQ1B,EAAU,QAAQ,IAAMyD,CAAM,EAE5F,GAAIkD,EAAoB,CACtB,MAAMC,EAAkBpG,GAAgBmG,CAAkB,EAC1D,OAAO/F,EAAWgG,EAAiB,wBAAwB,CAC7D,CAEA,OAAOvF,EAAK,cAAc,CAC5B,CAEQ,sBAAsBrB,EAA6C,CACzE,MAAMiD,EAAYvB,EAAQ1B,EAAU,WAAW,EACzCmD,EAAMzB,EAAQ1B,EAAU,KAAK,EAC7ByD,EAAS/B,EAAQ1B,EAAU,QAAQ,EAEnC6G,EAAkB,CAAA,EAgBxB,OAdI5D,GAAaA,EAAY,GAC3B4D,EAAM,KAAKnE,EAAI,WAAW,MAAM,uCAAwC,CACtE,OAAQO,EACR,OAAAQ,CAAA,CACD,EAAE,SAAA,CAAU,EAGXN,GAAOA,EAAM,GACf0D,EAAM,KAAKnE,EAAI,WAAW,MAAM,gCAAiC,CAC/D,IAAAS,EACA,OAAAM,CAAA,CACD,EAAE,SAAA,CAAU,EAGXoD,EAAM,OAAS,IAEd,MAAA,CAAI,UAAU,6BACZA,EAAM,KAAK,KAAK,CACnB,EAIG,IACT,CAEQ,wBAA2C,CACjD,KAAM,CAAE,UAAA/E,GAAc,KAAK,MAGrBgF,EAAmB,KAAK,yBAAyBhF,CAAS,EAEhE,OAAI,OAAO,KAAKgF,CAAgB,EAAE,SAAW,EAEzCpD,EAAC,MAAA,CAAI,UAAU,wBAAA,EACbA,EAAC,MAAA,CAAI,UAAU,yCAAA,EACZhB,EAAI,WAAW,MAAM,kCAAkC,CAC1D,CACF,EAKFgB,EAAC,MAAA,CAAI,UAAU,wBAAA,EACZ,OAAO,QAAQoD,CAAgB,EAAE,QAAQ,CAAC,CAACC,EAAUC,CAAiB,IAAM,CAE3EtD,EAAC,MAAA,CAAI,IAAK,GAAGqD,CAAQ,UAAW,UAAU,0BAAA,EACxCrD,EAAC,MAAA,CAAI,UAAU,0BAAA,EACbA,EAAC,MAAA,CAAI,UAAU,wBAAA,EACZ,KAAK,yBAAyBqD,EAAUjF,CAAS,CACpD,EACA4B,EAAC,OAAA,CAAK,UAAU,wBAAA,EAA0BqD,CAAS,CACrD,CACF,EAEA,GAAGC,EAAkB,IAAIhH,GACvB0D,EAAC,MAAA,CACC,IAAK1D,EAAS,GAAA,EACd,UAAU,yBACV,QAAS,IAAM,KAAK,eAAeA,CAAQ,CAAA,IAE1C,MAAA,CAAI,UAAU,0BACZ,KAAK,mBAAmBA,CAAQ,CACnC,IACC,MAAA,CAAI,UAAU,wBAAA,EACb0D,EAAC,OAAI,UAAU,wBAAA,EACZ,KAAK,uBAAuB1D,CAAQ,CACvC,EACC,KAAK,sBAAsBA,CAAQ,CACtC,CAAA,CAEH,CAAA,CACF,CACH,CAEJ,CAEQ,yBAAyB8B,EAAyE,CACxG,MAAMmF,EAAqD,CAAA,EAO3D,OAJwBnF,GAAa,CAAA,GAAI,OAAO9B,GAC9CA,GAAY0B,EAAQ1B,EAAU,UAAU,CAAA,EAG3B,QAAQA,GAAY,CACjC,MAAMyD,EAAS/B,EAAQ1B,EAAU,QAAQ,EACpCiH,EAAQxD,CAAM,IACjBwD,EAAQxD,CAAM,EAAI,CAAA,GAEpBwD,EAAQxD,CAAM,EAAE,KAAKzD,CAAQ,CAC/B,CAAC,EAGD,OAAO,KAAKiH,CAAO,EAAE,QAAQF,GAAY,CACvCE,EAAQF,CAAQ,EAAE,KAAK,CAACG,EAAGC,IAAM,CAC/B,MAAMC,EAAW1F,EAAQwF,EAAG,SAAS,GAAK,GACpCG,EAAW3F,EAAQyF,EAAG,SAAS,GAAK,GAC1C,OAAOC,EAAS,cAAcC,CAAQ,CACxC,CAAC,CACH,CAAC,EAEMJ,CACT,CAEQ,eAAejH,EAAiC,CACtD,KAAM,CAAE,iBAAA2C,GAAqB,KAAK,MAElCA,EAAiB3C,CAAQ,EACzB,KAAK,MAAM,aAAe,EAC5B,CACF,CCnOA,MAAqBsH,WAAuBhF,CAA+B,CACzE,KAAKpB,EAA2C,CAC9C,KAAM,CAAE,QAAAqG,EAAS,QAAAjC,EAAS,OAAAkC,CAAA,EAAWtG,EAAM,MAE3C,OACE,EAAC,MAAA,CAAI,UAAU,gBAAA,EACZoE,EACC,EAAC,MAAA,CAAI,UAAU,4BACZ,IAAA,CAAE,UAAU,wBAAA,CAAyB,IACrC,OAAA,KAAK,uBAAqB,CAC7B,EACEiC,EACF,EAAC,MAAA,CAAI,UAAU,4BACZ,MAAA,CAAI,UAAU,yBAAyB,MAAOA,GAC5CA,CACH,EACA,EAAC,MAAA,CAAI,UAAU,wBAAA,EACb,EAAC,SAAA,CACC,UAAU,yBACV,QAASC,EACT,MAAM,cAAA,EAELnG,EAAK,aAAa,CAAA,CAEvB,CACF,EAEA,EAAC,MAAA,CAAI,UAAU,8BACb,EAAC,OAAA,KAAK,sBAAoB,CAC5B,CAEJ,CAEJ,CACF,CClCA,MAAqBoG,WAAqBnF,CAA6B,CACrE,KAAKpB,EAAyC,CAC5C,KAAM,CAAE,SAAAlB,EAAU,QAAAsF,EAAS,KAAAlE,EAAO,GAAA,EAAQF,EAAM,MAEhD,OACE,EAAC,MAAA,CAAI,UAAU,eAAe,MAAO,CAAE,MAAO,GAAGE,CAAI,KAAM,OAAQ,GAAGA,CAAI,IAAA,CAAK,EAC5EkE,EACC,EAAC,MAAA,CAAI,UAAU,sBAAA,EACb,EAAC,IAAA,CAAE,UAAU,wBAAA,CAAyB,CACxC,EACEtF,GAAYA,EAAS,iBACvB,EAAC,MAAA,CACC,IAAKA,EAAS,eAAA,EACd,IAAK,GAAGA,EAAS,KAAA,CAAM,SACvB,UAAU,qBACV,QAAQ,2EAAA,CAAA,EAGV,EAAC,MAAA,CAAI,UAAU,4BACb,EAAC,IAAA,CAAE,UAAU,cAAA,CAAe,EAC5B,EAAC,MAAA,KAAI,UAAQ,CACf,EAEF,EAAC,MAAA,CAAI,UAAU,qBAAqB,MAAO,CAAE,QAAS,OAAO,EAC3D,EAAC,IAAA,CAAE,UAAU,8BAA8B,EAC3C,EAAC,MAAA,KAAI,mBAAiB,CACxB,CACF,CAEJ,CACF,CCLA,MAAqB0H,WAA0BpF,CAA0D,CACvG,OAAOpB,EAA8C,CACnD,MAAM,OAAOA,CAAK,EAGlB,MAAMyG,MAAU,KACVC,EAAgB,IAAI,KAAKD,EAAI,UAAYA,EAAI,kBAAA,EAAsB,GAAK,EAC3E,YAAA,EACA,MAAM,EAAG,EAAE,EAEd,KAAK,MAAQ,CACX,gBAAiBE,EAAO,EAAE,EAC1B,SAAUA,EAAO,EAAE,EACnB,OAAQA,EAAO,EAAE,EACjB,YAAaA,EAAOD,CAAa,EACjC,cAAeC,EAAO,EAAE,EACxB,YAAaA,EAAO,EAAE,CAAA,CAE1B,CAEA,KAAK3G,EAAgE,CACnE,KAAM,CAAE,SAAAlB,EAAU,WAAAiE,CAAA,EAAe/C,EAAM,MACjC+B,EAAYvB,EAAQ1B,EAAU,WAAW,GAAK,EAC9CkD,EAAYxB,EAAQ1B,EAAU,WAAW,EACzCyD,EAAS/B,EAAQ1B,EAAU,QAAQ,GAAK,GAE9C,OACE,EAAC,MAAA,CAAI,UAAU,mBAAA,EACb,EAAC,MAAA,CAAI,UAAU,0BAAA,EACb,EAAC,MAAA,CAAI,UAAU,yBAAA,IACZ,IAAA,CAAE,UAAU,oBAAA,CAAqB,EACjC0C,EAAI,WAAW,MAAM,uCAAuC,CAC/D,EACA,EAAC,MAAA,CAAI,UAAU,gCAAA,EACZA,EAAI,WAAW,MAAM,+CAAgD,CACpE,SAAUhB,EAAQ1B,EAAU,MAAM,EAClC,OAAAyD,CAAA,CACD,CACH,CACF,IAEC,OAAA,CAAK,SAAU,KAAK,aAAa,KAAK,IAAI,EAAG,UAAU,0BAEtD,EAAC,MAAA,CAAI,UAAU,yBAAA,EACb,EAAC,QAAA,CAAM,UAAU,yBAAA,EACdf,EAAI,WAAW,MAAM,6CAA6C,IAClE,OAAA,CAAK,UAAU,4BAAA,EAA6B,GAAC,CAChD,EACA,EAAC,QAAA,CACC,KAAK,OACL,UAAU,0BACV,YAAaA,EAAI,WAAW,MAAM,yDAAyD,EAC3F,MAAO,KAAK,MAAM,gBAAA,EAClB,QAASoF,EAAS,QAAS,KAAK,MAAM,eAAe,EACrD,SAAQ,GACR,SAAU7D,CAAA,CAAA,EAEZ,EAAC,MAAA,CAAI,UAAU,wBAAA,EACZvB,EAAI,WAAW,MAAM,kDAAkD,CAC1E,CACF,EAGA,EAAC,MAAA,CAAI,UAAU,2BACb,EAAC,QAAA,CAAM,UAAU,2BACdA,EAAI,WAAW,MAAM,sCAAsC,IAC3D,OAAA,CAAK,UAAU,4BAAA,EAA6B,IACzCA,EAAI,WAAW,MAAM,qCAAqC,EAAE,GAChE,CACF,EACA,EAAC,QAAA,CACC,KAAK,OACL,UAAU,0BACV,YAAaA,EAAI,WAAW,MAAM,kDAAkD,EACpF,MAAO,KAAK,MAAM,SAAA,EAClB,QAASoF,EAAS,QAAS,KAAK,MAAM,QAAQ,EAC9C,SAAU7D,CAAA,CAAA,CAEd,EAGA,EAAC,MAAA,CAAI,UAAU,2BACb,EAAC,QAAA,CAAM,UAAU,yBAAA,EACdvB,EAAI,WAAW,MAAM,mCAAmC,EAAE,KAAGe,EAAO,IACrE,EAAC,QAAK,UAAU,4BAAA,EAA6B,GAAC,CAChD,EACA,EAAC,QAAA,CACC,KAAK,SACL,KAAK,OACL,IAAKR,EACL,IAAKC,EACL,UAAU,0BACV,YAAaR,EAAI,WAAW,MAAM,+CAA+C,EACjF,MAAO,KAAK,MAAM,OAAA,EAClB,QAASoF,EAAS,QAAS,KAAK,MAAM,MAAM,EAC5C,SAAQ,GACR,SAAU7D,CAAA,CAAA,EAEZ,EAAC,MAAA,CAAI,UAAU,4BACZhB,EAAY,GACX,EAAC,OAAA,CAAK,UAAU,yBAAA,EACbP,EAAI,WAAW,MAAM,wCAAyC,CAC7D,OAAQO,EACR,OAAAQ,CAAA,CACD,CACH,EAEDP,GACC,EAAC,OAAA,CAAK,UAAU,yBAAA,EACbR,EAAI,WAAW,MAAM,wCAAyC,CAC7D,OAAQQ,EACR,OAAAO,CAAA,CACD,CACH,CAEJ,CACF,IAGC,MAAA,CAAI,UAAU,yBAAA,EACb,EAAC,QAAA,CAAM,UAAU,2BACdf,EAAI,WAAW,MAAM,yCAAyC,EAC/D,EAAC,QAAK,UAAU,4BAAA,EAA6B,GAAC,CAChD,EACA,EAAC,QAAA,CACC,KAAK,iBACL,UAAU,0BACV,MAAO,KAAK,MAAM,YAAA,EAClB,QAASoF,EAAS,QAAS,KAAK,MAAM,WAAW,EACjD,SAAQ,GACR,SAAU7D,CAAA,CAAA,EAEZ,EAAC,MAAA,CAAI,UAAU,wBAAA,EACZvB,EAAI,WAAW,MAAM,8CAA8C,CACtE,CACF,EAGA,EAAC,MAAA,CAAI,UAAU,2BACb,EAAC,QAAA,CAAM,UAAU,2BACdA,EAAI,WAAW,MAAM,2CAA2C,IAChE,OAAA,CAAK,UAAU,4BAAA,EAA6B,IACzCA,EAAI,WAAW,MAAM,qCAAqC,EAAE,GAChE,CACF,EACA,EAAC,QAAA,CACC,KAAK,MACL,UAAU,0BACV,YAAaA,EAAI,WAAW,MAAM,uDAAuD,EACzF,MAAO,KAAK,MAAM,cAAA,EAClB,QAASoF,EAAS,QAAS,KAAK,MAAM,aAAa,EACnD,SAAU7D,CAAA,CAAA,EAEZ,EAAC,MAAA,CAAI,UAAU,wBAAA,EACZvB,EAAI,WAAW,MAAM,gDAAgD,CACxE,CACF,EAGA,EAAC,MAAA,CAAI,UAAU,2BACb,EAAC,QAAA,CAAM,UAAU,2BACdA,EAAI,WAAW,MAAM,yCAAyC,IAC9D,OAAA,CAAK,UAAU,4BAAA,EAA6B,IACzCA,EAAI,WAAW,MAAM,qCAAqC,EAAE,GAChE,CACF,EACA,EAAC,WAAA,CACC,UAAU,6BACV,YAAaA,EAAI,WAAW,MAAM,qDAAqD,EACvF,MAAO,KAAK,MAAM,YAAA,EAClB,QAASoF,EAAS,QAAS,KAAK,MAAM,WAAW,EACjD,KAAM,EACN,SAAU7D,CAAA,CAAA,CAEd,EAGA,EAAC,MAAA,CAAI,UAAU,2BAAA,EACb,EAACZ,EAAA,CACC,KAAK,SACL,UAAU,0DACV,QAASnC,EAAM,MAAM,SACrB,SAAU+C,CAAA,EAETvB,EAAI,WAAW,MAAM,mCAAmC,CAAA,EAG3D,EAACW,EAAA,CACC,KAAK,SACL,UAAU,wDACV,QAASY,EACT,SAAUA,CAAA,EAETvB,EAAI,WAAW,MAAM,mCAAmC,CAAA,CAE7D,CACF,CACF,CAEJ,CAEQ,aAAa,EAAgB,CACnC,EAAE,eAAA,EAEF,KAAM,CAAE,SAAA1C,EAAU,SAAAmE,CAAA,EAAa,KAAK,MAGpC,GAAI,CAAC,KAAK,MAAM,gBAAA,GAAqB,CAAC,KAAK,MAAM,OAAA,GAAY,CAAC,KAAK,MAAM,cAAe,CACtFzB,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,uDAAuD,CAAA,EAE9E,MACF,CAEA,MAAMI,EAAS,WAAW,KAAK,MAAM,QAAQ,EAC7C,GAAI,MAAMA,CAAM,GAAKA,GAAU,EAAG,CAChCJ,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,sDAAsD,CAAA,EAE7E,MACF,CAGA,MAAMO,EAAYvB,EAAQ1B,EAAU,WAAW,GAAK,EAC9CkD,EAAYxB,EAAQ1B,EAAU,WAAW,EAE/C,GAAI8C,EAASG,EAAW,CACtBP,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,uDAAwD,CAC3E,OAAAI,EACA,IAAKG,EACL,OAAQvB,EAAQ1B,EAAU,QAAQ,CAAA,CACnC,CAAA,EAEH,MACF,CAEA,GAAIkD,GAAaJ,EAASI,EAAW,CACnCR,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,wDAAyD,CAC5E,OAAAI,EACA,IAAKI,EACL,OAAQxB,EAAQ1B,EAAU,QAAQ,CAAA,CACnC,CAAA,EAEH,MACF,CAGA,MAAMuE,EAAkC,CACtC,WAAY,SAAS3C,EAAY5B,CAAQ,CAAC,EAC1C,gBAAiB,KAAK,MAAM,gBAAA,EAC5B,SAAU,KAAK,MAAM,SAAA,GAAc,OACnC,OAAA8C,EACA,YAAa,IAAI,KAAK,KAAK,MAAM,aAAa,EAC9C,cAAe,KAAK,MAAM,cAAA,GAAmB,OAC7C,YAAa,KAAK,MAAM,eAAiB,MAAA,EAG3CqB,EAASI,CAAQ,CACnB,CACF,gVCrDO,IAAKwD,GAAAA,IACVA,EAAA,cAAgB,gBAChBA,EAAA,kBAAoB,oBACpBA,EAAA,iBAAmB,mBACnBA,EAAA,UAAY,YACZA,EAAA,aAAe,eACfA,EAAA,QAAU,UANAA,IAAAA,GAAA,CAAA,CAAA,EAYL,MAAMC,UAAqB,KAAM,CAKtC,YACElE,EACAyB,EAAyB,eACzB0C,EACAC,EACA,CACA,MAAMpE,CAAO,EACb,KAAK,KAAO,eACZ,KAAK,KAAOyB,EACZ,KAAK,KAAO0C,EACZ,KAAK,QAAUC,CACjB,CACF,CCvQA,MAAqBC,EAAwD,CAA7E,aAAA,CACE,KAAiB,UAAY,iBAC7B,KAAiB,kBAAoB,iBAAA,CAKrC,MAAM,KAAKC,EAAwB,GAAkC,CACnE,GAAI,CACF,MAAMC,EAAmB,CACvB,QAASD,EAAQ,SAAW,gBAC5B,KAAMA,EAAQ,MAAQ,cACtB,GAAGA,CAAA,EAIDA,EAAQ,OACVC,EAAY,KAAOD,EAAQ,MAIzBA,EAAQ,SACVC,EAAY,OAASD,EAAQ,QAG/B,MAAME,EAAU,MAAM5F,EAAI,MAAM,KAAK,KAAK,UAAW2F,CAAW,EAChE,OAAO,MAAM,QAAQC,CAAO,EAAIA,EAAU,CAACA,CAAO,CACpD,OAAS1E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,SAAS2E,EAAqBH,EAAwB,GAAuC,CACjG,GAAI,CACF,MAAMC,EAAmB,CACvB,QAASD,EAAQ,SAAW,eAAA,EAI9B,OADe,MAAM1F,EAAI,MAAM,KAAK,KAAK,UAAW6F,EAAIF,CAAW,CAErE,OAASzE,EAAO,CACd,GAAI,KAAK,gBAAgBA,CAAK,EAC5B,OAAO,KAET,MAAM,KAAK,YAAYA,EAAO,iCAAiC2E,CAAE,EAAE,CACrE,CACF,CAKA,MAAM,OAAOC,EAA6D,CACxE,GAAI,CAEF,YAAK,yBAAyBA,CAAU,EAInB,MAFL9F,EAAI,MAAM,aAAa,KAAK,SAAS,EAElB,KAAK8F,CAAU,CAEpD,OAAS5E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,OAAO6E,EAA0BD,EAA6D,CAClG,GAAI,CACF,GAAI,CAAC,KAAK,UAAUC,CAAK,EACvB,MAAM,IAAIT,EACR,0DACAD,EAAiB,iBAAA,EAKrB,OADqB,MAAMU,EAAM,KAAKD,CAAU,CAElD,OAAS5E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,OAAO6E,EAAyC,CACpD,GAAI,CACF,GAAI,CAAC,KAAK,UAAUA,CAAK,EACvB,MAAM,IAAIT,EACR,0DACAD,EAAiB,iBAAA,EAIrB,MAAMU,EAAM,OAAA,CACd,OAAS7E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,cAAc8E,EAKW,CAC7B,GAAI,CAEF,MAAM,KAAK,0BAA0BA,CAAI,EAEzC,MAAMF,EAAa,CACjB,WAAYE,EAAK,WACjB,OAAQA,EAAK,OACb,eAAgBA,EAAK,eACrB,QAASA,EAAK,SAAW,GACzB,OAAQ,SAAA,EAGV,OAAO,MAAM,KAAK,OAAOF,CAAU,CACrC,OAAS5E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,gCAAgC,CAChE,CACF,CAKA,MAAM,eAAe+E,EAAiBP,EAAwB,GAAkC,CAC9F,MAAMQ,EAAeD,GAAUjG,EAAI,QAAQ,MAAM,GAAA,EAEjD,GAAI,CAACkG,EACH,MAAM,IAAIZ,EACR,yBACAD,EAAiB,iBAAA,EAIrB,MAAMc,EAAe,CACnB,GAAGT,EACH,OAAQ,CACN,KAAMQ,EACN,GAAGR,EAAQ,MAAA,EAEb,QAASA,EAAQ,SAAW,WAC5B,KAAMA,EAAQ,MAAQ,aAAA,EAGxB,OAAO,MAAM,KAAK,KAAKS,CAAY,CACrC,CAKA,MAAM,mBAAmBT,EAAwB,GAAkC,CACjF,GAAI,CAAC1F,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAMc,EAAe,CACnB,GAAGT,EACH,OAAQ,CACN,OAAQ,UACR,GAAGA,EAAQ,MAAA,EAEb,QAASA,EAAQ,SAAW,gBAC5B,KAAMA,EAAQ,MAAQ,YAAA,EAGxB,OAAO,MAAM,KAAK,KAAKS,CAAY,CACrC,CAKA,MAAM,QAAQC,EAA4BhF,EAA8C,CACtF,GAAI,CAACpB,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,GAAI,CAACe,EAAQ,YACX,MAAM,IAAId,EACR,wCACAD,EAAiB,gBAAA,EAIrB,MAAMS,EAAkB,CACtB,OAAQ,UAAA,EAGV,OAAI1E,IACF0E,EAAW,UAAY1E,GAGlB,MAAM,KAAK,OAAOgF,EAASN,CAAU,CAC9C,CAKA,MAAM,OAAOM,EAA4BC,EAA6C,CACpF,GAAI,CAACrG,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,GAAI,CAACe,EAAQ,YACX,MAAM,IAAId,EACR,wCACAD,EAAiB,gBAAA,EAIrB,MAAMS,EAAkB,CACtB,OAAQ,UAAA,EAGV,OAAIO,IACFP,EAAW,UAAYO,GAGlB,MAAM,KAAK,OAAOD,EAASN,CAAU,CAC9C,CAKA,MAAM,OAAOM,EAA0C,CACrD,GAAI,CAACA,EAAQ,gBACX,MAAM,IAAId,EACR,mCACAD,EAAiB,gBAAA,EAIrB,MAAMiB,EAActG,EAAI,QAAQ,KAChC,GAAI,CAACsG,GAAgBF,EAAQ,OAAA,IAAaE,EAAY,MAAQ,CAACA,EAAY,UACzE,MAAM,IAAIhB,EACR,wCACAD,EAAiB,iBAAA,EAIrB,OAAO,MAAM,KAAK,OAAOe,CAAO,CAClC,CAKA,UAAUL,EAAmC,CAC3C,MAAMO,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3BP,EAAM,WAAaO,EAAY,GAAA,GAAQP,EAAM,cAAA,EAN3B,EAO3B,CAKA,WAAqB,CACnB,MAAMO,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAe,CAACA,EAAY,QAAA,CACrC,CAKA,UAAUP,EAAmC,CAC3C,MAAMO,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3BP,EAAM,WAAaO,EAAY,GAAA,GAAQP,EAAM,cAAA,EAN3B,EAO3B,CAKA,MAAM,cAA8C,CAClD,GAAI,CACF,MAAM3G,EAAY,MAAMY,EAAI,MAAM,KAAK,KAAK,kBAAmB,CAC7D,OAAQ,CAAE,SAAU,EAAA,EACpB,KAAM,MAAA,CACP,EAED,OAAO,MAAM,QAAQZ,CAAS,EAAIA,EAAY,CAACA,CAAS,CAC1D,OAAS8B,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,iCAAiC,CACjE,CACF,CAKA,MAAc,0BAA0B8E,EAA0B,CAChE,KAAM,CAAE,WAAA3G,EAAY,OAAAe,CAAA,EAAW4F,EAGzB1I,EAAW,MAAM0C,EAAI,MAAM,KAAK,KAAK,kBAAmBX,CAAU,EACxE,GAAI,CAAC/B,EACH,MAAM,IAAIgI,EACR,4BACAD,EAAiB,gBAAA,EAKrB,GAAI,CAAC/H,EAAS,WACZ,MAAM,IAAIgI,EACR,qCACAD,EAAiB,gBAAA,EAKrB,MAAM9E,EAAYjD,EAAS,UAAA,EACrBkD,EAAYlD,EAAS,UAAA,EAE3B,GAAI8C,EAASG,EACX,MAAM,IAAI+E,EACR,2BAA2B/E,CAAS,GACpC8E,EAAiB,gBAAA,EAIrB,GAAI7E,GAAaJ,EAASI,EACxB,MAAM,IAAI8E,EACR,2BAA2B9E,CAAS,GACpC6E,EAAiB,gBAAA,EAKrB,MAAMiB,EAActG,EAAI,QAAQ,KAChC,GAAIsG,EAAa,CACf,MAAMC,EAAc,WAAWD,EAAY,UAAU,OAAO,GAAK,GAAG,EAC9D7F,EAAMnD,EAAS,IAAMA,EAAS,MAAQ,EACtCkJ,EAAgBpG,EAASK,EAE/B,GAAI8F,EAAcC,EAChB,MAAM,IAAIlB,EACR,mCAAmCkB,CAAa,gBAAgBD,CAAW,GAC3ElB,EAAiB,gBAAA,CAGvB,CACF,CAKQ,yBAAyBS,EAAuB,CACtD,MAAMW,EAAW,CAAC,aAAc,SAAU,gBAAgB,EAE1D,UAAWC,KAASD,EAClB,GAAI,CAACX,EAAWY,CAAK,EACnB,MAAM,IAAIpB,EACR,GAAGoB,CAAK,eACRrB,EAAiB,gBAAA,EAKvB,GAAI,OAAOS,EAAW,QAAW,UAAYA,EAAW,QAAU,EAChE,MAAM,IAAIR,EACR,mCACAD,EAAiB,gBAAA,CAGvB,CAKQ,YAAYnE,EAAYyF,EAAsC,CACpE,GAAIzF,aAAiBoE,EACnB,OAAOpE,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAM0F,EAAW1F,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIoE,EACTsB,EAAS,QAAUD,EACnBtB,EAAiB,iBACjBuB,EAAS,KACTA,CAAA,CAEJ,CAGA,OAAI1F,EAAM,OAAS,aAAeA,EAAM,SAAS,SAAS,OAAO,EACxD,IAAIoE,EACT,yBACAD,EAAiB,aAAA,EAKd,IAAIC,EACTpE,EAAM,SAAWyF,EACjBtB,EAAiB,YAAA,CAErB,CAKQ,gBAAgBnE,EAAqB,CAC3C,OAAOA,EAAM,SAAW,KACjBA,EAAM,UAAU,SAAW,KAC3BA,EAAM,SAAS,SAAS,WAAW,CAC5C,CACF,CAGO,MAAM2F,EAAoB,IAAIpB,GCvbrC,MAAqBqB,EAAkD,CAAvE,aAAA,CACE,KAAiB,gBAAkB,kBACnC,KAAiB,kBAAoB,oBACrC,KAAiB,iBAAmB,mBAAA,CAKpC,MAAM,KAAKpB,EAAwB,GAAoB,CACrD,GAAI,CACF,MAAMC,EAAmB,CACvB,QAASD,EAAQ,SAAW,gBAC5B,KAAMA,EAAQ,MAAQ,cACtB,GAAGA,CAAA,EAIDA,EAAQ,OACVC,EAAY,KAAOD,EAAQ,MAIzBA,EAAQ,SACVC,EAAY,OAASD,EAAQ,QAG/B,MAAME,EAAU,MAAM5F,EAAI,MAAM,KAAK,KAAK,gBAAiB2F,CAAW,EACtE,OAAO,MAAM,QAAQC,CAAO,EAAIA,EAAU,CAACA,CAAO,CACpD,OAAS1E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,iCAAiC,CACjE,CACF,CAKA,MAAM,SAAS2E,EAAqBH,EAAwB,GAAyB,CACnF,GAAI,CACF,MAAMC,EAAmB,CACvB,QAASD,EAAQ,SAAW,eAAA,EAI9B,OADe,MAAM1F,EAAI,MAAM,KAAK,KAAK,gBAAiB,OAAO6F,CAAE,EAAGF,CAAW,CAEnF,OAASzE,EAAO,CACd,GAAI,KAAK,gBAAgBA,CAAK,EAC5B,OAAO,KAET,MAAM,KAAK,YAAYA,EAAO,kCAAkC2E,CAAE,EAAE,CACtE,CACF,CAKA,MAAM,OAAOC,EAA+C,CAC1D,GAAI,CAEF,YAAK,yBAAyBA,CAAU,EAIpB,MAFL9F,EAAI,MAAM,aAAa,KAAK,eAAe,EAEzB,KAAK8F,CAAU,CAElD,OAAS5E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,iCAAiC,CACjE,CACF,CAKA,MAAM,OAAO6E,EAAsBD,EAAyD,CAC1F,GAAI,CACF,GAAI,CAAC,KAAK,UAAUC,CAAK,EACvB,MAAM,IAAIT,EACR,2DACAD,EAAiB,iBAAA,EAKrB,OADqB,MAAMU,EAAM,KAAKD,CAAU,CAElD,OAAS5E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,iCAAiC,CACjE,CACF,CAKA,MAAM,OAAO6E,EAAqC,CAChD,GAAI,CACF,GAAI,CAAC,KAAK,UAAUA,CAAK,EACvB,MAAM,IAAIT,EACR,2DACAD,EAAiB,iBAAA,EAIrB,MAAMU,EAAM,OAAA,CACd,OAAS7E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,iCAAiC,CACjE,CACF,CAKA,MAAM,gBAAgB7B,EAAqC,CACzD,GAAI,CAEF,KAAM,CAAE,eAAA0H,CAAA,EAAmB,MAAAC,GAAA,SAAA,CAAA,KAAA,CAAA,eAAAD,CAAA,EAAA,MAAM,QAAA,QAAA,EAAA,KAAA,IAAAE,EAAA,EAAyB,MAAA,CAAA,eAAAF,CAAA,CAAA,EAAA,MAAA,EAC1D,OAAO,MAAMA,EAAe,gBAAgB1H,CAAU,CACxD,OAAS6B,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,oCAAoC,CACpE,CACF,CAKA,MAAM,eAAe+E,EAAiBP,EAAwB,GAA8B,CAC1F,MAAMQ,EAAeD,GAAUjG,EAAI,QAAQ,MAAM,GAAA,EAEjD,GAAI,CAACkG,EACH,MAAM,IAAIZ,EACR,yBACAD,EAAiB,iBAAA,EAIrB,MAAMc,EAAe,CACnB,GAAGT,EACH,OAAQ,CACN,KAAMQ,EACN,GAAGR,EAAQ,MAAA,EAEb,QAASA,EAAQ,SAAW,WAC5B,KAAMA,EAAQ,MAAQ,aAAA,EAGxB,OAAO,MAAM,KAAK,KAAKS,CAAY,CACrC,CAKA,MAAM,aAAaH,EAIQ,CACzB,GAAI,CAEF,MAAM,KAAK,sBAAsBA,CAAI,EAErC,MAAMF,EAAa,CACjB,WAAYE,EAAK,WACjB,OAAQA,EAAK,OACb,KAAMA,EAAK,MAAQ,GACnB,OAAQ,SAAA,EAGV,OAAO,MAAM,KAAK,OAAOF,CAAU,CACrC,OAAS5E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,iCAAiC,CACjE,CACF,CAKA,MAAM,mBAAmBwE,EAAwB,GAA8B,CAC7E,GAAI,CAAC1F,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAMc,EAAe,CACnB,GAAGT,EACH,OAAQ,CACN,OAAQ,UACR,GAAGA,EAAQ,MAAA,EAEb,QAASA,EAAQ,SAAW,gBAC5B,KAAMA,EAAQ,MAAQ,YAAA,EAGxB,OAAO,MAAM,KAAK,KAAKS,CAAY,CACrC,CAKA,MAAM,QAAQe,EAAwBC,EAAkD,CACtF,GAAI,CAACnH,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAMS,EAAkB,CACtB,OAAQ,WAAA,EAGV,OAAIqB,GAAmBA,IAAoBD,EAAQ,OAAA,IACjDpB,EAAW,gBAAkBqB,GAGxB,MAAM,KAAK,OAAOD,EAASpB,CAAU,CAC9C,CAKA,MAAM,OAAOoB,EAAwBb,EAAyC,CAC5E,GAAI,CAACrG,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAMS,EAAkB,CACtB,OAAQ,UAAA,EAGV,OAAIO,IACFP,EAAW,UAAYO,GAGlB,MAAM,KAAK,OAAOa,EAASpB,CAAU,CAC9C,CAKA,UAAUC,EAA+B,CACvC,MAAMO,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3B,OAAQP,EAAc,OAAA,CAAQ,IAAM,OAAOO,EAAY,IAAI,GAAMP,EAAc,OAAA,IAAa,UAN1E,EAO3B,CAKA,WAAqB,CACnB,MAAMO,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAEE,CADUA,EAAoB,QAAA,EADZ,EAG3B,CAKA,UAAUP,EAA+B,CACvC,MAAMO,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3B,OAAQP,EAAc,OAAA,CAAQ,IAAM,OAAOO,EAAY,IAAI,GAAMP,EAAc,OAAA,IAAa,UAN1E,EAO3B,CAKA,MAAM,cAA+B,CACnC,GAAI,CACF,MAAM3G,EAAY,MAAMY,EAAI,MAAM,KAAK,KAAK,kBAAmB,CAC7D,KAAM,MAAA,CACP,EAED,OAAO,MAAM,QAAQZ,CAAS,EAAIA,EAAY,CAACA,CAAS,CAC1D,OAAS8B,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,mCAAmC,CACnE,CACF,CAKA,MAAM,sBAAmE,CACvE,MAAM9B,EAAY,MAAM,KAAK,aAAA,EACvBmF,EAA6C,CAAA,EAEnD,UAAWjH,KAAY8B,EAAW,CAChC,MAAM2B,EAASzD,EAAS,OAAA,EACnBiH,EAAQxD,CAAM,IACjBwD,EAAQxD,CAAM,EAAI,CAAA,GAEpBwD,EAAQxD,CAAM,EAAE,KAAKzD,CAAQ,CAC/B,CAEA,OAAOiH,CACT,CAMA,MAAc,sBAAsByB,EAA0B,CAC5D,KAAM,CAAE,WAAA3G,EAAY,OAAAe,CAAA,EAAW4F,EAGzB1I,EAAW,MAAM0C,EAAI,MAAM,KAAK,KAAK,kBAAmBX,CAAU,EACxE,GAAI,CAAC/B,EACH,MAAM,IAAIgI,EACR,4BACAD,EAAiB,gBAAA,EAKrB,GAAI,CAAE/H,EAAiB,WACrB,MAAM,IAAIgI,EACR,qCACAD,EAAiB,gBAAA,EAKrB,MAAM9E,EAAajD,EAAiB,UAAA,EAEpC,GAAI8C,EAASG,EACX,MAAM,IAAI+E,EACR,6BAA6B/E,CAAS,GACtC8E,EAAiB,gBAAA,CAIvB,CAKQ,yBAAyBS,EAAuB,CACtD,MAAMW,EAAW,CAAC,aAAc,QAAQ,EAExC,UAAWC,KAASD,EAClB,GAAI,CAACX,EAAWY,CAAK,EACnB,MAAM,IAAIpB,EACR,GAAGoB,CAAK,eACRrB,EAAiB,gBAAA,EAKvB,GAAI,OAAOS,EAAW,QAAW,UAAYA,EAAW,QAAU,EAChE,MAAM,IAAIR,EACR,mCACAD,EAAiB,gBAAA,CAGvB,CAKQ,YAAYnE,EAAYyF,EAAsC,CACpE,GAAIzF,aAAiBoE,EACnB,OAAOpE,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAM0F,EAAW1F,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIoE,EACTsB,EAAS,QAAUD,EACnBtB,EAAiB,iBACjBuB,EAAS,KACTA,CAAA,CAEJ,CAGA,OAAI1F,EAAM,OAAS,aAAeA,EAAM,SAAS,SAAS,OAAO,EACxD,IAAIoE,EACT,yBACAD,EAAiB,aAAA,EAKd,IAAIC,EACTpE,EAAM,SAAWyF,EACjBtB,EAAiB,YAAA,CAErB,CAKQ,gBAAgBnE,EAAqB,CAC3C,OAAOA,EAAM,SAAW,KACjBA,EAAM,UAAU,SAAW,KAC3BA,EAAM,SAAS,SAAS,WAAW,CAC5C,CACF,CAGO,MAAMkG,EAAiB,IAAIN,GC/ZlC,MAAqBO,EAAoD,CAAzE,aAAA,CACE,KAAiB,oBAAsB,kBACvC,KAAiB,iBAAmB,mBAAA,CAKpC,MAAM,KAAKxE,EAA2B6C,EAAwB,GAAoB,CAChF,MAAM4B,EAAYzE,IAAS,QAAU,KAAK,oBAAsB,KAAK,iBAErE,GAAI,CACF,MAAM8C,EAAmB,CACvB,KAAMD,EAAQ,MAAQ,OACtB,GAAGA,CAAA,EAIDA,EAAQ,OACVC,EAAY,KAAOD,EAAQ,MAIzBA,EAAQ,SACVC,EAAY,OAASD,EAAQ,QAI3BA,EAAQ,UACVC,EAAY,QAAUD,EAAQ,SAGhC,MAAME,EAAU,MAAM5F,EAAI,MAAM,KAAKsH,EAAW3B,CAAW,EAC3D,OAAO,MAAM,QAAQC,CAAO,EAAIA,EAAU,CAACA,CAAO,CACpD,OAAS1E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,mBAAmB2B,CAAI,YAAY,CACnE,CACF,CAKA,MAAM,SACJA,EACAgD,EACAH,EAAwB,CAAA,EACH,CACrB,MAAM4B,EAAYzE,IAAS,QAAU,KAAK,oBAAsB,KAAK,iBAErE,GAAI,CACF,MAAM8C,EAAmB,CAAA,EAGzB,OAAID,EAAQ,UACVC,EAAY,QAAUD,EAAQ,SAGjB,MAAM1F,EAAI,MAAM,KAAKsH,EAAWzB,EAAIF,CAAW,CAEhE,OAASzE,EAAO,CACd,GAAI,KAAK,gBAAgBA,CAAK,EAC5B,OAAO,KAET,MAAM,KAAK,YAAYA,EAAO,mBAAmB2B,CAAI,aAAagD,CAAE,EAAE,CACxE,CACF,CAKA,MAAM,OAAOhD,EAA2BiD,EAA+C,CACrF,MAAMwB,EAAYzE,IAAS,QAAU,KAAK,oBAAsB,KAAK,iBAErE,GAAI,CAEF,YAAK,yBAAyBA,EAAMiD,CAAU,EAIxB,MAFL9F,EAAI,MAAM,aAAasH,CAAS,EAEZ,KAAKxB,CAAU,CAEtD,OAAS5E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,oBAAoB2B,CAAI,WAAW,CACnE,CACF,CAKA,MAAM,OAAOvF,EAAewI,EAA+C,CACzE,GAAI,CACF,GAAI,CAAC,KAAK,UAAUxI,CAAQ,EAC1B,MAAM,IAAIgI,EACR,qDACAD,EAAiB,iBAAA,EAKrB,OADwB,MAAM/H,EAAS,KAAKwI,CAAU,CAExD,OAAS5E,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,2BAA2B,CAC3D,CACF,CAKA,MAAM,OAAO5D,EAA8B,CACzC,GAAI,CACF,GAAI,CAAC,KAAK,UAAUA,CAAQ,EAC1B,MAAM,IAAIgI,EACR,qDACAD,EAAiB,iBAAA,EAIrB,MAAM/H,EAAS,OAAA,CACjB,OAAS4D,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,2BAA2B,CAC3D,CACF,CAKA,MAAM,UAAU2B,EAA2B6C,EAAwB,GAAoB,CACrF,MAAMS,EAAe,CACnB,GAAGT,EACH,OAAQ,CACN,SAAU,GACV,GAAGA,EAAQ,MAAA,CACb,EAGF,OAAO,MAAM,KAAK,KAAK7C,EAAMsD,CAAY,CAC3C,CAKA,MAAM,aAAa7I,EAA6B,CAC9C,GAAI,CAAC0C,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAMkC,EAAgBjK,EAAS,SAAA,EAC/B,OAAO,MAAM,KAAK,OAAOA,EAAU,CAAE,SAAU,CAACiK,EAAe,CACjE,CAKA,MAAM,aAAajK,EAAekK,EAA2C,CAC3E,GAAI,CAACxH,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,OAAO,MAAM,KAAK,OAAO/H,EAAUkK,CAAM,CAC3C,CAKA,MAAM,YAAYzG,EAAgB8B,EAA2C,CAC3E,OAAO,MAAM,KAAK,KAAKA,EAAM,CAC3B,OAAQ,CAAE,OAAA9B,CAAA,EACV,KAAM,MAAA,CACP,CACH,CAKA,eAAezD,EAAe8C,EAAsD,CAClF,MAAMqH,EAAmB,CAAA,EAEzB,GAAI,OAAOrH,GAAW,UAAYA,GAAU,EAC1C,OAAAqH,EAAO,KAAK,kCAAkC,EACvC,CAAE,MAAO,GAAO,OAAAA,CAAA,EAGzB,MAAMlH,EAAYjD,EAAS,UAAYA,EAAS,YAAc,EACxDkD,EAAYlD,EAAS,UAAYA,EAAS,YAAc,KAE9D,OAAI8C,EAASG,GACXkH,EAAO,KAAK,2BAA2BlH,CAAS,EAAE,EAGhDC,GAAaJ,EAASI,GACxBiH,EAAO,KAAK,wBAAwBjH,CAAS,EAAE,EAG1C,CAAE,MAAOiH,EAAO,SAAW,EAAG,OAAAA,CAAA,CACvC,CAKA,MAAM,iBAAiB5E,EAA2BxD,EAAkC,CAClF,GAAI,CAACW,EAAI,QAAQ,MAAM,UACrB,MAAM,IAAIsF,EACR,6BACAD,EAAiB,iBAAA,EAIrB,MAAMqC,EAAc7E,IAAS,QAAU,iBAAmB,kBAE1D,GAAI,CAEF,MAAM8E,EAAU,MAAM3H,EAAI,MAAM,KAAK0H,EAAa,CAChD,OAAQ,CAAE,SAAUrI,CAAA,EACpB,QAAS,UAAA,CACV,EAEKuI,EAAc,MAAM,QAAQD,CAAO,EAAIA,EAAU,CAACA,CAAO,EAW/D,MARc,CACZ,MAAOC,EAAY,OACnB,QAASA,EAAY,OAAOC,GAAKA,EAAE,OAAA,IAAa,SAAS,EAAE,OAC3D,SAAUD,EAAY,OAAOC,GAAKA,EAAE,WAAa,YAAcA,EAAE,WAAa,WAAW,EAAE,OAC3F,SAAUD,EAAY,OAAOC,GAAKA,EAAE,OAAA,IAAa,UAAU,EAAE,OAC7D,YAAaD,EAAY,OAAO,CAACE,EAAKD,IAAMC,GAAOD,EAAE,UAAY,GAAI,CAAC,CAAA,CAI1E,OAAS3G,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,qCAAqC,CACrE,CACF,CAKA,MAAM,4BAA4B2B,EAA2D,CAC3F,MAAMzD,EAAY,MAAM,KAAK,UAAUyD,CAAI,EACrC0B,EAAiC,CAAA,EAEvC,UAAWjH,KAAY8B,EAAW,CAChC,MAAM2B,EAASzD,EAAS,OAAA,EACnBiH,EAAQxD,CAAM,IACjBwD,EAAQxD,CAAM,EAAI,CAAA,GAEpBwD,EAAQxD,CAAM,EAAE,KAAKzD,CAAQ,CAC/B,CAEA,OAAOiH,CACT,CAKA,MAAM,mBACJ1B,EACAkF,EAAkD,OAClDC,EAA4B,MACZ,CAChB,MAAMC,EAAaD,IAAc,OAAS,IAAID,CAAM,GAAKA,EAEzD,OAAO,MAAM,KAAK,UAAUlF,EAAM,CAChC,KAAMoF,CAAA,CACP,CACH,CAKA,UAAUC,EAAyB,CACjC,MAAM5B,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAKA,WAAqB,CACnB,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAKA,UAAU4B,EAAyB,CACjC,MAAM5B,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAKQ,yBAAyBzD,EAA2BiD,EAAuB,CAIjF,MAAMW,EAHiB,CAAC,OAAQ,SAAU,WAAW,EAKrD,UAAWC,KAASD,EAClB,GAAI,CAACX,EAAWY,CAAK,EACnB,MAAM,IAAIpB,EACR,GAAGoB,CAAK,oBAAoB7D,CAAI,aAChCwC,EAAiB,gBAAA,EAKvB,GAAI,OAAOS,EAAW,WAAc,UAAYA,EAAW,UAAY,EACrE,MAAM,IAAIR,EACR,0CACAD,EAAiB,gBAAA,EAIrB,GAAIS,EAAW,YAAc,SACvB,OAAOA,EAAW,WAAc,UAAYA,EAAW,UAAYA,EAAW,WAChF,MAAM,IAAIR,EACR,gEACAD,EAAiB,gBAAA,EAKvB,GAAIS,EAAW,MAAQ,SACjB,OAAOA,EAAW,KAAQ,UAAYA,EAAW,IAAM,GACzD,MAAM,IAAIR,EACR,oCACAD,EAAiB,gBAAA,EAMvB,GAAI,OAAOS,EAAW,QAAW,UAAY,CAACA,EAAW,OAAO,OAC9D,MAAM,IAAIR,EACR,qBACAD,EAAiB,gBAAA,CAGvB,CAKQ,YAAYnE,EAAYyF,EAAsC,CACpE,GAAIzF,aAAiBoE,EACnB,OAAOpE,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAM0F,EAAW1F,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIoE,EACTsB,EAAS,QAAUD,EACnBtB,EAAiB,iBACjBuB,EAAS,KACTA,CAAA,CAEJ,CAGA,OAAI1F,EAAM,OAAS,aAAeA,EAAM,SAAS,SAAS,OAAO,EACxD,IAAIoE,EACT,yBACAD,EAAiB,aAAA,EAKd,IAAIC,EACTpE,EAAM,SAAWyF,EACjBtB,EAAiB,YAAA,CAErB,CAKQ,gBAAgBnE,EAAqB,CAC3C,OAAOA,EAAM,SAAW,KACjBA,EAAM,UAAU,SAAW,KAC3BA,EAAM,SAAS,SAAS,WAAW,CAC5C,CACF,CAGO,MAAMiH,EAAkB,IAAId,GCxYnC,MAAqBe,EAAkD,CAKrE,MAAM,gBAAgB/I,EAAoBgJ,EAAmC,CAC3E,GAAI,CAEF,GAAI,CADgBrI,EAAI,QAAQ,KAE9B,MAAM,IAAIsF,EACR,yBACAD,EAAiB,iBAAA,EAKrB,MAAM/H,EAAW,MAAM0C,EAAI,MAAM,KAAK,oBAAqBX,CAAU,EACrE,GAAI,CAAC/B,EACH,MAAM,IAAIgI,EACR,4BACAD,EAAiB,gBAAA,EAIrB,GAAI,CAAC/H,EAAS,WACZ,MAAM,IAAIgI,EACR,mCACAD,EAAiB,gBAAA,EAKrB,GAAI,CAAC/H,EAAS,UACZ,MAAM,IAAIgI,EACR,sDACAD,EAAiB,gBAAA,EAIrB,OAAO/H,EAAS,QAAA,CAElB,OAAS4D,EAAO,CACd,MAAM,KAAK,YAAYA,EAAO,+BAA+B,CAC/D,CACF,CAKA,oBAA8B,CAC5B,MAAMoF,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAe,CAACA,EAAY,QAAA,CACrC,CAKQ,YAAYpF,EAAYyF,EAAsC,CACpE,GAAIzF,aAAiBoE,EACnB,OAAOpE,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAM0F,EAAW1F,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIoE,EACTsB,EAAS,QAAUD,EACnBtB,EAAiB,iBACjBuB,EAAS,KACTA,CAAA,CAEJ,CAGA,OAAI1F,EAAM,OAAS,aAAeA,EAAM,SAAS,SAAS,OAAO,EACxD,IAAIoE,EACT,yBACAD,EAAiB,aAAA,EAKd,IAAIC,EACTpE,EAAM,SAAWyF,EACjBtB,EAAiB,YAAA,CAErB,CACF,CAGO,MAAM0B,GAAiB,IAAIqB,mHCnF3B,SAASE,EAAoBpH,EAAYqH,EAAW,oBAA6B,CACtF,GAAI,CAACrH,EAAO,OAAOqH,EAGnB,GAAIrH,EAAM,UAAYA,EAAM,SAAS,QAAU,MAAM,QAAQA,EAAM,SAAS,MAAM,EAAG,CACnF,MAAMsH,EAAatH,EAAM,SAAS,OAAO,CAAC,EAC1C,GAAIsH,GAAcA,EAAW,OAC3B,OAAOA,EAAW,MAEtB,CAGA,GAAItH,EAAM,aAAc,CACtB,GAAIA,EAAM,aAAa,SAAS,oBAAoB,GAAKA,EAAM,aAAa,SAAS,WAAW,EAC9F,MAAO,iDAIT,GAAI,CACF,MAAMuH,EAAW,KAAK,MAAMvH,EAAM,YAAY,EAC9C,GAAIuH,EAAS,QAAU,MAAM,QAAQA,EAAS,MAAM,EAClD,OAAOA,EAAS,OAAO,CAAC,EAAE,QAAUF,CAExC,MAAQ,CAEN,MAAO,gDACT,CACF,CAEA,OAAOA,CACT,CCOA,MAAqBG,UAAkBC,EAA0B,CAAjE,aAAA,CAAA,MAAA,GAAA,SAAA,EACE,KAAA,MAAwB,CACtB,oBAAqB,CAAA,EACrB,mBAAoB,CAAA,EACpB,YAAa,EACb,eAAgB,GAChB,WAAY,GACZ,iBAAkB,CAAA,EAClB,eAAgB,CAAA,EAChB,wBAAyB,GACzB,QAAS,GACT,UAAWxD,EAAO,YAAY,EAC9B,iBAAkBA,EAAO,MAAM,EAC/B,cAAeA,EAAO,MAAM,CAAA,EAI9B,KAAQ,mBAAyC,CAC/C,OAAQA,EAAO,EAAE,EACjB,iBAAkBA,EAAkC,IAAI,EACxD,eAAgBA,EAAO,EAAE,EACzB,QAASA,EAAO,EAAE,CAAA,EAIpB,KAAQ,gBAAmC,CACzC,iBAAkBA,EAA+B,IAAI,EACrD,YAAaA,EAAO,EAAE,CAAA,EAGxB,KAAQ,mBAAyC,CAC/C,QAAS,GACT,SAAU,KACV,QAAS,EAAA,EAIX,KAAQ,mBAAwC,CAAA,CAAC,CAEjD,OAAO3G,EAAyB,CAC9B,MAAM,OAAOA,CAAK,EAIlB,MAAMoK,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EACjC,IAAI,KAAK,EAGhCA,IACEA,IAAa,cAAgBA,IAAa,sBAC5C,KAAK,MAAM,UAAU,YAAY,EACjC,KAAK,MAAM,iBAAiBA,IAAa,qBAAuB,UAAY,MAAM,GACzEA,IAAa,WAAaA,IAAa,mBAChD,KAAK,MAAM,UAAU,SAAS,EAC9B,KAAK,MAAM,cAAcA,IAAa,kBAAoB,UAAY,MAAM,GACnE,KAAK,WAAWA,CAAQ,GACjC,KAAK,MAAM,UAAUA,CAAmB,GAK5C,KAAK,gBAAA,EAGL,KAAK,YAAA,CACP,CAGQ,WAAWC,EAAsB,CACvC,MAAO,CAAC,aAAc,SAAS,EAAE,SAASA,CAAG,CAC/C,CAEQ,cAAcC,EAAyB,CAC7C,MAAO,CAAC,OAAQ,SAAS,EAAE,SAASA,CAAM,CAC5C,CAEQ,mBAAmBC,EAAkBD,EAA0B,CACjEC,IAAY,aACd,KAAK,MAAM,iBAAiBD,CAAM,EACzBC,IAAY,WACrB,KAAK,MAAM,cAAcD,CAAM,EAEjC,KAAK,UAAA,EACL9H,EAAE,OAAA,CACJ,CAEQ,WAAkB,CACxB,MAAMgI,EAAa,KAAK,MAAM,UAAA,EACxBC,EAAS,IAAI,gBAEfD,IAAe,aACF,KAAK,MAAM,iBAAA,IACX,UACbC,EAAO,IAAI,MAAO,oBAAoB,EAEtCA,EAAO,IAAI,MAAO,YAAY,EAEvBD,IAAe,YACT,KAAK,MAAM,cAAA,IACX,UACbC,EAAO,IAAI,MAAO,iBAAiB,EAEnCA,EAAO,IAAI,MAAO,SAAS,GAI/B,MAAMC,EAAS,GAAG,OAAO,SAAS,QAAQ,IAAID,EAAO,UAAU,GAC/D,OAAO,QAAQ,aAAa,CAAA,EAAI,GAAIC,CAAM,CAC5C,CAEQ,iBAAwB,CAC9B,MAAML,EAAM,KAAK,MAAM,UAAA,EACvB,IAAIM,EAAW,yBAEf,OAAQN,EAAA,CACN,IAAK,aACL,IAAK,qBACHM,EAAW,yBACX,MACF,IAAK,UACL,IAAK,kBACHA,EAAW,iCACX,KAAA,CAIJ,MAAM9G,EAAQrC,EAAI,WAAW,MAAMmJ,CAAQ,EAC3CnJ,EAAI,SAAS,OAAOqC,GAAU,SAAWA,EAAQA,EAAM,UAAU,CACnE,CAEA,MAAO,CACL,OAAI,KAAK,MAAM,QAEXrB,EAAC,MAAA,CAAI,UAAU,WAAA,EACbA,EAAC,MAAA,CAAI,UAAU,mBAAA,EACbA,EAACyB,EAAA,IAAiB,CACpB,CACF,IAKD,MAAA,CAAI,UAAU,aACbzB,EAAC,MAAA,CAAI,UAAU,iBAAA,EACZ,KAAK,eACNA,EAAC,OAAI,UAAU,mBAAA,EACZ,KAAK,gBAAA,CACR,CACF,CACF,CAEJ,CAEQ,cAAiC,CACvC,MAAMoI,EAAY,KAAK,MAAM,UAAA,EAE7B,SACG,MAAA,CAAI,UAAU,oBACbpI,EAAC,MAAA,CAAI,UAAU,gBAAA,EACbA,EAAC,MAAA,CACC,UAAW,iBAAiBoI,IAAc,aAAe,SAAW,EAAE,GACtE,QAAS,IAAM,KAAK,gBAAgB,YAAY,CAAA,EAE/CpJ,EAAI,WAAW,MAAM,wBAAwB,CAAA,EAEhDgB,EAAC,MAAA,CACC,UAAW,iBAAiBoI,IAAc,UAAY,SAAW,EAAE,GACnE,QAAS,IAAM,KAAK,gBAAgB,SAAS,CAAA,EAE5CpJ,EAAI,WAAW,MAAM,kCAAkC,CAAA,CAE5D,EACAgB,EAACL,EAAA,CACC,UAAU,kBACV,KAAK,eACL,QAAS,IAAMX,EAAI,QAAQ,KAAA,CAAK,CAAA,CAEpC,CAEJ,CAEQ,iBAAoC,CAG1C,OAFkB,KAAK,MAAM,UAAA,EAErB,CACN,IAAK,aACH,OAAO,KAAK,oBAAA,EACd,IAAK,UACH,OAAO,KAAK,iBAAA,EACd,QACE,OAAO,KAAK,oBAAA,CAAoB,CAEtC,CAEQ,qBAAwC,CAC9C,MAAMqJ,EAAe,KAAK,MAAM,iBAAA,EAEhC,SACG,MAAA,CAAI,UAAU,2BAEbrI,EAAC,MAAA,CAAI,UAAU,mBAAA,EACbA,EAAC,MAAA,CACC,UAAW,oBAAoBqI,IAAiB,OAAS,SAAW,EAAE,GACtE,QAAS,IAAM,KAAK,mBAAmB,aAAc,MAAM,CAAA,EAE1DrJ,EAAI,WAAW,MAAM,wBAAwB,CAAA,EAEhDgB,EAAC,MAAA,CACC,UAAW,oBAAoBqI,IAAiB,UAAY,SAAW,EAAE,GACzE,QAAS,IAAM,KAAK,mBAAmB,aAAc,SAAS,CAAA,EAE7DrJ,EAAI,WAAW,MAAM,0BAA0B,CAAA,CAEpD,EAGCqJ,IAAiB,OAAS,KAAK,uBAAyB,KAAK,yBAChE,CAEJ,CAEQ,sBAAyC,CAG/C,OAFwB,KAAK,MAAM,qBAAuB,IAAI,OAAO/L,GAAY,CAAC,CAACA,CAAQ,EAExE,SAAW,IAEzB,MAAA,CAAI,UAAU,6BAAA,EACb0D,EAAC,OAAI,UAAU,2BAAA,EACbA,EAAC,MAAA,CAAI,UAAU,0BAAA,EACZrC,EAAK,cAAc,CACtB,EACAqC,EAAC,KAAA,CAAG,UAAU,6BACXhB,EAAI,WAAW,MAAM,0BAA0B,CAClD,EACAgB,EAAC,IAAA,CAAE,UAAU,mCACVhB,EAAI,WAAW,MAAM,sCAAsC,CAC9D,CACF,CACF,EAKFgB,EAAC,MAAA,CAAI,UAAU,6BAAA,EACbA,EAACY,GAAA,CACC,UAAW,KAAK,MAAM,oBACtB,SAAU,KAAK,kCAAA,EACf,eAAgB,KAAK,MAAM,eAC3B,WAAY,KAAK,MAAM,WACvB,iBAAkB,KAAK,+BAA+B,KAAK,IAAI,EAC/D,gBAAiB,KAAK,oBAAoB,KAAK,IAAI,EACnD,SAAU,KAAK,uBAAuB,KAAK,IAAI,CAAA,CAAA,CAEnD,CAEJ,CAEQ,yBAA4C,CAClD,OACEZ,EAAC,MAAA,CAAI,UAAU,6BAAA,EACbA,EAAC0B,EAAA,CACC,aAAc,KAAK,MAAM,mBACzB,UAAW,KAAK,MAAM,oBACtB,QAAS,GACT,KAAK,YAAA,CAAA,CAET,CAEJ,CAEQ,kBAAqC,CAC3C,MAAM2G,EAAe,KAAK,MAAM,cAAA,EAEhC,SACG,MAAA,CAAI,UAAU,wBAEbrI,EAAC,MAAA,CAAI,UAAU,mBAAA,EACbA,EAAC,MAAA,CACC,UAAW,oBAAoBqI,IAAiB,OAAS,SAAW,EAAE,GACtE,QAAS,IAAM,KAAK,mBAAmB,UAAW,MAAM,CAAA,EAEvDrJ,EAAI,WAAW,MAAM,kCAAkC,CAAA,EAE1DgB,EAAC,MAAA,CACC,UAAW,oBAAoBqI,IAAiB,UAAY,SAAW,EAAE,GACzE,QAAS,IAAM,KAAK,mBAAmB,UAAW,SAAS,CAAA,EAE1DrJ,EAAI,WAAW,MAAM,kCAAkC,CAAA,CAE5D,EAGCqJ,IAAiB,OAAS,KAAK,oBAAsB,KAAK,sBAC7D,CAEJ,CAEQ,mBAAsC,CAK5C,OAJ4B,KAAK,MAAM,kBAAoB,CAAA,GAAI,OAAO/L,GACpEA,GAAY0B,EAAQ1B,EAAU,UAAU,CAAA,EAGnB,SAAW,IAE7B,MAAA,CAAI,UAAU,0BAAA,EACb0D,EAAC,OAAI,UAAU,sBAAA,EACbA,EAAC,MAAA,CAAI,UAAU,qBAAA,EACZrC,EAAK,cAAc,CACtB,EACAqC,EAAC,KAAA,CAAG,UAAU,wBACXhB,EAAI,WAAW,MAAM,kCAAkC,CAC1D,EACAgB,EAAC,IAAA,CAAE,UAAU,8BACVhB,EAAI,WAAW,MAAM,8CAA8C,CACtE,CACF,CACF,EAKFgB,EAAC,OAAI,UAAU,0BAAA,EACZ,KAAK,uBAAA,EACL,KAAK,mBACR,CAEJ,CAEQ,sBAAyC,CAE/C,MAAMsI,EAAoB,CAAC,GAAG,KAAK,MAAM,cAAc,EAGvD,OAAAA,EAAkB,KAAK,CAAC9E,EAAGC,IAAM,CAC/B,MAAM8E,EAAQ9J,EAAgB+E,EAAG,WAAW,GAAK,IAAI,KAAK,CAAC,EAE3D,OADc/E,EAAgBgF,EAAG,WAAW,GAAK,IAAI,KAAK,CAAC,GAC9C,UAAY8E,EAAM,QAAA,CACjC,CAAC,EAGCvI,EAAC,MAAA,CAAI,UAAU,0BAAA,EACbA,EAAC0B,EAAA,CACC,aAAc4G,EACd,UAAW,KAAK,MAAM,iBACtB,QAAS,GACT,KAAK,SAAA,CAAA,CAET,CAEJ,CAEQ,wBAA2C,CACjD,OACEtI,EAAC,MAAA,CAAI,UAAU,qBAAA,EACbA,EAAC6C,GAAA,CACC,UAAW,KAAK,mBAChB,iBAAkB,KAAK,gBAAgB,iBAAA,EACvC,iBAAmBvG,GAA8B,KAAK,qBAAqBA,CAAQ,CAAA,CAAA,CAEvF,CAEJ,CAEQ,mBAAsC,CAC5C,MAAMA,EAAW,KAAK,gBAAgB,iBAAA,EAEtC,GAAI,CAACA,EACH,OACE0D,EAAC,MAAA,CAAI,UAAU,wBAAA,EACbA,EAAC,IAAA,KAAGhB,EAAI,WAAW,MAAM,qCAAqC,CAAE,CAClE,EAIJ,MAAMO,EAAYvB,EAAQ1B,EAAU,WAAW,GAAK,EAC9CkM,EAAcxK,EAAQ1B,EAAU,aAAa,GACjD0C,EAAI,WAAW,MAAM,sCAAuC,CAC1D,SAAUhB,EAAQ1B,EAAU,QAAQ,EACpC,QAAS0B,EAAQ1B,EAAU,SAAS,EACpC,UAAAiD,CAAA,CACD,EAEH,OACES,EAAC,MAAA,CAAI,UAAU,uBAAA,EACbA,EAAC,IAAA,CAAE,UAAU,2BAAA,EACVhB,EAAI,WAAW,MAAM,yCAAyC,CACjE,EAEAgB,EAAC4D,GAAA,CACC,QAAS,KAAK,mBAAmB,QACjC,QAAS,KAAK,mBAAmB,QACjC,OAAQ,KAAK,kBAAkB,KAAK,IAAI,CAAA,CAAA,IAGzC,IAAA,CAAE,UAAU,2BACV5E,EAAI,WAAW,MAAM,iCAAkC,CACtD,OAAQO,EACR,SAAUvB,EAAQ1B,EAAU,QAAQ,CAAA,CACrC,CACH,GAEE,IAAM,CACN,MAAMmD,EAAMzB,EAAQ1B,EAAU,KAAK,GAAK,EACxC,OAAImD,EAAM,IAEL,IAAA,CAAE,UAAU,qBACVT,EAAI,WAAW,MAAM,0BAA2B,CAC/C,IAAAS,EACA,SAAUzB,EAAQ1B,EAAU,QAAQ,CAAA,CACrC,CACH,EAGG,IACT,KAGC,KAAK,mBAAmB,UAAY,KAAK,mBAAmB,SAAS,gBAAkB,KAAK,mBAAmB,SAAS,eAAA,GACvH0D,EAAC,MAAA,CAAI,UAAU,0BAAA,EACbA,EAAC+D,GAAA,CACC,SAAU,KAAK,mBAAmB,SAClC,QAAS,KAAK,mBAAmB,QACjC,KAAM,GAAA,CAAA,CAEV,EAGF/D,EAAC,MAAA,CAAI,UAAU,qBAAA,EACbA,EAAC,IAAA,CAAE,UAAU,oBAAA,CAAqB,EAClCA,EAAC,OAAA,KAAMwI,CAAY,CACrB,EAGAxI,EAAC,MAAA,CAAI,UAAU,2BACbA,EAAC,MAAA,CAAI,UAAU,wBAAA,EACbA,EAAC,KAAA,KAAIhB,EAAI,WAAW,MAAM,0CAA0C,CAAE,CACxE,EAEAgB,EAACgE,GAAA,CACC,SAAA1H,EACA,SAAU,KAAK,0BAA0B,KAAK,IAAI,EAClD,SAAU,KAAK,8BAA8B,KAAK,IAAI,EACtD,WAAY,KAAK,MAAM,uBAAA,CAAA,CAE3B,CACF,CAEJ,CAGQ,gBAAgBuL,EAAoB,CAC1C,KAAK,MAAM,UAAUA,CAAG,EACxB,KAAK,gBAAA,EAGL,MAAMY,EAAM,IAAI,IAAI,OAAO,SAAS,IAAI,EACxCA,EAAI,aAAa,IAAI,MAAOZ,CAAG,EAG/B,MAAMa,EAAgBb,IAAQ,aAAe,KAAK,MAAM,mBAAqB,KAAK,MAAM,cAAA,EACxFY,EAAI,aAAa,IAAI,SAAUC,CAAa,EAE5C,OAAO,QAAQ,aAAa,CAAA,EAAI,GAAID,EAAI,UAAU,CACpD,CAIQ,mCAAoC,CAG1C,MAAO,CACL,iBAFuB,KAAK,mBAAmB,iBAAA,EAG/C,OAAQ,KAAK,mBAAmB,OAAA,EAChC,eAAgB,KAAK,mBAAmB,eAAA,EACxC,QAAS,KAAK,mBAAmB,QAAA,CAAQ,CAE7C,CAEQ,+BAA+BzD,EAAyC,CAC1EA,EAAK,mBAAqB,QAC5B,KAAK,mBAAmB,iBAAiBA,EAAK,gBAAgB,EAE5DA,EAAK,SAAW,QAClB,KAAK,mBAAmB,OAAOA,EAAK,MAAM,EAExCA,EAAK,iBAAmB,QAC1B,KAAK,mBAAmB,eAAeA,EAAK,cAAc,EAExDA,EAAK,UAAY,QACnB,KAAK,mBAAmB,QAAQA,EAAK,OAAO,CAEhD,CAEA,MAAc,qBAAqC,CACjD,MAAMnG,EAAmB,KAAK,mBAAmB,iBAAA,EACjD,GAAKA,GAED,MAAK,MAAM,eAEf,GAAI,CACF,MAAM,KAAK,gBAAgB,EAAI,EAE/B,MAAMY,EAAMzB,EAAQa,EAAkB,KAAK,GAAK,EAC1CW,EAAYxB,EAAQa,EAAkB,WAAW,GAAK,IAC5D,IAAI8J,EAAkB,KAAK,MAAM,YAAclJ,EAE3CD,EAAY,KAAYmJ,EAAkBnJ,IAC5CmJ,EAAkBnJ,GAGhBmJ,EAAkB,EACpB,KAAK,mBAAmB,OAAOA,EAAgB,SAAA,CAAU,EAEzD3J,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,kCAAkC,CAAA,CAG7D,OAASkB,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAChDlB,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,mCAAmC,CAAA,CAE5D,CACF,CAEA,MAAc,wBAAwC,CACpD,GAAI,KAAK,MAAM,WAAY,OAE3B,MAAMH,EAAmB,KAAK,mBAAmB,iBAAA,EAC3CO,EAAS,KAAK,mBAAmB,OAAA,EACjCS,EAAiB,KAAK,mBAAmB,eAAA,EAE/C,GAAI,CAAChB,GAAoB,CAACO,GAAU,CAACS,EACnC,OAIF,MAAM+I,EAAY,WAAWxJ,CAAM,EACnC,GAAI,MAAMwJ,CAAS,GAAKA,GAAa,EAAG,CACtC5J,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,4BAA4B,CAAA,EAEnD,MACF,CAEA,KAAK,MAAM,WAAa,GAExB,GAAI,CACF,MAAM6G,EAAkB,cAAc,CACpC,WAAY,SAAS3H,EAAYW,CAAgB,EAAG,EAAE,EACtD,OAAQ+J,EACR,eAAA/I,EACA,QAAS,KAAK,mBAAmB,QAAA,CAAQ,CAC1C,EAGD,KAAK,mBAAmB,OAAO,EAAE,EACjC,KAAK,mBAAmB,eAAe,EAAE,EACzC,KAAK,mBAAmB,QAAQ,EAAE,EAClC,KAAK,mBAAmB,iBAAiB,IAAI,EAG7C,MAAM,QAAQ,IAAI,CAChB,KAAK,gBAAgB,EAAI,EACzB,KAAK,uBAAA,CAAuB,CAC7B,EAEDb,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,4BAA4B,CAAA,CAGrD,OAASkB,EAAgB,CACvB,QAAQ,MAAM,6BAA8BA,CAAK,EAEjD,IAAI2I,EAAe7J,EAAI,WAAW,MAAM,mBAAmB,EAAE,SAAA,EAEzDkB,aAAiBoE,EACnBuE,EAAe3I,EAAM,QAErB2I,EAAevB,EACbpH,EACA2I,CAAA,EAIJ7J,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6J,CAAA,CAEJ,QAAA,CACE,KAAK,MAAM,WAAa,EAC1B,CACF,CAIQ,qBAAqBvM,EAAiC,CAC5D,KAAK,gBAAgB,iBAAiBA,CAAQ,EAC9C,KAAK,mBAAmBA,CAAQ,CAClC,CAEQ,mBAA0B,CAC5B,KAAK,mBAAmB,SAC1B,UAAU,UAAU,UAAU,KAAK,mBAAmB,OAAO,EAAE,KAAK,IAAM,CACxE0C,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,oCAAoC,CAAA,CAE7D,CAAC,EAAE,MAAM,IAAM,CACbA,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9BA,EAAI,WAAW,MAAM,iCAAiC,CAAA,CAE1D,CAAC,CAEL,CAEQ,+BAAsC,CAE5CgB,EAAE,OAAA,CACJ,CAEA,MAAc,0BAA0BgF,EAA4C,CAClF,GAAI,MAAK,MAAM,wBAEf,MAAK,MAAM,wBAA0B,GACrChF,EAAE,OAAA,EAEF,GAAI,CACF,MAAMoG,EAAe,OAAO,CAC1B,WAAYpB,EAAK,WACjB,gBAAiBA,EAAK,gBACtB,SAAUA,EAAK,SACf,OAAQA,EAAK,OACb,YAAaA,EAAK,YAAY,YAAA,EAC9B,cAAeA,EAAK,cACpB,YAAaA,EAAK,YAClB,OAAQ,SAAA,CACT,EAIDhG,EAAI,OAAO,KACT,CAAE,KAAM,UAAW,YAAa,EAAA,EAChCA,EAAI,WAAW,MAAM,2CAA2C,CAAA,EAIlE,MAAM,KAAK,mBAAA,CAEb,OAASkB,EAAgB,CACvB,QAAQ,MAAM,oCAAqCA,CAAK,EAExD,IAAI2I,EAAe7J,EAAI,WAAW,MAAM,yCAAyC,EAAE,SAAA,EAE/EkB,aAAiBoE,EACnBuE,EAAe3I,EAAM,QAErB2I,EAAevB,EACbpH,EACA2I,CAAA,EAIJ7J,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6J,CAAA,CAEJ,QAAA,CACE,KAAK,MAAM,wBAA0B,GACrC7I,EAAE,OAAA,CACJ,EACF,CAIA,MAAc,aAA6B,CACzC,GAAI,CACF,MAAM,QAAQ,IAAI,CAChB,KAAK,mBAAA,EACL,KAAK,gBAAA,EACL,KAAK,gBAAA,CAAgB,CACtB,EAED,KAAK,MAAM,QAAU,GACrBA,EAAE,OAAA,CACJ,OAASE,EAAO,CACd,QAAQ,MAAM,sBAAuBA,CAAK,EAC1C,KAAK,MAAM,QAAU,GACrBF,EAAE,OAAA,CACJ,CACF,CAKA,MAAc,oBAAoC,CAChD,GAAI,CACF,KAAM,CAAC5B,EAAW0K,CAAQ,EAAI,MAAM,QAAQ,IAAI,CAC9C3B,EAAgB,UAAU,YAAY,EACtCtB,EAAkB,eAAA,CAAe,CAClC,EAED,KAAK,MAAM,oBAAsBzH,EACjC,KAAK,MAAM,mBAAqB0K,CAClC,OAAS5I,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAEhD,KAAK,MAAM,oBAAsB,CAAA,EACjC,KAAK,MAAM,mBAAqB,CAAA,CAClC,CACF,CAKA,MAAc,iBAAiC,CAC7C,GAAI,CACF,KAAM,CAAC9B,EAAWuI,CAAO,EAAI,MAAM,QAAQ,IAAI,CAC7CQ,EAAgB,UAAU,SAAS,EACnCf,EAAe,eAAA,CAAe,CAC/B,EAED,KAAK,MAAM,iBAAmBhI,EAC9B,KAAK,MAAM,eAAiBuI,EAG5B,KAAK,mBAAqBvI,EAAU,UAAmBJ,EAAQ1B,EAAU,UAAU,CAAC,CACtF,OAAS4D,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,EAElD,KAAK,MAAM,iBAAmB,CAAA,EAC9B,KAAK,MAAM,eAAiB,CAAA,EAC5B,KAAK,mBAAqB,CAAA,CAC5B,CACF,CAEA,MAAc,oBAAoC,CAChD,GAAI,CACF,MAAMyG,EAAU,MAAMP,EAAe,eAAA,EACrC,KAAK,MAAM,eAAiBO,CAC9B,OAASzG,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EACrD,KAAK,MAAM,eAAiB,CAAA,CAC9B,CACF,CAEA,MAAc,gBAAgB6I,EAAe,GAAsB,CACjE,GAAI,CAGF,GAFA,KAAK,MAAM,eAAiB,GAExBA,GAAgB/J,EAAI,QAAQ,KAAM,CACpC,MAAMiG,EAASjG,EAAI,QAAQ,KAAK,GAAA,EAChC,GAAI,CAACiG,EACH,MAAM,IAAI,MAAM,uBAAuB,EAIzC,MAAM+D,EAAc,MAAMhK,EAAI,MAAM,KAAK,QAASiG,CAAM,EAEpD+D,EACF,KAAK,MAAM,YAAc,WAAWA,EAAY,UAAU,OAAO,CAAC,GAAK,EAEvE,KAAK,MAAM,YAAc,CAE7B,MACE,KAAK,MAAM,YAAc,WAAWhK,EAAI,QAAQ,MAAM,UAAU,OAAO,GAAK,GAAG,EAGjF,KAAK,MAAM,eAAiB,GAC5BgB,EAAE,OAAA,CACJ,OAASE,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,EAClD,KAAK,MAAM,eAAiB,GAC5BF,EAAE,OAAA,CACJ,CACF,CAEA,MAAc,wBAAwC,CACpD,GAAI,CACF,MAAM8I,EAAW,MAAMjD,EAAkB,eAAA,EACzC,KAAK,MAAM,mBAAqBiD,CAClC,OAAS5I,EAAO,CACd,QAAQ,MAAM,gCAAiCA,CAAK,EACpD,KAAK,MAAM,mBAAqB,CAAA,CAClC,CACF,CAEA,MAAc,mBAAmB5D,EAA0C,CACzE,KAAK,mBAAmB,QAAU,GAClC0D,EAAE,OAAA,EAEF,GAAI,CACF,MAAM6D,EAAU,MAAMuC,EAAe,gBAAgB,SAASpI,EAAQ1B,EAAU,IAAI,EAAG,EAAE,CAAC,EAE1F,KAAK,mBAAqB,CACxB,QAAAuH,EACA,SAAAvH,EACA,QAAS,EAAA,EAGX0D,EAAE,OAAA,CACJ,OAASE,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EACrD,KAAK,mBAAmB,QAAU,GAElC,IAAI2I,EAAe7J,EAAI,WAAW,MAAM,wCAAwC,EAAE,SAAA,EAE9EkB,aAAiBoE,IACnBuE,EAAe3I,EAAM,SAGvBlB,EAAI,OAAO,KACT,CAAE,KAAM,QAAS,YAAa,EAAA,EAC9B6J,CAAA,EAGF7I,EAAE,OAAA,CACJ,CACF,CACF,CCz2BO,SAASiJ,EAAqBnE,EAA2C,CAC9E,MAAM2B,EAAmB,CAAA,EAGzB,OAAI3B,EAAW,OAAS,SAClB,CAACA,EAAW,MAAQ,OAAOA,EAAW,MAAS,WACjD2B,EAAO,KAAK,2BAA2B,EAKvC3B,EAAW,SAAW,SACpB,CAACA,EAAW,QAAU,OAAOA,EAAW,QAAW,WACrD2B,EAAO,KAAK,oBAAoB,EAI7BA,CACT,CAKO,SAASyC,GAAqBpE,EAAiCqE,EAAqC,CACzG,MAAM1C,EAAmB,CAAA,EAUzB,GAPI3B,EAAW,YAAc,SACvB,OAAOA,EAAW,WAAc,UAAYA,EAAW,UAAY,IACrE2B,EAAO,KAAK,8CAA8C,EAK1D3B,EAAW,YAAc,QAAaA,EAAW,YAAc,KAAM,EACnE,OAAOA,EAAW,WAAc,UAAYA,EAAW,UAAY,IACrE2B,EAAO,KAAK,8CAA8C,EAG5D,MAAMlH,EAAYuF,EAAW,WAAaqE,GAAoB,EAC1DrE,EAAW,UAAYvF,GACzBkH,EAAO,KAAK,gEAAgE,CAEhF,CAGA,OAAI3B,EAAW,MAAQ,QAAaA,EAAW,MAAQ,OACjD,OAAOA,EAAW,KAAQ,UAAYA,EAAW,IAAM,IACzD2B,EAAO,KAAK,mCAAmC,EAI5CA,CACT,CAKO,SAAS2C,GAAsBtE,EAA2C,CAC/E,MAAM2B,EAAmB,CAAA,EAGzB,OAAI3B,EAAW,UAAY,QAAaA,EAAW,UAAY,MAAQA,EAAW,UAAY,IACxF,OAAOA,EAAW,SAAY,UAChC2B,EAAO,KAAK,0BAA0B,EAKtC3B,EAAW,UAAY,QAAaA,EAAW,UAAY,MAAQA,EAAW,UAAY,IACxF,OAAOA,EAAW,SAAY,UAChC2B,EAAO,KAAK,kCAAkC,EAI3CA,CACT,CAKO,SAAS4C,GAAc5C,EAAwB,CACpD,GAAIA,EAAO,OAAS,EAClB,MAAM,IAAInC,EACRmC,EAAO,KAAK,IAAI,EAChBpC,EAAiB,gBAAA,CAGvB,CAKO,SAASiF,GAA2BxE,EAAiCqE,EAAiC,CAC3G,MAAM1C,EAAS,CACb,GAAGwC,EAAqBnE,CAAU,EAClC,GAAGoE,GAAqBpE,EAAYqE,CAAgB,CAAA,EAGtDE,GAAc5C,CAAM,CACtB,CAKO,SAAS8C,GAAwBzE,EAAiCqE,EAAiC,CACxG,MAAM1C,EAAS,CACb,GAAGwC,EAAqBnE,CAAU,EAClC,GAAGoE,GAAqBpE,EAAYqE,CAAgB,EACpD,GAAGC,GAAsBtE,CAAU,CAAA,EAGrCuE,GAAc5C,CAAM,CACtB,CC1GA,MAAqB+C,WAA2BC,CAAM,CAAtD,aAAA,CAAA,MAAA,GAAA,SAAA,EAEE,KAAA,KAAOA,EAAM,UAAkB,MAAM,EACrC,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,QAAUA,EAAM,UAAyB,SAAS,EAClD,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,UAAYA,EAAM,UAAkB,WAAW,EAC/C,KAAA,UAAYA,EAAM,UAAkB,WAAW,EAC/C,KAAA,IAAMA,EAAM,UAAkB,KAAK,EAGnC,KAAA,gBAAkBA,EAAM,UAAkB,iBAAiB,EAC3D,KAAA,kBAAoBA,EAAM,UAAkB,mBAAmB,EAC/D,KAAA,sBAAwBA,EAAM,UAAkB,uBAAuB,EACvE,KAAA,eAAiBA,EAAM,UAAkB,gBAAgB,EACzD,KAAA,iBAAmBA,EAAM,UAAkB,kBAAkB,EAC7D,KAAA,wBAA0BA,EAAM,UAAkB,yBAAyB,EAC3E,KAAA,0BAA4BA,EAAM,UAAkB,2BAA2B,EAG/E,KAAA,wBAA0BA,EAAM,UAAkB,yBAAyB,EAC3E,KAAA,0BAA4BA,EAAM,UAAkB,2BAA2B,EAC/E,KAAA,uBAAyBA,EAAM,UAAkB,wBAAwB,EACzE,KAAA,yBAA2BA,EAAM,UAAkB,0BAA0B,EAG7E,KAAA,SAAWA,EAAM,UAAmB,UAAU,EAG9C,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAC5D,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAG5D,KAAA,SAAWA,EAAM,UAA8B,UAAU,EACzD,KAAA,aAAeA,EAAM,UAA8B,cAAc,EACjE,KAAA,YAAcA,EAAM,UAA8B,aAAa,CAAA,CAG/D,aAAc,CACZ,MAAM5E,EAAK,KAAK,GAAA,EAChB,OAAOA,EAAK,oBAAoBA,CAAE,GAAK,kBACzC,CAGA,gBAAyB,CACvB,OAAO,KAAK,eAAiB,KAAK,KAAA,CACpC,CAEA,cAAczF,EAAyB,CACrC,MAAMsK,EAAM,KAAK,UAAA,EACXC,EAAM,KAAK,UAAA,EACjB,OAAOvK,GAAUsK,GAAOtK,GAAUuK,CACpC,CAEA,aAAavK,EAAwB,CACnC,OAAOA,EAAS,KAAK,IAAA,CACvB,CAOA,MAAM,KAAK0F,EAA+D,CAEpEA,GACF,KAAK,mBAAmBA,CAAU,EAGpC,GAAI,CAEF,OADe,MAAM,MAAM,KAAKA,CAAU,CAE5C,OAAS5E,EAAO,CACd,MAAM,KAAK,gBAAgBA,CAAK,CAClC,CACF,CAKA,MAAM,QAAwB,CAC5B,GAAI,CAAC,KAAK,YACR,MAAM,IAAIoE,EACR,qDACAD,EAAiB,iBAAA,EAKrB,GAAI,MAAM,KAAK,UACb,MAAM,IAAIC,EACR,yDACAD,EAAiB,gBAAA,EAIrB,GAAI,CACF,MAAM,MAAM,OAAA,CACd,OAASnE,EAAO,CACd,MAAM,KAAK,kBAAkBA,CAAK,CACpC,CACF,CAKA,MAAM,cAA4C,CAChD,GAAI,CAAC,KAAK,YACR,MAAM,IAAIoE,EACR,qDACAD,EAAiB,iBAAA,EAIrB,OAAO,MAAM,KAAK,KAAK,CACrB,SAAU,CAAC,KAAK,SAAA,CAAS,CAC1B,CACH,CAKA,OAA4B,CAC1B,MAAMuF,EAAS5K,EAAI,MAAM,aAAa,iBAAiB,EAGvD,OAAA4K,EAAO,eAAe,CACpB,KAAM,KAAK,KAAA,EAAS,UACpB,OAAQ,KAAK,OAAA,EACb,QAAS,KAAK,QAAA,EACd,UAAW,KAAK,UAAA,EAChB,UAAW,KAAK,UAAA,EAChB,IAAK,KAAK,IAAA,EAEV,wBAAyB,KAAK,wBAAA,EAC9B,0BAA2B,KAAK,0BAAA,EAChC,uBAAwB,KAAK,uBAAA,EAC7B,yBAA0B,KAAK,yBAAA,EAC/B,SAAU,EAAA,CACX,EAEMA,CACT,CAOA,eAAexK,EAAsD,CACnE,MAAMqH,EAAmB,CAAA,EAEzB,OAAI,OAAOrH,GAAW,UAAYA,GAAU,GAC1CqH,EAAO,KAAK,kCAAkC,EACvC,CAAE,MAAO,GAAO,OAAAA,CAAA,IAGrBrH,EAAS,KAAK,aAChBqH,EAAO,KAAK,2BAA2B,KAAK,WAAW,IAAI,KAAK,OAAA,CAAQ,EAAE,EAGxE,KAAK,UAAA,GAAerH,EAAS,KAAK,aACpCqH,EAAO,KAAK,wBAAwB,KAAK,WAAW,IAAI,KAAK,OAAA,CAAQ,EAAE,EAGlE,CAAE,MAAOA,EAAO,SAAW,EAAG,OAAAA,CAAA,EACvC,CAKA,oBAAoBrH,EAAgBmG,EAA2D,CAC7F,MAAMkB,EAAmB,CAAA,EACnBoD,EAAY,KAAK,aAAazK,CAAM,EAE1C,GAAImG,EAAcsE,EAAW,CAC3B,MAAMC,EAAU,KAAK,IAAA,EAAQ,EAAI,eAAe,KAAK,IAAA,CAAK,IAAI,KAAK,OAAA,CAAQ,QAAU,GACrFrD,EAAO,KAAK,mCAAmCoD,CAAS,IAAI,KAAK,OAAA,CAAQ,GAAGC,CAAO,gBAAgBvE,CAAW,IAAI,KAAK,OAAA,CAAQ,EAAE,CACnI,CAEA,MAAO,CAAE,MAAOkB,EAAO,SAAW,EAAG,OAAAA,CAAA,CACvC,CAOA,WAAqB,CACnB,MAAMnB,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAKA,WAAqB,CACnB,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAKA,SAAmB,CAEjB,GAAI,KAAK,SAAA,EAAY,MAAO,GAG5B,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAOA,MAAM,SAA4B,CAChC,GAAI,CACF,MAAMwD,EAAW,MAAM9J,EAAI,MAAM,KAAK,iBAAkB,CACtD,OAAQ,CAAE,SAAU,KAAK,GAAA,EAAM,OAAQ,SAAA,CAAU,CAClD,EAGD,OADsB,MAAM,QAAQ8J,CAAQ,EAAIA,EAAW,CAACA,CAAQ,GAC/C,OAAS,CAChC,MAAQ,CAEN,MAAO,EACT,CACF,CAKA,iBAA0B,CACxB,MAAMrJ,EAAM,KAAK,IAAA,EACjB,OAAIA,IAAQ,EACH,OAEF,GAAGA,CAAG,IAAI,KAAK,QAAQ,EAChC,CAKA,oBAA6B,CAC3B,MAAMiK,EAAM,KAAK,UAAA,EACXC,EAAM,KAAK,UAAA,EACX5J,EAAS,KAAK,OAAA,EAEpB,OAAI4J,EACK,GAAGD,CAAG,MAAMC,CAAG,IAAI5J,CAAM,GAE3B,QAAQ2J,CAAG,IAAI3J,CAAM,EAC9B,CAOQ,mBAAmB+E,EAAuC,CAChEwE,GAA2BxE,EAAY,KAAK,WAAW,CACzD,CAKQ,gBAAgB5E,EAA0B,CAChD,GAAIA,aAAiBoE,EACnB,OAAOpE,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAM0F,EAAW1F,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIoE,EACTsB,EAAS,QAAU,gCACnBvB,EAAiB,iBACjBuB,EAAS,KACTA,CAAA,CAEJ,CAEA,OAAO,IAAItB,EACTpE,EAAM,SAAW,gCACjBmE,EAAiB,YAAA,CAErB,CAKQ,kBAAkBnE,EAA0B,CAClD,OAAIA,aAAiBoE,EACZpE,EAILA,EAAM,SAAW,KAAOA,EAAM,UAAU,SAAW,IAC9C,IAAIoE,EACT,qDACAD,EAAiB,iBAAA,EAId,IAAIC,EACTpE,EAAM,SAAW,kCACjBmE,EAAiB,YAAA,CAErB,CACF,CC/PO,MAAM0F,EAAoB,CAC/B,QAAS,UACT,SAAU,WACV,SAAU,UACZ,EC7DA,MAAqBC,WAA0BP,CAAM,CAArD,aAAA,CAAA,MAAA,GAAA,SAAA,EAEE,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,eAAiBA,EAAM,UAAkB,gBAAgB,EACzD,KAAA,QAAUA,EAAM,UAAkB,SAAS,EAC3C,KAAA,OAASA,EAAM,UAA4B,QAAQ,EAGnD,KAAA,WAAaA,EAAM,UAAkB,YAAY,EACjD,KAAA,OAASA,EAAM,UAAkB,QAAQ,EAGzC,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAC5D,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAG5D,KAAA,KAAOA,EAAM,OAAa,MAAM,EAChC,KAAA,SAAWA,EAAM,OAA2B,UAAU,CAAA,CAGtD,aAAc,CACZ,MAAM5E,EAAK,KAAK,GAAA,EAChB,OAAOA,EAAK,mBAAmBA,CAAE,GAAK,iBACxC,CAGA,WAAqB,CACnB,OAAO,KAAK,WAAakF,EAAkB,OAC7C,CAEA,YAAsB,CACpB,OAAO,KAAK,WAAaA,EAAkB,QAC7C,CAEA,YAAsB,CACpB,OAAO,KAAK,WAAaA,EAAkB,QAC7C,CAEA,eAAyB,CACvB,OAAO,KAAK,UAAA,CACd,CAGA,aAAsB,CACpB,MAAM/I,EAAS,KAAK,OAAA,EACpB,OAAOhC,EAAI,WAAW,MAAM,sBAAsBgC,CAAM,EAAE,EAAE,SAAA,CAC9D,CAEA,aAAsB,CAEpB,OADe,KAAK,OAAA,EACZ,CACN,KAAK+I,EAAkB,SACrB,MAAO,UACT,KAAKA,EAAkB,SACrB,MAAO,SACT,KAAKA,EAAkB,QACvB,QACE,MAAO,SAAA,CAEb,CAOA,MAAM,KAAKjF,EAA8D,CAEnEA,GACF,KAAK,mBAAmBA,CAAU,EAGpC,GAAI,CAEF,OADe,MAAM,MAAM,KAAKA,CAAU,CAE5C,OAAS5E,EAAO,CACd,MAAM,KAAK,gBAAgBA,CAAK,CAClC,CACF,CAKA,MAAM,QAAwB,CAC5B,GAAI,CAAC,KAAK,YACR,MAAM,IAAIoE,EACR,oDACAD,EAAiB,iBAAA,EAKrB,MAAMiB,EAActG,EAAI,QAAQ,KAChC,GAAIsG,GAAe,CAACA,EAAY,QAAA,GAAa,CAAC,KAAK,gBACjD,MAAM,IAAIhB,EACR,kEACAD,EAAiB,gBAAA,EAIrB,GAAI,CACF,MAAM,MAAM,OAAA,CACd,OAASnE,EAAO,CACd,MAAM,KAAK,kBAAkBA,CAAK,CACpC,CACF,CAKA,OAA2B,CACzB,MAAM0J,EAAS5K,EAAI,MAAM,aAAa,gBAAgB,EAGtD,OAAA4K,EAAO,eAAe,CACpB,WAAY,KAAK,WAAA,EACjB,OAAQ,KAAK,OAAA,EACb,eAAgB,KAAK,eAAA,EACrB,QAAS,KAAK,QAAA,CAAQ,CACvB,EAEMA,CACT,CAKA,cAAuB,CACrB,MAAMtN,EAAW,KAAK,SAAA,EAChBmD,EAAMnD,GAAWA,EAAS,IAAA,GAAS,EACzC,OAAO,KAAK,SAAWmD,CACzB,CAKA,oBAA6B,CAC3B,MAAMnD,EAAW,KAAK,SAAA,EAChByD,EAASzD,EAAWA,EAAS,OAAA,EAAW,GAC9C,MAAO,GAAG,KAAK,OAAA,CAAQ,IAAIyD,CAAM,GAAG,KAAA,CACtC,CAKA,uBAAgC,CAC9B,MAAMzD,EAAW,KAAK,SAAA,EAChByD,EAASzD,EAAWA,EAAS,OAAA,EAAW,GACxCmD,EAAMnD,GAAWA,EAAS,IAAA,GAAS,EAEzC,OAAImD,EAAM,EACD,GAAG,KAAK,OAAA,CAAQ,MAAMA,CAAG,YAAY,KAAK,aAAA,CAAc,IAAIM,CAAM,GAAG,KAAA,EAGvE,KAAK,mBAAA,CACd,CAOA,WAAqB,CACnB,MAAMuF,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3B,KAAK,WAAaA,EAAY,GAAA,GAAQ,KAAK,cAAA,EANzB,EAO3B,CAKA,WAAqB,CACnB,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3B,KAAK,WAAaA,EAAY,GAAA,GAAQ,KAAK,cAAA,EANzB,EAO3B,CAKA,SAAmB,CACjB,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3B,KAAK,WAAaA,EAAY,GAAA,EANZ,EAO3B,CAOQ,mBAAmBR,EAAuC,CAChE,MAAM2B,EAAmB,CAAA,EAoBzB,GAlBI3B,EAAW,SAAW,SACpB,OAAOA,EAAW,QAAW,UAAYA,EAAW,QAAU,IAChE2B,EAAO,KAAK,kCAAkC,EAI9C3B,EAAW,iBAAmB,SAC5B,CAACA,EAAW,gBAAkB,OAAOA,EAAW,gBAAmB,WACrE2B,EAAO,KAAK,8BAA8B,EAI1C3B,EAAW,aAAe,SACxB,CAACA,EAAW,YAAc,OAAOA,EAAW,YAAe,WAC7D2B,EAAO,KAAK,gCAAgC,EAI5CA,EAAO,OAAS,EAClB,MAAM,IAAInC,EACRmC,EAAO,KAAK,IAAI,EAChBpC,EAAiB,gBAAA,CAGvB,CAKQ,gBAAgBnE,EAA0B,CAChD,GAAIA,aAAiBoE,EACnB,OAAOpE,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAM0F,EAAW1F,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIoE,EACTsB,EAAS,QAAU,+BACnBvB,EAAiB,iBACjBuB,EAAS,KACTA,CAAA,CAEJ,CAEA,OAAO,IAAItB,EACTpE,EAAM,SAAW,+BACjBmE,EAAiB,YAAA,CAErB,CAKQ,kBAAkBnE,EAA0B,CAClD,OAAIA,aAAiBoE,EACZpE,EAILA,EAAM,SAAW,KAAOA,EAAM,UAAU,SAAW,IAC9C,IAAIoE,EACT,oDACAD,EAAiB,iBAAA,EAId,IAAIC,EACTpE,EAAM,SAAW,iCACjBmE,EAAiB,YAAA,CAErB,CACF,CC/RA,MAAqB4F,WAAwBR,CAAM,CAAnD,aAAA,CAAA,MAAA,GAAA,SAAA,EACE,KAAA,KAAOA,EAAM,UAAkB,MAAM,EACrC,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,QAAUA,EAAM,UAAkB,SAAS,EAC3C,KAAA,cAAgBA,EAAM,UAAU,eAAe,EAC/C,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,UAAYA,EAAM,UAAU,WAAW,EACvC,KAAA,UAAYA,EAAM,UAAU,WAAW,EACvC,KAAA,IAAMA,EAAM,UAAU,KAAK,EAC3B,KAAA,QAAUA,EAAM,UAAU,SAAS,EACnC,KAAA,eAAiBA,EAAM,UAAkB,gBAAgB,EAEzD,KAAA,gBAAkBA,EAAM,UAAkB,iBAAiB,EAC3D,KAAA,kBAAoBA,EAAM,UAAkB,mBAAmB,EAC/D,KAAA,sBAAwBA,EAAM,UAAkB,uBAAuB,EACvE,KAAA,eAAiBA,EAAM,UAAkB,gBAAgB,EACzD,KAAA,iBAAmBA,EAAM,UAAkB,kBAAkB,EAC7D,KAAA,wBAA0BA,EAAM,UAAkB,yBAAyB,EAC3E,KAAA,0BAA4BA,EAAM,UAAkB,2BAA2B,EAG/E,KAAA,wBAA0BA,EAAM,UAAkB,yBAAyB,EAC3E,KAAA,0BAA4BA,EAAM,UAAkB,2BAA2B,EAC/E,KAAA,uBAAyBA,EAAM,UAAkB,wBAAwB,EACzE,KAAA,yBAA2BA,EAAM,UAAkB,0BAA0B,EAC7E,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,cAAgBA,EAAM,UAAU,eAAe,EAC/C,KAAA,SAAWA,EAAM,UAAU,UAAU,EACrC,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAC5D,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAG5D,KAAA,YAAcA,EAAM,OAAO,aAAa,EAGxC,KAAA,SAAWA,EAAM,UAA8B,UAAU,EACzD,KAAA,aAAeA,EAAM,UAA8B,cAAc,EACjE,KAAA,YAAcA,EAAM,UAA8B,aAAa,CAAA,CAG/D,gBAAyB,CACvB,OAAO,KAAK,eAAiB,KAAK,KAAA,CACpC,CAEA,oBAA6B,CAC3B,MAAM1G,EAAO,KAAK,eAAA,EACZC,EAAU,KAAK,QAAA,EACrB,OAAOA,EAAU,GAAGD,CAAI,KAAKC,CAAO,IAAMD,CAC5C,CAEA,cAAc3D,EAAyB,CACrC,MAAMsK,EAAM,KAAK,UAAA,GAAe,EAC1BC,EAAM,KAAK,UAAA,EACjB,OAAOvK,GAAUsK,IAAQC,IAAQ,MAAQvK,GAAUuK,EACrD,CAEA,aAAavK,EAAwB,CACnC,OAAOA,GAAU,KAAK,IAAA,GAAS,EACjC,CAOA,MAAM,KAAK0F,EAA4D,CAEjEA,GACF,KAAK,mBAAmBA,CAAU,EAGpC,GAAI,CAEF,OADe,MAAM,MAAM,KAAKA,CAAU,CAE5C,OAAS5E,EAAO,CACd,MAAM,KAAK,gBAAgBA,CAAK,CAClC,CACF,CAKA,MAAM,QAAwB,CAC5B,GAAI,CAAC,KAAK,YACR,MAAM,IAAIoE,EACR,qDACAD,EAAiB,iBAAA,EAKrB,GAAI,MAAM,KAAK,UACb,MAAM,IAAIC,EACR,0DACAD,EAAiB,gBAAA,EAIrB,GAAI,CACF,MAAM,MAAM,OAAA,CACd,OAASnE,EAAO,CACd,MAAM,KAAK,kBAAkBA,CAAK,CACpC,CACF,CAKA,MAAM,cAAyC,CAC7C,GAAI,CAAC,KAAK,YACR,MAAM,IAAIoE,EACR,qDACAD,EAAiB,iBAAA,EAIrB,OAAO,MAAM,KAAK,KAAK,CACrB,SAAU,CAAC,KAAK,SAAA,CAAS,CAC1B,CACH,CAKA,OAAyB,CACvB,MAAMuF,EAAS5K,EAAI,MAAM,aAAa,mBAAmB,EAGzD,OAAA4K,EAAO,eAAe,CACpB,KAAM,KAAK,KAAA,EAAS,UACpB,OAAQ,KAAK,OAAA,EACb,QAAS,KAAK,QAAA,EACd,cAAe,KAAK,cAAA,EACpB,UAAW,KAAK,UAAA,EAChB,UAAW,KAAK,UAAA,EAChB,IAAK,KAAK,IAAA,EACV,QAAS,KAAK,QAAA,EACd,eAAgB,KAAK,eAAA,EACrB,QAAS,KAAK,QAAA,EACd,UAAW,KAAK,UAAA,EAChB,YAAa,KAAK,YAAA,EAClB,SAAU,EAAA,CACX,EAEMA,CACT,CAOA,eAAexK,EAAsD,CACnE,MAAMqH,EAAmB,CAAA,EAEzB,GAAI,OAAOrH,GAAW,UAAYA,GAAU,EAC1C,OAAAqH,EAAO,KAAK,kCAAkC,EACvC,CAAE,MAAO,GAAO,OAAAA,CAAA,EAGzB,MAAMiD,EAAM,KAAK,UAAA,GAAe,EAC5BtK,EAASsK,GACXjD,EAAO,KAAK,2BAA2BiD,CAAG,IAAI,KAAK,OAAA,CAAQ,EAAE,EAG/D,MAAMC,EAAM,KAAK,UAAA,EACjB,OAAIA,GAAOvK,EAASuK,GAClBlD,EAAO,KAAK,wBAAwBkD,CAAG,IAAI,KAAK,OAAA,CAAQ,EAAE,EAGrD,CAAE,MAAOlD,EAAO,SAAW,EAAG,OAAAA,CAAA,CACvC,CAOA,WAAqB,CACnB,MAAMnB,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAKA,WAAqB,CACnB,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAKA,SAAmB,CAEjB,GAAI,KAAK,SAAA,EAAY,MAAO,GAG5B,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,CACpC,CAOA,MAAM,SAA4B,CAChC,GAAI,CACF,MAAMqB,EAAU,MAAM3H,EAAI,MAAM,KAAK,kBAAmB,CACtD,OAAQ,CAAE,SAAU,KAAK,GAAA,EAAM,OAAQ,SAAA,CAAU,CAClD,EAGD,OADqB,MAAM,QAAQ2H,CAAO,EAAIA,EAAU,CAACA,CAAO,GAC5C,OAAS,CAC/B,MAAQ,CAEN,MAAO,EACT,CACF,CAKA,iBAA0B,CACxB,MAAMlH,EAAM,KAAK,IAAA,GAAS,EAC1B,OAAIA,IAAQ,EACH,OAEF,GAAGA,CAAG,IAAI,KAAK,QAAQ,EAChC,CAKA,oBAA6B,CAC3B,MAAMiK,EAAM,KAAK,UAAA,GAAe,EAC1BC,EAAM,KAAK,UAAA,EACX5J,EAAS,KAAK,OAAA,EAEpB,OAAI4J,EACK,GAAGD,CAAG,MAAMC,CAAG,IAAI5J,CAAM,GAE3B,QAAQ2J,CAAG,IAAI3J,CAAM,EAC9B,CAKA,uBAAuBsH,EAA0B,CAC/C,MAAMxD,EAAU,KAAK,QAAA,EAIrB,GAAIA,EACF,OAAOA,EAGT,MAAM,IAAIS,EACR,kDACAD,EAAiB,gBAAA,CAErB,CAOQ,mBAAmBS,EAAuC,CAChEyE,GAAwBzE,EAAY,KAAK,WAAW,CACtD,CAKQ,gBAAgB5E,EAA0B,CAChD,GAAIA,aAAiBoE,EACnB,OAAOpE,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAM0F,EAAW1F,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIoE,EACTsB,EAAS,QAAU,kCACnBvB,EAAiB,iBACjBuB,EAAS,KACTA,CAAA,CAEJ,CAEA,OAAO,IAAItB,EACTpE,EAAM,SAAW,kCACjBmE,EAAiB,YAAA,CAErB,CAKQ,kBAAkBnE,EAA0B,CAClD,OAAIA,aAAiBoE,EACZpE,EAILA,EAAM,SAAW,KAAOA,EAAM,UAAU,SAAW,IAC9C,IAAIoE,EACT,qDACAD,EAAiB,iBAAA,EAId,IAAIC,EACTpE,EAAM,SAAW,oCACjBmE,EAAiB,YAAA,CAErB,CACF,CChUA,MAAqB6F,EAArB,MAAqBA,UAAsBT,CAAM,CAAjD,aAAA,CAAA,MAAA,GAAA,SAAA,EAEE,KAAA,GAAKA,EAAM,UAAkB,IAAI,EACjC,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,WAAaA,EAAM,UAAkB,YAAY,EACjD,KAAA,gBAAkBA,EAAM,UAAkB,iBAAiB,EAC3D,KAAA,SAAWA,EAAM,UAAkB,UAAU,EAC7C,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,YAAcA,EAAM,UAAU,cAAeA,EAAM,aAAa,EAChE,KAAA,cAAgBA,EAAM,UAAkB,eAAe,EACvD,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,OAASA,EAAM,UAAkB,QAAQ,EACzC,KAAA,YAAcA,EAAM,UAAU,cAAeA,EAAM,aAAa,EAChE,KAAA,YAAcA,EAAM,UAAkB,aAAa,EACnD,KAAA,WAAaA,EAAM,UAAkB,YAAY,EACjD,KAAA,eAAiBA,EAAM,UAAkB,gBAAgB,EACzD,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAC5D,KAAA,UAAYA,EAAM,UAAU,YAAaA,EAAM,aAAa,EAG5D,KAAA,KAAOA,EAAM,OAAa,MAAM,EAChC,KAAA,SAAWA,EAAM,OAAwB,UAAU,EACnD,KAAA,gBAAkBA,EAAM,OAAa,iBAAiB,CAAA,CAQtD,WAAqB,CACnB,OAAO,KAAK,WAAaS,EAAc,cACzC,CAEA,YAAsB,CACpB,OAAO,KAAK,WAAaA,EAAc,eACzC,CAEA,YAAsB,CACpB,OAAO,KAAK,WAAaA,EAAc,eACzC,CAEA,gBAAyB,CACvB,OAAQ,KAAK,SAAO,CAClB,KAAKA,EAAc,eACjB,MAAO,UACT,KAAKA,EAAc,gBACjB,MAAO,UACT,KAAKA,EAAc,gBACjB,MAAO,QACT,QACE,MAAO,WAAA,CAEb,CAGA,gBAAyB,CACvB,MAAMlJ,EAAS,KAAK,OAAA,EACpB,OAAOhC,EAAI,WAAW,MAAM,8BAA8BgC,CAAM,EAAE,EAAE,SAAA,CACtE,CAEA,eAAyB,CACvB,OAAO,KAAK,UAAA,CACd,CAOA,MAAM,KAAK8D,EAA0D,CAE/DA,GACF,KAAK,mBAAmBA,CAAU,EAGpC,GAAI,CAEF,OADe,MAAM,MAAM,KAAKA,CAAU,CAE5C,OAAS5E,EAAO,CACd,MAAM,KAAK,gBAAgBA,CAAK,CAClC,CACF,CAKA,MAAM,QAAwB,CAC5B,GAAI,CAAC,KAAK,YACR,MAAM,IAAIoE,EACR,2DACAD,EAAiB,iBAAA,EAKrB,GAAI,CACF,MAAM,MAAM,OAAA,CACd,OAASnE,EAAO,CACd,MAAM,KAAK,kBAAkBA,CAAK,CACpC,CACF,CAKA,OAAuB,CACrB,MAAM0J,EAAS5K,EAAI,MAAM,aAAa,iBAAiB,EAGvD,OAAA4K,EAAO,eAAe,CACpB,WAAY,KAAK,WAAA,EACjB,OAAQ,KAAK,OAAA,EACb,gBAAiB,KAAK,gBAAA,EACtB,SAAU,KAAK,SAAA,EACf,YAAa,KAAK,YAAA,EAClB,cAAe,KAAK,cAAA,CAAc,CACnC,EAEMA,CACT,CAKA,oBAA6B,CAC3B,MAAMtN,EAAW,KAAK,SAAA,EAChByD,EAASzD,EAAWA,EAAS,OAAA,EAAW,GAC9C,MAAO,GAAG,KAAK,OAAA,CAAQ,IAAIyD,CAAM,GAAG,KAAA,CACtC,CAKA,gBAAyB,CACvB,OAAO,KAAK,kBAAoB,KAAK,OAAA,CACvC,CAKA,yBAAkC,CAChC,MAAMzD,EAAW,KAAK,SAAA,EAChByD,EAASzD,EAAWA,EAAS,OAAA,EAAW,GACxC8C,EAAS,KAAK,eAAA,EAEpB,OAAI,KAAK,kBAAoB,KAAK,mBAAqB,KAAK,SACnD,GAAGA,CAAM,IAAIW,CAAM,eAAe,KAAK,eAAA,CAAgB,IAAI,KAAA,EAG7D,GAAGX,CAAM,IAAIW,CAAM,GAAG,KAAA,CAC/B,CAOA,WAAqB,CACnB,MAAMuF,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3B,KAAK,WAAaA,EAAY,GAAA,GAAQ,KAAK,cAAA,EANzB,EAO3B,CAKA,WAAqB,CACnB,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3B,KAAK,WAAaA,EAAY,GAAA,GAAQ,KAAK,cAAA,EANzB,EAO3B,CAKA,SAAmB,CACjB,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAKsG,EAGDA,EAAY,QAAA,EAAkB,GAG3B,KAAK,WAAaA,EAAY,GAAA,EANZ,EAO3B,CAKA,YAAsB,CACpB,MAAMA,EAActG,EAAI,QAAQ,KAChC,OAAOsG,GAAeA,EAAY,QAAA,GAAa,KAAK,UAAA,CACtD,CAOA,MAAM,QAAQ7C,EAAyBD,EAA6C,CAClF,GAAI,CAAC,KAAK,aACR,MAAM,IAAI8B,EACR,qDACAD,EAAiB,iBAAA,EAIrB,MAAMS,EAAkB,CACtB,OAAQoF,EAAc,gBACtB,gBAAiB,KACjB,YAAalL,EAAI,QAAQ,MAAM,GAAA,CAAG,EAGpC,OAAIyD,IAAmB,SACrBqC,EAAW,eAAiBrC,GAG1BD,IACFsC,EAAW,WAAatC,GAGnB,MAAM,KAAK,KAAKsC,CAAU,CACnC,CAKA,MAAM,OAAOO,EAAyC,CACpD,GAAI,CAAC,KAAK,aACR,MAAM,IAAIf,EACR,oDACAD,EAAiB,iBAAA,EAIrB,MAAMS,EAAkB,CACtB,OAAQoF,EAAc,gBACtB,gBAAiB,KACjB,YAAalL,EAAI,QAAQ,MAAM,GAAA,CAAG,EAGpC,OAAIqG,IACFP,EAAW,WAAaO,GAGnB,MAAM,KAAK,KAAKP,CAAU,CACnC,CAOQ,mBAAmBA,EAAuC,CAChE,MAAM2B,EAAmB,CAAA,EAgCzB,GA9BI3B,EAAW,SAAW,SACpB,OAAOA,EAAW,QAAW,UAAYA,EAAW,QAAU,IAChE2B,EAAO,KAAK,kCAAkC,EAI9C3B,EAAW,kBAAoB,SAC7B,CAACA,EAAW,iBAAmB,OAAOA,EAAW,iBAAoB,WACvE2B,EAAO,KAAK,8BAA8B,EAI1C3B,EAAW,WAAa,SACtB,CAACA,EAAW,UAAY,OAAOA,EAAW,UAAa,WACzD2B,EAAO,KAAK,uBAAuB,EAInC3B,EAAW,aAAe,SACxB,CAACA,EAAW,YAAc,OAAOA,EAAW,YAAe,WAC7D2B,EAAO,KAAK,gCAAgC,EAI5C3B,EAAW,iBAAmB,SAC5B,OAAOA,EAAW,gBAAmB,UAAYA,EAAW,eAAiB,IAC/E2B,EAAO,KAAK,+CAA+C,EAI3DA,EAAO,OAAS,EAClB,MAAM,IAAInC,EACRmC,EAAO,KAAK,IAAI,EAChBpC,EAAiB,gBAAA,CAGvB,CAKQ,gBAAgBnE,EAA0B,CAChD,GAAIA,aAAiBoE,EACnB,OAAOpE,EAIT,GAAIA,EAAM,UAAYA,EAAM,SAAS,OAAQ,CAC3C,MAAM0F,EAAW1F,EAAM,SAAS,OAAO,CAAC,EACxC,OAAO,IAAIoE,EACTsB,EAAS,QAAU,gCACnBvB,EAAiB,iBACjBuB,EAAS,KACTA,CAAA,CAEJ,CAEA,OAAO,IAAItB,EACTpE,EAAM,SAAW,gCACjBmE,EAAiB,YAAA,CAErB,CAKQ,kBAAkBnE,EAA0B,CAClD,OAAIA,aAAiBoE,EACZpE,EAILA,EAAM,SAAW,KAAOA,EAAM,UAAU,SAAW,IAC9C,IAAIoE,EACT,mDACAD,EAAiB,iBAAA,EAId,IAAIC,EACTpE,EAAM,SAAW,kCACjBmE,EAAiB,YAAA,CAErB,CACF,EAtUE6F,EAAO,eAAiB,UACxBA,EAAO,gBAAkB,WACzBA,EAAO,gBAAkB,WA3B3B,IAAqBC,EAArBD,ECCA,MAAqBE,WAAqBxL,CAA0B,CAClE,MAAyB,CACvB,GAAI,CAACI,EAAI,QAAQ,KACf,OAAO,KAIT,MAAMqL,GADoBrL,EAAI,MAAM,UAAU,2BAA2B,GAAK,WACtC,QAAQ,UAAWA,EAAI,QAAQ,KAAK,UAAU,OAAO,CAAC,EACxF2D,EAAyB3D,EAAI,MAAM,UAAU,+BAA+B,EAElF,OACE,EAAC,MAAA,CACC,GAAG,wBACH,UAAU,sEAAA,EAEV,EAAC,MAAA,CAAI,UAAU,qCAAA,EACZ2D,GAAWA,EAAQ,KAAA,GAClB,EAAC,OAAA,CAAK,MAAO,CACX,aAAc,MACd,QAAS,UACT,YAAa,MACb,QAAS,cACT,WAAY,SACZ,eAAgB,QAAA,CAClB,EACE,EAAC,MAAA,CACC,IAAKA,EACL,IAAI,aACJ,MAAO,CACL,MAAO,OACP,OAAQ,MAAA,EAEV,QAAUjD,GAAa,CAErB,MAAM4K,EAAS5K,EAAE,OACjB4K,EAAO,MAAM,QAAU,MACzB,CAAA,CAAA,CAEJ,EAEDD,CACH,EAEA,EAAC,OAAI,UAAU,qCAAA,IACZ,IAAA,CAAE,UAAU,gBAAgB,CAC/B,EAEA,EAAC,MAAA,CAAI,UAAU,kCAAA,EACb,EAAC,MAAA,CACC,UAAU,kCACV,QAAS,KAAK,sBAAsB,KAAK,IAAI,EAC7C,MAAM,IAAA,EAEN,EAAC,IAAA,CAAE,UAAU,4BAAA,CAA6B,EAC1C,EAAC,QAAK,MAAO,CAAE,WAAY,MAAO,SAAU,MAAA,CAAO,EAAG,IAAE,CAAA,EAE1D,EAAC,MAAA,CACC,UAAU,+BACV,QAAS,KAAK,mBAAmB,KAAK,IAAI,EAC1C,MAAM,KACN,MAAO,CAAE,WAAY,KAAA,CAAM,EAE3B,EAAC,IAAA,CAAE,UAAU,cAAA,CAAe,EAC5B,EAAC,QAAK,MAAO,CAAE,WAAY,MAAO,SAAU,MAAA,CAAO,EAAG,IAAE,CAAA,CAE5D,CAAA,CAGN,CAKQ,sBAAsB,EAAgB,CAC5C,EAAE,eAAA,EACF,EAAE,gBAAA,EAEF,OAAO,SAAS,KAAO,kBACzB,CAKQ,mBAAmB,EAAgB,CACzC,EAAE,eAAA,EACF,EAAE,gBAAA,EAEF,OAAO,SAAS,KAAO,oBACzB,CACF,CCxFA,MAAqBE,WAA2B3L,CAA0B,CACxE,MAAyB,CAGvB,MAAM4L,EAAYxL,EAAI,QAAQ,MAAM,UAAU,OAAO,GAAK,EACpD2D,EAAyB3D,EAAI,MAAM,UAAU,+BAA+B,EAElF,OACE,EAAC,MAAA,CAAI,UAAU,+BAAA,EACb,EAAC,MAAA,CACC,UAAU,0BACV,QAAS,KAAK,sBAAsB,KAAK,IAAI,EAC7C,MAAO,OAAOwL,CAAS,SAAA,EAGvB,EAAC,MAAA,CAAI,UAAU,sBAAA,EACZ7H,GAAWA,EAAQ,KAAA,GAClB,EAAC,OAAA,CAAK,MAAO,CACX,aAAc,MACd,QAAS,UACT,YAAa,MACb,QAAS,cACT,WAAY,SACZ,eAAgB,QAAA,CAClB,EACE,EAAC,MAAA,CACC,IAAKA,EACL,IAAI,aACJ,MAAO,CACL,MAAO,OACP,OAAQ,MAAA,EAEV,QAAUjD,GAAa,CAErB,MAAM4K,EAAS5K,EAAE,OACjB4K,EAAO,MAAM,QAAU,MACzB,CAAA,CAAA,CAEJ,EAEF,EAAC,QAAK,UAAU,wBAAA,EAA0BE,CAAU,CACtD,EAGA,EAAC,MAAA,CAAI,UAAU,6BAAA,EACb,EAAC,IAAA,CAAE,UAAU,4BAAA,CAA6B,EAC1C,EAAC,OAAA,KAAK,IAAE,CACV,CAAA,CAEJ,CAEJ,CAKQ,sBAAsB,EAAgB,CAC5C,EAAE,eAAA,EACF,EAAE,gBAAA,EACF,QAAQ,IAAI,6BAA6B,EAEzC,GAAI,CAEF,OAAO,SAAS,KAAO,kBACzB,OAAStK,EAAO,CACd,QAAQ,MAAM,oBAAqBA,CAAK,EAExC,OAAO,SAAS,KAAO,kBACzB,CACF,CACF,CCzEO,MAAMuK,CAAc,CAGjB,aAAc,CAAC,CAEvB,OAAc,aAA6B,CACzC,OAAKA,EAAc,WACjBA,EAAc,SAAW,IAAIA,GAExBA,EAAc,QACvB,CAKO,YAAsB,CAC3B,GAAI,CAEF,OADkBzL,EAAI,SAAS,IAAI,WAAW,IACzB,OACvB,MAAQ,CACN,MAAO,EACT,CACF,CACF,CCzBO,SAAS0L,GAAoB,CAClC,OAAO,OAAO,YAAc,GAC9B,CAKO,SAASC,GAAoB,CAClC,OAAO,OAAO,YAAc,KAAO,OAAO,YAAc,IAC1D,CAKO,SAASC,IAAqB,CACnC,OAAO,OAAO,WAAa,IAC7B,CAKO,SAASC,IAA4B,CAC1C,OAAOH,EAAA,GAAcC,EAAA,CACvB,CAKO,SAASG,IAAwD,CACtE,OAAIJ,EAAA,EAAmB,SACnBC,EAAA,EAAmB,SAChB,SACT,CAKO,SAASI,IAAyB,CACvC,MAAO,iBAAkB,QAAU,UAAU,eAAiB,CAChE,CAGO,MAAMC,GAAiB,CAC5B,SAAAN,EACA,SAAAC,EACA,UAAAC,GACA,iBAAAC,GACA,qBAAAC,GACA,cAAAC,EACF,ECtCA/L,EAAI,aAAa,IAAI,mBAAoB,IAAM,CAE7CA,EAAI,MAAM,OAAO,iBAAiB,EAAIwK,GACtCxK,EAAI,MAAM,OAAO,gBAAgB,EAAIgL,GACrChL,EAAI,MAAM,OAAO,mBAAmB,EAAIiL,GACxCjL,EAAI,MAAM,OAAO,iBAAiB,EAAImL,EAGtCnL,EAAI,OAAO,MAAQ,CAAE,KAAM,SAAU,UAAW0I,CAAA,EAGhD1I,EAAI,OAAO,MAAQ,CAAE,KAAM,SAAU,UAAW0I,CAAA,EAChD1I,EAAI,OAAO,QAAU,CAAE,KAAM,WAAY,UAAW0I,CAAA,EAIpDuD,EAAAA,OAAOC,GAAc,UAAW,OAAQ,SAAU1N,EAAO,CAEvD,MAAM2N,EAAgBV,EAAc,YAAA,EAChCzL,EAAI,QAAQ,MAAQmM,EAAc,cAAgB,CAACH,GAAe,YAEpExN,EAAM,SAAS,KAAK4M,GAAa,UAAA,CAAW,CAEhD,CAAC,EAGDa,EAAAA,OAAOG,GAAW,UAAW,OAAQ,SAAU5N,EAAO,CAiBpD,GAfI,OAAO,WAAa,KAKNwB,EAAI,QAAQ,IAAI,WAAW,IAC3B,QAKd,CAACA,EAAI,QAAQ,MAIb,CAACxB,GAAS,CAACA,EAAM,UAAY,CAAC,MAAM,QAAQA,EAAM,QAAQ,EAC5D,OAIsBA,EAAM,SAAS,KAAM6N,GAC3CA,GAASA,EAAM,OAASA,EAAM,MAAM,WACpCA,EAAM,MAAM,UAAU,SAAS,+BAA+B,CAAA,GAK9D7N,EAAM,SAAS,KAAK+M,GAAmB,UAAU,CAC/C,UAAW,0CAAA,CACZ,CAAC,CAEN,CAAC,CACH,CAAC"}